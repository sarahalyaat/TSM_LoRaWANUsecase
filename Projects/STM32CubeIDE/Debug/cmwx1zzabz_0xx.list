
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000119c  08012668  08012668  00022668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013804  08013804  00023804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801380c  0801380c  0002380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013810  08013810  00023810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000036c  20000000  08013814  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001368  2000036c  08013b80  0003036c  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  200016d4  08013b80  000316d4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00062c00  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000ced5  00000000  00000000  00092f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023c8  00000000  00000000  0009fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003a18  00000000  00000000  000a2238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021c80  00000000  00000000  000a5c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000455dc  00000000  00000000  000c78d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b1167  00000000  00000000  0010ceac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001be013  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007914  00000000  00000000  001be068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0001fbb2  00000000  00000000  001c597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000036c 	.word	0x2000036c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08012650 	.word	0x08012650

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000370 	.word	0x20000370
 8000104:	08012650 	.word	0x08012650

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	1c10      	adds	r0, r2, #0
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	1c19      	adds	r1, r3, #0
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f001 fa69 	bl	800193c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f001 f9b3 	bl	80017e0 <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa5b 	bl	800193c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa51 	bl	800193c <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f9d5 	bl	8001858 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f001 f9cb 	bl	8001858 <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_uldivmod>:
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d111      	bne.n	80004f8 <__aeabi_uldivmod+0x28>
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d10f      	bne.n	80004f8 <__aeabi_uldivmod+0x28>
 80004d8:	2900      	cmp	r1, #0
 80004da:	d100      	bne.n	80004de <__aeabi_uldivmod+0xe>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d002      	beq.n	80004e6 <__aeabi_uldivmod+0x16>
 80004e0:	2100      	movs	r1, #0
 80004e2:	43c9      	mvns	r1, r1
 80004e4:	1c08      	adds	r0, r1, #0
 80004e6:	b407      	push	{r0, r1, r2}
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <__aeabi_uldivmod+0x24>)
 80004ea:	a102      	add	r1, pc, #8	; (adr r1, 80004f4 <__aeabi_uldivmod+0x24>)
 80004ec:	1840      	adds	r0, r0, r1
 80004ee:	9002      	str	r0, [sp, #8]
 80004f0:	bd03      	pop	{r0, r1, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	ffffff5d 	.word	0xffffff5d
 80004f8:	b403      	push	{r0, r1}
 80004fa:	4668      	mov	r0, sp
 80004fc:	b501      	push	{r0, lr}
 80004fe:	9802      	ldr	r0, [sp, #8]
 8000500:	f000 f84c 	bl	800059c <__udivmoddi4>
 8000504:	9b01      	ldr	r3, [sp, #4]
 8000506:	469e      	mov	lr, r3
 8000508:	b002      	add	sp, #8
 800050a:	bc0c      	pop	{r2, r3}
 800050c:	4770      	bx	lr
 800050e:	46c0      	nop			; (mov r8, r8)

08000510 <__aeabi_lmul>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	0415      	lsls	r5, r2, #16
 8000514:	0c2d      	lsrs	r5, r5, #16
 8000516:	000f      	movs	r7, r1
 8000518:	0001      	movs	r1, r0
 800051a:	002e      	movs	r6, r5
 800051c:	46c6      	mov	lr, r8
 800051e:	4684      	mov	ip, r0
 8000520:	0400      	lsls	r0, r0, #16
 8000522:	0c14      	lsrs	r4, r2, #16
 8000524:	0c00      	lsrs	r0, r0, #16
 8000526:	0c09      	lsrs	r1, r1, #16
 8000528:	4346      	muls	r6, r0
 800052a:	434d      	muls	r5, r1
 800052c:	4360      	muls	r0, r4
 800052e:	4361      	muls	r1, r4
 8000530:	1940      	adds	r0, r0, r5
 8000532:	0c34      	lsrs	r4, r6, #16
 8000534:	1824      	adds	r4, r4, r0
 8000536:	b500      	push	{lr}
 8000538:	42a5      	cmp	r5, r4
 800053a:	d903      	bls.n	8000544 <__aeabi_lmul+0x34>
 800053c:	2080      	movs	r0, #128	; 0x80
 800053e:	0240      	lsls	r0, r0, #9
 8000540:	4680      	mov	r8, r0
 8000542:	4441      	add	r1, r8
 8000544:	0c25      	lsrs	r5, r4, #16
 8000546:	186d      	adds	r5, r5, r1
 8000548:	4661      	mov	r1, ip
 800054a:	4359      	muls	r1, r3
 800054c:	437a      	muls	r2, r7
 800054e:	0430      	lsls	r0, r6, #16
 8000550:	1949      	adds	r1, r1, r5
 8000552:	0424      	lsls	r4, r4, #16
 8000554:	0c00      	lsrs	r0, r0, #16
 8000556:	1820      	adds	r0, r4, r0
 8000558:	1889      	adds	r1, r1, r2
 800055a:	bc80      	pop	{r7}
 800055c:	46b8      	mov	r8, r7
 800055e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000560 <__aeabi_d2uiz>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	2200      	movs	r2, #0
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <__aeabi_d2uiz+0x38>)
 8000566:	0004      	movs	r4, r0
 8000568:	000d      	movs	r5, r1
 800056a:	f7ff ffa7 	bl	80004bc <__aeabi_dcmpge>
 800056e:	2800      	cmp	r0, #0
 8000570:	d104      	bne.n	800057c <__aeabi_d2uiz+0x1c>
 8000572:	0020      	movs	r0, r4
 8000574:	0029      	movs	r1, r5
 8000576:	f002 f86d 	bl	8002654 <__aeabi_d2iz>
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <__aeabi_d2uiz+0x38>)
 800057e:	2200      	movs	r2, #0
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fcb6 	bl	8001ef4 <__aeabi_dsub>
 8000588:	f002 f864 	bl	8002654 <__aeabi_d2iz>
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	469c      	mov	ip, r3
 8000592:	4460      	add	r0, ip
 8000594:	e7f1      	b.n	800057a <__aeabi_d2uiz+0x1a>
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	41e00000 	.word	0x41e00000

0800059c <__udivmoddi4>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	4657      	mov	r7, sl
 80005a0:	464e      	mov	r6, r9
 80005a2:	4645      	mov	r5, r8
 80005a4:	46de      	mov	lr, fp
 80005a6:	b5e0      	push	{r5, r6, r7, lr}
 80005a8:	0004      	movs	r4, r0
 80005aa:	000d      	movs	r5, r1
 80005ac:	4692      	mov	sl, r2
 80005ae:	4699      	mov	r9, r3
 80005b0:	b083      	sub	sp, #12
 80005b2:	428b      	cmp	r3, r1
 80005b4:	d830      	bhi.n	8000618 <__udivmoddi4+0x7c>
 80005b6:	d02d      	beq.n	8000614 <__udivmoddi4+0x78>
 80005b8:	4649      	mov	r1, r9
 80005ba:	4650      	mov	r0, sl
 80005bc:	f002 f9c4 	bl	8002948 <__clzdi2>
 80005c0:	0029      	movs	r1, r5
 80005c2:	0006      	movs	r6, r0
 80005c4:	0020      	movs	r0, r4
 80005c6:	f002 f9bf 	bl	8002948 <__clzdi2>
 80005ca:	1a33      	subs	r3, r6, r0
 80005cc:	4698      	mov	r8, r3
 80005ce:	3b20      	subs	r3, #32
 80005d0:	469b      	mov	fp, r3
 80005d2:	d433      	bmi.n	800063c <__udivmoddi4+0xa0>
 80005d4:	465a      	mov	r2, fp
 80005d6:	4653      	mov	r3, sl
 80005d8:	4093      	lsls	r3, r2
 80005da:	4642      	mov	r2, r8
 80005dc:	001f      	movs	r7, r3
 80005de:	4653      	mov	r3, sl
 80005e0:	4093      	lsls	r3, r2
 80005e2:	001e      	movs	r6, r3
 80005e4:	42af      	cmp	r7, r5
 80005e6:	d83a      	bhi.n	800065e <__udivmoddi4+0xc2>
 80005e8:	42af      	cmp	r7, r5
 80005ea:	d100      	bne.n	80005ee <__udivmoddi4+0x52>
 80005ec:	e078      	b.n	80006e0 <__udivmoddi4+0x144>
 80005ee:	465b      	mov	r3, fp
 80005f0:	1ba4      	subs	r4, r4, r6
 80005f2:	41bd      	sbcs	r5, r7
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	da00      	bge.n	80005fa <__udivmoddi4+0x5e>
 80005f8:	e075      	b.n	80006e6 <__udivmoddi4+0x14a>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	465a      	mov	r2, fp
 8000606:	4093      	lsls	r3, r2
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	4642      	mov	r2, r8
 800060e:	4093      	lsls	r3, r2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	e028      	b.n	8000666 <__udivmoddi4+0xca>
 8000614:	4282      	cmp	r2, r0
 8000616:	d9cf      	bls.n	80005b8 <__udivmoddi4+0x1c>
 8000618:	2200      	movs	r2, #0
 800061a:	2300      	movs	r3, #0
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <__udivmoddi4+0x8e>
 8000626:	601c      	str	r4, [r3, #0]
 8000628:	605d      	str	r5, [r3, #4]
 800062a:	9800      	ldr	r0, [sp, #0]
 800062c:	9901      	ldr	r1, [sp, #4]
 800062e:	b003      	add	sp, #12
 8000630:	bcf0      	pop	{r4, r5, r6, r7}
 8000632:	46bb      	mov	fp, r7
 8000634:	46b2      	mov	sl, r6
 8000636:	46a9      	mov	r9, r5
 8000638:	46a0      	mov	r8, r4
 800063a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063c:	4642      	mov	r2, r8
 800063e:	2320      	movs	r3, #32
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	4652      	mov	r2, sl
 8000644:	40da      	lsrs	r2, r3
 8000646:	4641      	mov	r1, r8
 8000648:	0013      	movs	r3, r2
 800064a:	464a      	mov	r2, r9
 800064c:	408a      	lsls	r2, r1
 800064e:	0017      	movs	r7, r2
 8000650:	4642      	mov	r2, r8
 8000652:	431f      	orrs	r7, r3
 8000654:	4653      	mov	r3, sl
 8000656:	4093      	lsls	r3, r2
 8000658:	001e      	movs	r6, r3
 800065a:	42af      	cmp	r7, r5
 800065c:	d9c4      	bls.n	80005e8 <__udivmoddi4+0x4c>
 800065e:	2200      	movs	r2, #0
 8000660:	2300      	movs	r3, #0
 8000662:	9200      	str	r2, [sp, #0]
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	4643      	mov	r3, r8
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0d9      	beq.n	8000620 <__udivmoddi4+0x84>
 800066c:	07fb      	lsls	r3, r7, #31
 800066e:	0872      	lsrs	r2, r6, #1
 8000670:	431a      	orrs	r2, r3
 8000672:	4646      	mov	r6, r8
 8000674:	087b      	lsrs	r3, r7, #1
 8000676:	e00e      	b.n	8000696 <__udivmoddi4+0xfa>
 8000678:	42ab      	cmp	r3, r5
 800067a:	d101      	bne.n	8000680 <__udivmoddi4+0xe4>
 800067c:	42a2      	cmp	r2, r4
 800067e:	d80c      	bhi.n	800069a <__udivmoddi4+0xfe>
 8000680:	1aa4      	subs	r4, r4, r2
 8000682:	419d      	sbcs	r5, r3
 8000684:	2001      	movs	r0, #1
 8000686:	1924      	adds	r4, r4, r4
 8000688:	416d      	adcs	r5, r5
 800068a:	2100      	movs	r1, #0
 800068c:	3e01      	subs	r6, #1
 800068e:	1824      	adds	r4, r4, r0
 8000690:	414d      	adcs	r5, r1
 8000692:	2e00      	cmp	r6, #0
 8000694:	d006      	beq.n	80006a4 <__udivmoddi4+0x108>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d9ee      	bls.n	8000678 <__udivmoddi4+0xdc>
 800069a:	3e01      	subs	r6, #1
 800069c:	1924      	adds	r4, r4, r4
 800069e:	416d      	adcs	r5, r5
 80006a0:	2e00      	cmp	r6, #0
 80006a2:	d1f8      	bne.n	8000696 <__udivmoddi4+0xfa>
 80006a4:	9800      	ldr	r0, [sp, #0]
 80006a6:	9901      	ldr	r1, [sp, #4]
 80006a8:	465b      	mov	r3, fp
 80006aa:	1900      	adds	r0, r0, r4
 80006ac:	4169      	adcs	r1, r5
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	db24      	blt.n	80006fc <__udivmoddi4+0x160>
 80006b2:	002b      	movs	r3, r5
 80006b4:	465a      	mov	r2, fp
 80006b6:	4644      	mov	r4, r8
 80006b8:	40d3      	lsrs	r3, r2
 80006ba:	002a      	movs	r2, r5
 80006bc:	40e2      	lsrs	r2, r4
 80006be:	001c      	movs	r4, r3
 80006c0:	465b      	mov	r3, fp
 80006c2:	0015      	movs	r5, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db2a      	blt.n	800071e <__udivmoddi4+0x182>
 80006c8:	0026      	movs	r6, r4
 80006ca:	409e      	lsls	r6, r3
 80006cc:	0033      	movs	r3, r6
 80006ce:	0026      	movs	r6, r4
 80006d0:	4647      	mov	r7, r8
 80006d2:	40be      	lsls	r6, r7
 80006d4:	0032      	movs	r2, r6
 80006d6:	1a80      	subs	r0, r0, r2
 80006d8:	4199      	sbcs	r1, r3
 80006da:	9000      	str	r0, [sp, #0]
 80006dc:	9101      	str	r1, [sp, #4]
 80006de:	e79f      	b.n	8000620 <__udivmoddi4+0x84>
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d8bc      	bhi.n	800065e <__udivmoddi4+0xc2>
 80006e4:	e783      	b.n	80005ee <__udivmoddi4+0x52>
 80006e6:	4642      	mov	r2, r8
 80006e8:	2320      	movs	r3, #32
 80006ea:	2100      	movs	r1, #0
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	2200      	movs	r2, #0
 80006f0:	9100      	str	r1, [sp, #0]
 80006f2:	9201      	str	r2, [sp, #4]
 80006f4:	2201      	movs	r2, #1
 80006f6:	40da      	lsrs	r2, r3
 80006f8:	9201      	str	r2, [sp, #4]
 80006fa:	e786      	b.n	800060a <__udivmoddi4+0x6e>
 80006fc:	4642      	mov	r2, r8
 80006fe:	2320      	movs	r3, #32
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	002a      	movs	r2, r5
 8000704:	4646      	mov	r6, r8
 8000706:	409a      	lsls	r2, r3
 8000708:	0023      	movs	r3, r4
 800070a:	40f3      	lsrs	r3, r6
 800070c:	4644      	mov	r4, r8
 800070e:	4313      	orrs	r3, r2
 8000710:	002a      	movs	r2, r5
 8000712:	40e2      	lsrs	r2, r4
 8000714:	001c      	movs	r4, r3
 8000716:	465b      	mov	r3, fp
 8000718:	0015      	movs	r5, r2
 800071a:	2b00      	cmp	r3, #0
 800071c:	dad4      	bge.n	80006c8 <__udivmoddi4+0x12c>
 800071e:	4642      	mov	r2, r8
 8000720:	002f      	movs	r7, r5
 8000722:	2320      	movs	r3, #32
 8000724:	0026      	movs	r6, r4
 8000726:	4097      	lsls	r7, r2
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	40de      	lsrs	r6, r3
 800072c:	003b      	movs	r3, r7
 800072e:	4333      	orrs	r3, r6
 8000730:	e7cd      	b.n	80006ce <__udivmoddi4+0x132>
 8000732:	46c0      	nop			; (mov r8, r8)

08000734 <__aeabi_fsub>:
 8000734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000736:	4646      	mov	r6, r8
 8000738:	46d6      	mov	lr, sl
 800073a:	464f      	mov	r7, r9
 800073c:	0243      	lsls	r3, r0, #9
 800073e:	0a5b      	lsrs	r3, r3, #9
 8000740:	00da      	lsls	r2, r3, #3
 8000742:	4694      	mov	ip, r2
 8000744:	024a      	lsls	r2, r1, #9
 8000746:	b5c0      	push	{r6, r7, lr}
 8000748:	0044      	lsls	r4, r0, #1
 800074a:	0a56      	lsrs	r6, r2, #9
 800074c:	1c05      	adds	r5, r0, #0
 800074e:	46b0      	mov	r8, r6
 8000750:	0e24      	lsrs	r4, r4, #24
 8000752:	004e      	lsls	r6, r1, #1
 8000754:	0992      	lsrs	r2, r2, #6
 8000756:	001f      	movs	r7, r3
 8000758:	0020      	movs	r0, r4
 800075a:	4692      	mov	sl, r2
 800075c:	0fed      	lsrs	r5, r5, #31
 800075e:	0e36      	lsrs	r6, r6, #24
 8000760:	0fc9      	lsrs	r1, r1, #31
 8000762:	2eff      	cmp	r6, #255	; 0xff
 8000764:	d100      	bne.n	8000768 <__aeabi_fsub+0x34>
 8000766:	e07f      	b.n	8000868 <__aeabi_fsub+0x134>
 8000768:	2201      	movs	r2, #1
 800076a:	4051      	eors	r1, r2
 800076c:	428d      	cmp	r5, r1
 800076e:	d051      	beq.n	8000814 <__aeabi_fsub+0xe0>
 8000770:	1ba2      	subs	r2, r4, r6
 8000772:	4691      	mov	r9, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	dc00      	bgt.n	800077a <__aeabi_fsub+0x46>
 8000778:	e07e      	b.n	8000878 <__aeabi_fsub+0x144>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d100      	bne.n	8000780 <__aeabi_fsub+0x4c>
 800077e:	e099      	b.n	80008b4 <__aeabi_fsub+0x180>
 8000780:	2cff      	cmp	r4, #255	; 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fsub+0x52>
 8000784:	e08c      	b.n	80008a0 <__aeabi_fsub+0x16c>
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	4652      	mov	r2, sl
 800078a:	04db      	lsls	r3, r3, #19
 800078c:	431a      	orrs	r2, r3
 800078e:	4692      	mov	sl, r2
 8000790:	464a      	mov	r2, r9
 8000792:	2301      	movs	r3, #1
 8000794:	2a1b      	cmp	r2, #27
 8000796:	dc08      	bgt.n	80007aa <__aeabi_fsub+0x76>
 8000798:	4653      	mov	r3, sl
 800079a:	2120      	movs	r1, #32
 800079c:	40d3      	lsrs	r3, r2
 800079e:	1a89      	subs	r1, r1, r2
 80007a0:	4652      	mov	r2, sl
 80007a2:	408a      	lsls	r2, r1
 80007a4:	1e51      	subs	r1, r2, #1
 80007a6:	418a      	sbcs	r2, r1
 80007a8:	4313      	orrs	r3, r2
 80007aa:	4662      	mov	r2, ip
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	015a      	lsls	r2, r3, #5
 80007b0:	d400      	bmi.n	80007b4 <__aeabi_fsub+0x80>
 80007b2:	e0f3      	b.n	800099c <__aeabi_fsub+0x268>
 80007b4:	019b      	lsls	r3, r3, #6
 80007b6:	099e      	lsrs	r6, r3, #6
 80007b8:	0030      	movs	r0, r6
 80007ba:	f002 f8a7 	bl	800290c <__clzsi2>
 80007be:	3805      	subs	r0, #5
 80007c0:	4086      	lsls	r6, r0
 80007c2:	4284      	cmp	r4, r0
 80007c4:	dd00      	ble.n	80007c8 <__aeabi_fsub+0x94>
 80007c6:	e0f7      	b.n	80009b8 <__aeabi_fsub+0x284>
 80007c8:	0032      	movs	r2, r6
 80007ca:	1b04      	subs	r4, r0, r4
 80007cc:	2020      	movs	r0, #32
 80007ce:	3401      	adds	r4, #1
 80007d0:	40e2      	lsrs	r2, r4
 80007d2:	1b04      	subs	r4, r0, r4
 80007d4:	40a6      	lsls	r6, r4
 80007d6:	0033      	movs	r3, r6
 80007d8:	1e5e      	subs	r6, r3, #1
 80007da:	41b3      	sbcs	r3, r6
 80007dc:	2400      	movs	r4, #0
 80007de:	4313      	orrs	r3, r2
 80007e0:	075a      	lsls	r2, r3, #29
 80007e2:	d004      	beq.n	80007ee <__aeabi_fsub+0xba>
 80007e4:	220f      	movs	r2, #15
 80007e6:	401a      	ands	r2, r3
 80007e8:	2a04      	cmp	r2, #4
 80007ea:	d000      	beq.n	80007ee <__aeabi_fsub+0xba>
 80007ec:	3304      	adds	r3, #4
 80007ee:	015a      	lsls	r2, r3, #5
 80007f0:	d400      	bmi.n	80007f4 <__aeabi_fsub+0xc0>
 80007f2:	e0d6      	b.n	80009a2 <__aeabi_fsub+0x26e>
 80007f4:	1c62      	adds	r2, r4, #1
 80007f6:	2cfe      	cmp	r4, #254	; 0xfe
 80007f8:	d100      	bne.n	80007fc <__aeabi_fsub+0xc8>
 80007fa:	e0da      	b.n	80009b2 <__aeabi_fsub+0x27e>
 80007fc:	019b      	lsls	r3, r3, #6
 80007fe:	0a5f      	lsrs	r7, r3, #9
 8000800:	b2d0      	uxtb	r0, r2
 8000802:	05c0      	lsls	r0, r0, #23
 8000804:	4338      	orrs	r0, r7
 8000806:	07ed      	lsls	r5, r5, #31
 8000808:	4328      	orrs	r0, r5
 800080a:	bce0      	pop	{r5, r6, r7}
 800080c:	46ba      	mov	sl, r7
 800080e:	46b1      	mov	r9, r6
 8000810:	46a8      	mov	r8, r5
 8000812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000814:	1ba2      	subs	r2, r4, r6
 8000816:	4691      	mov	r9, r2
 8000818:	2a00      	cmp	r2, #0
 800081a:	dd63      	ble.n	80008e4 <__aeabi_fsub+0x1b0>
 800081c:	2e00      	cmp	r6, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fsub+0xee>
 8000820:	e099      	b.n	8000956 <__aeabi_fsub+0x222>
 8000822:	2cff      	cmp	r4, #255	; 0xff
 8000824:	d03c      	beq.n	80008a0 <__aeabi_fsub+0x16c>
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	4652      	mov	r2, sl
 800082a:	04db      	lsls	r3, r3, #19
 800082c:	431a      	orrs	r2, r3
 800082e:	4692      	mov	sl, r2
 8000830:	464a      	mov	r2, r9
 8000832:	2301      	movs	r3, #1
 8000834:	2a1b      	cmp	r2, #27
 8000836:	dc08      	bgt.n	800084a <__aeabi_fsub+0x116>
 8000838:	4653      	mov	r3, sl
 800083a:	2120      	movs	r1, #32
 800083c:	40d3      	lsrs	r3, r2
 800083e:	1a89      	subs	r1, r1, r2
 8000840:	4652      	mov	r2, sl
 8000842:	408a      	lsls	r2, r1
 8000844:	1e51      	subs	r1, r2, #1
 8000846:	418a      	sbcs	r2, r1
 8000848:	4313      	orrs	r3, r2
 800084a:	4463      	add	r3, ip
 800084c:	015a      	lsls	r2, r3, #5
 800084e:	d400      	bmi.n	8000852 <__aeabi_fsub+0x11e>
 8000850:	e0a4      	b.n	800099c <__aeabi_fsub+0x268>
 8000852:	3401      	adds	r4, #1
 8000854:	2cff      	cmp	r4, #255	; 0xff
 8000856:	d100      	bne.n	800085a <__aeabi_fsub+0x126>
 8000858:	e0ab      	b.n	80009b2 <__aeabi_fsub+0x27e>
 800085a:	2201      	movs	r2, #1
 800085c:	4997      	ldr	r1, [pc, #604]	; (8000abc <__aeabi_fsub+0x388>)
 800085e:	401a      	ands	r2, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	400b      	ands	r3, r1
 8000864:	4313      	orrs	r3, r2
 8000866:	e7bb      	b.n	80007e0 <__aeabi_fsub+0xac>
 8000868:	2a00      	cmp	r2, #0
 800086a:	d032      	beq.n	80008d2 <__aeabi_fsub+0x19e>
 800086c:	428d      	cmp	r5, r1
 800086e:	d035      	beq.n	80008dc <__aeabi_fsub+0x1a8>
 8000870:	22ff      	movs	r2, #255	; 0xff
 8000872:	4252      	negs	r2, r2
 8000874:	4691      	mov	r9, r2
 8000876:	44a1      	add	r9, r4
 8000878:	464a      	mov	r2, r9
 800087a:	2a00      	cmp	r2, #0
 800087c:	d051      	beq.n	8000922 <__aeabi_fsub+0x1ee>
 800087e:	1b30      	subs	r0, r6, r4
 8000880:	2c00      	cmp	r4, #0
 8000882:	d000      	beq.n	8000886 <__aeabi_fsub+0x152>
 8000884:	e09c      	b.n	80009c0 <__aeabi_fsub+0x28c>
 8000886:	4663      	mov	r3, ip
 8000888:	2b00      	cmp	r3, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fsub+0x15a>
 800088c:	e0df      	b.n	8000a4e <__aeabi_fsub+0x31a>
 800088e:	3801      	subs	r0, #1
 8000890:	2800      	cmp	r0, #0
 8000892:	d100      	bne.n	8000896 <__aeabi_fsub+0x162>
 8000894:	e0f7      	b.n	8000a86 <__aeabi_fsub+0x352>
 8000896:	2eff      	cmp	r6, #255	; 0xff
 8000898:	d000      	beq.n	800089c <__aeabi_fsub+0x168>
 800089a:	e099      	b.n	80009d0 <__aeabi_fsub+0x29c>
 800089c:	000d      	movs	r5, r1
 800089e:	4643      	mov	r3, r8
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fsub+0x172>
 80008a4:	e085      	b.n	80009b2 <__aeabi_fsub+0x27e>
 80008a6:	2780      	movs	r7, #128	; 0x80
 80008a8:	03ff      	lsls	r7, r7, #15
 80008aa:	431f      	orrs	r7, r3
 80008ac:	027f      	lsls	r7, r7, #9
 80008ae:	20ff      	movs	r0, #255	; 0xff
 80008b0:	0a7f      	lsrs	r7, r7, #9
 80008b2:	e7a6      	b.n	8000802 <__aeabi_fsub+0xce>
 80008b4:	4652      	mov	r2, sl
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	d074      	beq.n	80009a4 <__aeabi_fsub+0x270>
 80008ba:	2201      	movs	r2, #1
 80008bc:	4252      	negs	r2, r2
 80008be:	4690      	mov	r8, r2
 80008c0:	44c1      	add	r9, r8
 80008c2:	464a      	mov	r2, r9
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_fsub+0x196>
 80008c8:	e0c8      	b.n	8000a5c <__aeabi_fsub+0x328>
 80008ca:	2cff      	cmp	r4, #255	; 0xff
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fsub+0x19c>
 80008ce:	e75f      	b.n	8000790 <__aeabi_fsub+0x5c>
 80008d0:	e7e6      	b.n	80008a0 <__aeabi_fsub+0x16c>
 80008d2:	2201      	movs	r2, #1
 80008d4:	4051      	eors	r1, r2
 80008d6:	42a9      	cmp	r1, r5
 80008d8:	d000      	beq.n	80008dc <__aeabi_fsub+0x1a8>
 80008da:	e749      	b.n	8000770 <__aeabi_fsub+0x3c>
 80008dc:	22ff      	movs	r2, #255	; 0xff
 80008de:	4252      	negs	r2, r2
 80008e0:	4691      	mov	r9, r2
 80008e2:	44a1      	add	r9, r4
 80008e4:	464a      	mov	r2, r9
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d043      	beq.n	8000972 <__aeabi_fsub+0x23e>
 80008ea:	1b31      	subs	r1, r6, r4
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fsub+0x1be>
 80008f0:	e08c      	b.n	8000a0c <__aeabi_fsub+0x2d8>
 80008f2:	2eff      	cmp	r6, #255	; 0xff
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fsub+0x1c4>
 80008f6:	e092      	b.n	8000a1e <__aeabi_fsub+0x2ea>
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	4662      	mov	r2, ip
 80008fc:	04db      	lsls	r3, r3, #19
 80008fe:	431a      	orrs	r2, r3
 8000900:	4694      	mov	ip, r2
 8000902:	2301      	movs	r3, #1
 8000904:	291b      	cmp	r1, #27
 8000906:	dc09      	bgt.n	800091c <__aeabi_fsub+0x1e8>
 8000908:	2020      	movs	r0, #32
 800090a:	4663      	mov	r3, ip
 800090c:	4662      	mov	r2, ip
 800090e:	40cb      	lsrs	r3, r1
 8000910:	1a41      	subs	r1, r0, r1
 8000912:	408a      	lsls	r2, r1
 8000914:	0011      	movs	r1, r2
 8000916:	1e48      	subs	r0, r1, #1
 8000918:	4181      	sbcs	r1, r0
 800091a:	430b      	orrs	r3, r1
 800091c:	0034      	movs	r4, r6
 800091e:	4453      	add	r3, sl
 8000920:	e794      	b.n	800084c <__aeabi_fsub+0x118>
 8000922:	22fe      	movs	r2, #254	; 0xfe
 8000924:	1c66      	adds	r6, r4, #1
 8000926:	4232      	tst	r2, r6
 8000928:	d164      	bne.n	80009f4 <__aeabi_fsub+0x2c0>
 800092a:	2c00      	cmp	r4, #0
 800092c:	d000      	beq.n	8000930 <__aeabi_fsub+0x1fc>
 800092e:	e082      	b.n	8000a36 <__aeabi_fsub+0x302>
 8000930:	4663      	mov	r3, ip
 8000932:	2b00      	cmp	r3, #0
 8000934:	d100      	bne.n	8000938 <__aeabi_fsub+0x204>
 8000936:	e0ab      	b.n	8000a90 <__aeabi_fsub+0x35c>
 8000938:	4653      	mov	r3, sl
 800093a:	2b00      	cmp	r3, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fsub+0x20c>
 800093e:	e760      	b.n	8000802 <__aeabi_fsub+0xce>
 8000940:	4663      	mov	r3, ip
 8000942:	4652      	mov	r2, sl
 8000944:	1a9b      	subs	r3, r3, r2
 8000946:	015a      	lsls	r2, r3, #5
 8000948:	d400      	bmi.n	800094c <__aeabi_fsub+0x218>
 800094a:	e0aa      	b.n	8000aa2 <__aeabi_fsub+0x36e>
 800094c:	4663      	mov	r3, ip
 800094e:	4652      	mov	r2, sl
 8000950:	000d      	movs	r5, r1
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	e744      	b.n	80007e0 <__aeabi_fsub+0xac>
 8000956:	4652      	mov	r2, sl
 8000958:	2a00      	cmp	r2, #0
 800095a:	d023      	beq.n	80009a4 <__aeabi_fsub+0x270>
 800095c:	2201      	movs	r2, #1
 800095e:	4252      	negs	r2, r2
 8000960:	4690      	mov	r8, r2
 8000962:	44c1      	add	r9, r8
 8000964:	464a      	mov	r2, r9
 8000966:	2a00      	cmp	r2, #0
 8000968:	d075      	beq.n	8000a56 <__aeabi_fsub+0x322>
 800096a:	2cff      	cmp	r4, #255	; 0xff
 800096c:	d000      	beq.n	8000970 <__aeabi_fsub+0x23c>
 800096e:	e75f      	b.n	8000830 <__aeabi_fsub+0xfc>
 8000970:	e796      	b.n	80008a0 <__aeabi_fsub+0x16c>
 8000972:	26fe      	movs	r6, #254	; 0xfe
 8000974:	3401      	adds	r4, #1
 8000976:	4226      	tst	r6, r4
 8000978:	d153      	bne.n	8000a22 <__aeabi_fsub+0x2ee>
 800097a:	2800      	cmp	r0, #0
 800097c:	d172      	bne.n	8000a64 <__aeabi_fsub+0x330>
 800097e:	4663      	mov	r3, ip
 8000980:	2b00      	cmp	r3, #0
 8000982:	d100      	bne.n	8000986 <__aeabi_fsub+0x252>
 8000984:	e093      	b.n	8000aae <__aeabi_fsub+0x37a>
 8000986:	4653      	mov	r3, sl
 8000988:	2b00      	cmp	r3, #0
 800098a:	d100      	bne.n	800098e <__aeabi_fsub+0x25a>
 800098c:	e739      	b.n	8000802 <__aeabi_fsub+0xce>
 800098e:	4463      	add	r3, ip
 8000990:	2400      	movs	r4, #0
 8000992:	015a      	lsls	r2, r3, #5
 8000994:	d502      	bpl.n	800099c <__aeabi_fsub+0x268>
 8000996:	4a4a      	ldr	r2, [pc, #296]	; (8000ac0 <__aeabi_fsub+0x38c>)
 8000998:	3401      	adds	r4, #1
 800099a:	4013      	ands	r3, r2
 800099c:	075a      	lsls	r2, r3, #29
 800099e:	d000      	beq.n	80009a2 <__aeabi_fsub+0x26e>
 80009a0:	e720      	b.n	80007e4 <__aeabi_fsub+0xb0>
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	2cff      	cmp	r4, #255	; 0xff
 80009a6:	d100      	bne.n	80009aa <__aeabi_fsub+0x276>
 80009a8:	e77a      	b.n	80008a0 <__aeabi_fsub+0x16c>
 80009aa:	025b      	lsls	r3, r3, #9
 80009ac:	0a5f      	lsrs	r7, r3, #9
 80009ae:	b2e0      	uxtb	r0, r4
 80009b0:	e727      	b.n	8000802 <__aeabi_fsub+0xce>
 80009b2:	20ff      	movs	r0, #255	; 0xff
 80009b4:	2700      	movs	r7, #0
 80009b6:	e724      	b.n	8000802 <__aeabi_fsub+0xce>
 80009b8:	4b41      	ldr	r3, [pc, #260]	; (8000ac0 <__aeabi_fsub+0x38c>)
 80009ba:	1a24      	subs	r4, r4, r0
 80009bc:	4033      	ands	r3, r6
 80009be:	e70f      	b.n	80007e0 <__aeabi_fsub+0xac>
 80009c0:	2eff      	cmp	r6, #255	; 0xff
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fsub+0x292>
 80009c4:	e76a      	b.n	800089c <__aeabi_fsub+0x168>
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	4662      	mov	r2, ip
 80009ca:	04db      	lsls	r3, r3, #19
 80009cc:	431a      	orrs	r2, r3
 80009ce:	4694      	mov	ip, r2
 80009d0:	2301      	movs	r3, #1
 80009d2:	281b      	cmp	r0, #27
 80009d4:	dc09      	bgt.n	80009ea <__aeabi_fsub+0x2b6>
 80009d6:	2420      	movs	r4, #32
 80009d8:	4663      	mov	r3, ip
 80009da:	4662      	mov	r2, ip
 80009dc:	40c3      	lsrs	r3, r0
 80009de:	1a20      	subs	r0, r4, r0
 80009e0:	4082      	lsls	r2, r0
 80009e2:	0010      	movs	r0, r2
 80009e4:	1e44      	subs	r4, r0, #1
 80009e6:	41a0      	sbcs	r0, r4
 80009e8:	4303      	orrs	r3, r0
 80009ea:	4652      	mov	r2, sl
 80009ec:	000d      	movs	r5, r1
 80009ee:	0034      	movs	r4, r6
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	e6dc      	b.n	80007ae <__aeabi_fsub+0x7a>
 80009f4:	4663      	mov	r3, ip
 80009f6:	4652      	mov	r2, sl
 80009f8:	1a9e      	subs	r6, r3, r2
 80009fa:	0173      	lsls	r3, r6, #5
 80009fc:	d417      	bmi.n	8000a2e <__aeabi_fsub+0x2fa>
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d000      	beq.n	8000a04 <__aeabi_fsub+0x2d0>
 8000a02:	e6d9      	b.n	80007b8 <__aeabi_fsub+0x84>
 8000a04:	2500      	movs	r5, #0
 8000a06:	2000      	movs	r0, #0
 8000a08:	2700      	movs	r7, #0
 8000a0a:	e6fa      	b.n	8000802 <__aeabi_fsub+0xce>
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d044      	beq.n	8000a9c <__aeabi_fsub+0x368>
 8000a12:	3901      	subs	r1, #1
 8000a14:	2900      	cmp	r1, #0
 8000a16:	d04c      	beq.n	8000ab2 <__aeabi_fsub+0x37e>
 8000a18:	2eff      	cmp	r6, #255	; 0xff
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_fsub+0x2ea>
 8000a1c:	e771      	b.n	8000902 <__aeabi_fsub+0x1ce>
 8000a1e:	4643      	mov	r3, r8
 8000a20:	e73e      	b.n	80008a0 <__aeabi_fsub+0x16c>
 8000a22:	2cff      	cmp	r4, #255	; 0xff
 8000a24:	d0c5      	beq.n	80009b2 <__aeabi_fsub+0x27e>
 8000a26:	4652      	mov	r2, sl
 8000a28:	4462      	add	r2, ip
 8000a2a:	0853      	lsrs	r3, r2, #1
 8000a2c:	e7b6      	b.n	800099c <__aeabi_fsub+0x268>
 8000a2e:	4663      	mov	r3, ip
 8000a30:	000d      	movs	r5, r1
 8000a32:	1ad6      	subs	r6, r2, r3
 8000a34:	e6c0      	b.n	80007b8 <__aeabi_fsub+0x84>
 8000a36:	4662      	mov	r2, ip
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d116      	bne.n	8000a6a <__aeabi_fsub+0x336>
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d000      	beq.n	8000a44 <__aeabi_fsub+0x310>
 8000a42:	e72b      	b.n	800089c <__aeabi_fsub+0x168>
 8000a44:	2780      	movs	r7, #128	; 0x80
 8000a46:	2500      	movs	r5, #0
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	03ff      	lsls	r7, r7, #15
 8000a4c:	e6d9      	b.n	8000802 <__aeabi_fsub+0xce>
 8000a4e:	000d      	movs	r5, r1
 8000a50:	4643      	mov	r3, r8
 8000a52:	0034      	movs	r4, r6
 8000a54:	e7a6      	b.n	80009a4 <__aeabi_fsub+0x270>
 8000a56:	4653      	mov	r3, sl
 8000a58:	4463      	add	r3, ip
 8000a5a:	e6f7      	b.n	800084c <__aeabi_fsub+0x118>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	4652      	mov	r2, sl
 8000a60:	1a9b      	subs	r3, r3, r2
 8000a62:	e6a4      	b.n	80007ae <__aeabi_fsub+0x7a>
 8000a64:	4662      	mov	r2, ip
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d0d9      	beq.n	8000a1e <__aeabi_fsub+0x2ea>
 8000a6a:	4652      	mov	r2, sl
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fsub+0x33e>
 8000a70:	e716      	b.n	80008a0 <__aeabi_fsub+0x16c>
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	03d2      	lsls	r2, r2, #15
 8000a76:	4213      	tst	r3, r2
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fsub+0x348>
 8000a7a:	e711      	b.n	80008a0 <__aeabi_fsub+0x16c>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	4210      	tst	r0, r2
 8000a80:	d000      	beq.n	8000a84 <__aeabi_fsub+0x350>
 8000a82:	e70d      	b.n	80008a0 <__aeabi_fsub+0x16c>
 8000a84:	e70a      	b.n	800089c <__aeabi_fsub+0x168>
 8000a86:	4652      	mov	r2, sl
 8000a88:	000d      	movs	r5, r1
 8000a8a:	0034      	movs	r4, r6
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	e68e      	b.n	80007ae <__aeabi_fsub+0x7a>
 8000a90:	4653      	mov	r3, sl
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d008      	beq.n	8000aa8 <__aeabi_fsub+0x374>
 8000a96:	000d      	movs	r5, r1
 8000a98:	4647      	mov	r7, r8
 8000a9a:	e6b2      	b.n	8000802 <__aeabi_fsub+0xce>
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	0034      	movs	r4, r6
 8000aa0:	e780      	b.n	80009a4 <__aeabi_fsub+0x270>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fsub+0x374>
 8000aa6:	e779      	b.n	800099c <__aeabi_fsub+0x268>
 8000aa8:	2500      	movs	r5, #0
 8000aaa:	2700      	movs	r7, #0
 8000aac:	e6a9      	b.n	8000802 <__aeabi_fsub+0xce>
 8000aae:	4647      	mov	r7, r8
 8000ab0:	e6a7      	b.n	8000802 <__aeabi_fsub+0xce>
 8000ab2:	4653      	mov	r3, sl
 8000ab4:	0034      	movs	r4, r6
 8000ab6:	4463      	add	r3, ip
 8000ab8:	e6c8      	b.n	800084c <__aeabi_fsub+0x118>
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	7dffffff 	.word	0x7dffffff
 8000ac0:	fbffffff 	.word	0xfbffffff

08000ac4 <__aeabi_ui2f>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	1e05      	subs	r5, r0, #0
 8000ac8:	d00e      	beq.n	8000ae8 <__aeabi_ui2f+0x24>
 8000aca:	f001 ff1f 	bl	800290c <__clzsi2>
 8000ace:	239e      	movs	r3, #158	; 0x9e
 8000ad0:	0004      	movs	r4, r0
 8000ad2:	1a1b      	subs	r3, r3, r0
 8000ad4:	2b96      	cmp	r3, #150	; 0x96
 8000ad6:	dc0c      	bgt.n	8000af2 <__aeabi_ui2f+0x2e>
 8000ad8:	2808      	cmp	r0, #8
 8000ada:	dd01      	ble.n	8000ae0 <__aeabi_ui2f+0x1c>
 8000adc:	3c08      	subs	r4, #8
 8000ade:	40a5      	lsls	r5, r4
 8000ae0:	026d      	lsls	r5, r5, #9
 8000ae2:	0a6d      	lsrs	r5, r5, #9
 8000ae4:	b2d8      	uxtb	r0, r3
 8000ae6:	e001      	b.n	8000aec <__aeabi_ui2f+0x28>
 8000ae8:	2000      	movs	r0, #0
 8000aea:	2500      	movs	r5, #0
 8000aec:	05c0      	lsls	r0, r0, #23
 8000aee:	4328      	orrs	r0, r5
 8000af0:	bd70      	pop	{r4, r5, r6, pc}
 8000af2:	2b99      	cmp	r3, #153	; 0x99
 8000af4:	dd09      	ble.n	8000b0a <__aeabi_ui2f+0x46>
 8000af6:	0002      	movs	r2, r0
 8000af8:	0029      	movs	r1, r5
 8000afa:	321b      	adds	r2, #27
 8000afc:	4091      	lsls	r1, r2
 8000afe:	1e4a      	subs	r2, r1, #1
 8000b00:	4191      	sbcs	r1, r2
 8000b02:	2205      	movs	r2, #5
 8000b04:	1a12      	subs	r2, r2, r0
 8000b06:	40d5      	lsrs	r5, r2
 8000b08:	430d      	orrs	r5, r1
 8000b0a:	2c05      	cmp	r4, #5
 8000b0c:	dd01      	ble.n	8000b12 <__aeabi_ui2f+0x4e>
 8000b0e:	1f62      	subs	r2, r4, #5
 8000b10:	4095      	lsls	r5, r2
 8000b12:	0029      	movs	r1, r5
 8000b14:	4e08      	ldr	r6, [pc, #32]	; (8000b38 <__aeabi_ui2f+0x74>)
 8000b16:	4031      	ands	r1, r6
 8000b18:	076a      	lsls	r2, r5, #29
 8000b1a:	d009      	beq.n	8000b30 <__aeabi_ui2f+0x6c>
 8000b1c:	200f      	movs	r0, #15
 8000b1e:	4028      	ands	r0, r5
 8000b20:	2804      	cmp	r0, #4
 8000b22:	d005      	beq.n	8000b30 <__aeabi_ui2f+0x6c>
 8000b24:	3104      	adds	r1, #4
 8000b26:	014a      	lsls	r2, r1, #5
 8000b28:	d502      	bpl.n	8000b30 <__aeabi_ui2f+0x6c>
 8000b2a:	239f      	movs	r3, #159	; 0x9f
 8000b2c:	4031      	ands	r1, r6
 8000b2e:	1b1b      	subs	r3, r3, r4
 8000b30:	0189      	lsls	r1, r1, #6
 8000b32:	0a4d      	lsrs	r5, r1, #9
 8000b34:	b2d8      	uxtb	r0, r3
 8000b36:	e7d9      	b.n	8000aec <__aeabi_ui2f+0x28>
 8000b38:	fbffffff 	.word	0xfbffffff

08000b3c <__aeabi_dadd>:
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	464f      	mov	r7, r9
 8000b40:	46d6      	mov	lr, sl
 8000b42:	4646      	mov	r6, r8
 8000b44:	000d      	movs	r5, r1
 8000b46:	0001      	movs	r1, r0
 8000b48:	0018      	movs	r0, r3
 8000b4a:	b5c0      	push	{r6, r7, lr}
 8000b4c:	0017      	movs	r7, r2
 8000b4e:	032b      	lsls	r3, r5, #12
 8000b50:	0a5a      	lsrs	r2, r3, #9
 8000b52:	0f4b      	lsrs	r3, r1, #29
 8000b54:	4313      	orrs	r3, r2
 8000b56:	00ca      	lsls	r2, r1, #3
 8000b58:	4691      	mov	r9, r2
 8000b5a:	0302      	lsls	r2, r0, #12
 8000b5c:	006e      	lsls	r6, r5, #1
 8000b5e:	0041      	lsls	r1, r0, #1
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	0fec      	lsrs	r4, r5, #31
 8000b64:	0f7d      	lsrs	r5, r7, #29
 8000b66:	4315      	orrs	r5, r2
 8000b68:	0d76      	lsrs	r6, r6, #21
 8000b6a:	0d49      	lsrs	r1, r1, #21
 8000b6c:	0fc0      	lsrs	r0, r0, #31
 8000b6e:	4682      	mov	sl, r0
 8000b70:	46ac      	mov	ip, r5
 8000b72:	00ff      	lsls	r7, r7, #3
 8000b74:	1a72      	subs	r2, r6, r1
 8000b76:	4284      	cmp	r4, r0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x40>
 8000b7a:	e098      	b.n	8000cae <__aeabi_dadd+0x172>
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	dc00      	bgt.n	8000b82 <__aeabi_dadd+0x46>
 8000b80:	e081      	b.n	8000c86 <__aeabi_dadd+0x14a>
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dadd+0x4c>
 8000b86:	e0b6      	b.n	8000cf6 <__aeabi_dadd+0x1ba>
 8000b88:	49c9      	ldr	r1, [pc, #804]	; (8000eb0 <__aeabi_dadd+0x374>)
 8000b8a:	428e      	cmp	r6, r1
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x54>
 8000b8e:	e172      	b.n	8000e76 <__aeabi_dadd+0x33a>
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	0028      	movs	r0, r5
 8000b94:	0409      	lsls	r1, r1, #16
 8000b96:	4308      	orrs	r0, r1
 8000b98:	4684      	mov	ip, r0
 8000b9a:	2a38      	cmp	r2, #56	; 0x38
 8000b9c:	dd00      	ble.n	8000ba0 <__aeabi_dadd+0x64>
 8000b9e:	e15e      	b.n	8000e5e <__aeabi_dadd+0x322>
 8000ba0:	2a1f      	cmp	r2, #31
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_dadd+0x6a>
 8000ba4:	e1ee      	b.n	8000f84 <__aeabi_dadd+0x448>
 8000ba6:	2020      	movs	r0, #32
 8000ba8:	0039      	movs	r1, r7
 8000baa:	4665      	mov	r5, ip
 8000bac:	1a80      	subs	r0, r0, r2
 8000bae:	4087      	lsls	r7, r0
 8000bb0:	40d1      	lsrs	r1, r2
 8000bb2:	4085      	lsls	r5, r0
 8000bb4:	430d      	orrs	r5, r1
 8000bb6:	0039      	movs	r1, r7
 8000bb8:	1e4f      	subs	r7, r1, #1
 8000bba:	41b9      	sbcs	r1, r7
 8000bbc:	4667      	mov	r7, ip
 8000bbe:	40d7      	lsrs	r7, r2
 8000bc0:	4329      	orrs	r1, r5
 8000bc2:	1bdb      	subs	r3, r3, r7
 8000bc4:	464a      	mov	r2, r9
 8000bc6:	1a55      	subs	r5, r2, r1
 8000bc8:	45a9      	cmp	r9, r5
 8000bca:	4189      	sbcs	r1, r1
 8000bcc:	4249      	negs	r1, r1
 8000bce:	1a5b      	subs	r3, r3, r1
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	4643      	mov	r3, r8
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	d400      	bmi.n	8000bda <__aeabi_dadd+0x9e>
 8000bd8:	e0cc      	b.n	8000d74 <__aeabi_dadd+0x238>
 8000bda:	4643      	mov	r3, r8
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	0a5b      	lsrs	r3, r3, #9
 8000be0:	4698      	mov	r8, r3
 8000be2:	4643      	mov	r3, r8
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0xae>
 8000be8:	e12c      	b.n	8000e44 <__aeabi_dadd+0x308>
 8000bea:	4640      	mov	r0, r8
 8000bec:	f001 fe8e 	bl	800290c <__clzsi2>
 8000bf0:	0001      	movs	r1, r0
 8000bf2:	3908      	subs	r1, #8
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	0028      	movs	r0, r5
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	1a52      	subs	r2, r2, r1
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	40d0      	lsrs	r0, r2
 8000c00:	408d      	lsls	r5, r1
 8000c02:	4303      	orrs	r3, r0
 8000c04:	428e      	cmp	r6, r1
 8000c06:	dd00      	ble.n	8000c0a <__aeabi_dadd+0xce>
 8000c08:	e117      	b.n	8000e3a <__aeabi_dadd+0x2fe>
 8000c0a:	1b8e      	subs	r6, r1, r6
 8000c0c:	1c72      	adds	r2, r6, #1
 8000c0e:	2a1f      	cmp	r2, #31
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_dadd+0xd8>
 8000c12:	e1a7      	b.n	8000f64 <__aeabi_dadd+0x428>
 8000c14:	2120      	movs	r1, #32
 8000c16:	0018      	movs	r0, r3
 8000c18:	002e      	movs	r6, r5
 8000c1a:	1a89      	subs	r1, r1, r2
 8000c1c:	408d      	lsls	r5, r1
 8000c1e:	4088      	lsls	r0, r1
 8000c20:	40d6      	lsrs	r6, r2
 8000c22:	40d3      	lsrs	r3, r2
 8000c24:	1e69      	subs	r1, r5, #1
 8000c26:	418d      	sbcs	r5, r1
 8000c28:	4330      	orrs	r0, r6
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	4305      	orrs	r5, r0
 8000c30:	076b      	lsls	r3, r5, #29
 8000c32:	d009      	beq.n	8000c48 <__aeabi_dadd+0x10c>
 8000c34:	230f      	movs	r3, #15
 8000c36:	402b      	ands	r3, r5
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	d005      	beq.n	8000c48 <__aeabi_dadd+0x10c>
 8000c3c:	1d2b      	adds	r3, r5, #4
 8000c3e:	42ab      	cmp	r3, r5
 8000c40:	41ad      	sbcs	r5, r5
 8000c42:	426d      	negs	r5, r5
 8000c44:	44a8      	add	r8, r5
 8000c46:	001d      	movs	r5, r3
 8000c48:	4643      	mov	r3, r8
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	d400      	bmi.n	8000c50 <__aeabi_dadd+0x114>
 8000c4e:	e094      	b.n	8000d7a <__aeabi_dadd+0x23e>
 8000c50:	4b97      	ldr	r3, [pc, #604]	; (8000eb0 <__aeabi_dadd+0x374>)
 8000c52:	1c72      	adds	r2, r6, #1
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x11e>
 8000c58:	e09d      	b.n	8000d96 <__aeabi_dadd+0x25a>
 8000c5a:	4641      	mov	r1, r8
 8000c5c:	4b95      	ldr	r3, [pc, #596]	; (8000eb4 <__aeabi_dadd+0x378>)
 8000c5e:	08ed      	lsrs	r5, r5, #3
 8000c60:	4019      	ands	r1, r3
 8000c62:	000b      	movs	r3, r1
 8000c64:	0552      	lsls	r2, r2, #21
 8000c66:	0749      	lsls	r1, r1, #29
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	4329      	orrs	r1, r5
 8000c6c:	0b1b      	lsrs	r3, r3, #12
 8000c6e:	0d52      	lsrs	r2, r2, #21
 8000c70:	0512      	lsls	r2, r2, #20
 8000c72:	4313      	orrs	r3, r2
 8000c74:	07e4      	lsls	r4, r4, #31
 8000c76:	4323      	orrs	r3, r4
 8000c78:	0008      	movs	r0, r1
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	bce0      	pop	{r5, r6, r7}
 8000c7e:	46ba      	mov	sl, r7
 8000c80:	46b1      	mov	r9, r6
 8000c82:	46a8      	mov	r8, r5
 8000c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d043      	beq.n	8000d12 <__aeabi_dadd+0x1d6>
 8000c8a:	1b8a      	subs	r2, r1, r6
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_dadd+0x156>
 8000c90:	e12a      	b.n	8000ee8 <__aeabi_dadd+0x3ac>
 8000c92:	464c      	mov	r4, r9
 8000c94:	431c      	orrs	r4, r3
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dadd+0x15e>
 8000c98:	e1d1      	b.n	800103e <__aeabi_dadd+0x502>
 8000c9a:	1e54      	subs	r4, r2, #1
 8000c9c:	2a01      	cmp	r2, #1
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x166>
 8000ca0:	e21f      	b.n	80010e2 <__aeabi_dadd+0x5a6>
 8000ca2:	4d83      	ldr	r5, [pc, #524]	; (8000eb0 <__aeabi_dadd+0x374>)
 8000ca4:	42aa      	cmp	r2, r5
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dadd+0x16e>
 8000ca8:	e272      	b.n	8001190 <__aeabi_dadd+0x654>
 8000caa:	0022      	movs	r2, r4
 8000cac:	e123      	b.n	8000ef6 <__aeabi_dadd+0x3ba>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	dc00      	bgt.n	8000cb4 <__aeabi_dadd+0x178>
 8000cb2:	e098      	b.n	8000de6 <__aeabi_dadd+0x2aa>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	d042      	beq.n	8000d3e <__aeabi_dadd+0x202>
 8000cb8:	497d      	ldr	r1, [pc, #500]	; (8000eb0 <__aeabi_dadd+0x374>)
 8000cba:	428e      	cmp	r6, r1
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_dadd+0x184>
 8000cbe:	e0da      	b.n	8000e76 <__aeabi_dadd+0x33a>
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	0028      	movs	r0, r5
 8000cc4:	0409      	lsls	r1, r1, #16
 8000cc6:	4308      	orrs	r0, r1
 8000cc8:	4684      	mov	ip, r0
 8000cca:	2a38      	cmp	r2, #56	; 0x38
 8000ccc:	dd00      	ble.n	8000cd0 <__aeabi_dadd+0x194>
 8000cce:	e129      	b.n	8000f24 <__aeabi_dadd+0x3e8>
 8000cd0:	2a1f      	cmp	r2, #31
 8000cd2:	dc00      	bgt.n	8000cd6 <__aeabi_dadd+0x19a>
 8000cd4:	e187      	b.n	8000fe6 <__aeabi_dadd+0x4aa>
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	4665      	mov	r5, ip
 8000cda:	3920      	subs	r1, #32
 8000cdc:	40cd      	lsrs	r5, r1
 8000cde:	2a20      	cmp	r2, #32
 8000ce0:	d004      	beq.n	8000cec <__aeabi_dadd+0x1b0>
 8000ce2:	2040      	movs	r0, #64	; 0x40
 8000ce4:	4661      	mov	r1, ip
 8000ce6:	1a82      	subs	r2, r0, r2
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	430f      	orrs	r7, r1
 8000cec:	0039      	movs	r1, r7
 8000cee:	1e4f      	subs	r7, r1, #1
 8000cf0:	41b9      	sbcs	r1, r7
 8000cf2:	430d      	orrs	r5, r1
 8000cf4:	e11b      	b.n	8000f2e <__aeabi_dadd+0x3f2>
 8000cf6:	0029      	movs	r1, r5
 8000cf8:	4339      	orrs	r1, r7
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dadd+0x1c2>
 8000cfc:	e0b5      	b.n	8000e6a <__aeabi_dadd+0x32e>
 8000cfe:	1e51      	subs	r1, r2, #1
 8000d00:	2a01      	cmp	r2, #1
 8000d02:	d100      	bne.n	8000d06 <__aeabi_dadd+0x1ca>
 8000d04:	e1ab      	b.n	800105e <__aeabi_dadd+0x522>
 8000d06:	486a      	ldr	r0, [pc, #424]	; (8000eb0 <__aeabi_dadd+0x374>)
 8000d08:	4282      	cmp	r2, r0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x1d2>
 8000d0c:	e1b2      	b.n	8001074 <__aeabi_dadd+0x538>
 8000d0e:	000a      	movs	r2, r1
 8000d10:	e743      	b.n	8000b9a <__aeabi_dadd+0x5e>
 8000d12:	4969      	ldr	r1, [pc, #420]	; (8000eb8 <__aeabi_dadd+0x37c>)
 8000d14:	1c75      	adds	r5, r6, #1
 8000d16:	420d      	tst	r5, r1
 8000d18:	d000      	beq.n	8000d1c <__aeabi_dadd+0x1e0>
 8000d1a:	e0cf      	b.n	8000ebc <__aeabi_dadd+0x380>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_dadd+0x1e6>
 8000d20:	e193      	b.n	800104a <__aeabi_dadd+0x50e>
 8000d22:	4649      	mov	r1, r9
 8000d24:	4319      	orrs	r1, r3
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x1ee>
 8000d28:	e1d1      	b.n	80010ce <__aeabi_dadd+0x592>
 8000d2a:	4661      	mov	r1, ip
 8000d2c:	4339      	orrs	r1, r7
 8000d2e:	d000      	beq.n	8000d32 <__aeabi_dadd+0x1f6>
 8000d30:	e1e3      	b.n	80010fa <__aeabi_dadd+0x5be>
 8000d32:	4649      	mov	r1, r9
 8000d34:	0758      	lsls	r0, r3, #29
 8000d36:	08c9      	lsrs	r1, r1, #3
 8000d38:	4301      	orrs	r1, r0
 8000d3a:	08db      	lsrs	r3, r3, #3
 8000d3c:	e026      	b.n	8000d8c <__aeabi_dadd+0x250>
 8000d3e:	0029      	movs	r1, r5
 8000d40:	4339      	orrs	r1, r7
 8000d42:	d100      	bne.n	8000d46 <__aeabi_dadd+0x20a>
 8000d44:	e091      	b.n	8000e6a <__aeabi_dadd+0x32e>
 8000d46:	1e51      	subs	r1, r2, #1
 8000d48:	2a01      	cmp	r2, #1
 8000d4a:	d005      	beq.n	8000d58 <__aeabi_dadd+0x21c>
 8000d4c:	4858      	ldr	r0, [pc, #352]	; (8000eb0 <__aeabi_dadd+0x374>)
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x218>
 8000d52:	e18f      	b.n	8001074 <__aeabi_dadd+0x538>
 8000d54:	000a      	movs	r2, r1
 8000d56:	e7b8      	b.n	8000cca <__aeabi_dadd+0x18e>
 8000d58:	003d      	movs	r5, r7
 8000d5a:	444d      	add	r5, r9
 8000d5c:	454d      	cmp	r5, r9
 8000d5e:	4189      	sbcs	r1, r1
 8000d60:	4463      	add	r3, ip
 8000d62:	4698      	mov	r8, r3
 8000d64:	4249      	negs	r1, r1
 8000d66:	4488      	add	r8, r1
 8000d68:	4643      	mov	r3, r8
 8000d6a:	2602      	movs	r6, #2
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	d500      	bpl.n	8000d72 <__aeabi_dadd+0x236>
 8000d70:	e0eb      	b.n	8000f4a <__aeabi_dadd+0x40e>
 8000d72:	3e01      	subs	r6, #1
 8000d74:	076b      	lsls	r3, r5, #29
 8000d76:	d000      	beq.n	8000d7a <__aeabi_dadd+0x23e>
 8000d78:	e75c      	b.n	8000c34 <__aeabi_dadd+0xf8>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	08e9      	lsrs	r1, r5, #3
 8000d7e:	075a      	lsls	r2, r3, #29
 8000d80:	4311      	orrs	r1, r2
 8000d82:	0032      	movs	r2, r6
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	484a      	ldr	r0, [pc, #296]	; (8000eb0 <__aeabi_dadd+0x374>)
 8000d88:	4282      	cmp	r2, r0
 8000d8a:	d021      	beq.n	8000dd0 <__aeabi_dadd+0x294>
 8000d8c:	031b      	lsls	r3, r3, #12
 8000d8e:	0552      	lsls	r2, r2, #21
 8000d90:	0b1b      	lsrs	r3, r3, #12
 8000d92:	0d52      	lsrs	r2, r2, #21
 8000d94:	e76c      	b.n	8000c70 <__aeabi_dadd+0x134>
 8000d96:	2300      	movs	r3, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e769      	b.n	8000c70 <__aeabi_dadd+0x134>
 8000d9c:	002a      	movs	r2, r5
 8000d9e:	433a      	orrs	r2, r7
 8000da0:	d069      	beq.n	8000e76 <__aeabi_dadd+0x33a>
 8000da2:	464a      	mov	r2, r9
 8000da4:	0758      	lsls	r0, r3, #29
 8000da6:	08d1      	lsrs	r1, r2, #3
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	031b      	lsls	r3, r3, #12
 8000dae:	4308      	orrs	r0, r1
 8000db0:	421a      	tst	r2, r3
 8000db2:	d007      	beq.n	8000dc4 <__aeabi_dadd+0x288>
 8000db4:	0029      	movs	r1, r5
 8000db6:	08ed      	lsrs	r5, r5, #3
 8000db8:	421d      	tst	r5, r3
 8000dba:	d103      	bne.n	8000dc4 <__aeabi_dadd+0x288>
 8000dbc:	002a      	movs	r2, r5
 8000dbe:	08ff      	lsrs	r7, r7, #3
 8000dc0:	0748      	lsls	r0, r1, #29
 8000dc2:	4338      	orrs	r0, r7
 8000dc4:	0f43      	lsrs	r3, r0, #29
 8000dc6:	00c1      	lsls	r1, r0, #3
 8000dc8:	075b      	lsls	r3, r3, #29
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	4319      	orrs	r1, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dadd+0x29c>
 8000dd6:	e213      	b.n	8001200 <__aeabi_dadd+0x6c4>
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	0312      	lsls	r2, r2, #12
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	031b      	lsls	r3, r3, #12
 8000de0:	4a33      	ldr	r2, [pc, #204]	; (8000eb0 <__aeabi_dadd+0x374>)
 8000de2:	0b1b      	lsrs	r3, r3, #12
 8000de4:	e744      	b.n	8000c70 <__aeabi_dadd+0x134>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d04b      	beq.n	8000e82 <__aeabi_dadd+0x346>
 8000dea:	1b8a      	subs	r2, r1, r6
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_dadd+0x2b6>
 8000df0:	e0e7      	b.n	8000fc2 <__aeabi_dadd+0x486>
 8000df2:	482f      	ldr	r0, [pc, #188]	; (8000eb0 <__aeabi_dadd+0x374>)
 8000df4:	4281      	cmp	r1, r0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_dadd+0x2be>
 8000df8:	e195      	b.n	8001126 <__aeabi_dadd+0x5ea>
 8000dfa:	2080      	movs	r0, #128	; 0x80
 8000dfc:	0400      	lsls	r0, r0, #16
 8000dfe:	4303      	orrs	r3, r0
 8000e00:	2a38      	cmp	r2, #56	; 0x38
 8000e02:	dd00      	ble.n	8000e06 <__aeabi_dadd+0x2ca>
 8000e04:	e143      	b.n	800108e <__aeabi_dadd+0x552>
 8000e06:	2a1f      	cmp	r2, #31
 8000e08:	dd00      	ble.n	8000e0c <__aeabi_dadd+0x2d0>
 8000e0a:	e1db      	b.n	80011c4 <__aeabi_dadd+0x688>
 8000e0c:	2020      	movs	r0, #32
 8000e0e:	001d      	movs	r5, r3
 8000e10:	464e      	mov	r6, r9
 8000e12:	1a80      	subs	r0, r0, r2
 8000e14:	4085      	lsls	r5, r0
 8000e16:	40d6      	lsrs	r6, r2
 8000e18:	4335      	orrs	r5, r6
 8000e1a:	464e      	mov	r6, r9
 8000e1c:	4086      	lsls	r6, r0
 8000e1e:	0030      	movs	r0, r6
 8000e20:	40d3      	lsrs	r3, r2
 8000e22:	1e46      	subs	r6, r0, #1
 8000e24:	41b0      	sbcs	r0, r6
 8000e26:	449c      	add	ip, r3
 8000e28:	4305      	orrs	r5, r0
 8000e2a:	19ed      	adds	r5, r5, r7
 8000e2c:	42bd      	cmp	r5, r7
 8000e2e:	419b      	sbcs	r3, r3
 8000e30:	425b      	negs	r3, r3
 8000e32:	4463      	add	r3, ip
 8000e34:	4698      	mov	r8, r3
 8000e36:	000e      	movs	r6, r1
 8000e38:	e07f      	b.n	8000f3a <__aeabi_dadd+0x3fe>
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <__aeabi_dadd+0x378>)
 8000e3c:	1a76      	subs	r6, r6, r1
 8000e3e:	4013      	ands	r3, r2
 8000e40:	4698      	mov	r8, r3
 8000e42:	e6f5      	b.n	8000c30 <__aeabi_dadd+0xf4>
 8000e44:	0028      	movs	r0, r5
 8000e46:	f001 fd61 	bl	800290c <__clzsi2>
 8000e4a:	0001      	movs	r1, r0
 8000e4c:	3118      	adds	r1, #24
 8000e4e:	291f      	cmp	r1, #31
 8000e50:	dc00      	bgt.n	8000e54 <__aeabi_dadd+0x318>
 8000e52:	e6cf      	b.n	8000bf4 <__aeabi_dadd+0xb8>
 8000e54:	002b      	movs	r3, r5
 8000e56:	3808      	subs	r0, #8
 8000e58:	4083      	lsls	r3, r0
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	e6d2      	b.n	8000c04 <__aeabi_dadd+0xc8>
 8000e5e:	4662      	mov	r2, ip
 8000e60:	433a      	orrs	r2, r7
 8000e62:	0011      	movs	r1, r2
 8000e64:	1e4f      	subs	r7, r1, #1
 8000e66:	41b9      	sbcs	r1, r7
 8000e68:	e6ac      	b.n	8000bc4 <__aeabi_dadd+0x88>
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	0758      	lsls	r0, r3, #29
 8000e6e:	08c9      	lsrs	r1, r1, #3
 8000e70:	4301      	orrs	r1, r0
 8000e72:	08db      	lsrs	r3, r3, #3
 8000e74:	e787      	b.n	8000d86 <__aeabi_dadd+0x24a>
 8000e76:	4649      	mov	r1, r9
 8000e78:	075a      	lsls	r2, r3, #29
 8000e7a:	08c9      	lsrs	r1, r1, #3
 8000e7c:	4311      	orrs	r1, r2
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	e7a6      	b.n	8000dd0 <__aeabi_dadd+0x294>
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <__aeabi_dadd+0x37c>)
 8000e84:	1c70      	adds	r0, r6, #1
 8000e86:	4208      	tst	r0, r1
 8000e88:	d000      	beq.n	8000e8c <__aeabi_dadd+0x350>
 8000e8a:	e0bb      	b.n	8001004 <__aeabi_dadd+0x4c8>
 8000e8c:	2e00      	cmp	r6, #0
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x356>
 8000e90:	e114      	b.n	80010bc <__aeabi_dadd+0x580>
 8000e92:	4649      	mov	r1, r9
 8000e94:	4319      	orrs	r1, r3
 8000e96:	d100      	bne.n	8000e9a <__aeabi_dadd+0x35e>
 8000e98:	e175      	b.n	8001186 <__aeabi_dadd+0x64a>
 8000e9a:	0029      	movs	r1, r5
 8000e9c:	4339      	orrs	r1, r7
 8000e9e:	d000      	beq.n	8000ea2 <__aeabi_dadd+0x366>
 8000ea0:	e17e      	b.n	80011a0 <__aeabi_dadd+0x664>
 8000ea2:	4649      	mov	r1, r9
 8000ea4:	0758      	lsls	r0, r3, #29
 8000ea6:	08c9      	lsrs	r1, r1, #3
 8000ea8:	4301      	orrs	r1, r0
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	e76e      	b.n	8000d8c <__aeabi_dadd+0x250>
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	000007ff 	.word	0x000007ff
 8000eb4:	ff7fffff 	.word	0xff7fffff
 8000eb8:	000007fe 	.word	0x000007fe
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	1bcd      	subs	r5, r1, r7
 8000ec0:	4661      	mov	r1, ip
 8000ec2:	1a58      	subs	r0, r3, r1
 8000ec4:	45a9      	cmp	r9, r5
 8000ec6:	4189      	sbcs	r1, r1
 8000ec8:	4249      	negs	r1, r1
 8000eca:	4688      	mov	r8, r1
 8000ecc:	0001      	movs	r1, r0
 8000ece:	4640      	mov	r0, r8
 8000ed0:	1a09      	subs	r1, r1, r0
 8000ed2:	4688      	mov	r8, r1
 8000ed4:	0209      	lsls	r1, r1, #8
 8000ed6:	d500      	bpl.n	8000eda <__aeabi_dadd+0x39e>
 8000ed8:	e0a6      	b.n	8001028 <__aeabi_dadd+0x4ec>
 8000eda:	4641      	mov	r1, r8
 8000edc:	4329      	orrs	r1, r5
 8000ede:	d000      	beq.n	8000ee2 <__aeabi_dadd+0x3a6>
 8000ee0:	e67f      	b.n	8000be2 <__aeabi_dadd+0xa6>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2400      	movs	r4, #0
 8000ee6:	e751      	b.n	8000d8c <__aeabi_dadd+0x250>
 8000ee8:	4cc7      	ldr	r4, [pc, #796]	; (8001208 <__aeabi_dadd+0x6cc>)
 8000eea:	42a1      	cmp	r1, r4
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_dadd+0x3b4>
 8000eee:	e0c7      	b.n	8001080 <__aeabi_dadd+0x544>
 8000ef0:	2480      	movs	r4, #128	; 0x80
 8000ef2:	0424      	lsls	r4, r4, #16
 8000ef4:	4323      	orrs	r3, r4
 8000ef6:	2a38      	cmp	r2, #56	; 0x38
 8000ef8:	dc54      	bgt.n	8000fa4 <__aeabi_dadd+0x468>
 8000efa:	2a1f      	cmp	r2, #31
 8000efc:	dd00      	ble.n	8000f00 <__aeabi_dadd+0x3c4>
 8000efe:	e0cc      	b.n	800109a <__aeabi_dadd+0x55e>
 8000f00:	2420      	movs	r4, #32
 8000f02:	4648      	mov	r0, r9
 8000f04:	1aa4      	subs	r4, r4, r2
 8000f06:	001d      	movs	r5, r3
 8000f08:	464e      	mov	r6, r9
 8000f0a:	40a0      	lsls	r0, r4
 8000f0c:	40d6      	lsrs	r6, r2
 8000f0e:	40a5      	lsls	r5, r4
 8000f10:	0004      	movs	r4, r0
 8000f12:	40d3      	lsrs	r3, r2
 8000f14:	4662      	mov	r2, ip
 8000f16:	4335      	orrs	r5, r6
 8000f18:	1e66      	subs	r6, r4, #1
 8000f1a:	41b4      	sbcs	r4, r6
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	469c      	mov	ip, r3
 8000f20:	4325      	orrs	r5, r4
 8000f22:	e044      	b.n	8000fae <__aeabi_dadd+0x472>
 8000f24:	4662      	mov	r2, ip
 8000f26:	433a      	orrs	r2, r7
 8000f28:	0015      	movs	r5, r2
 8000f2a:	1e6f      	subs	r7, r5, #1
 8000f2c:	41bd      	sbcs	r5, r7
 8000f2e:	444d      	add	r5, r9
 8000f30:	454d      	cmp	r5, r9
 8000f32:	4189      	sbcs	r1, r1
 8000f34:	4249      	negs	r1, r1
 8000f36:	4688      	mov	r8, r1
 8000f38:	4498      	add	r8, r3
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	d400      	bmi.n	8000f42 <__aeabi_dadd+0x406>
 8000f40:	e718      	b.n	8000d74 <__aeabi_dadd+0x238>
 8000f42:	4bb1      	ldr	r3, [pc, #708]	; (8001208 <__aeabi_dadd+0x6cc>)
 8000f44:	3601      	adds	r6, #1
 8000f46:	429e      	cmp	r6, r3
 8000f48:	d049      	beq.n	8000fde <__aeabi_dadd+0x4a2>
 8000f4a:	4642      	mov	r2, r8
 8000f4c:	4baf      	ldr	r3, [pc, #700]	; (800120c <__aeabi_dadd+0x6d0>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	401a      	ands	r2, r3
 8000f52:	0013      	movs	r3, r2
 8000f54:	086a      	lsrs	r2, r5, #1
 8000f56:	400d      	ands	r5, r1
 8000f58:	4315      	orrs	r5, r2
 8000f5a:	07d9      	lsls	r1, r3, #31
 8000f5c:	085b      	lsrs	r3, r3, #1
 8000f5e:	4698      	mov	r8, r3
 8000f60:	430d      	orrs	r5, r1
 8000f62:	e665      	b.n	8000c30 <__aeabi_dadd+0xf4>
 8000f64:	0018      	movs	r0, r3
 8000f66:	3e1f      	subs	r6, #31
 8000f68:	40f0      	lsrs	r0, r6
 8000f6a:	2a20      	cmp	r2, #32
 8000f6c:	d003      	beq.n	8000f76 <__aeabi_dadd+0x43a>
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	1a8a      	subs	r2, r1, r2
 8000f72:	4093      	lsls	r3, r2
 8000f74:	431d      	orrs	r5, r3
 8000f76:	1e69      	subs	r1, r5, #1
 8000f78:	418d      	sbcs	r5, r1
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	2600      	movs	r6, #0
 8000f7e:	4698      	mov	r8, r3
 8000f80:	4305      	orrs	r5, r0
 8000f82:	e6f7      	b.n	8000d74 <__aeabi_dadd+0x238>
 8000f84:	0011      	movs	r1, r2
 8000f86:	4665      	mov	r5, ip
 8000f88:	3920      	subs	r1, #32
 8000f8a:	40cd      	lsrs	r5, r1
 8000f8c:	2a20      	cmp	r2, #32
 8000f8e:	d004      	beq.n	8000f9a <__aeabi_dadd+0x45e>
 8000f90:	2040      	movs	r0, #64	; 0x40
 8000f92:	4661      	mov	r1, ip
 8000f94:	1a82      	subs	r2, r0, r2
 8000f96:	4091      	lsls	r1, r2
 8000f98:	430f      	orrs	r7, r1
 8000f9a:	0039      	movs	r1, r7
 8000f9c:	1e4f      	subs	r7, r1, #1
 8000f9e:	41b9      	sbcs	r1, r7
 8000fa0:	4329      	orrs	r1, r5
 8000fa2:	e60f      	b.n	8000bc4 <__aeabi_dadd+0x88>
 8000fa4:	464a      	mov	r2, r9
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	001d      	movs	r5, r3
 8000faa:	1e6b      	subs	r3, r5, #1
 8000fac:	419d      	sbcs	r5, r3
 8000fae:	1b7d      	subs	r5, r7, r5
 8000fb0:	42af      	cmp	r7, r5
 8000fb2:	419b      	sbcs	r3, r3
 8000fb4:	4662      	mov	r2, ip
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4698      	mov	r8, r3
 8000fbc:	4654      	mov	r4, sl
 8000fbe:	000e      	movs	r6, r1
 8000fc0:	e607      	b.n	8000bd2 <__aeabi_dadd+0x96>
 8000fc2:	4648      	mov	r0, r9
 8000fc4:	4318      	orrs	r0, r3
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dadd+0x48e>
 8000fc8:	e0b3      	b.n	8001132 <__aeabi_dadd+0x5f6>
 8000fca:	1e50      	subs	r0, r2, #1
 8000fcc:	2a01      	cmp	r2, #1
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_dadd+0x496>
 8000fd0:	e10d      	b.n	80011ee <__aeabi_dadd+0x6b2>
 8000fd2:	4d8d      	ldr	r5, [pc, #564]	; (8001208 <__aeabi_dadd+0x6cc>)
 8000fd4:	42aa      	cmp	r2, r5
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x49e>
 8000fd8:	e0a5      	b.n	8001126 <__aeabi_dadd+0x5ea>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	e710      	b.n	8000e00 <__aeabi_dadd+0x2c4>
 8000fde:	0032      	movs	r2, r6
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	e644      	b.n	8000c70 <__aeabi_dadd+0x134>
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	0038      	movs	r0, r7
 8000fea:	1a89      	subs	r1, r1, r2
 8000fec:	4665      	mov	r5, ip
 8000fee:	408f      	lsls	r7, r1
 8000ff0:	408d      	lsls	r5, r1
 8000ff2:	40d0      	lsrs	r0, r2
 8000ff4:	1e79      	subs	r1, r7, #1
 8000ff6:	418f      	sbcs	r7, r1
 8000ff8:	4305      	orrs	r5, r0
 8000ffa:	433d      	orrs	r5, r7
 8000ffc:	4667      	mov	r7, ip
 8000ffe:	40d7      	lsrs	r7, r2
 8001000:	19db      	adds	r3, r3, r7
 8001002:	e794      	b.n	8000f2e <__aeabi_dadd+0x3f2>
 8001004:	4a80      	ldr	r2, [pc, #512]	; (8001208 <__aeabi_dadd+0x6cc>)
 8001006:	4290      	cmp	r0, r2
 8001008:	d100      	bne.n	800100c <__aeabi_dadd+0x4d0>
 800100a:	e0ec      	b.n	80011e6 <__aeabi_dadd+0x6aa>
 800100c:	0039      	movs	r1, r7
 800100e:	4449      	add	r1, r9
 8001010:	4549      	cmp	r1, r9
 8001012:	4192      	sbcs	r2, r2
 8001014:	4463      	add	r3, ip
 8001016:	4252      	negs	r2, r2
 8001018:	189b      	adds	r3, r3, r2
 800101a:	07dd      	lsls	r5, r3, #31
 800101c:	0849      	lsrs	r1, r1, #1
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	4698      	mov	r8, r3
 8001022:	0006      	movs	r6, r0
 8001024:	430d      	orrs	r5, r1
 8001026:	e6a5      	b.n	8000d74 <__aeabi_dadd+0x238>
 8001028:	464a      	mov	r2, r9
 800102a:	1abd      	subs	r5, r7, r2
 800102c:	42af      	cmp	r7, r5
 800102e:	4189      	sbcs	r1, r1
 8001030:	4662      	mov	r2, ip
 8001032:	4249      	negs	r1, r1
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	1a5b      	subs	r3, r3, r1
 8001038:	4698      	mov	r8, r3
 800103a:	4654      	mov	r4, sl
 800103c:	e5d1      	b.n	8000be2 <__aeabi_dadd+0xa6>
 800103e:	076c      	lsls	r4, r5, #29
 8001040:	08f9      	lsrs	r1, r7, #3
 8001042:	4321      	orrs	r1, r4
 8001044:	08eb      	lsrs	r3, r5, #3
 8001046:	0004      	movs	r4, r0
 8001048:	e69d      	b.n	8000d86 <__aeabi_dadd+0x24a>
 800104a:	464a      	mov	r2, r9
 800104c:	431a      	orrs	r2, r3
 800104e:	d175      	bne.n	800113c <__aeabi_dadd+0x600>
 8001050:	4661      	mov	r1, ip
 8001052:	4339      	orrs	r1, r7
 8001054:	d114      	bne.n	8001080 <__aeabi_dadd+0x544>
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	2400      	movs	r4, #0
 800105a:	031b      	lsls	r3, r3, #12
 800105c:	e6bc      	b.n	8000dd8 <__aeabi_dadd+0x29c>
 800105e:	464a      	mov	r2, r9
 8001060:	1bd5      	subs	r5, r2, r7
 8001062:	45a9      	cmp	r9, r5
 8001064:	4189      	sbcs	r1, r1
 8001066:	4662      	mov	r2, ip
 8001068:	4249      	negs	r1, r1
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	1a5b      	subs	r3, r3, r1
 800106e:	4698      	mov	r8, r3
 8001070:	2601      	movs	r6, #1
 8001072:	e5ae      	b.n	8000bd2 <__aeabi_dadd+0x96>
 8001074:	464a      	mov	r2, r9
 8001076:	08d1      	lsrs	r1, r2, #3
 8001078:	075a      	lsls	r2, r3, #29
 800107a:	4311      	orrs	r1, r2
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	e6a7      	b.n	8000dd0 <__aeabi_dadd+0x294>
 8001080:	4663      	mov	r3, ip
 8001082:	08f9      	lsrs	r1, r7, #3
 8001084:	075a      	lsls	r2, r3, #29
 8001086:	4654      	mov	r4, sl
 8001088:	4311      	orrs	r1, r2
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	e6a0      	b.n	8000dd0 <__aeabi_dadd+0x294>
 800108e:	464a      	mov	r2, r9
 8001090:	4313      	orrs	r3, r2
 8001092:	001d      	movs	r5, r3
 8001094:	1e6b      	subs	r3, r5, #1
 8001096:	419d      	sbcs	r5, r3
 8001098:	e6c7      	b.n	8000e2a <__aeabi_dadd+0x2ee>
 800109a:	0014      	movs	r4, r2
 800109c:	001e      	movs	r6, r3
 800109e:	3c20      	subs	r4, #32
 80010a0:	40e6      	lsrs	r6, r4
 80010a2:	2a20      	cmp	r2, #32
 80010a4:	d005      	beq.n	80010b2 <__aeabi_dadd+0x576>
 80010a6:	2440      	movs	r4, #64	; 0x40
 80010a8:	1aa2      	subs	r2, r4, r2
 80010aa:	4093      	lsls	r3, r2
 80010ac:	464a      	mov	r2, r9
 80010ae:	431a      	orrs	r2, r3
 80010b0:	4691      	mov	r9, r2
 80010b2:	464d      	mov	r5, r9
 80010b4:	1e6b      	subs	r3, r5, #1
 80010b6:	419d      	sbcs	r5, r3
 80010b8:	4335      	orrs	r5, r6
 80010ba:	e778      	b.n	8000fae <__aeabi_dadd+0x472>
 80010bc:	464a      	mov	r2, r9
 80010be:	431a      	orrs	r2, r3
 80010c0:	d000      	beq.n	80010c4 <__aeabi_dadd+0x588>
 80010c2:	e66b      	b.n	8000d9c <__aeabi_dadd+0x260>
 80010c4:	076b      	lsls	r3, r5, #29
 80010c6:	08f9      	lsrs	r1, r7, #3
 80010c8:	4319      	orrs	r1, r3
 80010ca:	08eb      	lsrs	r3, r5, #3
 80010cc:	e680      	b.n	8000dd0 <__aeabi_dadd+0x294>
 80010ce:	4661      	mov	r1, ip
 80010d0:	4339      	orrs	r1, r7
 80010d2:	d054      	beq.n	800117e <__aeabi_dadd+0x642>
 80010d4:	4663      	mov	r3, ip
 80010d6:	08f9      	lsrs	r1, r7, #3
 80010d8:	075c      	lsls	r4, r3, #29
 80010da:	4321      	orrs	r1, r4
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	0004      	movs	r4, r0
 80010e0:	e654      	b.n	8000d8c <__aeabi_dadd+0x250>
 80010e2:	464a      	mov	r2, r9
 80010e4:	1abd      	subs	r5, r7, r2
 80010e6:	42af      	cmp	r7, r5
 80010e8:	4189      	sbcs	r1, r1
 80010ea:	4662      	mov	r2, ip
 80010ec:	4249      	negs	r1, r1
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	1a5b      	subs	r3, r3, r1
 80010f2:	4698      	mov	r8, r3
 80010f4:	0004      	movs	r4, r0
 80010f6:	2601      	movs	r6, #1
 80010f8:	e56b      	b.n	8000bd2 <__aeabi_dadd+0x96>
 80010fa:	464a      	mov	r2, r9
 80010fc:	1bd5      	subs	r5, r2, r7
 80010fe:	45a9      	cmp	r9, r5
 8001100:	4189      	sbcs	r1, r1
 8001102:	4662      	mov	r2, ip
 8001104:	4249      	negs	r1, r1
 8001106:	1a9a      	subs	r2, r3, r2
 8001108:	1a52      	subs	r2, r2, r1
 800110a:	4690      	mov	r8, r2
 800110c:	0212      	lsls	r2, r2, #8
 800110e:	d532      	bpl.n	8001176 <__aeabi_dadd+0x63a>
 8001110:	464a      	mov	r2, r9
 8001112:	1abd      	subs	r5, r7, r2
 8001114:	42af      	cmp	r7, r5
 8001116:	4189      	sbcs	r1, r1
 8001118:	4662      	mov	r2, ip
 800111a:	4249      	negs	r1, r1
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	1a5b      	subs	r3, r3, r1
 8001120:	4698      	mov	r8, r3
 8001122:	0004      	movs	r4, r0
 8001124:	e584      	b.n	8000c30 <__aeabi_dadd+0xf4>
 8001126:	4663      	mov	r3, ip
 8001128:	08f9      	lsrs	r1, r7, #3
 800112a:	075a      	lsls	r2, r3, #29
 800112c:	4311      	orrs	r1, r2
 800112e:	08db      	lsrs	r3, r3, #3
 8001130:	e64e      	b.n	8000dd0 <__aeabi_dadd+0x294>
 8001132:	08f9      	lsrs	r1, r7, #3
 8001134:	0768      	lsls	r0, r5, #29
 8001136:	4301      	orrs	r1, r0
 8001138:	08eb      	lsrs	r3, r5, #3
 800113a:	e624      	b.n	8000d86 <__aeabi_dadd+0x24a>
 800113c:	4662      	mov	r2, ip
 800113e:	433a      	orrs	r2, r7
 8001140:	d100      	bne.n	8001144 <__aeabi_dadd+0x608>
 8001142:	e698      	b.n	8000e76 <__aeabi_dadd+0x33a>
 8001144:	464a      	mov	r2, r9
 8001146:	08d1      	lsrs	r1, r2, #3
 8001148:	075a      	lsls	r2, r3, #29
 800114a:	4311      	orrs	r1, r2
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	031b      	lsls	r3, r3, #12
 8001152:	421a      	tst	r2, r3
 8001154:	d008      	beq.n	8001168 <__aeabi_dadd+0x62c>
 8001156:	4660      	mov	r0, ip
 8001158:	08c5      	lsrs	r5, r0, #3
 800115a:	421d      	tst	r5, r3
 800115c:	d104      	bne.n	8001168 <__aeabi_dadd+0x62c>
 800115e:	4654      	mov	r4, sl
 8001160:	002a      	movs	r2, r5
 8001162:	08f9      	lsrs	r1, r7, #3
 8001164:	0743      	lsls	r3, r0, #29
 8001166:	4319      	orrs	r1, r3
 8001168:	0f4b      	lsrs	r3, r1, #29
 800116a:	00c9      	lsls	r1, r1, #3
 800116c:	075b      	lsls	r3, r3, #29
 800116e:	08c9      	lsrs	r1, r1, #3
 8001170:	4319      	orrs	r1, r3
 8001172:	0013      	movs	r3, r2
 8001174:	e62c      	b.n	8000dd0 <__aeabi_dadd+0x294>
 8001176:	4641      	mov	r1, r8
 8001178:	4329      	orrs	r1, r5
 800117a:	d000      	beq.n	800117e <__aeabi_dadd+0x642>
 800117c:	e5fa      	b.n	8000d74 <__aeabi_dadd+0x238>
 800117e:	2300      	movs	r3, #0
 8001180:	000a      	movs	r2, r1
 8001182:	2400      	movs	r4, #0
 8001184:	e602      	b.n	8000d8c <__aeabi_dadd+0x250>
 8001186:	076b      	lsls	r3, r5, #29
 8001188:	08f9      	lsrs	r1, r7, #3
 800118a:	4319      	orrs	r1, r3
 800118c:	08eb      	lsrs	r3, r5, #3
 800118e:	e5fd      	b.n	8000d8c <__aeabi_dadd+0x250>
 8001190:	4663      	mov	r3, ip
 8001192:	08f9      	lsrs	r1, r7, #3
 8001194:	075b      	lsls	r3, r3, #29
 8001196:	4319      	orrs	r1, r3
 8001198:	4663      	mov	r3, ip
 800119a:	0004      	movs	r4, r0
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	e617      	b.n	8000dd0 <__aeabi_dadd+0x294>
 80011a0:	003d      	movs	r5, r7
 80011a2:	444d      	add	r5, r9
 80011a4:	4463      	add	r3, ip
 80011a6:	454d      	cmp	r5, r9
 80011a8:	4189      	sbcs	r1, r1
 80011aa:	4698      	mov	r8, r3
 80011ac:	4249      	negs	r1, r1
 80011ae:	4488      	add	r8, r1
 80011b0:	4643      	mov	r3, r8
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	d400      	bmi.n	80011b8 <__aeabi_dadd+0x67c>
 80011b6:	e5dd      	b.n	8000d74 <__aeabi_dadd+0x238>
 80011b8:	4642      	mov	r2, r8
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <__aeabi_dadd+0x6d0>)
 80011bc:	2601      	movs	r6, #1
 80011be:	401a      	ands	r2, r3
 80011c0:	4690      	mov	r8, r2
 80011c2:	e5d7      	b.n	8000d74 <__aeabi_dadd+0x238>
 80011c4:	0010      	movs	r0, r2
 80011c6:	001e      	movs	r6, r3
 80011c8:	3820      	subs	r0, #32
 80011ca:	40c6      	lsrs	r6, r0
 80011cc:	2a20      	cmp	r2, #32
 80011ce:	d005      	beq.n	80011dc <__aeabi_dadd+0x6a0>
 80011d0:	2040      	movs	r0, #64	; 0x40
 80011d2:	1a82      	subs	r2, r0, r2
 80011d4:	4093      	lsls	r3, r2
 80011d6:	464a      	mov	r2, r9
 80011d8:	431a      	orrs	r2, r3
 80011da:	4691      	mov	r9, r2
 80011dc:	464d      	mov	r5, r9
 80011de:	1e6b      	subs	r3, r5, #1
 80011e0:	419d      	sbcs	r5, r3
 80011e2:	4335      	orrs	r5, r6
 80011e4:	e621      	b.n	8000e2a <__aeabi_dadd+0x2ee>
 80011e6:	0002      	movs	r2, r0
 80011e8:	2300      	movs	r3, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	e540      	b.n	8000c70 <__aeabi_dadd+0x134>
 80011ee:	464a      	mov	r2, r9
 80011f0:	19d5      	adds	r5, r2, r7
 80011f2:	42bd      	cmp	r5, r7
 80011f4:	4189      	sbcs	r1, r1
 80011f6:	4463      	add	r3, ip
 80011f8:	4698      	mov	r8, r3
 80011fa:	4249      	negs	r1, r1
 80011fc:	4488      	add	r8, r1
 80011fe:	e5b3      	b.n	8000d68 <__aeabi_dadd+0x22c>
 8001200:	2100      	movs	r1, #0
 8001202:	4a01      	ldr	r2, [pc, #4]	; (8001208 <__aeabi_dadd+0x6cc>)
 8001204:	000b      	movs	r3, r1
 8001206:	e533      	b.n	8000c70 <__aeabi_dadd+0x134>
 8001208:	000007ff 	.word	0x000007ff
 800120c:	ff7fffff 	.word	0xff7fffff

08001210 <__aeabi_ddiv>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	4657      	mov	r7, sl
 8001214:	464e      	mov	r6, r9
 8001216:	4645      	mov	r5, r8
 8001218:	46de      	mov	lr, fp
 800121a:	b5e0      	push	{r5, r6, r7, lr}
 800121c:	4681      	mov	r9, r0
 800121e:	0005      	movs	r5, r0
 8001220:	030c      	lsls	r4, r1, #12
 8001222:	0048      	lsls	r0, r1, #1
 8001224:	4692      	mov	sl, r2
 8001226:	001f      	movs	r7, r3
 8001228:	b085      	sub	sp, #20
 800122a:	0b24      	lsrs	r4, r4, #12
 800122c:	0d40      	lsrs	r0, r0, #21
 800122e:	0fce      	lsrs	r6, r1, #31
 8001230:	2800      	cmp	r0, #0
 8001232:	d059      	beq.n	80012e8 <__aeabi_ddiv+0xd8>
 8001234:	4b87      	ldr	r3, [pc, #540]	; (8001454 <__aeabi_ddiv+0x244>)
 8001236:	4298      	cmp	r0, r3
 8001238:	d100      	bne.n	800123c <__aeabi_ddiv+0x2c>
 800123a:	e098      	b.n	800136e <__aeabi_ddiv+0x15e>
 800123c:	0f6b      	lsrs	r3, r5, #29
 800123e:	00e4      	lsls	r4, r4, #3
 8001240:	431c      	orrs	r4, r3
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	041b      	lsls	r3, r3, #16
 8001246:	4323      	orrs	r3, r4
 8001248:	4698      	mov	r8, r3
 800124a:	4b83      	ldr	r3, [pc, #524]	; (8001458 <__aeabi_ddiv+0x248>)
 800124c:	00ed      	lsls	r5, r5, #3
 800124e:	469b      	mov	fp, r3
 8001250:	2300      	movs	r3, #0
 8001252:	4699      	mov	r9, r3
 8001254:	4483      	add	fp, r0
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	033c      	lsls	r4, r7, #12
 800125a:	007b      	lsls	r3, r7, #1
 800125c:	4650      	mov	r0, sl
 800125e:	0b24      	lsrs	r4, r4, #12
 8001260:	0d5b      	lsrs	r3, r3, #21
 8001262:	0fff      	lsrs	r7, r7, #31
 8001264:	2b00      	cmp	r3, #0
 8001266:	d067      	beq.n	8001338 <__aeabi_ddiv+0x128>
 8001268:	4a7a      	ldr	r2, [pc, #488]	; (8001454 <__aeabi_ddiv+0x244>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d018      	beq.n	80012a0 <__aeabi_ddiv+0x90>
 800126e:	497a      	ldr	r1, [pc, #488]	; (8001458 <__aeabi_ddiv+0x248>)
 8001270:	0f42      	lsrs	r2, r0, #29
 8001272:	468c      	mov	ip, r1
 8001274:	00e4      	lsls	r4, r4, #3
 8001276:	4659      	mov	r1, fp
 8001278:	4314      	orrs	r4, r2
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	4463      	add	r3, ip
 800127e:	0412      	lsls	r2, r2, #16
 8001280:	1acb      	subs	r3, r1, r3
 8001282:	4314      	orrs	r4, r2
 8001284:	469b      	mov	fp, r3
 8001286:	00c2      	lsls	r2, r0, #3
 8001288:	2000      	movs	r0, #0
 800128a:	0033      	movs	r3, r6
 800128c:	407b      	eors	r3, r7
 800128e:	469a      	mov	sl, r3
 8001290:	464b      	mov	r3, r9
 8001292:	2b0f      	cmp	r3, #15
 8001294:	d900      	bls.n	8001298 <__aeabi_ddiv+0x88>
 8001296:	e0ef      	b.n	8001478 <__aeabi_ddiv+0x268>
 8001298:	4970      	ldr	r1, [pc, #448]	; (800145c <__aeabi_ddiv+0x24c>)
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	58cb      	ldr	r3, [r1, r3]
 800129e:	469f      	mov	pc, r3
 80012a0:	4b6f      	ldr	r3, [pc, #444]	; (8001460 <__aeabi_ddiv+0x250>)
 80012a2:	4652      	mov	r2, sl
 80012a4:	469c      	mov	ip, r3
 80012a6:	4322      	orrs	r2, r4
 80012a8:	44e3      	add	fp, ip
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d000      	beq.n	80012b0 <__aeabi_ddiv+0xa0>
 80012ae:	e095      	b.n	80013dc <__aeabi_ddiv+0x1cc>
 80012b0:	4649      	mov	r1, r9
 80012b2:	2302      	movs	r3, #2
 80012b4:	4319      	orrs	r1, r3
 80012b6:	4689      	mov	r9, r1
 80012b8:	2400      	movs	r4, #0
 80012ba:	2002      	movs	r0, #2
 80012bc:	e7e5      	b.n	800128a <__aeabi_ddiv+0x7a>
 80012be:	2300      	movs	r3, #0
 80012c0:	2400      	movs	r4, #0
 80012c2:	2500      	movs	r5, #0
 80012c4:	4652      	mov	r2, sl
 80012c6:	051b      	lsls	r3, r3, #20
 80012c8:	4323      	orrs	r3, r4
 80012ca:	07d2      	lsls	r2, r2, #31
 80012cc:	4313      	orrs	r3, r2
 80012ce:	0028      	movs	r0, r5
 80012d0:	0019      	movs	r1, r3
 80012d2:	b005      	add	sp, #20
 80012d4:	bcf0      	pop	{r4, r5, r6, r7}
 80012d6:	46bb      	mov	fp, r7
 80012d8:	46b2      	mov	sl, r6
 80012da:	46a9      	mov	r9, r5
 80012dc:	46a0      	mov	r8, r4
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e0:	2400      	movs	r4, #0
 80012e2:	2500      	movs	r5, #0
 80012e4:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <__aeabi_ddiv+0x244>)
 80012e6:	e7ed      	b.n	80012c4 <__aeabi_ddiv+0xb4>
 80012e8:	464b      	mov	r3, r9
 80012ea:	4323      	orrs	r3, r4
 80012ec:	4698      	mov	r8, r3
 80012ee:	d100      	bne.n	80012f2 <__aeabi_ddiv+0xe2>
 80012f0:	e089      	b.n	8001406 <__aeabi_ddiv+0x1f6>
 80012f2:	2c00      	cmp	r4, #0
 80012f4:	d100      	bne.n	80012f8 <__aeabi_ddiv+0xe8>
 80012f6:	e1e0      	b.n	80016ba <__aeabi_ddiv+0x4aa>
 80012f8:	0020      	movs	r0, r4
 80012fa:	f001 fb07 	bl	800290c <__clzsi2>
 80012fe:	0001      	movs	r1, r0
 8001300:	0002      	movs	r2, r0
 8001302:	390b      	subs	r1, #11
 8001304:	231d      	movs	r3, #29
 8001306:	1a5b      	subs	r3, r3, r1
 8001308:	4649      	mov	r1, r9
 800130a:	0010      	movs	r0, r2
 800130c:	40d9      	lsrs	r1, r3
 800130e:	3808      	subs	r0, #8
 8001310:	4084      	lsls	r4, r0
 8001312:	000b      	movs	r3, r1
 8001314:	464d      	mov	r5, r9
 8001316:	4323      	orrs	r3, r4
 8001318:	4698      	mov	r8, r3
 800131a:	4085      	lsls	r5, r0
 800131c:	4851      	ldr	r0, [pc, #324]	; (8001464 <__aeabi_ddiv+0x254>)
 800131e:	033c      	lsls	r4, r7, #12
 8001320:	1a83      	subs	r3, r0, r2
 8001322:	469b      	mov	fp, r3
 8001324:	2300      	movs	r3, #0
 8001326:	4699      	mov	r9, r3
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	007b      	lsls	r3, r7, #1
 800132c:	4650      	mov	r0, sl
 800132e:	0b24      	lsrs	r4, r4, #12
 8001330:	0d5b      	lsrs	r3, r3, #21
 8001332:	0fff      	lsrs	r7, r7, #31
 8001334:	2b00      	cmp	r3, #0
 8001336:	d197      	bne.n	8001268 <__aeabi_ddiv+0x58>
 8001338:	4652      	mov	r2, sl
 800133a:	4322      	orrs	r2, r4
 800133c:	d055      	beq.n	80013ea <__aeabi_ddiv+0x1da>
 800133e:	2c00      	cmp	r4, #0
 8001340:	d100      	bne.n	8001344 <__aeabi_ddiv+0x134>
 8001342:	e1ca      	b.n	80016da <__aeabi_ddiv+0x4ca>
 8001344:	0020      	movs	r0, r4
 8001346:	f001 fae1 	bl	800290c <__clzsi2>
 800134a:	0002      	movs	r2, r0
 800134c:	3a0b      	subs	r2, #11
 800134e:	231d      	movs	r3, #29
 8001350:	0001      	movs	r1, r0
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	4652      	mov	r2, sl
 8001356:	3908      	subs	r1, #8
 8001358:	40da      	lsrs	r2, r3
 800135a:	408c      	lsls	r4, r1
 800135c:	4314      	orrs	r4, r2
 800135e:	4652      	mov	r2, sl
 8001360:	408a      	lsls	r2, r1
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <__aeabi_ddiv+0x258>)
 8001364:	4458      	add	r0, fp
 8001366:	469b      	mov	fp, r3
 8001368:	4483      	add	fp, r0
 800136a:	2000      	movs	r0, #0
 800136c:	e78d      	b.n	800128a <__aeabi_ddiv+0x7a>
 800136e:	464b      	mov	r3, r9
 8001370:	4323      	orrs	r3, r4
 8001372:	4698      	mov	r8, r3
 8001374:	d140      	bne.n	80013f8 <__aeabi_ddiv+0x1e8>
 8001376:	2308      	movs	r3, #8
 8001378:	4699      	mov	r9, r3
 800137a:	3b06      	subs	r3, #6
 800137c:	2500      	movs	r5, #0
 800137e:	4683      	mov	fp, r0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	e769      	b.n	8001258 <__aeabi_ddiv+0x48>
 8001384:	46b2      	mov	sl, r6
 8001386:	9b00      	ldr	r3, [sp, #0]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d0a9      	beq.n	80012e0 <__aeabi_ddiv+0xd0>
 800138c:	2b03      	cmp	r3, #3
 800138e:	d100      	bne.n	8001392 <__aeabi_ddiv+0x182>
 8001390:	e211      	b.n	80017b6 <__aeabi_ddiv+0x5a6>
 8001392:	2b01      	cmp	r3, #1
 8001394:	d093      	beq.n	80012be <__aeabi_ddiv+0xae>
 8001396:	4a35      	ldr	r2, [pc, #212]	; (800146c <__aeabi_ddiv+0x25c>)
 8001398:	445a      	add	r2, fp
 800139a:	2a00      	cmp	r2, #0
 800139c:	dc00      	bgt.n	80013a0 <__aeabi_ddiv+0x190>
 800139e:	e13c      	b.n	800161a <__aeabi_ddiv+0x40a>
 80013a0:	076b      	lsls	r3, r5, #29
 80013a2:	d000      	beq.n	80013a6 <__aeabi_ddiv+0x196>
 80013a4:	e1a7      	b.n	80016f6 <__aeabi_ddiv+0x4e6>
 80013a6:	08ed      	lsrs	r5, r5, #3
 80013a8:	4643      	mov	r3, r8
 80013aa:	01db      	lsls	r3, r3, #7
 80013ac:	d506      	bpl.n	80013bc <__aeabi_ddiv+0x1ac>
 80013ae:	4642      	mov	r2, r8
 80013b0:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <__aeabi_ddiv+0x260>)
 80013b2:	401a      	ands	r2, r3
 80013b4:	4690      	mov	r8, r2
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	00d2      	lsls	r2, r2, #3
 80013ba:	445a      	add	r2, fp
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <__aeabi_ddiv+0x264>)
 80013be:	429a      	cmp	r2, r3
 80013c0:	dc8e      	bgt.n	80012e0 <__aeabi_ddiv+0xd0>
 80013c2:	4643      	mov	r3, r8
 80013c4:	0552      	lsls	r2, r2, #21
 80013c6:	0758      	lsls	r0, r3, #29
 80013c8:	025c      	lsls	r4, r3, #9
 80013ca:	4305      	orrs	r5, r0
 80013cc:	0b24      	lsrs	r4, r4, #12
 80013ce:	0d53      	lsrs	r3, r2, #21
 80013d0:	e778      	b.n	80012c4 <__aeabi_ddiv+0xb4>
 80013d2:	46ba      	mov	sl, r7
 80013d4:	46a0      	mov	r8, r4
 80013d6:	0015      	movs	r5, r2
 80013d8:	9000      	str	r0, [sp, #0]
 80013da:	e7d4      	b.n	8001386 <__aeabi_ddiv+0x176>
 80013dc:	464a      	mov	r2, r9
 80013de:	2303      	movs	r3, #3
 80013e0:	431a      	orrs	r2, r3
 80013e2:	4691      	mov	r9, r2
 80013e4:	2003      	movs	r0, #3
 80013e6:	4652      	mov	r2, sl
 80013e8:	e74f      	b.n	800128a <__aeabi_ddiv+0x7a>
 80013ea:	4649      	mov	r1, r9
 80013ec:	2301      	movs	r3, #1
 80013ee:	4319      	orrs	r1, r3
 80013f0:	4689      	mov	r9, r1
 80013f2:	2400      	movs	r4, #0
 80013f4:	2001      	movs	r0, #1
 80013f6:	e748      	b.n	800128a <__aeabi_ddiv+0x7a>
 80013f8:	230c      	movs	r3, #12
 80013fa:	4699      	mov	r9, r3
 80013fc:	3b09      	subs	r3, #9
 80013fe:	46a0      	mov	r8, r4
 8001400:	4683      	mov	fp, r0
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	e728      	b.n	8001258 <__aeabi_ddiv+0x48>
 8001406:	2304      	movs	r3, #4
 8001408:	4699      	mov	r9, r3
 800140a:	2300      	movs	r3, #0
 800140c:	469b      	mov	fp, r3
 800140e:	3301      	adds	r3, #1
 8001410:	2500      	movs	r5, #0
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	e720      	b.n	8001258 <__aeabi_ddiv+0x48>
 8001416:	2300      	movs	r3, #0
 8001418:	2480      	movs	r4, #128	; 0x80
 800141a:	469a      	mov	sl, r3
 800141c:	2500      	movs	r5, #0
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <__aeabi_ddiv+0x244>)
 8001420:	0324      	lsls	r4, r4, #12
 8001422:	e74f      	b.n	80012c4 <__aeabi_ddiv+0xb4>
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	4641      	mov	r1, r8
 8001428:	031b      	lsls	r3, r3, #12
 800142a:	4219      	tst	r1, r3
 800142c:	d008      	beq.n	8001440 <__aeabi_ddiv+0x230>
 800142e:	421c      	tst	r4, r3
 8001430:	d106      	bne.n	8001440 <__aeabi_ddiv+0x230>
 8001432:	431c      	orrs	r4, r3
 8001434:	0324      	lsls	r4, r4, #12
 8001436:	46ba      	mov	sl, r7
 8001438:	0015      	movs	r5, r2
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <__aeabi_ddiv+0x244>)
 800143c:	0b24      	lsrs	r4, r4, #12
 800143e:	e741      	b.n	80012c4 <__aeabi_ddiv+0xb4>
 8001440:	2480      	movs	r4, #128	; 0x80
 8001442:	4643      	mov	r3, r8
 8001444:	0324      	lsls	r4, r4, #12
 8001446:	431c      	orrs	r4, r3
 8001448:	0324      	lsls	r4, r4, #12
 800144a:	46b2      	mov	sl, r6
 800144c:	4b01      	ldr	r3, [pc, #4]	; (8001454 <__aeabi_ddiv+0x244>)
 800144e:	0b24      	lsrs	r4, r4, #12
 8001450:	e738      	b.n	80012c4 <__aeabi_ddiv+0xb4>
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	000007ff 	.word	0x000007ff
 8001458:	fffffc01 	.word	0xfffffc01
 800145c:	08012d48 	.word	0x08012d48
 8001460:	fffff801 	.word	0xfffff801
 8001464:	fffffc0d 	.word	0xfffffc0d
 8001468:	000003f3 	.word	0x000003f3
 800146c:	000003ff 	.word	0x000003ff
 8001470:	feffffff 	.word	0xfeffffff
 8001474:	000007fe 	.word	0x000007fe
 8001478:	4544      	cmp	r4, r8
 800147a:	d200      	bcs.n	800147e <__aeabi_ddiv+0x26e>
 800147c:	e116      	b.n	80016ac <__aeabi_ddiv+0x49c>
 800147e:	d100      	bne.n	8001482 <__aeabi_ddiv+0x272>
 8001480:	e111      	b.n	80016a6 <__aeabi_ddiv+0x496>
 8001482:	2301      	movs	r3, #1
 8001484:	425b      	negs	r3, r3
 8001486:	469c      	mov	ip, r3
 8001488:	002e      	movs	r6, r5
 800148a:	4640      	mov	r0, r8
 800148c:	2500      	movs	r5, #0
 800148e:	44e3      	add	fp, ip
 8001490:	0223      	lsls	r3, r4, #8
 8001492:	0e14      	lsrs	r4, r2, #24
 8001494:	431c      	orrs	r4, r3
 8001496:	0c1b      	lsrs	r3, r3, #16
 8001498:	4699      	mov	r9, r3
 800149a:	0423      	lsls	r3, r4, #16
 800149c:	0c1f      	lsrs	r7, r3, #16
 800149e:	0212      	lsls	r2, r2, #8
 80014a0:	4649      	mov	r1, r9
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	9701      	str	r7, [sp, #4]
 80014a6:	f7fe fee5 	bl	8000274 <__aeabi_uidivmod>
 80014aa:	0002      	movs	r2, r0
 80014ac:	437a      	muls	r2, r7
 80014ae:	040b      	lsls	r3, r1, #16
 80014b0:	0c31      	lsrs	r1, r6, #16
 80014b2:	4680      	mov	r8, r0
 80014b4:	4319      	orrs	r1, r3
 80014b6:	428a      	cmp	r2, r1
 80014b8:	d90b      	bls.n	80014d2 <__aeabi_ddiv+0x2c2>
 80014ba:	2301      	movs	r3, #1
 80014bc:	425b      	negs	r3, r3
 80014be:	469c      	mov	ip, r3
 80014c0:	1909      	adds	r1, r1, r4
 80014c2:	44e0      	add	r8, ip
 80014c4:	428c      	cmp	r4, r1
 80014c6:	d804      	bhi.n	80014d2 <__aeabi_ddiv+0x2c2>
 80014c8:	428a      	cmp	r2, r1
 80014ca:	d902      	bls.n	80014d2 <__aeabi_ddiv+0x2c2>
 80014cc:	1e83      	subs	r3, r0, #2
 80014ce:	4698      	mov	r8, r3
 80014d0:	1909      	adds	r1, r1, r4
 80014d2:	1a88      	subs	r0, r1, r2
 80014d4:	4649      	mov	r1, r9
 80014d6:	f7fe fecd 	bl	8000274 <__aeabi_uidivmod>
 80014da:	0409      	lsls	r1, r1, #16
 80014dc:	468c      	mov	ip, r1
 80014de:	0431      	lsls	r1, r6, #16
 80014e0:	4666      	mov	r6, ip
 80014e2:	9a01      	ldr	r2, [sp, #4]
 80014e4:	0c09      	lsrs	r1, r1, #16
 80014e6:	4342      	muls	r2, r0
 80014e8:	0003      	movs	r3, r0
 80014ea:	4331      	orrs	r1, r6
 80014ec:	428a      	cmp	r2, r1
 80014ee:	d904      	bls.n	80014fa <__aeabi_ddiv+0x2ea>
 80014f0:	1909      	adds	r1, r1, r4
 80014f2:	3b01      	subs	r3, #1
 80014f4:	428c      	cmp	r4, r1
 80014f6:	d800      	bhi.n	80014fa <__aeabi_ddiv+0x2ea>
 80014f8:	e111      	b.n	800171e <__aeabi_ddiv+0x50e>
 80014fa:	1a89      	subs	r1, r1, r2
 80014fc:	4642      	mov	r2, r8
 80014fe:	9e00      	ldr	r6, [sp, #0]
 8001500:	0412      	lsls	r2, r2, #16
 8001502:	431a      	orrs	r2, r3
 8001504:	0c33      	lsrs	r3, r6, #16
 8001506:	001f      	movs	r7, r3
 8001508:	0c10      	lsrs	r0, r2, #16
 800150a:	4690      	mov	r8, r2
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	0413      	lsls	r3, r2, #16
 8001510:	0432      	lsls	r2, r6, #16
 8001512:	0c16      	lsrs	r6, r2, #16
 8001514:	0032      	movs	r2, r6
 8001516:	0c1b      	lsrs	r3, r3, #16
 8001518:	435a      	muls	r2, r3
 800151a:	9603      	str	r6, [sp, #12]
 800151c:	437b      	muls	r3, r7
 800151e:	4346      	muls	r6, r0
 8001520:	4378      	muls	r0, r7
 8001522:	0c17      	lsrs	r7, r2, #16
 8001524:	46bc      	mov	ip, r7
 8001526:	199b      	adds	r3, r3, r6
 8001528:	4463      	add	r3, ip
 800152a:	429e      	cmp	r6, r3
 800152c:	d903      	bls.n	8001536 <__aeabi_ddiv+0x326>
 800152e:	2680      	movs	r6, #128	; 0x80
 8001530:	0276      	lsls	r6, r6, #9
 8001532:	46b4      	mov	ip, r6
 8001534:	4460      	add	r0, ip
 8001536:	0c1e      	lsrs	r6, r3, #16
 8001538:	1830      	adds	r0, r6, r0
 800153a:	0416      	lsls	r6, r2, #16
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	0c36      	lsrs	r6, r6, #16
 8001540:	199e      	adds	r6, r3, r6
 8001542:	4281      	cmp	r1, r0
 8001544:	d200      	bcs.n	8001548 <__aeabi_ddiv+0x338>
 8001546:	e09c      	b.n	8001682 <__aeabi_ddiv+0x472>
 8001548:	d100      	bne.n	800154c <__aeabi_ddiv+0x33c>
 800154a:	e097      	b.n	800167c <__aeabi_ddiv+0x46c>
 800154c:	1bae      	subs	r6, r5, r6
 800154e:	1a09      	subs	r1, r1, r0
 8001550:	42b5      	cmp	r5, r6
 8001552:	4180      	sbcs	r0, r0
 8001554:	4240      	negs	r0, r0
 8001556:	1a08      	subs	r0, r1, r0
 8001558:	4284      	cmp	r4, r0
 800155a:	d100      	bne.n	800155e <__aeabi_ddiv+0x34e>
 800155c:	e111      	b.n	8001782 <__aeabi_ddiv+0x572>
 800155e:	4649      	mov	r1, r9
 8001560:	f7fe fe88 	bl	8000274 <__aeabi_uidivmod>
 8001564:	9a01      	ldr	r2, [sp, #4]
 8001566:	040b      	lsls	r3, r1, #16
 8001568:	4342      	muls	r2, r0
 800156a:	0c31      	lsrs	r1, r6, #16
 800156c:	0005      	movs	r5, r0
 800156e:	4319      	orrs	r1, r3
 8001570:	428a      	cmp	r2, r1
 8001572:	d907      	bls.n	8001584 <__aeabi_ddiv+0x374>
 8001574:	1909      	adds	r1, r1, r4
 8001576:	3d01      	subs	r5, #1
 8001578:	428c      	cmp	r4, r1
 800157a:	d803      	bhi.n	8001584 <__aeabi_ddiv+0x374>
 800157c:	428a      	cmp	r2, r1
 800157e:	d901      	bls.n	8001584 <__aeabi_ddiv+0x374>
 8001580:	1e85      	subs	r5, r0, #2
 8001582:	1909      	adds	r1, r1, r4
 8001584:	1a88      	subs	r0, r1, r2
 8001586:	4649      	mov	r1, r9
 8001588:	f7fe fe74 	bl	8000274 <__aeabi_uidivmod>
 800158c:	0409      	lsls	r1, r1, #16
 800158e:	468c      	mov	ip, r1
 8001590:	0431      	lsls	r1, r6, #16
 8001592:	4666      	mov	r6, ip
 8001594:	9a01      	ldr	r2, [sp, #4]
 8001596:	0c09      	lsrs	r1, r1, #16
 8001598:	4342      	muls	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	4331      	orrs	r1, r6
 800159e:	428a      	cmp	r2, r1
 80015a0:	d907      	bls.n	80015b2 <__aeabi_ddiv+0x3a2>
 80015a2:	1909      	adds	r1, r1, r4
 80015a4:	3b01      	subs	r3, #1
 80015a6:	428c      	cmp	r4, r1
 80015a8:	d803      	bhi.n	80015b2 <__aeabi_ddiv+0x3a2>
 80015aa:	428a      	cmp	r2, r1
 80015ac:	d901      	bls.n	80015b2 <__aeabi_ddiv+0x3a2>
 80015ae:	1e83      	subs	r3, r0, #2
 80015b0:	1909      	adds	r1, r1, r4
 80015b2:	9e03      	ldr	r6, [sp, #12]
 80015b4:	1a89      	subs	r1, r1, r2
 80015b6:	0032      	movs	r2, r6
 80015b8:	042d      	lsls	r5, r5, #16
 80015ba:	431d      	orrs	r5, r3
 80015bc:	9f02      	ldr	r7, [sp, #8]
 80015be:	042b      	lsls	r3, r5, #16
 80015c0:	0c1b      	lsrs	r3, r3, #16
 80015c2:	435a      	muls	r2, r3
 80015c4:	437b      	muls	r3, r7
 80015c6:	469c      	mov	ip, r3
 80015c8:	0c28      	lsrs	r0, r5, #16
 80015ca:	4346      	muls	r6, r0
 80015cc:	0c13      	lsrs	r3, r2, #16
 80015ce:	44b4      	add	ip, r6
 80015d0:	4463      	add	r3, ip
 80015d2:	4378      	muls	r0, r7
 80015d4:	429e      	cmp	r6, r3
 80015d6:	d903      	bls.n	80015e0 <__aeabi_ddiv+0x3d0>
 80015d8:	2680      	movs	r6, #128	; 0x80
 80015da:	0276      	lsls	r6, r6, #9
 80015dc:	46b4      	mov	ip, r6
 80015de:	4460      	add	r0, ip
 80015e0:	0c1e      	lsrs	r6, r3, #16
 80015e2:	0412      	lsls	r2, r2, #16
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	0c12      	lsrs	r2, r2, #16
 80015e8:	1830      	adds	r0, r6, r0
 80015ea:	189b      	adds	r3, r3, r2
 80015ec:	4281      	cmp	r1, r0
 80015ee:	d306      	bcc.n	80015fe <__aeabi_ddiv+0x3ee>
 80015f0:	d002      	beq.n	80015f8 <__aeabi_ddiv+0x3e8>
 80015f2:	2301      	movs	r3, #1
 80015f4:	431d      	orrs	r5, r3
 80015f6:	e6ce      	b.n	8001396 <__aeabi_ddiv+0x186>
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d100      	bne.n	80015fe <__aeabi_ddiv+0x3ee>
 80015fc:	e6cb      	b.n	8001396 <__aeabi_ddiv+0x186>
 80015fe:	1861      	adds	r1, r4, r1
 8001600:	1e6e      	subs	r6, r5, #1
 8001602:	42a1      	cmp	r1, r4
 8001604:	d200      	bcs.n	8001608 <__aeabi_ddiv+0x3f8>
 8001606:	e0a4      	b.n	8001752 <__aeabi_ddiv+0x542>
 8001608:	4281      	cmp	r1, r0
 800160a:	d200      	bcs.n	800160e <__aeabi_ddiv+0x3fe>
 800160c:	e0c9      	b.n	80017a2 <__aeabi_ddiv+0x592>
 800160e:	d100      	bne.n	8001612 <__aeabi_ddiv+0x402>
 8001610:	e0d9      	b.n	80017c6 <__aeabi_ddiv+0x5b6>
 8001612:	0035      	movs	r5, r6
 8001614:	e7ed      	b.n	80015f2 <__aeabi_ddiv+0x3e2>
 8001616:	2501      	movs	r5, #1
 8001618:	426d      	negs	r5, r5
 800161a:	2101      	movs	r1, #1
 800161c:	1a89      	subs	r1, r1, r2
 800161e:	2938      	cmp	r1, #56	; 0x38
 8001620:	dd00      	ble.n	8001624 <__aeabi_ddiv+0x414>
 8001622:	e64c      	b.n	80012be <__aeabi_ddiv+0xae>
 8001624:	291f      	cmp	r1, #31
 8001626:	dc00      	bgt.n	800162a <__aeabi_ddiv+0x41a>
 8001628:	e07f      	b.n	800172a <__aeabi_ddiv+0x51a>
 800162a:	231f      	movs	r3, #31
 800162c:	425b      	negs	r3, r3
 800162e:	1a9a      	subs	r2, r3, r2
 8001630:	4643      	mov	r3, r8
 8001632:	40d3      	lsrs	r3, r2
 8001634:	2920      	cmp	r1, #32
 8001636:	d004      	beq.n	8001642 <__aeabi_ddiv+0x432>
 8001638:	4644      	mov	r4, r8
 800163a:	4a65      	ldr	r2, [pc, #404]	; (80017d0 <__aeabi_ddiv+0x5c0>)
 800163c:	445a      	add	r2, fp
 800163e:	4094      	lsls	r4, r2
 8001640:	4325      	orrs	r5, r4
 8001642:	1e6a      	subs	r2, r5, #1
 8001644:	4195      	sbcs	r5, r2
 8001646:	2207      	movs	r2, #7
 8001648:	432b      	orrs	r3, r5
 800164a:	0015      	movs	r5, r2
 800164c:	2400      	movs	r4, #0
 800164e:	401d      	ands	r5, r3
 8001650:	421a      	tst	r2, r3
 8001652:	d100      	bne.n	8001656 <__aeabi_ddiv+0x446>
 8001654:	e0a1      	b.n	800179a <__aeabi_ddiv+0x58a>
 8001656:	220f      	movs	r2, #15
 8001658:	2400      	movs	r4, #0
 800165a:	401a      	ands	r2, r3
 800165c:	2a04      	cmp	r2, #4
 800165e:	d100      	bne.n	8001662 <__aeabi_ddiv+0x452>
 8001660:	e098      	b.n	8001794 <__aeabi_ddiv+0x584>
 8001662:	1d1a      	adds	r2, r3, #4
 8001664:	429a      	cmp	r2, r3
 8001666:	419b      	sbcs	r3, r3
 8001668:	425b      	negs	r3, r3
 800166a:	18e4      	adds	r4, r4, r3
 800166c:	0013      	movs	r3, r2
 800166e:	0222      	lsls	r2, r4, #8
 8001670:	d400      	bmi.n	8001674 <__aeabi_ddiv+0x464>
 8001672:	e08f      	b.n	8001794 <__aeabi_ddiv+0x584>
 8001674:	2301      	movs	r3, #1
 8001676:	2400      	movs	r4, #0
 8001678:	2500      	movs	r5, #0
 800167a:	e623      	b.n	80012c4 <__aeabi_ddiv+0xb4>
 800167c:	42b5      	cmp	r5, r6
 800167e:	d300      	bcc.n	8001682 <__aeabi_ddiv+0x472>
 8001680:	e764      	b.n	800154c <__aeabi_ddiv+0x33c>
 8001682:	4643      	mov	r3, r8
 8001684:	1e5a      	subs	r2, r3, #1
 8001686:	9b00      	ldr	r3, [sp, #0]
 8001688:	469c      	mov	ip, r3
 800168a:	4465      	add	r5, ip
 800168c:	001f      	movs	r7, r3
 800168e:	429d      	cmp	r5, r3
 8001690:	419b      	sbcs	r3, r3
 8001692:	425b      	negs	r3, r3
 8001694:	191b      	adds	r3, r3, r4
 8001696:	18c9      	adds	r1, r1, r3
 8001698:	428c      	cmp	r4, r1
 800169a:	d23a      	bcs.n	8001712 <__aeabi_ddiv+0x502>
 800169c:	4288      	cmp	r0, r1
 800169e:	d863      	bhi.n	8001768 <__aeabi_ddiv+0x558>
 80016a0:	d060      	beq.n	8001764 <__aeabi_ddiv+0x554>
 80016a2:	4690      	mov	r8, r2
 80016a4:	e752      	b.n	800154c <__aeabi_ddiv+0x33c>
 80016a6:	42aa      	cmp	r2, r5
 80016a8:	d900      	bls.n	80016ac <__aeabi_ddiv+0x49c>
 80016aa:	e6ea      	b.n	8001482 <__aeabi_ddiv+0x272>
 80016ac:	4643      	mov	r3, r8
 80016ae:	07de      	lsls	r6, r3, #31
 80016b0:	0858      	lsrs	r0, r3, #1
 80016b2:	086b      	lsrs	r3, r5, #1
 80016b4:	431e      	orrs	r6, r3
 80016b6:	07ed      	lsls	r5, r5, #31
 80016b8:	e6ea      	b.n	8001490 <__aeabi_ddiv+0x280>
 80016ba:	4648      	mov	r0, r9
 80016bc:	f001 f926 	bl	800290c <__clzsi2>
 80016c0:	0001      	movs	r1, r0
 80016c2:	0002      	movs	r2, r0
 80016c4:	3115      	adds	r1, #21
 80016c6:	3220      	adds	r2, #32
 80016c8:	291c      	cmp	r1, #28
 80016ca:	dc00      	bgt.n	80016ce <__aeabi_ddiv+0x4be>
 80016cc:	e61a      	b.n	8001304 <__aeabi_ddiv+0xf4>
 80016ce:	464b      	mov	r3, r9
 80016d0:	3808      	subs	r0, #8
 80016d2:	4083      	lsls	r3, r0
 80016d4:	2500      	movs	r5, #0
 80016d6:	4698      	mov	r8, r3
 80016d8:	e620      	b.n	800131c <__aeabi_ddiv+0x10c>
 80016da:	f001 f917 	bl	800290c <__clzsi2>
 80016de:	0003      	movs	r3, r0
 80016e0:	001a      	movs	r2, r3
 80016e2:	3215      	adds	r2, #21
 80016e4:	3020      	adds	r0, #32
 80016e6:	2a1c      	cmp	r2, #28
 80016e8:	dc00      	bgt.n	80016ec <__aeabi_ddiv+0x4dc>
 80016ea:	e630      	b.n	800134e <__aeabi_ddiv+0x13e>
 80016ec:	4654      	mov	r4, sl
 80016ee:	3b08      	subs	r3, #8
 80016f0:	2200      	movs	r2, #0
 80016f2:	409c      	lsls	r4, r3
 80016f4:	e635      	b.n	8001362 <__aeabi_ddiv+0x152>
 80016f6:	230f      	movs	r3, #15
 80016f8:	402b      	ands	r3, r5
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d100      	bne.n	8001700 <__aeabi_ddiv+0x4f0>
 80016fe:	e652      	b.n	80013a6 <__aeabi_ddiv+0x196>
 8001700:	2305      	movs	r3, #5
 8001702:	425b      	negs	r3, r3
 8001704:	42ab      	cmp	r3, r5
 8001706:	419b      	sbcs	r3, r3
 8001708:	3504      	adds	r5, #4
 800170a:	425b      	negs	r3, r3
 800170c:	08ed      	lsrs	r5, r5, #3
 800170e:	4498      	add	r8, r3
 8001710:	e64a      	b.n	80013a8 <__aeabi_ddiv+0x198>
 8001712:	428c      	cmp	r4, r1
 8001714:	d1c5      	bne.n	80016a2 <__aeabi_ddiv+0x492>
 8001716:	42af      	cmp	r7, r5
 8001718:	d9c0      	bls.n	800169c <__aeabi_ddiv+0x48c>
 800171a:	4690      	mov	r8, r2
 800171c:	e716      	b.n	800154c <__aeabi_ddiv+0x33c>
 800171e:	428a      	cmp	r2, r1
 8001720:	d800      	bhi.n	8001724 <__aeabi_ddiv+0x514>
 8001722:	e6ea      	b.n	80014fa <__aeabi_ddiv+0x2ea>
 8001724:	1e83      	subs	r3, r0, #2
 8001726:	1909      	adds	r1, r1, r4
 8001728:	e6e7      	b.n	80014fa <__aeabi_ddiv+0x2ea>
 800172a:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <__aeabi_ddiv+0x5c4>)
 800172c:	0028      	movs	r0, r5
 800172e:	445a      	add	r2, fp
 8001730:	4643      	mov	r3, r8
 8001732:	4095      	lsls	r5, r2
 8001734:	4093      	lsls	r3, r2
 8001736:	40c8      	lsrs	r0, r1
 8001738:	1e6a      	subs	r2, r5, #1
 800173a:	4195      	sbcs	r5, r2
 800173c:	4644      	mov	r4, r8
 800173e:	4303      	orrs	r3, r0
 8001740:	432b      	orrs	r3, r5
 8001742:	40cc      	lsrs	r4, r1
 8001744:	075a      	lsls	r2, r3, #29
 8001746:	d092      	beq.n	800166e <__aeabi_ddiv+0x45e>
 8001748:	220f      	movs	r2, #15
 800174a:	401a      	ands	r2, r3
 800174c:	2a04      	cmp	r2, #4
 800174e:	d188      	bne.n	8001662 <__aeabi_ddiv+0x452>
 8001750:	e78d      	b.n	800166e <__aeabi_ddiv+0x45e>
 8001752:	0035      	movs	r5, r6
 8001754:	4281      	cmp	r1, r0
 8001756:	d000      	beq.n	800175a <__aeabi_ddiv+0x54a>
 8001758:	e74b      	b.n	80015f2 <__aeabi_ddiv+0x3e2>
 800175a:	9a00      	ldr	r2, [sp, #0]
 800175c:	4293      	cmp	r3, r2
 800175e:	d000      	beq.n	8001762 <__aeabi_ddiv+0x552>
 8001760:	e747      	b.n	80015f2 <__aeabi_ddiv+0x3e2>
 8001762:	e618      	b.n	8001396 <__aeabi_ddiv+0x186>
 8001764:	42ae      	cmp	r6, r5
 8001766:	d99c      	bls.n	80016a2 <__aeabi_ddiv+0x492>
 8001768:	2302      	movs	r3, #2
 800176a:	425b      	negs	r3, r3
 800176c:	469c      	mov	ip, r3
 800176e:	9b00      	ldr	r3, [sp, #0]
 8001770:	44e0      	add	r8, ip
 8001772:	469c      	mov	ip, r3
 8001774:	4465      	add	r5, ip
 8001776:	429d      	cmp	r5, r3
 8001778:	419b      	sbcs	r3, r3
 800177a:	425b      	negs	r3, r3
 800177c:	191b      	adds	r3, r3, r4
 800177e:	18c9      	adds	r1, r1, r3
 8001780:	e6e4      	b.n	800154c <__aeabi_ddiv+0x33c>
 8001782:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <__aeabi_ddiv+0x5c8>)
 8001784:	445a      	add	r2, fp
 8001786:	2a00      	cmp	r2, #0
 8001788:	dc00      	bgt.n	800178c <__aeabi_ddiv+0x57c>
 800178a:	e744      	b.n	8001616 <__aeabi_ddiv+0x406>
 800178c:	2301      	movs	r3, #1
 800178e:	2500      	movs	r5, #0
 8001790:	4498      	add	r8, r3
 8001792:	e609      	b.n	80013a8 <__aeabi_ddiv+0x198>
 8001794:	0765      	lsls	r5, r4, #29
 8001796:	0264      	lsls	r4, r4, #9
 8001798:	0b24      	lsrs	r4, r4, #12
 800179a:	08db      	lsrs	r3, r3, #3
 800179c:	431d      	orrs	r5, r3
 800179e:	2300      	movs	r3, #0
 80017a0:	e590      	b.n	80012c4 <__aeabi_ddiv+0xb4>
 80017a2:	9e00      	ldr	r6, [sp, #0]
 80017a4:	3d02      	subs	r5, #2
 80017a6:	0072      	lsls	r2, r6, #1
 80017a8:	42b2      	cmp	r2, r6
 80017aa:	41bf      	sbcs	r7, r7
 80017ac:	427f      	negs	r7, r7
 80017ae:	193c      	adds	r4, r7, r4
 80017b0:	1909      	adds	r1, r1, r4
 80017b2:	9200      	str	r2, [sp, #0]
 80017b4:	e7ce      	b.n	8001754 <__aeabi_ddiv+0x544>
 80017b6:	2480      	movs	r4, #128	; 0x80
 80017b8:	4643      	mov	r3, r8
 80017ba:	0324      	lsls	r4, r4, #12
 80017bc:	431c      	orrs	r4, r3
 80017be:	0324      	lsls	r4, r4, #12
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <__aeabi_ddiv+0x5cc>)
 80017c2:	0b24      	lsrs	r4, r4, #12
 80017c4:	e57e      	b.n	80012c4 <__aeabi_ddiv+0xb4>
 80017c6:	9a00      	ldr	r2, [sp, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d3ea      	bcc.n	80017a2 <__aeabi_ddiv+0x592>
 80017cc:	0035      	movs	r5, r6
 80017ce:	e7c4      	b.n	800175a <__aeabi_ddiv+0x54a>
 80017d0:	0000043e 	.word	0x0000043e
 80017d4:	0000041e 	.word	0x0000041e
 80017d8:	000003ff 	.word	0x000003ff
 80017dc:	000007ff 	.word	0x000007ff

080017e0 <__eqdf2>:
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	464f      	mov	r7, r9
 80017e4:	4646      	mov	r6, r8
 80017e6:	46d6      	mov	lr, sl
 80017e8:	4694      	mov	ip, r2
 80017ea:	4691      	mov	r9, r2
 80017ec:	031a      	lsls	r2, r3, #12
 80017ee:	0b12      	lsrs	r2, r2, #12
 80017f0:	4d18      	ldr	r5, [pc, #96]	; (8001854 <__eqdf2+0x74>)
 80017f2:	b5c0      	push	{r6, r7, lr}
 80017f4:	004c      	lsls	r4, r1, #1
 80017f6:	030f      	lsls	r7, r1, #12
 80017f8:	4692      	mov	sl, r2
 80017fa:	005a      	lsls	r2, r3, #1
 80017fc:	0006      	movs	r6, r0
 80017fe:	4680      	mov	r8, r0
 8001800:	0b3f      	lsrs	r7, r7, #12
 8001802:	2001      	movs	r0, #1
 8001804:	0d64      	lsrs	r4, r4, #21
 8001806:	0fc9      	lsrs	r1, r1, #31
 8001808:	0d52      	lsrs	r2, r2, #21
 800180a:	0fdb      	lsrs	r3, r3, #31
 800180c:	42ac      	cmp	r4, r5
 800180e:	d00a      	beq.n	8001826 <__eqdf2+0x46>
 8001810:	42aa      	cmp	r2, r5
 8001812:	d003      	beq.n	800181c <__eqdf2+0x3c>
 8001814:	4294      	cmp	r4, r2
 8001816:	d101      	bne.n	800181c <__eqdf2+0x3c>
 8001818:	4557      	cmp	r7, sl
 800181a:	d00d      	beq.n	8001838 <__eqdf2+0x58>
 800181c:	bce0      	pop	{r5, r6, r7}
 800181e:	46ba      	mov	sl, r7
 8001820:	46b1      	mov	r9, r6
 8001822:	46a8      	mov	r8, r5
 8001824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001826:	003d      	movs	r5, r7
 8001828:	4335      	orrs	r5, r6
 800182a:	d1f7      	bne.n	800181c <__eqdf2+0x3c>
 800182c:	42a2      	cmp	r2, r4
 800182e:	d1f5      	bne.n	800181c <__eqdf2+0x3c>
 8001830:	4652      	mov	r2, sl
 8001832:	4665      	mov	r5, ip
 8001834:	432a      	orrs	r2, r5
 8001836:	d1f1      	bne.n	800181c <__eqdf2+0x3c>
 8001838:	2001      	movs	r0, #1
 800183a:	45c8      	cmp	r8, r9
 800183c:	d1ee      	bne.n	800181c <__eqdf2+0x3c>
 800183e:	4299      	cmp	r1, r3
 8001840:	d006      	beq.n	8001850 <__eqdf2+0x70>
 8001842:	2c00      	cmp	r4, #0
 8001844:	d1ea      	bne.n	800181c <__eqdf2+0x3c>
 8001846:	433e      	orrs	r6, r7
 8001848:	0030      	movs	r0, r6
 800184a:	1e46      	subs	r6, r0, #1
 800184c:	41b0      	sbcs	r0, r6
 800184e:	e7e5      	b.n	800181c <__eqdf2+0x3c>
 8001850:	2000      	movs	r0, #0
 8001852:	e7e3      	b.n	800181c <__eqdf2+0x3c>
 8001854:	000007ff 	.word	0x000007ff

08001858 <__gedf2>:
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	464e      	mov	r6, r9
 800185c:	4645      	mov	r5, r8
 800185e:	4657      	mov	r7, sl
 8001860:	46de      	mov	lr, fp
 8001862:	0004      	movs	r4, r0
 8001864:	0018      	movs	r0, r3
 8001866:	b5e0      	push	{r5, r6, r7, lr}
 8001868:	0016      	movs	r6, r2
 800186a:	031b      	lsls	r3, r3, #12
 800186c:	0b1b      	lsrs	r3, r3, #12
 800186e:	4d32      	ldr	r5, [pc, #200]	; (8001938 <__gedf2+0xe0>)
 8001870:	030f      	lsls	r7, r1, #12
 8001872:	004a      	lsls	r2, r1, #1
 8001874:	4699      	mov	r9, r3
 8001876:	0043      	lsls	r3, r0, #1
 8001878:	46a4      	mov	ip, r4
 800187a:	46b0      	mov	r8, r6
 800187c:	0b3f      	lsrs	r7, r7, #12
 800187e:	0d52      	lsrs	r2, r2, #21
 8001880:	0fc9      	lsrs	r1, r1, #31
 8001882:	0d5b      	lsrs	r3, r3, #21
 8001884:	0fc0      	lsrs	r0, r0, #31
 8001886:	42aa      	cmp	r2, r5
 8001888:	d029      	beq.n	80018de <__gedf2+0x86>
 800188a:	42ab      	cmp	r3, r5
 800188c:	d018      	beq.n	80018c0 <__gedf2+0x68>
 800188e:	2a00      	cmp	r2, #0
 8001890:	d12a      	bne.n	80018e8 <__gedf2+0x90>
 8001892:	433c      	orrs	r4, r7
 8001894:	46a3      	mov	fp, r4
 8001896:	4265      	negs	r5, r4
 8001898:	4165      	adcs	r5, r4
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <__gedf2+0x4c>
 800189e:	464c      	mov	r4, r9
 80018a0:	4326      	orrs	r6, r4
 80018a2:	d027      	beq.n	80018f4 <__gedf2+0x9c>
 80018a4:	2d00      	cmp	r5, #0
 80018a6:	d115      	bne.n	80018d4 <__gedf2+0x7c>
 80018a8:	4281      	cmp	r1, r0
 80018aa:	d028      	beq.n	80018fe <__gedf2+0xa6>
 80018ac:	2002      	movs	r0, #2
 80018ae:	3901      	subs	r1, #1
 80018b0:	4008      	ands	r0, r1
 80018b2:	3801      	subs	r0, #1
 80018b4:	bcf0      	pop	{r4, r5, r6, r7}
 80018b6:	46bb      	mov	fp, r7
 80018b8:	46b2      	mov	sl, r6
 80018ba:	46a9      	mov	r9, r5
 80018bc:	46a0      	mov	r8, r4
 80018be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c0:	464d      	mov	r5, r9
 80018c2:	432e      	orrs	r6, r5
 80018c4:	d12f      	bne.n	8001926 <__gedf2+0xce>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d1ee      	bne.n	80018a8 <__gedf2+0x50>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	4265      	negs	r5, r4
 80018ce:	4165      	adcs	r5, r4
 80018d0:	2d00      	cmp	r5, #0
 80018d2:	d0e9      	beq.n	80018a8 <__gedf2+0x50>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d1ed      	bne.n	80018b4 <__gedf2+0x5c>
 80018d8:	2001      	movs	r0, #1
 80018da:	4240      	negs	r0, r0
 80018dc:	e7ea      	b.n	80018b4 <__gedf2+0x5c>
 80018de:	003d      	movs	r5, r7
 80018e0:	4325      	orrs	r5, r4
 80018e2:	d120      	bne.n	8001926 <__gedf2+0xce>
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d0eb      	beq.n	80018c0 <__gedf2+0x68>
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1dd      	bne.n	80018a8 <__gedf2+0x50>
 80018ec:	464c      	mov	r4, r9
 80018ee:	4326      	orrs	r6, r4
 80018f0:	d1da      	bne.n	80018a8 <__gedf2+0x50>
 80018f2:	e7db      	b.n	80018ac <__gedf2+0x54>
 80018f4:	465b      	mov	r3, fp
 80018f6:	2000      	movs	r0, #0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0db      	beq.n	80018b4 <__gedf2+0x5c>
 80018fc:	e7d6      	b.n	80018ac <__gedf2+0x54>
 80018fe:	429a      	cmp	r2, r3
 8001900:	dc0a      	bgt.n	8001918 <__gedf2+0xc0>
 8001902:	dbe7      	blt.n	80018d4 <__gedf2+0x7c>
 8001904:	454f      	cmp	r7, r9
 8001906:	d8d1      	bhi.n	80018ac <__gedf2+0x54>
 8001908:	d010      	beq.n	800192c <__gedf2+0xd4>
 800190a:	2000      	movs	r0, #0
 800190c:	454f      	cmp	r7, r9
 800190e:	d2d1      	bcs.n	80018b4 <__gedf2+0x5c>
 8001910:	2900      	cmp	r1, #0
 8001912:	d0e1      	beq.n	80018d8 <__gedf2+0x80>
 8001914:	0008      	movs	r0, r1
 8001916:	e7cd      	b.n	80018b4 <__gedf2+0x5c>
 8001918:	4243      	negs	r3, r0
 800191a:	4158      	adcs	r0, r3
 800191c:	2302      	movs	r3, #2
 800191e:	4240      	negs	r0, r0
 8001920:	4018      	ands	r0, r3
 8001922:	3801      	subs	r0, #1
 8001924:	e7c6      	b.n	80018b4 <__gedf2+0x5c>
 8001926:	2002      	movs	r0, #2
 8001928:	4240      	negs	r0, r0
 800192a:	e7c3      	b.n	80018b4 <__gedf2+0x5c>
 800192c:	45c4      	cmp	ip, r8
 800192e:	d8bd      	bhi.n	80018ac <__gedf2+0x54>
 8001930:	2000      	movs	r0, #0
 8001932:	45c4      	cmp	ip, r8
 8001934:	d2be      	bcs.n	80018b4 <__gedf2+0x5c>
 8001936:	e7eb      	b.n	8001910 <__gedf2+0xb8>
 8001938:	000007ff 	.word	0x000007ff

0800193c <__ledf2>:
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193e:	464e      	mov	r6, r9
 8001940:	4645      	mov	r5, r8
 8001942:	4657      	mov	r7, sl
 8001944:	46de      	mov	lr, fp
 8001946:	0004      	movs	r4, r0
 8001948:	0018      	movs	r0, r3
 800194a:	b5e0      	push	{r5, r6, r7, lr}
 800194c:	0016      	movs	r6, r2
 800194e:	031b      	lsls	r3, r3, #12
 8001950:	0b1b      	lsrs	r3, r3, #12
 8001952:	4d31      	ldr	r5, [pc, #196]	; (8001a18 <__ledf2+0xdc>)
 8001954:	030f      	lsls	r7, r1, #12
 8001956:	004a      	lsls	r2, r1, #1
 8001958:	4699      	mov	r9, r3
 800195a:	0043      	lsls	r3, r0, #1
 800195c:	46a4      	mov	ip, r4
 800195e:	46b0      	mov	r8, r6
 8001960:	0b3f      	lsrs	r7, r7, #12
 8001962:	0d52      	lsrs	r2, r2, #21
 8001964:	0fc9      	lsrs	r1, r1, #31
 8001966:	0d5b      	lsrs	r3, r3, #21
 8001968:	0fc0      	lsrs	r0, r0, #31
 800196a:	42aa      	cmp	r2, r5
 800196c:	d011      	beq.n	8001992 <__ledf2+0x56>
 800196e:	42ab      	cmp	r3, r5
 8001970:	d014      	beq.n	800199c <__ledf2+0x60>
 8001972:	2a00      	cmp	r2, #0
 8001974:	d12f      	bne.n	80019d6 <__ledf2+0x9a>
 8001976:	433c      	orrs	r4, r7
 8001978:	46a3      	mov	fp, r4
 800197a:	4265      	negs	r5, r4
 800197c:	4165      	adcs	r5, r4
 800197e:	2b00      	cmp	r3, #0
 8001980:	d114      	bne.n	80019ac <__ledf2+0x70>
 8001982:	464c      	mov	r4, r9
 8001984:	4326      	orrs	r6, r4
 8001986:	d111      	bne.n	80019ac <__ledf2+0x70>
 8001988:	465b      	mov	r3, fp
 800198a:	2000      	movs	r0, #0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d017      	beq.n	80019c0 <__ledf2+0x84>
 8001990:	e010      	b.n	80019b4 <__ledf2+0x78>
 8001992:	003d      	movs	r5, r7
 8001994:	4325      	orrs	r5, r4
 8001996:	d112      	bne.n	80019be <__ledf2+0x82>
 8001998:	4293      	cmp	r3, r2
 800199a:	d11c      	bne.n	80019d6 <__ledf2+0x9a>
 800199c:	464d      	mov	r5, r9
 800199e:	432e      	orrs	r6, r5
 80019a0:	d10d      	bne.n	80019be <__ledf2+0x82>
 80019a2:	2a00      	cmp	r2, #0
 80019a4:	d104      	bne.n	80019b0 <__ledf2+0x74>
 80019a6:	433c      	orrs	r4, r7
 80019a8:	4265      	negs	r5, r4
 80019aa:	4165      	adcs	r5, r4
 80019ac:	2d00      	cmp	r5, #0
 80019ae:	d10d      	bne.n	80019cc <__ledf2+0x90>
 80019b0:	4281      	cmp	r1, r0
 80019b2:	d016      	beq.n	80019e2 <__ledf2+0xa6>
 80019b4:	2002      	movs	r0, #2
 80019b6:	3901      	subs	r1, #1
 80019b8:	4008      	ands	r0, r1
 80019ba:	3801      	subs	r0, #1
 80019bc:	e000      	b.n	80019c0 <__ledf2+0x84>
 80019be:	2002      	movs	r0, #2
 80019c0:	bcf0      	pop	{r4, r5, r6, r7}
 80019c2:	46bb      	mov	fp, r7
 80019c4:	46b2      	mov	sl, r6
 80019c6:	46a9      	mov	r9, r5
 80019c8:	46a0      	mov	r8, r4
 80019ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d1f7      	bne.n	80019c0 <__ledf2+0x84>
 80019d0:	2001      	movs	r0, #1
 80019d2:	4240      	negs	r0, r0
 80019d4:	e7f4      	b.n	80019c0 <__ledf2+0x84>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ea      	bne.n	80019b0 <__ledf2+0x74>
 80019da:	464c      	mov	r4, r9
 80019dc:	4326      	orrs	r6, r4
 80019de:	d1e7      	bne.n	80019b0 <__ledf2+0x74>
 80019e0:	e7e8      	b.n	80019b4 <__ledf2+0x78>
 80019e2:	429a      	cmp	r2, r3
 80019e4:	dd06      	ble.n	80019f4 <__ledf2+0xb8>
 80019e6:	4243      	negs	r3, r0
 80019e8:	4158      	adcs	r0, r3
 80019ea:	2302      	movs	r3, #2
 80019ec:	4240      	negs	r0, r0
 80019ee:	4018      	ands	r0, r3
 80019f0:	3801      	subs	r0, #1
 80019f2:	e7e5      	b.n	80019c0 <__ledf2+0x84>
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbe9      	blt.n	80019cc <__ledf2+0x90>
 80019f8:	454f      	cmp	r7, r9
 80019fa:	d8db      	bhi.n	80019b4 <__ledf2+0x78>
 80019fc:	d006      	beq.n	8001a0c <__ledf2+0xd0>
 80019fe:	2000      	movs	r0, #0
 8001a00:	454f      	cmp	r7, r9
 8001a02:	d2dd      	bcs.n	80019c0 <__ledf2+0x84>
 8001a04:	2900      	cmp	r1, #0
 8001a06:	d0e3      	beq.n	80019d0 <__ledf2+0x94>
 8001a08:	0008      	movs	r0, r1
 8001a0a:	e7d9      	b.n	80019c0 <__ledf2+0x84>
 8001a0c:	45c4      	cmp	ip, r8
 8001a0e:	d8d1      	bhi.n	80019b4 <__ledf2+0x78>
 8001a10:	2000      	movs	r0, #0
 8001a12:	45c4      	cmp	ip, r8
 8001a14:	d2d4      	bcs.n	80019c0 <__ledf2+0x84>
 8001a16:	e7f5      	b.n	8001a04 <__ledf2+0xc8>
 8001a18:	000007ff 	.word	0x000007ff

08001a1c <__aeabi_dmul>:
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1e:	4657      	mov	r7, sl
 8001a20:	464e      	mov	r6, r9
 8001a22:	4645      	mov	r5, r8
 8001a24:	46de      	mov	lr, fp
 8001a26:	b5e0      	push	{r5, r6, r7, lr}
 8001a28:	4698      	mov	r8, r3
 8001a2a:	030c      	lsls	r4, r1, #12
 8001a2c:	004b      	lsls	r3, r1, #1
 8001a2e:	0006      	movs	r6, r0
 8001a30:	4692      	mov	sl, r2
 8001a32:	b087      	sub	sp, #28
 8001a34:	0b24      	lsrs	r4, r4, #12
 8001a36:	0d5b      	lsrs	r3, r3, #21
 8001a38:	0fcf      	lsrs	r7, r1, #31
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d06c      	beq.n	8001b18 <__aeabi_dmul+0xfc>
 8001a3e:	4add      	ldr	r2, [pc, #884]	; (8001db4 <__aeabi_dmul+0x398>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d100      	bne.n	8001a46 <__aeabi_dmul+0x2a>
 8001a44:	e086      	b.n	8001b54 <__aeabi_dmul+0x138>
 8001a46:	0f42      	lsrs	r2, r0, #29
 8001a48:	00e4      	lsls	r4, r4, #3
 8001a4a:	4314      	orrs	r4, r2
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	0412      	lsls	r2, r2, #16
 8001a50:	4314      	orrs	r4, r2
 8001a52:	4ad9      	ldr	r2, [pc, #868]	; (8001db8 <__aeabi_dmul+0x39c>)
 8001a54:	00c5      	lsls	r5, r0, #3
 8001a56:	4694      	mov	ip, r2
 8001a58:	4463      	add	r3, ip
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	4699      	mov	r9, r3
 8001a60:	469b      	mov	fp, r3
 8001a62:	4643      	mov	r3, r8
 8001a64:	4642      	mov	r2, r8
 8001a66:	031e      	lsls	r6, r3, #12
 8001a68:	0fd2      	lsrs	r2, r2, #31
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4650      	mov	r0, sl
 8001a6e:	4690      	mov	r8, r2
 8001a70:	0b36      	lsrs	r6, r6, #12
 8001a72:	0d5b      	lsrs	r3, r3, #21
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dmul+0x5c>
 8001a76:	e078      	b.n	8001b6a <__aeabi_dmul+0x14e>
 8001a78:	4ace      	ldr	r2, [pc, #824]	; (8001db4 <__aeabi_dmul+0x398>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01d      	beq.n	8001aba <__aeabi_dmul+0x9e>
 8001a7e:	49ce      	ldr	r1, [pc, #824]	; (8001db8 <__aeabi_dmul+0x39c>)
 8001a80:	0f42      	lsrs	r2, r0, #29
 8001a82:	468c      	mov	ip, r1
 8001a84:	9900      	ldr	r1, [sp, #0]
 8001a86:	4463      	add	r3, ip
 8001a88:	00f6      	lsls	r6, r6, #3
 8001a8a:	468c      	mov	ip, r1
 8001a8c:	4316      	orrs	r6, r2
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	449c      	add	ip, r3
 8001a92:	0412      	lsls	r2, r2, #16
 8001a94:	4663      	mov	r3, ip
 8001a96:	4316      	orrs	r6, r2
 8001a98:	00c2      	lsls	r2, r0, #3
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	9900      	ldr	r1, [sp, #0]
 8001aa0:	4643      	mov	r3, r8
 8001aa2:	3101      	adds	r1, #1
 8001aa4:	468c      	mov	ip, r1
 8001aa6:	4649      	mov	r1, r9
 8001aa8:	407b      	eors	r3, r7
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	290f      	cmp	r1, #15
 8001aae:	d900      	bls.n	8001ab2 <__aeabi_dmul+0x96>
 8001ab0:	e07e      	b.n	8001bb0 <__aeabi_dmul+0x194>
 8001ab2:	4bc2      	ldr	r3, [pc, #776]	; (8001dbc <__aeabi_dmul+0x3a0>)
 8001ab4:	0089      	lsls	r1, r1, #2
 8001ab6:	5859      	ldr	r1, [r3, r1]
 8001ab8:	468f      	mov	pc, r1
 8001aba:	4652      	mov	r2, sl
 8001abc:	9b00      	ldr	r3, [sp, #0]
 8001abe:	4332      	orrs	r2, r6
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dmul+0xa8>
 8001ac2:	e156      	b.n	8001d72 <__aeabi_dmul+0x356>
 8001ac4:	49bb      	ldr	r1, [pc, #748]	; (8001db4 <__aeabi_dmul+0x398>)
 8001ac6:	2600      	movs	r6, #0
 8001ac8:	468c      	mov	ip, r1
 8001aca:	4463      	add	r3, ip
 8001acc:	4649      	mov	r1, r9
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	4319      	orrs	r1, r3
 8001ad4:	4689      	mov	r9, r1
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	e7e1      	b.n	8001a9e <__aeabi_dmul+0x82>
 8001ada:	4643      	mov	r3, r8
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	0034      	movs	r4, r6
 8001ae0:	0015      	movs	r5, r2
 8001ae2:	4683      	mov	fp, r0
 8001ae4:	465b      	mov	r3, fp
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d05e      	beq.n	8001ba8 <__aeabi_dmul+0x18c>
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dmul+0xd4>
 8001aee:	e1f3      	b.n	8001ed8 <__aeabi_dmul+0x4bc>
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d000      	beq.n	8001af6 <__aeabi_dmul+0xda>
 8001af4:	e118      	b.n	8001d28 <__aeabi_dmul+0x30c>
 8001af6:	2200      	movs	r2, #0
 8001af8:	2400      	movs	r4, #0
 8001afa:	2500      	movs	r5, #0
 8001afc:	9b01      	ldr	r3, [sp, #4]
 8001afe:	0512      	lsls	r2, r2, #20
 8001b00:	4322      	orrs	r2, r4
 8001b02:	07db      	lsls	r3, r3, #31
 8001b04:	431a      	orrs	r2, r3
 8001b06:	0028      	movs	r0, r5
 8001b08:	0011      	movs	r1, r2
 8001b0a:	b007      	add	sp, #28
 8001b0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b0e:	46bb      	mov	fp, r7
 8001b10:	46b2      	mov	sl, r6
 8001b12:	46a9      	mov	r9, r5
 8001b14:	46a0      	mov	r8, r4
 8001b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b18:	0025      	movs	r5, r4
 8001b1a:	4305      	orrs	r5, r0
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dmul+0x104>
 8001b1e:	e141      	b.n	8001da4 <__aeabi_dmul+0x388>
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dmul+0x10a>
 8001b24:	e1ad      	b.n	8001e82 <__aeabi_dmul+0x466>
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 fef0 	bl	800290c <__clzsi2>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	0002      	movs	r2, r0
 8001b30:	390b      	subs	r1, #11
 8001b32:	231d      	movs	r3, #29
 8001b34:	0010      	movs	r0, r2
 8001b36:	1a5b      	subs	r3, r3, r1
 8001b38:	0031      	movs	r1, r6
 8001b3a:	0035      	movs	r5, r6
 8001b3c:	3808      	subs	r0, #8
 8001b3e:	4084      	lsls	r4, r0
 8001b40:	40d9      	lsrs	r1, r3
 8001b42:	4085      	lsls	r5, r0
 8001b44:	430c      	orrs	r4, r1
 8001b46:	489e      	ldr	r0, [pc, #632]	; (8001dc0 <__aeabi_dmul+0x3a4>)
 8001b48:	1a83      	subs	r3, r0, r2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	4699      	mov	r9, r3
 8001b50:	469b      	mov	fp, r3
 8001b52:	e786      	b.n	8001a62 <__aeabi_dmul+0x46>
 8001b54:	0005      	movs	r5, r0
 8001b56:	4325      	orrs	r5, r4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dmul+0x140>
 8001b5a:	e11c      	b.n	8001d96 <__aeabi_dmul+0x37a>
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2302      	movs	r3, #2
 8001b62:	2400      	movs	r4, #0
 8001b64:	4691      	mov	r9, r2
 8001b66:	469b      	mov	fp, r3
 8001b68:	e77b      	b.n	8001a62 <__aeabi_dmul+0x46>
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	4332      	orrs	r2, r6
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dmul+0x156>
 8001b70:	e10a      	b.n	8001d88 <__aeabi_dmul+0x36c>
 8001b72:	2e00      	cmp	r6, #0
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dmul+0x15c>
 8001b76:	e176      	b.n	8001e66 <__aeabi_dmul+0x44a>
 8001b78:	0030      	movs	r0, r6
 8001b7a:	f000 fec7 	bl	800290c <__clzsi2>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	3a0b      	subs	r2, #11
 8001b82:	231d      	movs	r3, #29
 8001b84:	0001      	movs	r1, r0
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	4652      	mov	r2, sl
 8001b8a:	3908      	subs	r1, #8
 8001b8c:	40da      	lsrs	r2, r3
 8001b8e:	408e      	lsls	r6, r1
 8001b90:	4316      	orrs	r6, r2
 8001b92:	4652      	mov	r2, sl
 8001b94:	408a      	lsls	r2, r1
 8001b96:	9b00      	ldr	r3, [sp, #0]
 8001b98:	4989      	ldr	r1, [pc, #548]	; (8001dc0 <__aeabi_dmul+0x3a4>)
 8001b9a:	1a18      	subs	r0, r3, r0
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	468c      	mov	ip, r1
 8001ba0:	4463      	add	r3, ip
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	e77a      	b.n	8001a9e <__aeabi_dmul+0x82>
 8001ba8:	2400      	movs	r4, #0
 8001baa:	2500      	movs	r5, #0
 8001bac:	4a81      	ldr	r2, [pc, #516]	; (8001db4 <__aeabi_dmul+0x398>)
 8001bae:	e7a5      	b.n	8001afc <__aeabi_dmul+0xe0>
 8001bb0:	0c2f      	lsrs	r7, r5, #16
 8001bb2:	042d      	lsls	r5, r5, #16
 8001bb4:	0c2d      	lsrs	r5, r5, #16
 8001bb6:	002b      	movs	r3, r5
 8001bb8:	0c11      	lsrs	r1, r2, #16
 8001bba:	0412      	lsls	r2, r2, #16
 8001bbc:	0c12      	lsrs	r2, r2, #16
 8001bbe:	4353      	muls	r3, r2
 8001bc0:	4698      	mov	r8, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	0028      	movs	r0, r5
 8001bc6:	437b      	muls	r3, r7
 8001bc8:	4699      	mov	r9, r3
 8001bca:	4348      	muls	r0, r1
 8001bcc:	4448      	add	r0, r9
 8001bce:	4683      	mov	fp, r0
 8001bd0:	4640      	mov	r0, r8
 8001bd2:	000b      	movs	r3, r1
 8001bd4:	0c00      	lsrs	r0, r0, #16
 8001bd6:	4682      	mov	sl, r0
 8001bd8:	4658      	mov	r0, fp
 8001bda:	437b      	muls	r3, r7
 8001bdc:	4450      	add	r0, sl
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	4581      	cmp	r9, r0
 8001be2:	d906      	bls.n	8001bf2 <__aeabi_dmul+0x1d6>
 8001be4:	469a      	mov	sl, r3
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	4699      	mov	r9, r3
 8001bec:	44ca      	add	sl, r9
 8001bee:	4653      	mov	r3, sl
 8001bf0:	9302      	str	r3, [sp, #8]
 8001bf2:	0c03      	lsrs	r3, r0, #16
 8001bf4:	469b      	mov	fp, r3
 8001bf6:	4643      	mov	r3, r8
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	0400      	lsls	r0, r0, #16
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	4698      	mov	r8, r3
 8001c00:	0003      	movs	r3, r0
 8001c02:	4443      	add	r3, r8
 8001c04:	9304      	str	r3, [sp, #16]
 8001c06:	0c33      	lsrs	r3, r6, #16
 8001c08:	4699      	mov	r9, r3
 8001c0a:	002b      	movs	r3, r5
 8001c0c:	0436      	lsls	r6, r6, #16
 8001c0e:	0c36      	lsrs	r6, r6, #16
 8001c10:	4373      	muls	r3, r6
 8001c12:	4698      	mov	r8, r3
 8001c14:	0033      	movs	r3, r6
 8001c16:	437b      	muls	r3, r7
 8001c18:	469a      	mov	sl, r3
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	435d      	muls	r5, r3
 8001c1e:	435f      	muls	r7, r3
 8001c20:	4643      	mov	r3, r8
 8001c22:	4455      	add	r5, sl
 8001c24:	0c18      	lsrs	r0, r3, #16
 8001c26:	1940      	adds	r0, r0, r5
 8001c28:	4582      	cmp	sl, r0
 8001c2a:	d903      	bls.n	8001c34 <__aeabi_dmul+0x218>
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	025b      	lsls	r3, r3, #9
 8001c30:	469a      	mov	sl, r3
 8001c32:	4457      	add	r7, sl
 8001c34:	0c05      	lsrs	r5, r0, #16
 8001c36:	19eb      	adds	r3, r5, r7
 8001c38:	9305      	str	r3, [sp, #20]
 8001c3a:	4643      	mov	r3, r8
 8001c3c:	041d      	lsls	r5, r3, #16
 8001c3e:	0c2d      	lsrs	r5, r5, #16
 8001c40:	0400      	lsls	r0, r0, #16
 8001c42:	1940      	adds	r0, r0, r5
 8001c44:	0c25      	lsrs	r5, r4, #16
 8001c46:	0424      	lsls	r4, r4, #16
 8001c48:	0c24      	lsrs	r4, r4, #16
 8001c4a:	0027      	movs	r7, r4
 8001c4c:	4357      	muls	r7, r2
 8001c4e:	436a      	muls	r2, r5
 8001c50:	4690      	mov	r8, r2
 8001c52:	002a      	movs	r2, r5
 8001c54:	0c3b      	lsrs	r3, r7, #16
 8001c56:	469a      	mov	sl, r3
 8001c58:	434a      	muls	r2, r1
 8001c5a:	4361      	muls	r1, r4
 8001c5c:	4441      	add	r1, r8
 8001c5e:	4451      	add	r1, sl
 8001c60:	4483      	add	fp, r0
 8001c62:	4588      	cmp	r8, r1
 8001c64:	d903      	bls.n	8001c6e <__aeabi_dmul+0x252>
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	025b      	lsls	r3, r3, #9
 8001c6a:	4698      	mov	r8, r3
 8001c6c:	4442      	add	r2, r8
 8001c6e:	043f      	lsls	r7, r7, #16
 8001c70:	0c0b      	lsrs	r3, r1, #16
 8001c72:	0c3f      	lsrs	r7, r7, #16
 8001c74:	0409      	lsls	r1, r1, #16
 8001c76:	19c9      	adds	r1, r1, r7
 8001c78:	0027      	movs	r7, r4
 8001c7a:	4698      	mov	r8, r3
 8001c7c:	464b      	mov	r3, r9
 8001c7e:	4377      	muls	r7, r6
 8001c80:	435c      	muls	r4, r3
 8001c82:	436e      	muls	r6, r5
 8001c84:	435d      	muls	r5, r3
 8001c86:	0c3b      	lsrs	r3, r7, #16
 8001c88:	4699      	mov	r9, r3
 8001c8a:	19a4      	adds	r4, r4, r6
 8001c8c:	444c      	add	r4, r9
 8001c8e:	4442      	add	r2, r8
 8001c90:	9503      	str	r5, [sp, #12]
 8001c92:	42a6      	cmp	r6, r4
 8001c94:	d904      	bls.n	8001ca0 <__aeabi_dmul+0x284>
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	025b      	lsls	r3, r3, #9
 8001c9a:	4698      	mov	r8, r3
 8001c9c:	4445      	add	r5, r8
 8001c9e:	9503      	str	r5, [sp, #12]
 8001ca0:	9b02      	ldr	r3, [sp, #8]
 8001ca2:	043f      	lsls	r7, r7, #16
 8001ca4:	445b      	add	r3, fp
 8001ca6:	001e      	movs	r6, r3
 8001ca8:	4283      	cmp	r3, r0
 8001caa:	4180      	sbcs	r0, r0
 8001cac:	0423      	lsls	r3, r4, #16
 8001cae:	4698      	mov	r8, r3
 8001cb0:	9b05      	ldr	r3, [sp, #20]
 8001cb2:	0c3f      	lsrs	r7, r7, #16
 8001cb4:	4447      	add	r7, r8
 8001cb6:	4698      	mov	r8, r3
 8001cb8:	1876      	adds	r6, r6, r1
 8001cba:	428e      	cmp	r6, r1
 8001cbc:	4189      	sbcs	r1, r1
 8001cbe:	4447      	add	r7, r8
 8001cc0:	4240      	negs	r0, r0
 8001cc2:	183d      	adds	r5, r7, r0
 8001cc4:	46a8      	mov	r8, r5
 8001cc6:	4693      	mov	fp, r2
 8001cc8:	4249      	negs	r1, r1
 8001cca:	468a      	mov	sl, r1
 8001ccc:	44c3      	add	fp, r8
 8001cce:	429f      	cmp	r7, r3
 8001cd0:	41bf      	sbcs	r7, r7
 8001cd2:	4580      	cmp	r8, r0
 8001cd4:	4180      	sbcs	r0, r0
 8001cd6:	9b03      	ldr	r3, [sp, #12]
 8001cd8:	44da      	add	sl, fp
 8001cda:	4698      	mov	r8, r3
 8001cdc:	4653      	mov	r3, sl
 8001cde:	4240      	negs	r0, r0
 8001ce0:	427f      	negs	r7, r7
 8001ce2:	4307      	orrs	r7, r0
 8001ce4:	0c24      	lsrs	r4, r4, #16
 8001ce6:	4593      	cmp	fp, r2
 8001ce8:	4192      	sbcs	r2, r2
 8001cea:	458a      	cmp	sl, r1
 8001cec:	4189      	sbcs	r1, r1
 8001cee:	193f      	adds	r7, r7, r4
 8001cf0:	0ddc      	lsrs	r4, r3, #23
 8001cf2:	9b04      	ldr	r3, [sp, #16]
 8001cf4:	0275      	lsls	r5, r6, #9
 8001cf6:	431d      	orrs	r5, r3
 8001cf8:	1e68      	subs	r0, r5, #1
 8001cfa:	4185      	sbcs	r5, r0
 8001cfc:	4653      	mov	r3, sl
 8001cfe:	4252      	negs	r2, r2
 8001d00:	4249      	negs	r1, r1
 8001d02:	430a      	orrs	r2, r1
 8001d04:	18bf      	adds	r7, r7, r2
 8001d06:	4447      	add	r7, r8
 8001d08:	0df6      	lsrs	r6, r6, #23
 8001d0a:	027f      	lsls	r7, r7, #9
 8001d0c:	4335      	orrs	r5, r6
 8001d0e:	025a      	lsls	r2, r3, #9
 8001d10:	433c      	orrs	r4, r7
 8001d12:	4315      	orrs	r5, r2
 8001d14:	01fb      	lsls	r3, r7, #7
 8001d16:	d400      	bmi.n	8001d1a <__aeabi_dmul+0x2fe>
 8001d18:	e0c1      	b.n	8001e9e <__aeabi_dmul+0x482>
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	086a      	lsrs	r2, r5, #1
 8001d1e:	400d      	ands	r5, r1
 8001d20:	4315      	orrs	r5, r2
 8001d22:	07e2      	lsls	r2, r4, #31
 8001d24:	4315      	orrs	r5, r2
 8001d26:	0864      	lsrs	r4, r4, #1
 8001d28:	4926      	ldr	r1, [pc, #152]	; (8001dc4 <__aeabi_dmul+0x3a8>)
 8001d2a:	4461      	add	r1, ip
 8001d2c:	2900      	cmp	r1, #0
 8001d2e:	dd56      	ble.n	8001dde <__aeabi_dmul+0x3c2>
 8001d30:	076b      	lsls	r3, r5, #29
 8001d32:	d009      	beq.n	8001d48 <__aeabi_dmul+0x32c>
 8001d34:	220f      	movs	r2, #15
 8001d36:	402a      	ands	r2, r5
 8001d38:	2a04      	cmp	r2, #4
 8001d3a:	d005      	beq.n	8001d48 <__aeabi_dmul+0x32c>
 8001d3c:	1d2a      	adds	r2, r5, #4
 8001d3e:	42aa      	cmp	r2, r5
 8001d40:	41ad      	sbcs	r5, r5
 8001d42:	426d      	negs	r5, r5
 8001d44:	1964      	adds	r4, r4, r5
 8001d46:	0015      	movs	r5, r2
 8001d48:	01e3      	lsls	r3, r4, #7
 8001d4a:	d504      	bpl.n	8001d56 <__aeabi_dmul+0x33a>
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <__aeabi_dmul+0x3ac>)
 8001d50:	00c9      	lsls	r1, r1, #3
 8001d52:	4014      	ands	r4, r2
 8001d54:	4461      	add	r1, ip
 8001d56:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <__aeabi_dmul+0x3b0>)
 8001d58:	4291      	cmp	r1, r2
 8001d5a:	dd00      	ble.n	8001d5e <__aeabi_dmul+0x342>
 8001d5c:	e724      	b.n	8001ba8 <__aeabi_dmul+0x18c>
 8001d5e:	0762      	lsls	r2, r4, #29
 8001d60:	08ed      	lsrs	r5, r5, #3
 8001d62:	0264      	lsls	r4, r4, #9
 8001d64:	0549      	lsls	r1, r1, #21
 8001d66:	4315      	orrs	r5, r2
 8001d68:	0b24      	lsrs	r4, r4, #12
 8001d6a:	0d4a      	lsrs	r2, r1, #21
 8001d6c:	e6c6      	b.n	8001afc <__aeabi_dmul+0xe0>
 8001d6e:	9701      	str	r7, [sp, #4]
 8001d70:	e6b8      	b.n	8001ae4 <__aeabi_dmul+0xc8>
 8001d72:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <__aeabi_dmul+0x398>)
 8001d74:	2003      	movs	r0, #3
 8001d76:	4694      	mov	ip, r2
 8001d78:	4463      	add	r3, ip
 8001d7a:	464a      	mov	r2, r9
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2303      	movs	r3, #3
 8001d80:	431a      	orrs	r2, r3
 8001d82:	4691      	mov	r9, r2
 8001d84:	4652      	mov	r2, sl
 8001d86:	e68a      	b.n	8001a9e <__aeabi_dmul+0x82>
 8001d88:	4649      	mov	r1, r9
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	4319      	orrs	r1, r3
 8001d8e:	4689      	mov	r9, r1
 8001d90:	2600      	movs	r6, #0
 8001d92:	2001      	movs	r0, #1
 8001d94:	e683      	b.n	8001a9e <__aeabi_dmul+0x82>
 8001d96:	220c      	movs	r2, #12
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	0005      	movs	r5, r0
 8001d9e:	4691      	mov	r9, r2
 8001da0:	469b      	mov	fp, r3
 8001da2:	e65e      	b.n	8001a62 <__aeabi_dmul+0x46>
 8001da4:	2304      	movs	r3, #4
 8001da6:	4699      	mov	r9, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	2400      	movs	r4, #0
 8001db0:	469b      	mov	fp, r3
 8001db2:	e656      	b.n	8001a62 <__aeabi_dmul+0x46>
 8001db4:	000007ff 	.word	0x000007ff
 8001db8:	fffffc01 	.word	0xfffffc01
 8001dbc:	08012d88 	.word	0x08012d88
 8001dc0:	fffffc0d 	.word	0xfffffc0d
 8001dc4:	000003ff 	.word	0x000003ff
 8001dc8:	feffffff 	.word	0xfeffffff
 8001dcc:	000007fe 	.word	0x000007fe
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2480      	movs	r4, #128	; 0x80
 8001dd4:	2500      	movs	r5, #0
 8001dd6:	4a44      	ldr	r2, [pc, #272]	; (8001ee8 <__aeabi_dmul+0x4cc>)
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	0324      	lsls	r4, r4, #12
 8001ddc:	e68e      	b.n	8001afc <__aeabi_dmul+0xe0>
 8001dde:	2001      	movs	r0, #1
 8001de0:	1a40      	subs	r0, r0, r1
 8001de2:	2838      	cmp	r0, #56	; 0x38
 8001de4:	dd00      	ble.n	8001de8 <__aeabi_dmul+0x3cc>
 8001de6:	e686      	b.n	8001af6 <__aeabi_dmul+0xda>
 8001de8:	281f      	cmp	r0, #31
 8001dea:	dd5b      	ble.n	8001ea4 <__aeabi_dmul+0x488>
 8001dec:	221f      	movs	r2, #31
 8001dee:	0023      	movs	r3, r4
 8001df0:	4252      	negs	r2, r2
 8001df2:	1a51      	subs	r1, r2, r1
 8001df4:	40cb      	lsrs	r3, r1
 8001df6:	0019      	movs	r1, r3
 8001df8:	2820      	cmp	r0, #32
 8001dfa:	d003      	beq.n	8001e04 <__aeabi_dmul+0x3e8>
 8001dfc:	4a3b      	ldr	r2, [pc, #236]	; (8001eec <__aeabi_dmul+0x4d0>)
 8001dfe:	4462      	add	r2, ip
 8001e00:	4094      	lsls	r4, r2
 8001e02:	4325      	orrs	r5, r4
 8001e04:	1e6a      	subs	r2, r5, #1
 8001e06:	4195      	sbcs	r5, r2
 8001e08:	002a      	movs	r2, r5
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	2107      	movs	r1, #7
 8001e0e:	000d      	movs	r5, r1
 8001e10:	2400      	movs	r4, #0
 8001e12:	4015      	ands	r5, r2
 8001e14:	4211      	tst	r1, r2
 8001e16:	d05b      	beq.n	8001ed0 <__aeabi_dmul+0x4b4>
 8001e18:	210f      	movs	r1, #15
 8001e1a:	2400      	movs	r4, #0
 8001e1c:	4011      	ands	r1, r2
 8001e1e:	2904      	cmp	r1, #4
 8001e20:	d053      	beq.n	8001eca <__aeabi_dmul+0x4ae>
 8001e22:	1d11      	adds	r1, r2, #4
 8001e24:	4291      	cmp	r1, r2
 8001e26:	4192      	sbcs	r2, r2
 8001e28:	4252      	negs	r2, r2
 8001e2a:	18a4      	adds	r4, r4, r2
 8001e2c:	000a      	movs	r2, r1
 8001e2e:	0223      	lsls	r3, r4, #8
 8001e30:	d54b      	bpl.n	8001eca <__aeabi_dmul+0x4ae>
 8001e32:	2201      	movs	r2, #1
 8001e34:	2400      	movs	r4, #0
 8001e36:	2500      	movs	r5, #0
 8001e38:	e660      	b.n	8001afc <__aeabi_dmul+0xe0>
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	031b      	lsls	r3, r3, #12
 8001e3e:	421c      	tst	r4, r3
 8001e40:	d009      	beq.n	8001e56 <__aeabi_dmul+0x43a>
 8001e42:	421e      	tst	r6, r3
 8001e44:	d107      	bne.n	8001e56 <__aeabi_dmul+0x43a>
 8001e46:	4333      	orrs	r3, r6
 8001e48:	031c      	lsls	r4, r3, #12
 8001e4a:	4643      	mov	r3, r8
 8001e4c:	0015      	movs	r5, r2
 8001e4e:	0b24      	lsrs	r4, r4, #12
 8001e50:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <__aeabi_dmul+0x4cc>)
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	e652      	b.n	8001afc <__aeabi_dmul+0xe0>
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	0312      	lsls	r2, r2, #12
 8001e5a:	4314      	orrs	r4, r2
 8001e5c:	0324      	lsls	r4, r4, #12
 8001e5e:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <__aeabi_dmul+0x4cc>)
 8001e60:	0b24      	lsrs	r4, r4, #12
 8001e62:	9701      	str	r7, [sp, #4]
 8001e64:	e64a      	b.n	8001afc <__aeabi_dmul+0xe0>
 8001e66:	f000 fd51 	bl	800290c <__clzsi2>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	3215      	adds	r2, #21
 8001e70:	3020      	adds	r0, #32
 8001e72:	2a1c      	cmp	r2, #28
 8001e74:	dc00      	bgt.n	8001e78 <__aeabi_dmul+0x45c>
 8001e76:	e684      	b.n	8001b82 <__aeabi_dmul+0x166>
 8001e78:	4656      	mov	r6, sl
 8001e7a:	3b08      	subs	r3, #8
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	409e      	lsls	r6, r3
 8001e80:	e689      	b.n	8001b96 <__aeabi_dmul+0x17a>
 8001e82:	f000 fd43 	bl	800290c <__clzsi2>
 8001e86:	0001      	movs	r1, r0
 8001e88:	0002      	movs	r2, r0
 8001e8a:	3115      	adds	r1, #21
 8001e8c:	3220      	adds	r2, #32
 8001e8e:	291c      	cmp	r1, #28
 8001e90:	dc00      	bgt.n	8001e94 <__aeabi_dmul+0x478>
 8001e92:	e64e      	b.n	8001b32 <__aeabi_dmul+0x116>
 8001e94:	0034      	movs	r4, r6
 8001e96:	3808      	subs	r0, #8
 8001e98:	2500      	movs	r5, #0
 8001e9a:	4084      	lsls	r4, r0
 8001e9c:	e653      	b.n	8001b46 <__aeabi_dmul+0x12a>
 8001e9e:	9b00      	ldr	r3, [sp, #0]
 8001ea0:	469c      	mov	ip, r3
 8001ea2:	e741      	b.n	8001d28 <__aeabi_dmul+0x30c>
 8001ea4:	4912      	ldr	r1, [pc, #72]	; (8001ef0 <__aeabi_dmul+0x4d4>)
 8001ea6:	0022      	movs	r2, r4
 8001ea8:	4461      	add	r1, ip
 8001eaa:	002e      	movs	r6, r5
 8001eac:	408d      	lsls	r5, r1
 8001eae:	408a      	lsls	r2, r1
 8001eb0:	40c6      	lsrs	r6, r0
 8001eb2:	1e69      	subs	r1, r5, #1
 8001eb4:	418d      	sbcs	r5, r1
 8001eb6:	4332      	orrs	r2, r6
 8001eb8:	432a      	orrs	r2, r5
 8001eba:	40c4      	lsrs	r4, r0
 8001ebc:	0753      	lsls	r3, r2, #29
 8001ebe:	d0b6      	beq.n	8001e2e <__aeabi_dmul+0x412>
 8001ec0:	210f      	movs	r1, #15
 8001ec2:	4011      	ands	r1, r2
 8001ec4:	2904      	cmp	r1, #4
 8001ec6:	d1ac      	bne.n	8001e22 <__aeabi_dmul+0x406>
 8001ec8:	e7b1      	b.n	8001e2e <__aeabi_dmul+0x412>
 8001eca:	0765      	lsls	r5, r4, #29
 8001ecc:	0264      	lsls	r4, r4, #9
 8001ece:	0b24      	lsrs	r4, r4, #12
 8001ed0:	08d2      	lsrs	r2, r2, #3
 8001ed2:	4315      	orrs	r5, r2
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	e611      	b.n	8001afc <__aeabi_dmul+0xe0>
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	0312      	lsls	r2, r2, #12
 8001edc:	4314      	orrs	r4, r2
 8001ede:	0324      	lsls	r4, r4, #12
 8001ee0:	4a01      	ldr	r2, [pc, #4]	; (8001ee8 <__aeabi_dmul+0x4cc>)
 8001ee2:	0b24      	lsrs	r4, r4, #12
 8001ee4:	e60a      	b.n	8001afc <__aeabi_dmul+0xe0>
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	000007ff 	.word	0x000007ff
 8001eec:	0000043e 	.word	0x0000043e
 8001ef0:	0000041e 	.word	0x0000041e

08001ef4 <__aeabi_dsub>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	4657      	mov	r7, sl
 8001ef8:	464e      	mov	r6, r9
 8001efa:	4645      	mov	r5, r8
 8001efc:	46de      	mov	lr, fp
 8001efe:	0004      	movs	r4, r0
 8001f00:	b5e0      	push	{r5, r6, r7, lr}
 8001f02:	001f      	movs	r7, r3
 8001f04:	0010      	movs	r0, r2
 8001f06:	030b      	lsls	r3, r1, #12
 8001f08:	0f62      	lsrs	r2, r4, #29
 8001f0a:	004e      	lsls	r6, r1, #1
 8001f0c:	0fcd      	lsrs	r5, r1, #31
 8001f0e:	0a5b      	lsrs	r3, r3, #9
 8001f10:	0339      	lsls	r1, r7, #12
 8001f12:	4313      	orrs	r3, r2
 8001f14:	0a49      	lsrs	r1, r1, #9
 8001f16:	00e2      	lsls	r2, r4, #3
 8001f18:	0f44      	lsrs	r4, r0, #29
 8001f1a:	4321      	orrs	r1, r4
 8001f1c:	4cc2      	ldr	r4, [pc, #776]	; (8002228 <__aeabi_dsub+0x334>)
 8001f1e:	4691      	mov	r9, r2
 8001f20:	4692      	mov	sl, r2
 8001f22:	00c0      	lsls	r0, r0, #3
 8001f24:	007a      	lsls	r2, r7, #1
 8001f26:	4680      	mov	r8, r0
 8001f28:	0d76      	lsrs	r6, r6, #21
 8001f2a:	0d52      	lsrs	r2, r2, #21
 8001f2c:	0fff      	lsrs	r7, r7, #31
 8001f2e:	42a2      	cmp	r2, r4
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x40>
 8001f32:	e0b4      	b.n	800209e <__aeabi_dsub+0x1aa>
 8001f34:	2401      	movs	r4, #1
 8001f36:	4067      	eors	r7, r4
 8001f38:	46bb      	mov	fp, r7
 8001f3a:	42bd      	cmp	r5, r7
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x4c>
 8001f3e:	e088      	b.n	8002052 <__aeabi_dsub+0x15e>
 8001f40:	1ab4      	subs	r4, r6, r2
 8001f42:	46a4      	mov	ip, r4
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	dc00      	bgt.n	8001f4a <__aeabi_dsub+0x56>
 8001f48:	e0b2      	b.n	80020b0 <__aeabi_dsub+0x1bc>
 8001f4a:	2a00      	cmp	r2, #0
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x5c>
 8001f4e:	e0c5      	b.n	80020dc <__aeabi_dsub+0x1e8>
 8001f50:	4ab5      	ldr	r2, [pc, #724]	; (8002228 <__aeabi_dsub+0x334>)
 8001f52:	4296      	cmp	r6, r2
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x64>
 8001f56:	e28b      	b.n	8002470 <__aeabi_dsub+0x57c>
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	0412      	lsls	r2, r2, #16
 8001f5c:	4311      	orrs	r1, r2
 8001f5e:	4662      	mov	r2, ip
 8001f60:	2a38      	cmp	r2, #56	; 0x38
 8001f62:	dd00      	ble.n	8001f66 <__aeabi_dsub+0x72>
 8001f64:	e1a1      	b.n	80022aa <__aeabi_dsub+0x3b6>
 8001f66:	2a1f      	cmp	r2, #31
 8001f68:	dd00      	ble.n	8001f6c <__aeabi_dsub+0x78>
 8001f6a:	e216      	b.n	800239a <__aeabi_dsub+0x4a6>
 8001f6c:	2720      	movs	r7, #32
 8001f6e:	000c      	movs	r4, r1
 8001f70:	1abf      	subs	r7, r7, r2
 8001f72:	40bc      	lsls	r4, r7
 8001f74:	0002      	movs	r2, r0
 8001f76:	46a0      	mov	r8, r4
 8001f78:	4664      	mov	r4, ip
 8001f7a:	40b8      	lsls	r0, r7
 8001f7c:	40e2      	lsrs	r2, r4
 8001f7e:	4644      	mov	r4, r8
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0002      	movs	r2, r0
 8001f84:	1e50      	subs	r0, r2, #1
 8001f86:	4182      	sbcs	r2, r0
 8001f88:	4660      	mov	r0, ip
 8001f8a:	40c1      	lsrs	r1, r0
 8001f8c:	4322      	orrs	r2, r4
 8001f8e:	1a5b      	subs	r3, r3, r1
 8001f90:	4649      	mov	r1, r9
 8001f92:	1a8c      	subs	r4, r1, r2
 8001f94:	45a1      	cmp	r9, r4
 8001f96:	4192      	sbcs	r2, r2
 8001f98:	4252      	negs	r2, r2
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	4698      	mov	r8, r3
 8001f9e:	4643      	mov	r3, r8
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	d400      	bmi.n	8001fa6 <__aeabi_dsub+0xb2>
 8001fa4:	e117      	b.n	80021d6 <__aeabi_dsub+0x2e2>
 8001fa6:	4643      	mov	r3, r8
 8001fa8:	025b      	lsls	r3, r3, #9
 8001faa:	0a5b      	lsrs	r3, r3, #9
 8001fac:	4698      	mov	r8, r3
 8001fae:	4643      	mov	r3, r8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0xc2>
 8001fb4:	e16c      	b.n	8002290 <__aeabi_dsub+0x39c>
 8001fb6:	4640      	mov	r0, r8
 8001fb8:	f000 fca8 	bl	800290c <__clzsi2>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	3a08      	subs	r2, #8
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	0020      	movs	r0, r4
 8001fc4:	4643      	mov	r3, r8
 8001fc6:	1a89      	subs	r1, r1, r2
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	40c8      	lsrs	r0, r1
 8001fcc:	4094      	lsls	r4, r2
 8001fce:	4303      	orrs	r3, r0
 8001fd0:	4296      	cmp	r6, r2
 8001fd2:	dd00      	ble.n	8001fd6 <__aeabi_dsub+0xe2>
 8001fd4:	e157      	b.n	8002286 <__aeabi_dsub+0x392>
 8001fd6:	1b96      	subs	r6, r2, r6
 8001fd8:	1c71      	adds	r1, r6, #1
 8001fda:	291f      	cmp	r1, #31
 8001fdc:	dd00      	ble.n	8001fe0 <__aeabi_dsub+0xec>
 8001fde:	e1cb      	b.n	8002378 <__aeabi_dsub+0x484>
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	0026      	movs	r6, r4
 8001fe6:	1a52      	subs	r2, r2, r1
 8001fe8:	4094      	lsls	r4, r2
 8001fea:	4090      	lsls	r0, r2
 8001fec:	40ce      	lsrs	r6, r1
 8001fee:	40cb      	lsrs	r3, r1
 8001ff0:	1e62      	subs	r2, r4, #1
 8001ff2:	4194      	sbcs	r4, r2
 8001ff4:	4330      	orrs	r0, r6
 8001ff6:	4698      	mov	r8, r3
 8001ff8:	2600      	movs	r6, #0
 8001ffa:	4304      	orrs	r4, r0
 8001ffc:	0763      	lsls	r3, r4, #29
 8001ffe:	d009      	beq.n	8002014 <__aeabi_dsub+0x120>
 8002000:	230f      	movs	r3, #15
 8002002:	4023      	ands	r3, r4
 8002004:	2b04      	cmp	r3, #4
 8002006:	d005      	beq.n	8002014 <__aeabi_dsub+0x120>
 8002008:	1d23      	adds	r3, r4, #4
 800200a:	42a3      	cmp	r3, r4
 800200c:	41a4      	sbcs	r4, r4
 800200e:	4264      	negs	r4, r4
 8002010:	44a0      	add	r8, r4
 8002012:	001c      	movs	r4, r3
 8002014:	4643      	mov	r3, r8
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	d400      	bmi.n	800201c <__aeabi_dsub+0x128>
 800201a:	e0df      	b.n	80021dc <__aeabi_dsub+0x2e8>
 800201c:	4b82      	ldr	r3, [pc, #520]	; (8002228 <__aeabi_dsub+0x334>)
 800201e:	3601      	adds	r6, #1
 8002020:	429e      	cmp	r6, r3
 8002022:	d100      	bne.n	8002026 <__aeabi_dsub+0x132>
 8002024:	e0fb      	b.n	800221e <__aeabi_dsub+0x32a>
 8002026:	4642      	mov	r2, r8
 8002028:	4b80      	ldr	r3, [pc, #512]	; (800222c <__aeabi_dsub+0x338>)
 800202a:	08e4      	lsrs	r4, r4, #3
 800202c:	401a      	ands	r2, r3
 800202e:	0013      	movs	r3, r2
 8002030:	0571      	lsls	r1, r6, #21
 8002032:	0752      	lsls	r2, r2, #29
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	4322      	orrs	r2, r4
 8002038:	0b1b      	lsrs	r3, r3, #12
 800203a:	0d49      	lsrs	r1, r1, #21
 800203c:	0509      	lsls	r1, r1, #20
 800203e:	07ed      	lsls	r5, r5, #31
 8002040:	4319      	orrs	r1, r3
 8002042:	4329      	orrs	r1, r5
 8002044:	0010      	movs	r0, r2
 8002046:	bcf0      	pop	{r4, r5, r6, r7}
 8002048:	46bb      	mov	fp, r7
 800204a:	46b2      	mov	sl, r6
 800204c:	46a9      	mov	r9, r5
 800204e:	46a0      	mov	r8, r4
 8002050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002052:	1ab4      	subs	r4, r6, r2
 8002054:	46a4      	mov	ip, r4
 8002056:	2c00      	cmp	r4, #0
 8002058:	dd58      	ble.n	800210c <__aeabi_dsub+0x218>
 800205a:	2a00      	cmp	r2, #0
 800205c:	d100      	bne.n	8002060 <__aeabi_dsub+0x16c>
 800205e:	e09e      	b.n	800219e <__aeabi_dsub+0x2aa>
 8002060:	4a71      	ldr	r2, [pc, #452]	; (8002228 <__aeabi_dsub+0x334>)
 8002062:	4296      	cmp	r6, r2
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x174>
 8002066:	e13b      	b.n	80022e0 <__aeabi_dsub+0x3ec>
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	0412      	lsls	r2, r2, #16
 800206c:	4311      	orrs	r1, r2
 800206e:	4662      	mov	r2, ip
 8002070:	2a38      	cmp	r2, #56	; 0x38
 8002072:	dd00      	ble.n	8002076 <__aeabi_dsub+0x182>
 8002074:	e0c1      	b.n	80021fa <__aeabi_dsub+0x306>
 8002076:	2a1f      	cmp	r2, #31
 8002078:	dc00      	bgt.n	800207c <__aeabi_dsub+0x188>
 800207a:	e1bb      	b.n	80023f4 <__aeabi_dsub+0x500>
 800207c:	000c      	movs	r4, r1
 800207e:	3a20      	subs	r2, #32
 8002080:	40d4      	lsrs	r4, r2
 8002082:	0022      	movs	r2, r4
 8002084:	4664      	mov	r4, ip
 8002086:	2c20      	cmp	r4, #32
 8002088:	d004      	beq.n	8002094 <__aeabi_dsub+0x1a0>
 800208a:	2740      	movs	r7, #64	; 0x40
 800208c:	1b3f      	subs	r7, r7, r4
 800208e:	40b9      	lsls	r1, r7
 8002090:	4308      	orrs	r0, r1
 8002092:	4680      	mov	r8, r0
 8002094:	4644      	mov	r4, r8
 8002096:	1e61      	subs	r1, r4, #1
 8002098:	418c      	sbcs	r4, r1
 800209a:	4314      	orrs	r4, r2
 800209c:	e0b1      	b.n	8002202 <__aeabi_dsub+0x30e>
 800209e:	000c      	movs	r4, r1
 80020a0:	4304      	orrs	r4, r0
 80020a2:	d02a      	beq.n	80020fa <__aeabi_dsub+0x206>
 80020a4:	46bb      	mov	fp, r7
 80020a6:	42bd      	cmp	r5, r7
 80020a8:	d02d      	beq.n	8002106 <__aeabi_dsub+0x212>
 80020aa:	4c61      	ldr	r4, [pc, #388]	; (8002230 <__aeabi_dsub+0x33c>)
 80020ac:	46a4      	mov	ip, r4
 80020ae:	44b4      	add	ip, r6
 80020b0:	4664      	mov	r4, ip
 80020b2:	2c00      	cmp	r4, #0
 80020b4:	d05c      	beq.n	8002170 <__aeabi_dsub+0x27c>
 80020b6:	1b94      	subs	r4, r2, r6
 80020b8:	46a4      	mov	ip, r4
 80020ba:	2e00      	cmp	r6, #0
 80020bc:	d000      	beq.n	80020c0 <__aeabi_dsub+0x1cc>
 80020be:	e115      	b.n	80022ec <__aeabi_dsub+0x3f8>
 80020c0:	464d      	mov	r5, r9
 80020c2:	431d      	orrs	r5, r3
 80020c4:	d100      	bne.n	80020c8 <__aeabi_dsub+0x1d4>
 80020c6:	e1c3      	b.n	8002450 <__aeabi_dsub+0x55c>
 80020c8:	1e65      	subs	r5, r4, #1
 80020ca:	2c01      	cmp	r4, #1
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x1dc>
 80020ce:	e20c      	b.n	80024ea <__aeabi_dsub+0x5f6>
 80020d0:	4e55      	ldr	r6, [pc, #340]	; (8002228 <__aeabi_dsub+0x334>)
 80020d2:	42b4      	cmp	r4, r6
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x1e4>
 80020d6:	e1f8      	b.n	80024ca <__aeabi_dsub+0x5d6>
 80020d8:	46ac      	mov	ip, r5
 80020da:	e10e      	b.n	80022fa <__aeabi_dsub+0x406>
 80020dc:	000a      	movs	r2, r1
 80020de:	4302      	orrs	r2, r0
 80020e0:	d100      	bne.n	80020e4 <__aeabi_dsub+0x1f0>
 80020e2:	e136      	b.n	8002352 <__aeabi_dsub+0x45e>
 80020e4:	0022      	movs	r2, r4
 80020e6:	3a01      	subs	r2, #1
 80020e8:	2c01      	cmp	r4, #1
 80020ea:	d100      	bne.n	80020ee <__aeabi_dsub+0x1fa>
 80020ec:	e1c6      	b.n	800247c <__aeabi_dsub+0x588>
 80020ee:	4c4e      	ldr	r4, [pc, #312]	; (8002228 <__aeabi_dsub+0x334>)
 80020f0:	45a4      	cmp	ip, r4
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x202>
 80020f4:	e0f4      	b.n	80022e0 <__aeabi_dsub+0x3ec>
 80020f6:	4694      	mov	ip, r2
 80020f8:	e731      	b.n	8001f5e <__aeabi_dsub+0x6a>
 80020fa:	2401      	movs	r4, #1
 80020fc:	4067      	eors	r7, r4
 80020fe:	46bb      	mov	fp, r7
 8002100:	42bd      	cmp	r5, r7
 8002102:	d000      	beq.n	8002106 <__aeabi_dsub+0x212>
 8002104:	e71c      	b.n	8001f40 <__aeabi_dsub+0x4c>
 8002106:	4c4a      	ldr	r4, [pc, #296]	; (8002230 <__aeabi_dsub+0x33c>)
 8002108:	46a4      	mov	ip, r4
 800210a:	44b4      	add	ip, r6
 800210c:	4664      	mov	r4, ip
 800210e:	2c00      	cmp	r4, #0
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x220>
 8002112:	e0cf      	b.n	80022b4 <__aeabi_dsub+0x3c0>
 8002114:	1b94      	subs	r4, r2, r6
 8002116:	46a4      	mov	ip, r4
 8002118:	2e00      	cmp	r6, #0
 800211a:	d100      	bne.n	800211e <__aeabi_dsub+0x22a>
 800211c:	e15c      	b.n	80023d8 <__aeabi_dsub+0x4e4>
 800211e:	4e42      	ldr	r6, [pc, #264]	; (8002228 <__aeabi_dsub+0x334>)
 8002120:	42b2      	cmp	r2, r6
 8002122:	d100      	bne.n	8002126 <__aeabi_dsub+0x232>
 8002124:	e1ec      	b.n	8002500 <__aeabi_dsub+0x60c>
 8002126:	2680      	movs	r6, #128	; 0x80
 8002128:	0436      	lsls	r6, r6, #16
 800212a:	4333      	orrs	r3, r6
 800212c:	4664      	mov	r4, ip
 800212e:	2c38      	cmp	r4, #56	; 0x38
 8002130:	dd00      	ble.n	8002134 <__aeabi_dsub+0x240>
 8002132:	e1b3      	b.n	800249c <__aeabi_dsub+0x5a8>
 8002134:	2c1f      	cmp	r4, #31
 8002136:	dd00      	ble.n	800213a <__aeabi_dsub+0x246>
 8002138:	e238      	b.n	80025ac <__aeabi_dsub+0x6b8>
 800213a:	2620      	movs	r6, #32
 800213c:	1b36      	subs	r6, r6, r4
 800213e:	001c      	movs	r4, r3
 8002140:	40b4      	lsls	r4, r6
 8002142:	464f      	mov	r7, r9
 8002144:	46a0      	mov	r8, r4
 8002146:	4664      	mov	r4, ip
 8002148:	40e7      	lsrs	r7, r4
 800214a:	4644      	mov	r4, r8
 800214c:	433c      	orrs	r4, r7
 800214e:	464f      	mov	r7, r9
 8002150:	40b7      	lsls	r7, r6
 8002152:	003e      	movs	r6, r7
 8002154:	1e77      	subs	r7, r6, #1
 8002156:	41be      	sbcs	r6, r7
 8002158:	4334      	orrs	r4, r6
 800215a:	4666      	mov	r6, ip
 800215c:	40f3      	lsrs	r3, r6
 800215e:	18c9      	adds	r1, r1, r3
 8002160:	1824      	adds	r4, r4, r0
 8002162:	4284      	cmp	r4, r0
 8002164:	419b      	sbcs	r3, r3
 8002166:	425b      	negs	r3, r3
 8002168:	4698      	mov	r8, r3
 800216a:	0016      	movs	r6, r2
 800216c:	4488      	add	r8, r1
 800216e:	e04e      	b.n	800220e <__aeabi_dsub+0x31a>
 8002170:	4a30      	ldr	r2, [pc, #192]	; (8002234 <__aeabi_dsub+0x340>)
 8002172:	1c74      	adds	r4, r6, #1
 8002174:	4214      	tst	r4, r2
 8002176:	d000      	beq.n	800217a <__aeabi_dsub+0x286>
 8002178:	e0d6      	b.n	8002328 <__aeabi_dsub+0x434>
 800217a:	464a      	mov	r2, r9
 800217c:	431a      	orrs	r2, r3
 800217e:	2e00      	cmp	r6, #0
 8002180:	d000      	beq.n	8002184 <__aeabi_dsub+0x290>
 8002182:	e15b      	b.n	800243c <__aeabi_dsub+0x548>
 8002184:	2a00      	cmp	r2, #0
 8002186:	d100      	bne.n	800218a <__aeabi_dsub+0x296>
 8002188:	e1a5      	b.n	80024d6 <__aeabi_dsub+0x5e2>
 800218a:	000a      	movs	r2, r1
 800218c:	4302      	orrs	r2, r0
 800218e:	d000      	beq.n	8002192 <__aeabi_dsub+0x29e>
 8002190:	e1bb      	b.n	800250a <__aeabi_dsub+0x616>
 8002192:	464a      	mov	r2, r9
 8002194:	0759      	lsls	r1, r3, #29
 8002196:	08d2      	lsrs	r2, r2, #3
 8002198:	430a      	orrs	r2, r1
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	e027      	b.n	80021ee <__aeabi_dsub+0x2fa>
 800219e:	000a      	movs	r2, r1
 80021a0:	4302      	orrs	r2, r0
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x2b2>
 80021a4:	e174      	b.n	8002490 <__aeabi_dsub+0x59c>
 80021a6:	0022      	movs	r2, r4
 80021a8:	3a01      	subs	r2, #1
 80021aa:	2c01      	cmp	r4, #1
 80021ac:	d005      	beq.n	80021ba <__aeabi_dsub+0x2c6>
 80021ae:	4c1e      	ldr	r4, [pc, #120]	; (8002228 <__aeabi_dsub+0x334>)
 80021b0:	45a4      	cmp	ip, r4
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x2c2>
 80021b4:	e094      	b.n	80022e0 <__aeabi_dsub+0x3ec>
 80021b6:	4694      	mov	ip, r2
 80021b8:	e759      	b.n	800206e <__aeabi_dsub+0x17a>
 80021ba:	4448      	add	r0, r9
 80021bc:	4548      	cmp	r0, r9
 80021be:	4192      	sbcs	r2, r2
 80021c0:	185b      	adds	r3, r3, r1
 80021c2:	4698      	mov	r8, r3
 80021c4:	0004      	movs	r4, r0
 80021c6:	4252      	negs	r2, r2
 80021c8:	4490      	add	r8, r2
 80021ca:	4643      	mov	r3, r8
 80021cc:	2602      	movs	r6, #2
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	d500      	bpl.n	80021d4 <__aeabi_dsub+0x2e0>
 80021d2:	e0c4      	b.n	800235e <__aeabi_dsub+0x46a>
 80021d4:	3e01      	subs	r6, #1
 80021d6:	0763      	lsls	r3, r4, #29
 80021d8:	d000      	beq.n	80021dc <__aeabi_dsub+0x2e8>
 80021da:	e711      	b.n	8002000 <__aeabi_dsub+0x10c>
 80021dc:	4643      	mov	r3, r8
 80021de:	46b4      	mov	ip, r6
 80021e0:	0759      	lsls	r1, r3, #29
 80021e2:	08e2      	lsrs	r2, r4, #3
 80021e4:	430a      	orrs	r2, r1
 80021e6:	08db      	lsrs	r3, r3, #3
 80021e8:	490f      	ldr	r1, [pc, #60]	; (8002228 <__aeabi_dsub+0x334>)
 80021ea:	458c      	cmp	ip, r1
 80021ec:	d040      	beq.n	8002270 <__aeabi_dsub+0x37c>
 80021ee:	4661      	mov	r1, ip
 80021f0:	031b      	lsls	r3, r3, #12
 80021f2:	0549      	lsls	r1, r1, #21
 80021f4:	0b1b      	lsrs	r3, r3, #12
 80021f6:	0d49      	lsrs	r1, r1, #21
 80021f8:	e720      	b.n	800203c <__aeabi_dsub+0x148>
 80021fa:	4301      	orrs	r1, r0
 80021fc:	000c      	movs	r4, r1
 80021fe:	1e61      	subs	r1, r4, #1
 8002200:	418c      	sbcs	r4, r1
 8002202:	444c      	add	r4, r9
 8002204:	454c      	cmp	r4, r9
 8002206:	4192      	sbcs	r2, r2
 8002208:	4252      	negs	r2, r2
 800220a:	4690      	mov	r8, r2
 800220c:	4498      	add	r8, r3
 800220e:	4643      	mov	r3, r8
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	d5e0      	bpl.n	80021d6 <__aeabi_dsub+0x2e2>
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <__aeabi_dsub+0x334>)
 8002216:	3601      	adds	r6, #1
 8002218:	429e      	cmp	r6, r3
 800221a:	d000      	beq.n	800221e <__aeabi_dsub+0x32a>
 800221c:	e09f      	b.n	800235e <__aeabi_dsub+0x46a>
 800221e:	0031      	movs	r1, r6
 8002220:	2300      	movs	r3, #0
 8002222:	2200      	movs	r2, #0
 8002224:	e70a      	b.n	800203c <__aeabi_dsub+0x148>
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	000007ff 	.word	0x000007ff
 800222c:	ff7fffff 	.word	0xff7fffff
 8002230:	fffff801 	.word	0xfffff801
 8002234:	000007fe 	.word	0x000007fe
 8002238:	2a00      	cmp	r2, #0
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x34a>
 800223c:	e160      	b.n	8002500 <__aeabi_dsub+0x60c>
 800223e:	000a      	movs	r2, r1
 8002240:	4302      	orrs	r2, r0
 8002242:	d04d      	beq.n	80022e0 <__aeabi_dsub+0x3ec>
 8002244:	464a      	mov	r2, r9
 8002246:	075c      	lsls	r4, r3, #29
 8002248:	08d2      	lsrs	r2, r2, #3
 800224a:	4322      	orrs	r2, r4
 800224c:	2480      	movs	r4, #128	; 0x80
 800224e:	08db      	lsrs	r3, r3, #3
 8002250:	0324      	lsls	r4, r4, #12
 8002252:	4223      	tst	r3, r4
 8002254:	d007      	beq.n	8002266 <__aeabi_dsub+0x372>
 8002256:	08ce      	lsrs	r6, r1, #3
 8002258:	4226      	tst	r6, r4
 800225a:	d104      	bne.n	8002266 <__aeabi_dsub+0x372>
 800225c:	465d      	mov	r5, fp
 800225e:	0033      	movs	r3, r6
 8002260:	08c2      	lsrs	r2, r0, #3
 8002262:	0749      	lsls	r1, r1, #29
 8002264:	430a      	orrs	r2, r1
 8002266:	0f51      	lsrs	r1, r2, #29
 8002268:	00d2      	lsls	r2, r2, #3
 800226a:	08d2      	lsrs	r2, r2, #3
 800226c:	0749      	lsls	r1, r1, #29
 800226e:	430a      	orrs	r2, r1
 8002270:	0011      	movs	r1, r2
 8002272:	4319      	orrs	r1, r3
 8002274:	d100      	bne.n	8002278 <__aeabi_dsub+0x384>
 8002276:	e1c8      	b.n	800260a <__aeabi_dsub+0x716>
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	0309      	lsls	r1, r1, #12
 800227c:	430b      	orrs	r3, r1
 800227e:	031b      	lsls	r3, r3, #12
 8002280:	49d5      	ldr	r1, [pc, #852]	; (80025d8 <__aeabi_dsub+0x6e4>)
 8002282:	0b1b      	lsrs	r3, r3, #12
 8002284:	e6da      	b.n	800203c <__aeabi_dsub+0x148>
 8002286:	49d5      	ldr	r1, [pc, #852]	; (80025dc <__aeabi_dsub+0x6e8>)
 8002288:	1ab6      	subs	r6, r6, r2
 800228a:	400b      	ands	r3, r1
 800228c:	4698      	mov	r8, r3
 800228e:	e6b5      	b.n	8001ffc <__aeabi_dsub+0x108>
 8002290:	0020      	movs	r0, r4
 8002292:	f000 fb3b 	bl	800290c <__clzsi2>
 8002296:	0002      	movs	r2, r0
 8002298:	3218      	adds	r2, #24
 800229a:	2a1f      	cmp	r2, #31
 800229c:	dc00      	bgt.n	80022a0 <__aeabi_dsub+0x3ac>
 800229e:	e68f      	b.n	8001fc0 <__aeabi_dsub+0xcc>
 80022a0:	0023      	movs	r3, r4
 80022a2:	3808      	subs	r0, #8
 80022a4:	4083      	lsls	r3, r0
 80022a6:	2400      	movs	r4, #0
 80022a8:	e692      	b.n	8001fd0 <__aeabi_dsub+0xdc>
 80022aa:	4308      	orrs	r0, r1
 80022ac:	0002      	movs	r2, r0
 80022ae:	1e50      	subs	r0, r2, #1
 80022b0:	4182      	sbcs	r2, r0
 80022b2:	e66d      	b.n	8001f90 <__aeabi_dsub+0x9c>
 80022b4:	4cca      	ldr	r4, [pc, #808]	; (80025e0 <__aeabi_dsub+0x6ec>)
 80022b6:	1c72      	adds	r2, r6, #1
 80022b8:	4222      	tst	r2, r4
 80022ba:	d000      	beq.n	80022be <__aeabi_dsub+0x3ca>
 80022bc:	e0ad      	b.n	800241a <__aeabi_dsub+0x526>
 80022be:	464a      	mov	r2, r9
 80022c0:	431a      	orrs	r2, r3
 80022c2:	2e00      	cmp	r6, #0
 80022c4:	d1b8      	bne.n	8002238 <__aeabi_dsub+0x344>
 80022c6:	2a00      	cmp	r2, #0
 80022c8:	d100      	bne.n	80022cc <__aeabi_dsub+0x3d8>
 80022ca:	e158      	b.n	800257e <__aeabi_dsub+0x68a>
 80022cc:	000a      	movs	r2, r1
 80022ce:	4302      	orrs	r2, r0
 80022d0:	d000      	beq.n	80022d4 <__aeabi_dsub+0x3e0>
 80022d2:	e159      	b.n	8002588 <__aeabi_dsub+0x694>
 80022d4:	464a      	mov	r2, r9
 80022d6:	0759      	lsls	r1, r3, #29
 80022d8:	08d2      	lsrs	r2, r2, #3
 80022da:	430a      	orrs	r2, r1
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	e786      	b.n	80021ee <__aeabi_dsub+0x2fa>
 80022e0:	464a      	mov	r2, r9
 80022e2:	0759      	lsls	r1, r3, #29
 80022e4:	08d2      	lsrs	r2, r2, #3
 80022e6:	430a      	orrs	r2, r1
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	e7c1      	b.n	8002270 <__aeabi_dsub+0x37c>
 80022ec:	4dba      	ldr	r5, [pc, #744]	; (80025d8 <__aeabi_dsub+0x6e4>)
 80022ee:	42aa      	cmp	r2, r5
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x400>
 80022f2:	e11e      	b.n	8002532 <__aeabi_dsub+0x63e>
 80022f4:	2580      	movs	r5, #128	; 0x80
 80022f6:	042d      	lsls	r5, r5, #16
 80022f8:	432b      	orrs	r3, r5
 80022fa:	4664      	mov	r4, ip
 80022fc:	2c38      	cmp	r4, #56	; 0x38
 80022fe:	dc5d      	bgt.n	80023bc <__aeabi_dsub+0x4c8>
 8002300:	2c1f      	cmp	r4, #31
 8002302:	dd00      	ble.n	8002306 <__aeabi_dsub+0x412>
 8002304:	e0d0      	b.n	80024a8 <__aeabi_dsub+0x5b4>
 8002306:	2520      	movs	r5, #32
 8002308:	4667      	mov	r7, ip
 800230a:	1b2d      	subs	r5, r5, r4
 800230c:	464e      	mov	r6, r9
 800230e:	001c      	movs	r4, r3
 8002310:	40fe      	lsrs	r6, r7
 8002312:	40ac      	lsls	r4, r5
 8002314:	4334      	orrs	r4, r6
 8002316:	464e      	mov	r6, r9
 8002318:	40ae      	lsls	r6, r5
 800231a:	0035      	movs	r5, r6
 800231c:	40fb      	lsrs	r3, r7
 800231e:	1e6e      	subs	r6, r5, #1
 8002320:	41b5      	sbcs	r5, r6
 8002322:	1ac9      	subs	r1, r1, r3
 8002324:	432c      	orrs	r4, r5
 8002326:	e04e      	b.n	80023c6 <__aeabi_dsub+0x4d2>
 8002328:	464a      	mov	r2, r9
 800232a:	1a14      	subs	r4, r2, r0
 800232c:	45a1      	cmp	r9, r4
 800232e:	4192      	sbcs	r2, r2
 8002330:	4252      	negs	r2, r2
 8002332:	4690      	mov	r8, r2
 8002334:	1a5f      	subs	r7, r3, r1
 8002336:	003a      	movs	r2, r7
 8002338:	4647      	mov	r7, r8
 800233a:	1bd2      	subs	r2, r2, r7
 800233c:	4690      	mov	r8, r2
 800233e:	0212      	lsls	r2, r2, #8
 8002340:	d500      	bpl.n	8002344 <__aeabi_dsub+0x450>
 8002342:	e08b      	b.n	800245c <__aeabi_dsub+0x568>
 8002344:	4642      	mov	r2, r8
 8002346:	4322      	orrs	r2, r4
 8002348:	d000      	beq.n	800234c <__aeabi_dsub+0x458>
 800234a:	e630      	b.n	8001fae <__aeabi_dsub+0xba>
 800234c:	2300      	movs	r3, #0
 800234e:	2500      	movs	r5, #0
 8002350:	e74d      	b.n	80021ee <__aeabi_dsub+0x2fa>
 8002352:	464a      	mov	r2, r9
 8002354:	0759      	lsls	r1, r3, #29
 8002356:	08d2      	lsrs	r2, r2, #3
 8002358:	430a      	orrs	r2, r1
 800235a:	08db      	lsrs	r3, r3, #3
 800235c:	e744      	b.n	80021e8 <__aeabi_dsub+0x2f4>
 800235e:	4642      	mov	r2, r8
 8002360:	4b9e      	ldr	r3, [pc, #632]	; (80025dc <__aeabi_dsub+0x6e8>)
 8002362:	0861      	lsrs	r1, r4, #1
 8002364:	401a      	ands	r2, r3
 8002366:	0013      	movs	r3, r2
 8002368:	2201      	movs	r2, #1
 800236a:	4014      	ands	r4, r2
 800236c:	430c      	orrs	r4, r1
 800236e:	07da      	lsls	r2, r3, #31
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	4698      	mov	r8, r3
 8002374:	4314      	orrs	r4, r2
 8002376:	e641      	b.n	8001ffc <__aeabi_dsub+0x108>
 8002378:	001a      	movs	r2, r3
 800237a:	3e1f      	subs	r6, #31
 800237c:	40f2      	lsrs	r2, r6
 800237e:	0016      	movs	r6, r2
 8002380:	2920      	cmp	r1, #32
 8002382:	d003      	beq.n	800238c <__aeabi_dsub+0x498>
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	1a51      	subs	r1, r2, r1
 8002388:	408b      	lsls	r3, r1
 800238a:	431c      	orrs	r4, r3
 800238c:	1e62      	subs	r2, r4, #1
 800238e:	4194      	sbcs	r4, r2
 8002390:	2300      	movs	r3, #0
 8002392:	4334      	orrs	r4, r6
 8002394:	4698      	mov	r8, r3
 8002396:	2600      	movs	r6, #0
 8002398:	e71d      	b.n	80021d6 <__aeabi_dsub+0x2e2>
 800239a:	000c      	movs	r4, r1
 800239c:	3a20      	subs	r2, #32
 800239e:	40d4      	lsrs	r4, r2
 80023a0:	0022      	movs	r2, r4
 80023a2:	4664      	mov	r4, ip
 80023a4:	2c20      	cmp	r4, #32
 80023a6:	d004      	beq.n	80023b2 <__aeabi_dsub+0x4be>
 80023a8:	2740      	movs	r7, #64	; 0x40
 80023aa:	1b3f      	subs	r7, r7, r4
 80023ac:	40b9      	lsls	r1, r7
 80023ae:	4308      	orrs	r0, r1
 80023b0:	4680      	mov	r8, r0
 80023b2:	4644      	mov	r4, r8
 80023b4:	1e61      	subs	r1, r4, #1
 80023b6:	418c      	sbcs	r4, r1
 80023b8:	4322      	orrs	r2, r4
 80023ba:	e5e9      	b.n	8001f90 <__aeabi_dsub+0x9c>
 80023bc:	464c      	mov	r4, r9
 80023be:	4323      	orrs	r3, r4
 80023c0:	001c      	movs	r4, r3
 80023c2:	1e63      	subs	r3, r4, #1
 80023c4:	419c      	sbcs	r4, r3
 80023c6:	1b04      	subs	r4, r0, r4
 80023c8:	42a0      	cmp	r0, r4
 80023ca:	419b      	sbcs	r3, r3
 80023cc:	425b      	negs	r3, r3
 80023ce:	1acb      	subs	r3, r1, r3
 80023d0:	4698      	mov	r8, r3
 80023d2:	465d      	mov	r5, fp
 80023d4:	0016      	movs	r6, r2
 80023d6:	e5e2      	b.n	8001f9e <__aeabi_dsub+0xaa>
 80023d8:	464e      	mov	r6, r9
 80023da:	431e      	orrs	r6, r3
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x4ec>
 80023de:	e0ae      	b.n	800253e <__aeabi_dsub+0x64a>
 80023e0:	1e66      	subs	r6, r4, #1
 80023e2:	2c01      	cmp	r4, #1
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x4f4>
 80023e6:	e0fd      	b.n	80025e4 <__aeabi_dsub+0x6f0>
 80023e8:	4f7b      	ldr	r7, [pc, #492]	; (80025d8 <__aeabi_dsub+0x6e4>)
 80023ea:	42bc      	cmp	r4, r7
 80023ec:	d100      	bne.n	80023f0 <__aeabi_dsub+0x4fc>
 80023ee:	e107      	b.n	8002600 <__aeabi_dsub+0x70c>
 80023f0:	46b4      	mov	ip, r6
 80023f2:	e69b      	b.n	800212c <__aeabi_dsub+0x238>
 80023f4:	4664      	mov	r4, ip
 80023f6:	2220      	movs	r2, #32
 80023f8:	1b12      	subs	r2, r2, r4
 80023fa:	000c      	movs	r4, r1
 80023fc:	4094      	lsls	r4, r2
 80023fe:	0007      	movs	r7, r0
 8002400:	4090      	lsls	r0, r2
 8002402:	46a0      	mov	r8, r4
 8002404:	4664      	mov	r4, ip
 8002406:	1e42      	subs	r2, r0, #1
 8002408:	4190      	sbcs	r0, r2
 800240a:	4662      	mov	r2, ip
 800240c:	40e7      	lsrs	r7, r4
 800240e:	4644      	mov	r4, r8
 8002410:	40d1      	lsrs	r1, r2
 8002412:	433c      	orrs	r4, r7
 8002414:	4304      	orrs	r4, r0
 8002416:	185b      	adds	r3, r3, r1
 8002418:	e6f3      	b.n	8002202 <__aeabi_dsub+0x30e>
 800241a:	4c6f      	ldr	r4, [pc, #444]	; (80025d8 <__aeabi_dsub+0x6e4>)
 800241c:	42a2      	cmp	r2, r4
 800241e:	d100      	bne.n	8002422 <__aeabi_dsub+0x52e>
 8002420:	e0d5      	b.n	80025ce <__aeabi_dsub+0x6da>
 8002422:	4448      	add	r0, r9
 8002424:	185b      	adds	r3, r3, r1
 8002426:	4548      	cmp	r0, r9
 8002428:	4189      	sbcs	r1, r1
 800242a:	4249      	negs	r1, r1
 800242c:	185b      	adds	r3, r3, r1
 800242e:	07dc      	lsls	r4, r3, #31
 8002430:	0840      	lsrs	r0, r0, #1
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	4698      	mov	r8, r3
 8002436:	0016      	movs	r6, r2
 8002438:	4304      	orrs	r4, r0
 800243a:	e6cc      	b.n	80021d6 <__aeabi_dsub+0x2e2>
 800243c:	2a00      	cmp	r2, #0
 800243e:	d000      	beq.n	8002442 <__aeabi_dsub+0x54e>
 8002440:	e082      	b.n	8002548 <__aeabi_dsub+0x654>
 8002442:	000a      	movs	r2, r1
 8002444:	4302      	orrs	r2, r0
 8002446:	d140      	bne.n	80024ca <__aeabi_dsub+0x5d6>
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	2500      	movs	r5, #0
 800244c:	031b      	lsls	r3, r3, #12
 800244e:	e713      	b.n	8002278 <__aeabi_dsub+0x384>
 8002450:	074b      	lsls	r3, r1, #29
 8002452:	08c2      	lsrs	r2, r0, #3
 8002454:	431a      	orrs	r2, r3
 8002456:	465d      	mov	r5, fp
 8002458:	08cb      	lsrs	r3, r1, #3
 800245a:	e6c5      	b.n	80021e8 <__aeabi_dsub+0x2f4>
 800245c:	464a      	mov	r2, r9
 800245e:	1a84      	subs	r4, r0, r2
 8002460:	42a0      	cmp	r0, r4
 8002462:	4192      	sbcs	r2, r2
 8002464:	1acb      	subs	r3, r1, r3
 8002466:	4252      	negs	r2, r2
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	4698      	mov	r8, r3
 800246c:	465d      	mov	r5, fp
 800246e:	e59e      	b.n	8001fae <__aeabi_dsub+0xba>
 8002470:	464a      	mov	r2, r9
 8002472:	0759      	lsls	r1, r3, #29
 8002474:	08d2      	lsrs	r2, r2, #3
 8002476:	430a      	orrs	r2, r1
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	e6f9      	b.n	8002270 <__aeabi_dsub+0x37c>
 800247c:	464a      	mov	r2, r9
 800247e:	1a14      	subs	r4, r2, r0
 8002480:	45a1      	cmp	r9, r4
 8002482:	4192      	sbcs	r2, r2
 8002484:	1a5b      	subs	r3, r3, r1
 8002486:	4252      	negs	r2, r2
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	4698      	mov	r8, r3
 800248c:	2601      	movs	r6, #1
 800248e:	e586      	b.n	8001f9e <__aeabi_dsub+0xaa>
 8002490:	464a      	mov	r2, r9
 8002492:	0759      	lsls	r1, r3, #29
 8002494:	08d2      	lsrs	r2, r2, #3
 8002496:	430a      	orrs	r2, r1
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	e6a5      	b.n	80021e8 <__aeabi_dsub+0x2f4>
 800249c:	464c      	mov	r4, r9
 800249e:	4323      	orrs	r3, r4
 80024a0:	001c      	movs	r4, r3
 80024a2:	1e63      	subs	r3, r4, #1
 80024a4:	419c      	sbcs	r4, r3
 80024a6:	e65b      	b.n	8002160 <__aeabi_dsub+0x26c>
 80024a8:	4665      	mov	r5, ip
 80024aa:	001e      	movs	r6, r3
 80024ac:	3d20      	subs	r5, #32
 80024ae:	40ee      	lsrs	r6, r5
 80024b0:	2c20      	cmp	r4, #32
 80024b2:	d005      	beq.n	80024c0 <__aeabi_dsub+0x5cc>
 80024b4:	2540      	movs	r5, #64	; 0x40
 80024b6:	1b2d      	subs	r5, r5, r4
 80024b8:	40ab      	lsls	r3, r5
 80024ba:	464c      	mov	r4, r9
 80024bc:	431c      	orrs	r4, r3
 80024be:	46a2      	mov	sl, r4
 80024c0:	4654      	mov	r4, sl
 80024c2:	1e63      	subs	r3, r4, #1
 80024c4:	419c      	sbcs	r4, r3
 80024c6:	4334      	orrs	r4, r6
 80024c8:	e77d      	b.n	80023c6 <__aeabi_dsub+0x4d2>
 80024ca:	074b      	lsls	r3, r1, #29
 80024cc:	08c2      	lsrs	r2, r0, #3
 80024ce:	431a      	orrs	r2, r3
 80024d0:	465d      	mov	r5, fp
 80024d2:	08cb      	lsrs	r3, r1, #3
 80024d4:	e6cc      	b.n	8002270 <__aeabi_dsub+0x37c>
 80024d6:	000a      	movs	r2, r1
 80024d8:	4302      	orrs	r2, r0
 80024da:	d100      	bne.n	80024de <__aeabi_dsub+0x5ea>
 80024dc:	e736      	b.n	800234c <__aeabi_dsub+0x458>
 80024de:	074b      	lsls	r3, r1, #29
 80024e0:	08c2      	lsrs	r2, r0, #3
 80024e2:	431a      	orrs	r2, r3
 80024e4:	465d      	mov	r5, fp
 80024e6:	08cb      	lsrs	r3, r1, #3
 80024e8:	e681      	b.n	80021ee <__aeabi_dsub+0x2fa>
 80024ea:	464a      	mov	r2, r9
 80024ec:	1a84      	subs	r4, r0, r2
 80024ee:	42a0      	cmp	r0, r4
 80024f0:	4192      	sbcs	r2, r2
 80024f2:	1acb      	subs	r3, r1, r3
 80024f4:	4252      	negs	r2, r2
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	4698      	mov	r8, r3
 80024fa:	465d      	mov	r5, fp
 80024fc:	2601      	movs	r6, #1
 80024fe:	e54e      	b.n	8001f9e <__aeabi_dsub+0xaa>
 8002500:	074b      	lsls	r3, r1, #29
 8002502:	08c2      	lsrs	r2, r0, #3
 8002504:	431a      	orrs	r2, r3
 8002506:	08cb      	lsrs	r3, r1, #3
 8002508:	e6b2      	b.n	8002270 <__aeabi_dsub+0x37c>
 800250a:	464a      	mov	r2, r9
 800250c:	1a14      	subs	r4, r2, r0
 800250e:	45a1      	cmp	r9, r4
 8002510:	4192      	sbcs	r2, r2
 8002512:	1a5f      	subs	r7, r3, r1
 8002514:	4252      	negs	r2, r2
 8002516:	1aba      	subs	r2, r7, r2
 8002518:	4690      	mov	r8, r2
 800251a:	0212      	lsls	r2, r2, #8
 800251c:	d56b      	bpl.n	80025f6 <__aeabi_dsub+0x702>
 800251e:	464a      	mov	r2, r9
 8002520:	1a84      	subs	r4, r0, r2
 8002522:	42a0      	cmp	r0, r4
 8002524:	4192      	sbcs	r2, r2
 8002526:	1acb      	subs	r3, r1, r3
 8002528:	4252      	negs	r2, r2
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	4698      	mov	r8, r3
 800252e:	465d      	mov	r5, fp
 8002530:	e564      	b.n	8001ffc <__aeabi_dsub+0x108>
 8002532:	074b      	lsls	r3, r1, #29
 8002534:	08c2      	lsrs	r2, r0, #3
 8002536:	431a      	orrs	r2, r3
 8002538:	465d      	mov	r5, fp
 800253a:	08cb      	lsrs	r3, r1, #3
 800253c:	e698      	b.n	8002270 <__aeabi_dsub+0x37c>
 800253e:	074b      	lsls	r3, r1, #29
 8002540:	08c2      	lsrs	r2, r0, #3
 8002542:	431a      	orrs	r2, r3
 8002544:	08cb      	lsrs	r3, r1, #3
 8002546:	e64f      	b.n	80021e8 <__aeabi_dsub+0x2f4>
 8002548:	000a      	movs	r2, r1
 800254a:	4302      	orrs	r2, r0
 800254c:	d090      	beq.n	8002470 <__aeabi_dsub+0x57c>
 800254e:	464a      	mov	r2, r9
 8002550:	075c      	lsls	r4, r3, #29
 8002552:	08d2      	lsrs	r2, r2, #3
 8002554:	4314      	orrs	r4, r2
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	0312      	lsls	r2, r2, #12
 800255c:	4213      	tst	r3, r2
 800255e:	d008      	beq.n	8002572 <__aeabi_dsub+0x67e>
 8002560:	08ce      	lsrs	r6, r1, #3
 8002562:	4216      	tst	r6, r2
 8002564:	d105      	bne.n	8002572 <__aeabi_dsub+0x67e>
 8002566:	08c0      	lsrs	r0, r0, #3
 8002568:	0749      	lsls	r1, r1, #29
 800256a:	4308      	orrs	r0, r1
 800256c:	0004      	movs	r4, r0
 800256e:	465d      	mov	r5, fp
 8002570:	0033      	movs	r3, r6
 8002572:	0f61      	lsrs	r1, r4, #29
 8002574:	00e2      	lsls	r2, r4, #3
 8002576:	0749      	lsls	r1, r1, #29
 8002578:	08d2      	lsrs	r2, r2, #3
 800257a:	430a      	orrs	r2, r1
 800257c:	e678      	b.n	8002270 <__aeabi_dsub+0x37c>
 800257e:	074b      	lsls	r3, r1, #29
 8002580:	08c2      	lsrs	r2, r0, #3
 8002582:	431a      	orrs	r2, r3
 8002584:	08cb      	lsrs	r3, r1, #3
 8002586:	e632      	b.n	80021ee <__aeabi_dsub+0x2fa>
 8002588:	4448      	add	r0, r9
 800258a:	185b      	adds	r3, r3, r1
 800258c:	4548      	cmp	r0, r9
 800258e:	4192      	sbcs	r2, r2
 8002590:	4698      	mov	r8, r3
 8002592:	4252      	negs	r2, r2
 8002594:	4490      	add	r8, r2
 8002596:	4643      	mov	r3, r8
 8002598:	0004      	movs	r4, r0
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	d400      	bmi.n	80025a0 <__aeabi_dsub+0x6ac>
 800259e:	e61a      	b.n	80021d6 <__aeabi_dsub+0x2e2>
 80025a0:	4642      	mov	r2, r8
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <__aeabi_dsub+0x6e8>)
 80025a4:	2601      	movs	r6, #1
 80025a6:	401a      	ands	r2, r3
 80025a8:	4690      	mov	r8, r2
 80025aa:	e614      	b.n	80021d6 <__aeabi_dsub+0x2e2>
 80025ac:	4666      	mov	r6, ip
 80025ae:	001f      	movs	r7, r3
 80025b0:	3e20      	subs	r6, #32
 80025b2:	40f7      	lsrs	r7, r6
 80025b4:	2c20      	cmp	r4, #32
 80025b6:	d005      	beq.n	80025c4 <__aeabi_dsub+0x6d0>
 80025b8:	2640      	movs	r6, #64	; 0x40
 80025ba:	1b36      	subs	r6, r6, r4
 80025bc:	40b3      	lsls	r3, r6
 80025be:	464c      	mov	r4, r9
 80025c0:	431c      	orrs	r4, r3
 80025c2:	46a2      	mov	sl, r4
 80025c4:	4654      	mov	r4, sl
 80025c6:	1e63      	subs	r3, r4, #1
 80025c8:	419c      	sbcs	r4, r3
 80025ca:	433c      	orrs	r4, r7
 80025cc:	e5c8      	b.n	8002160 <__aeabi_dsub+0x26c>
 80025ce:	0011      	movs	r1, r2
 80025d0:	2300      	movs	r3, #0
 80025d2:	2200      	movs	r2, #0
 80025d4:	e532      	b.n	800203c <__aeabi_dsub+0x148>
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	000007ff 	.word	0x000007ff
 80025dc:	ff7fffff 	.word	0xff7fffff
 80025e0:	000007fe 	.word	0x000007fe
 80025e4:	464a      	mov	r2, r9
 80025e6:	1814      	adds	r4, r2, r0
 80025e8:	4284      	cmp	r4, r0
 80025ea:	4192      	sbcs	r2, r2
 80025ec:	185b      	adds	r3, r3, r1
 80025ee:	4698      	mov	r8, r3
 80025f0:	4252      	negs	r2, r2
 80025f2:	4490      	add	r8, r2
 80025f4:	e5e9      	b.n	80021ca <__aeabi_dsub+0x2d6>
 80025f6:	4642      	mov	r2, r8
 80025f8:	4322      	orrs	r2, r4
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x70a>
 80025fc:	e6a6      	b.n	800234c <__aeabi_dsub+0x458>
 80025fe:	e5ea      	b.n	80021d6 <__aeabi_dsub+0x2e2>
 8002600:	074b      	lsls	r3, r1, #29
 8002602:	08c2      	lsrs	r2, r0, #3
 8002604:	431a      	orrs	r2, r3
 8002606:	08cb      	lsrs	r3, r1, #3
 8002608:	e632      	b.n	8002270 <__aeabi_dsub+0x37c>
 800260a:	2200      	movs	r2, #0
 800260c:	4901      	ldr	r1, [pc, #4]	; (8002614 <__aeabi_dsub+0x720>)
 800260e:	0013      	movs	r3, r2
 8002610:	e514      	b.n	800203c <__aeabi_dsub+0x148>
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	000007ff 	.word	0x000007ff

08002618 <__aeabi_dcmpun>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	0005      	movs	r5, r0
 800261c:	480c      	ldr	r0, [pc, #48]	; (8002650 <__aeabi_dcmpun+0x38>)
 800261e:	030c      	lsls	r4, r1, #12
 8002620:	0016      	movs	r6, r2
 8002622:	0049      	lsls	r1, r1, #1
 8002624:	031a      	lsls	r2, r3, #12
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	0b24      	lsrs	r4, r4, #12
 800262a:	0d49      	lsrs	r1, r1, #21
 800262c:	0b12      	lsrs	r2, r2, #12
 800262e:	0d5b      	lsrs	r3, r3, #21
 8002630:	4281      	cmp	r1, r0
 8002632:	d008      	beq.n	8002646 <__aeabi_dcmpun+0x2e>
 8002634:	4906      	ldr	r1, [pc, #24]	; (8002650 <__aeabi_dcmpun+0x38>)
 8002636:	2000      	movs	r0, #0
 8002638:	428b      	cmp	r3, r1
 800263a:	d103      	bne.n	8002644 <__aeabi_dcmpun+0x2c>
 800263c:	4332      	orrs	r2, r6
 800263e:	0010      	movs	r0, r2
 8002640:	1e42      	subs	r2, r0, #1
 8002642:	4190      	sbcs	r0, r2
 8002644:	bd70      	pop	{r4, r5, r6, pc}
 8002646:	2001      	movs	r0, #1
 8002648:	432c      	orrs	r4, r5
 800264a:	d1fb      	bne.n	8002644 <__aeabi_dcmpun+0x2c>
 800264c:	e7f2      	b.n	8002634 <__aeabi_dcmpun+0x1c>
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	000007ff 	.word	0x000007ff

08002654 <__aeabi_d2iz>:
 8002654:	000a      	movs	r2, r1
 8002656:	b530      	push	{r4, r5, lr}
 8002658:	4c13      	ldr	r4, [pc, #76]	; (80026a8 <__aeabi_d2iz+0x54>)
 800265a:	0053      	lsls	r3, r2, #1
 800265c:	0309      	lsls	r1, r1, #12
 800265e:	0005      	movs	r5, r0
 8002660:	0b09      	lsrs	r1, r1, #12
 8002662:	2000      	movs	r0, #0
 8002664:	0d5b      	lsrs	r3, r3, #21
 8002666:	0fd2      	lsrs	r2, r2, #31
 8002668:	42a3      	cmp	r3, r4
 800266a:	dd04      	ble.n	8002676 <__aeabi_d2iz+0x22>
 800266c:	480f      	ldr	r0, [pc, #60]	; (80026ac <__aeabi_d2iz+0x58>)
 800266e:	4283      	cmp	r3, r0
 8002670:	dd02      	ble.n	8002678 <__aeabi_d2iz+0x24>
 8002672:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <__aeabi_d2iz+0x5c>)
 8002674:	18d0      	adds	r0, r2, r3
 8002676:	bd30      	pop	{r4, r5, pc}
 8002678:	2080      	movs	r0, #128	; 0x80
 800267a:	0340      	lsls	r0, r0, #13
 800267c:	4301      	orrs	r1, r0
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <__aeabi_d2iz+0x60>)
 8002680:	1ac0      	subs	r0, r0, r3
 8002682:	281f      	cmp	r0, #31
 8002684:	dd08      	ble.n	8002698 <__aeabi_d2iz+0x44>
 8002686:	480c      	ldr	r0, [pc, #48]	; (80026b8 <__aeabi_d2iz+0x64>)
 8002688:	1ac3      	subs	r3, r0, r3
 800268a:	40d9      	lsrs	r1, r3
 800268c:	000b      	movs	r3, r1
 800268e:	4258      	negs	r0, r3
 8002690:	2a00      	cmp	r2, #0
 8002692:	d1f0      	bne.n	8002676 <__aeabi_d2iz+0x22>
 8002694:	0018      	movs	r0, r3
 8002696:	e7ee      	b.n	8002676 <__aeabi_d2iz+0x22>
 8002698:	4c08      	ldr	r4, [pc, #32]	; (80026bc <__aeabi_d2iz+0x68>)
 800269a:	40c5      	lsrs	r5, r0
 800269c:	46a4      	mov	ip, r4
 800269e:	4463      	add	r3, ip
 80026a0:	4099      	lsls	r1, r3
 80026a2:	000b      	movs	r3, r1
 80026a4:	432b      	orrs	r3, r5
 80026a6:	e7f2      	b.n	800268e <__aeabi_d2iz+0x3a>
 80026a8:	000003fe 	.word	0x000003fe
 80026ac:	0000041d 	.word	0x0000041d
 80026b0:	7fffffff 	.word	0x7fffffff
 80026b4:	00000433 	.word	0x00000433
 80026b8:	00000413 	.word	0x00000413
 80026bc:	fffffbed 	.word	0xfffffbed

080026c0 <__aeabi_i2d>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d016      	beq.n	80026f4 <__aeabi_i2d+0x34>
 80026c6:	17c3      	asrs	r3, r0, #31
 80026c8:	18c5      	adds	r5, r0, r3
 80026ca:	405d      	eors	r5, r3
 80026cc:	0fc4      	lsrs	r4, r0, #31
 80026ce:	0028      	movs	r0, r5
 80026d0:	f000 f91c 	bl	800290c <__clzsi2>
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <__aeabi_i2d+0x5c>)
 80026d6:	1a12      	subs	r2, r2, r0
 80026d8:	280a      	cmp	r0, #10
 80026da:	dc16      	bgt.n	800270a <__aeabi_i2d+0x4a>
 80026dc:	0003      	movs	r3, r0
 80026de:	002e      	movs	r6, r5
 80026e0:	3315      	adds	r3, #21
 80026e2:	409e      	lsls	r6, r3
 80026e4:	230b      	movs	r3, #11
 80026e6:	1a18      	subs	r0, r3, r0
 80026e8:	40c5      	lsrs	r5, r0
 80026ea:	0553      	lsls	r3, r2, #21
 80026ec:	032d      	lsls	r5, r5, #12
 80026ee:	0b2d      	lsrs	r5, r5, #12
 80026f0:	0d5b      	lsrs	r3, r3, #21
 80026f2:	e003      	b.n	80026fc <__aeabi_i2d+0x3c>
 80026f4:	2400      	movs	r4, #0
 80026f6:	2300      	movs	r3, #0
 80026f8:	2500      	movs	r5, #0
 80026fa:	2600      	movs	r6, #0
 80026fc:	051b      	lsls	r3, r3, #20
 80026fe:	432b      	orrs	r3, r5
 8002700:	07e4      	lsls	r4, r4, #31
 8002702:	4323      	orrs	r3, r4
 8002704:	0030      	movs	r0, r6
 8002706:	0019      	movs	r1, r3
 8002708:	bd70      	pop	{r4, r5, r6, pc}
 800270a:	380b      	subs	r0, #11
 800270c:	4085      	lsls	r5, r0
 800270e:	0553      	lsls	r3, r2, #21
 8002710:	032d      	lsls	r5, r5, #12
 8002712:	2600      	movs	r6, #0
 8002714:	0b2d      	lsrs	r5, r5, #12
 8002716:	0d5b      	lsrs	r3, r3, #21
 8002718:	e7f0      	b.n	80026fc <__aeabi_i2d+0x3c>
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	0000041e 	.word	0x0000041e

08002720 <__aeabi_ui2d>:
 8002720:	b510      	push	{r4, lr}
 8002722:	1e04      	subs	r4, r0, #0
 8002724:	d010      	beq.n	8002748 <__aeabi_ui2d+0x28>
 8002726:	f000 f8f1 	bl	800290c <__clzsi2>
 800272a:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <__aeabi_ui2d+0x48>)
 800272c:	1a1b      	subs	r3, r3, r0
 800272e:	280a      	cmp	r0, #10
 8002730:	dc11      	bgt.n	8002756 <__aeabi_ui2d+0x36>
 8002732:	220b      	movs	r2, #11
 8002734:	0021      	movs	r1, r4
 8002736:	1a12      	subs	r2, r2, r0
 8002738:	40d1      	lsrs	r1, r2
 800273a:	3015      	adds	r0, #21
 800273c:	030a      	lsls	r2, r1, #12
 800273e:	055b      	lsls	r3, r3, #21
 8002740:	4084      	lsls	r4, r0
 8002742:	0b12      	lsrs	r2, r2, #12
 8002744:	0d5b      	lsrs	r3, r3, #21
 8002746:	e001      	b.n	800274c <__aeabi_ui2d+0x2c>
 8002748:	2300      	movs	r3, #0
 800274a:	2200      	movs	r2, #0
 800274c:	051b      	lsls	r3, r3, #20
 800274e:	4313      	orrs	r3, r2
 8002750:	0020      	movs	r0, r4
 8002752:	0019      	movs	r1, r3
 8002754:	bd10      	pop	{r4, pc}
 8002756:	0022      	movs	r2, r4
 8002758:	380b      	subs	r0, #11
 800275a:	4082      	lsls	r2, r0
 800275c:	055b      	lsls	r3, r3, #21
 800275e:	0312      	lsls	r2, r2, #12
 8002760:	2400      	movs	r4, #0
 8002762:	0b12      	lsrs	r2, r2, #12
 8002764:	0d5b      	lsrs	r3, r3, #21
 8002766:	e7f1      	b.n	800274c <__aeabi_ui2d+0x2c>
 8002768:	0000041e 	.word	0x0000041e

0800276c <__aeabi_f2d>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	0043      	lsls	r3, r0, #1
 8002770:	0246      	lsls	r6, r0, #9
 8002772:	0fc4      	lsrs	r4, r0, #31
 8002774:	20fe      	movs	r0, #254	; 0xfe
 8002776:	0e1b      	lsrs	r3, r3, #24
 8002778:	1c59      	adds	r1, r3, #1
 800277a:	0a75      	lsrs	r5, r6, #9
 800277c:	4208      	tst	r0, r1
 800277e:	d00c      	beq.n	800279a <__aeabi_f2d+0x2e>
 8002780:	22e0      	movs	r2, #224	; 0xe0
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4694      	mov	ip, r2
 8002786:	076d      	lsls	r5, r5, #29
 8002788:	0b36      	lsrs	r6, r6, #12
 800278a:	4463      	add	r3, ip
 800278c:	051b      	lsls	r3, r3, #20
 800278e:	4333      	orrs	r3, r6
 8002790:	07e4      	lsls	r4, r4, #31
 8002792:	4323      	orrs	r3, r4
 8002794:	0028      	movs	r0, r5
 8002796:	0019      	movs	r1, r3
 8002798:	bd70      	pop	{r4, r5, r6, pc}
 800279a:	2b00      	cmp	r3, #0
 800279c:	d114      	bne.n	80027c8 <__aeabi_f2d+0x5c>
 800279e:	2d00      	cmp	r5, #0
 80027a0:	d01b      	beq.n	80027da <__aeabi_f2d+0x6e>
 80027a2:	0028      	movs	r0, r5
 80027a4:	f000 f8b2 	bl	800290c <__clzsi2>
 80027a8:	280a      	cmp	r0, #10
 80027aa:	dc1c      	bgt.n	80027e6 <__aeabi_f2d+0x7a>
 80027ac:	230b      	movs	r3, #11
 80027ae:	002a      	movs	r2, r5
 80027b0:	1a1b      	subs	r3, r3, r0
 80027b2:	40da      	lsrs	r2, r3
 80027b4:	0003      	movs	r3, r0
 80027b6:	3315      	adds	r3, #21
 80027b8:	409d      	lsls	r5, r3
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <__aeabi_f2d+0x88>)
 80027bc:	0312      	lsls	r2, r2, #12
 80027be:	1a1b      	subs	r3, r3, r0
 80027c0:	055b      	lsls	r3, r3, #21
 80027c2:	0b16      	lsrs	r6, r2, #12
 80027c4:	0d5b      	lsrs	r3, r3, #21
 80027c6:	e7e1      	b.n	800278c <__aeabi_f2d+0x20>
 80027c8:	2d00      	cmp	r5, #0
 80027ca:	d009      	beq.n	80027e0 <__aeabi_f2d+0x74>
 80027cc:	0b32      	lsrs	r2, r6, #12
 80027ce:	2680      	movs	r6, #128	; 0x80
 80027d0:	0336      	lsls	r6, r6, #12
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <__aeabi_f2d+0x8c>)
 80027d4:	076d      	lsls	r5, r5, #29
 80027d6:	4316      	orrs	r6, r2
 80027d8:	e7d8      	b.n	800278c <__aeabi_f2d+0x20>
 80027da:	2300      	movs	r3, #0
 80027dc:	2600      	movs	r6, #0
 80027de:	e7d5      	b.n	800278c <__aeabi_f2d+0x20>
 80027e0:	2600      	movs	r6, #0
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <__aeabi_f2d+0x8c>)
 80027e4:	e7d2      	b.n	800278c <__aeabi_f2d+0x20>
 80027e6:	0003      	movs	r3, r0
 80027e8:	002a      	movs	r2, r5
 80027ea:	3b0b      	subs	r3, #11
 80027ec:	409a      	lsls	r2, r3
 80027ee:	2500      	movs	r5, #0
 80027f0:	e7e3      	b.n	80027ba <__aeabi_f2d+0x4e>
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	00000389 	.word	0x00000389
 80027f8:	000007ff 	.word	0x000007ff

080027fc <__aeabi_d2f>:
 80027fc:	0002      	movs	r2, r0
 80027fe:	004b      	lsls	r3, r1, #1
 8002800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002802:	0308      	lsls	r0, r1, #12
 8002804:	0d5b      	lsrs	r3, r3, #21
 8002806:	4e3d      	ldr	r6, [pc, #244]	; (80028fc <__aeabi_d2f+0x100>)
 8002808:	0fcc      	lsrs	r4, r1, #31
 800280a:	0a40      	lsrs	r0, r0, #9
 800280c:	0f51      	lsrs	r1, r2, #29
 800280e:	1c5f      	adds	r7, r3, #1
 8002810:	4308      	orrs	r0, r1
 8002812:	00d5      	lsls	r5, r2, #3
 8002814:	4237      	tst	r7, r6
 8002816:	d00a      	beq.n	800282e <__aeabi_d2f+0x32>
 8002818:	4939      	ldr	r1, [pc, #228]	; (8002900 <__aeabi_d2f+0x104>)
 800281a:	185e      	adds	r6, r3, r1
 800281c:	2efe      	cmp	r6, #254	; 0xfe
 800281e:	dd16      	ble.n	800284e <__aeabi_d2f+0x52>
 8002820:	23ff      	movs	r3, #255	; 0xff
 8002822:	2100      	movs	r1, #0
 8002824:	05db      	lsls	r3, r3, #23
 8002826:	430b      	orrs	r3, r1
 8002828:	07e0      	lsls	r0, r4, #31
 800282a:	4318      	orrs	r0, r3
 800282c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <__aeabi_d2f+0x44>
 8002832:	4328      	orrs	r0, r5
 8002834:	d027      	beq.n	8002886 <__aeabi_d2f+0x8a>
 8002836:	2105      	movs	r1, #5
 8002838:	0189      	lsls	r1, r1, #6
 800283a:	0a49      	lsrs	r1, r1, #9
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e7f1      	b.n	8002824 <__aeabi_d2f+0x28>
 8002840:	4305      	orrs	r5, r0
 8002842:	d0ed      	beq.n	8002820 <__aeabi_d2f+0x24>
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	03c9      	lsls	r1, r1, #15
 8002848:	23ff      	movs	r3, #255	; 0xff
 800284a:	4301      	orrs	r1, r0
 800284c:	e7ea      	b.n	8002824 <__aeabi_d2f+0x28>
 800284e:	2e00      	cmp	r6, #0
 8002850:	dd1c      	ble.n	800288c <__aeabi_d2f+0x90>
 8002852:	0192      	lsls	r2, r2, #6
 8002854:	0011      	movs	r1, r2
 8002856:	1e4a      	subs	r2, r1, #1
 8002858:	4191      	sbcs	r1, r2
 800285a:	00c0      	lsls	r0, r0, #3
 800285c:	0f6d      	lsrs	r5, r5, #29
 800285e:	4301      	orrs	r1, r0
 8002860:	4329      	orrs	r1, r5
 8002862:	074b      	lsls	r3, r1, #29
 8002864:	d048      	beq.n	80028f8 <__aeabi_d2f+0xfc>
 8002866:	230f      	movs	r3, #15
 8002868:	400b      	ands	r3, r1
 800286a:	2b04      	cmp	r3, #4
 800286c:	d000      	beq.n	8002870 <__aeabi_d2f+0x74>
 800286e:	3104      	adds	r1, #4
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	04db      	lsls	r3, r3, #19
 8002874:	400b      	ands	r3, r1
 8002876:	d03f      	beq.n	80028f8 <__aeabi_d2f+0xfc>
 8002878:	1c72      	adds	r2, r6, #1
 800287a:	2efe      	cmp	r6, #254	; 0xfe
 800287c:	d0d0      	beq.n	8002820 <__aeabi_d2f+0x24>
 800287e:	0189      	lsls	r1, r1, #6
 8002880:	0a49      	lsrs	r1, r1, #9
 8002882:	b2d3      	uxtb	r3, r2
 8002884:	e7ce      	b.n	8002824 <__aeabi_d2f+0x28>
 8002886:	2300      	movs	r3, #0
 8002888:	2100      	movs	r1, #0
 800288a:	e7cb      	b.n	8002824 <__aeabi_d2f+0x28>
 800288c:	0032      	movs	r2, r6
 800288e:	3217      	adds	r2, #23
 8002890:	db22      	blt.n	80028d8 <__aeabi_d2f+0xdc>
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	221e      	movs	r2, #30
 8002896:	0409      	lsls	r1, r1, #16
 8002898:	4308      	orrs	r0, r1
 800289a:	1b92      	subs	r2, r2, r6
 800289c:	2a1f      	cmp	r2, #31
 800289e:	dd1d      	ble.n	80028dc <__aeabi_d2f+0xe0>
 80028a0:	2102      	movs	r1, #2
 80028a2:	4249      	negs	r1, r1
 80028a4:	1b8e      	subs	r6, r1, r6
 80028a6:	0001      	movs	r1, r0
 80028a8:	40f1      	lsrs	r1, r6
 80028aa:	000e      	movs	r6, r1
 80028ac:	2a20      	cmp	r2, #32
 80028ae:	d004      	beq.n	80028ba <__aeabi_d2f+0xbe>
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <__aeabi_d2f+0x108>)
 80028b2:	4694      	mov	ip, r2
 80028b4:	4463      	add	r3, ip
 80028b6:	4098      	lsls	r0, r3
 80028b8:	4305      	orrs	r5, r0
 80028ba:	0029      	movs	r1, r5
 80028bc:	1e4d      	subs	r5, r1, #1
 80028be:	41a9      	sbcs	r1, r5
 80028c0:	4331      	orrs	r1, r6
 80028c2:	2600      	movs	r6, #0
 80028c4:	074b      	lsls	r3, r1, #29
 80028c6:	d1ce      	bne.n	8002866 <__aeabi_d2f+0x6a>
 80028c8:	2080      	movs	r0, #128	; 0x80
 80028ca:	000b      	movs	r3, r1
 80028cc:	04c0      	lsls	r0, r0, #19
 80028ce:	2201      	movs	r2, #1
 80028d0:	4003      	ands	r3, r0
 80028d2:	4201      	tst	r1, r0
 80028d4:	d1d3      	bne.n	800287e <__aeabi_d2f+0x82>
 80028d6:	e7af      	b.n	8002838 <__aeabi_d2f+0x3c>
 80028d8:	2300      	movs	r3, #0
 80028da:	e7ac      	b.n	8002836 <__aeabi_d2f+0x3a>
 80028dc:	490a      	ldr	r1, [pc, #40]	; (8002908 <__aeabi_d2f+0x10c>)
 80028de:	468c      	mov	ip, r1
 80028e0:	0029      	movs	r1, r5
 80028e2:	4463      	add	r3, ip
 80028e4:	40d1      	lsrs	r1, r2
 80028e6:	409d      	lsls	r5, r3
 80028e8:	000a      	movs	r2, r1
 80028ea:	0029      	movs	r1, r5
 80028ec:	4098      	lsls	r0, r3
 80028ee:	1e4d      	subs	r5, r1, #1
 80028f0:	41a9      	sbcs	r1, r5
 80028f2:	4301      	orrs	r1, r0
 80028f4:	4311      	orrs	r1, r2
 80028f6:	e7e4      	b.n	80028c2 <__aeabi_d2f+0xc6>
 80028f8:	0033      	movs	r3, r6
 80028fa:	e79d      	b.n	8002838 <__aeabi_d2f+0x3c>
 80028fc:	000007fe 	.word	0x000007fe
 8002900:	fffffc80 	.word	0xfffffc80
 8002904:	fffffca2 	.word	0xfffffca2
 8002908:	fffffc82 	.word	0xfffffc82

0800290c <__clzsi2>:
 800290c:	211c      	movs	r1, #28
 800290e:	2301      	movs	r3, #1
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	4298      	cmp	r0, r3
 8002914:	d301      	bcc.n	800291a <__clzsi2+0xe>
 8002916:	0c00      	lsrs	r0, r0, #16
 8002918:	3910      	subs	r1, #16
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	4298      	cmp	r0, r3
 800291e:	d301      	bcc.n	8002924 <__clzsi2+0x18>
 8002920:	0a00      	lsrs	r0, r0, #8
 8002922:	3908      	subs	r1, #8
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	4298      	cmp	r0, r3
 8002928:	d301      	bcc.n	800292e <__clzsi2+0x22>
 800292a:	0900      	lsrs	r0, r0, #4
 800292c:	3904      	subs	r1, #4
 800292e:	a202      	add	r2, pc, #8	; (adr r2, 8002938 <__clzsi2+0x2c>)
 8002930:	5c10      	ldrb	r0, [r2, r0]
 8002932:	1840      	adds	r0, r0, r1
 8002934:	4770      	bx	lr
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	02020304 	.word	0x02020304
 800293c:	01010101 	.word	0x01010101
	...

08002948 <__clzdi2>:
 8002948:	b510      	push	{r4, lr}
 800294a:	2900      	cmp	r1, #0
 800294c:	d103      	bne.n	8002956 <__clzdi2+0xe>
 800294e:	f7ff ffdd 	bl	800290c <__clzsi2>
 8002952:	3020      	adds	r0, #32
 8002954:	e002      	b.n	800295c <__clzdi2+0x14>
 8002956:	1c08      	adds	r0, r1, #0
 8002958:	f7ff ffd8 	bl	800290c <__clzsi2>
 800295c:	bd10      	pop	{r4, pc}
 800295e:	46c0      	nop			; (mov r8, r8)

08002960 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002960:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002962:	f000 ffb9 	bl	80038d8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002966:	f000 f961 	bl	8002c2c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800296a:	bd10      	pop	{r4, pc}

0800296c <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800296c:	2001      	movs	r0, #1
{
 800296e:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002970:	4240      	negs	r0, r0
 8002972:	f00c fab3 	bl	800eedc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002976:	bd10      	pop	{r4, pc}

08002978 <OnTxTimerEvent>:

  /* USER CODE END SendTxData_2 */
}

static void OnTxTimerEvent(void *context)
{
 8002978:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800297a:	2100      	movs	r1, #0
 800297c:	2002      	movs	r0, #2
 800297e:	f00c fa7f 	bl	800ee80 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8002982:	4802      	ldr	r0, [pc, #8]	; (800298c <OnTxTimerEvent+0x14>)
 8002984:	f00c fc76 	bl	800f274 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8002988:	bd10      	pop	{r4, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	20000388 	.word	0x20000388

08002990 <OnMacProcessNotify>:

  /* USER CODE END OnJoinRequest_2 */
}

static void OnMacProcessNotify(void)
{
 8002990:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002992:	2100      	movs	r1, #0
 8002994:	2001      	movs	r0, #1
 8002996:	f00c fa73 	bl	800ee80 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800299a:	bd10      	pop	{r4, pc}

0800299c <OnRxTimerLedEvent>:
{
 800299c:	b510      	push	{r4, lr}
  LED_Off(LED_BLUE) ;
 800299e:	2002      	movs	r0, #2
 80029a0:	f001 fb2e 	bl	8004000 <BSP_LED_Off>
}
 80029a4:	bd10      	pop	{r4, pc}

080029a6 <OnTxTimerLedEvent>:
{
 80029a6:	b510      	push	{r4, lr}
  LED_Off(LED_RED2);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f001 fb29 	bl	8004000 <BSP_LED_Off>
}
 80029ae:	bd10      	pop	{r4, pc}

080029b0 <SendTxData>:
{
 80029b0:	b570      	push	{r4, r5, r6, lr}
  UTIL_TIMER_Time_t nextTxIn = 0;
 80029b2:	2400      	movs	r4, #0
{
 80029b4:	b08e      	sub	sp, #56	; 0x38
  DHT11_t dht_data = DHT11_Process();
 80029b6:	a806      	add	r0, sp, #24
  UTIL_TIMER_Time_t nextTxIn = 0;
 80029b8:	9405      	str	r4, [sp, #20]
  DHT11_t dht_data = DHT11_Process();
 80029ba:	f000 fb7d 	bl	80030b8 <DHT11_Process>
  EnvSensors_Read(&sensor_data);
 80029be:	a808      	add	r0, sp, #32
 80029c0:	f001 f880 	bl	8003ac4 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 80029c4:	f000 faa8 	bl	8002f18 <SYS_GetTemperatureLevel>
  AppData.Port = LORAWAN_USER_APP_PORT;
 80029c8:	2302      	movs	r3, #2
 80029ca:	4d1f      	ldr	r5, [pc, #124]	; (8002a48 <SendTxData+0x98>)
  snprintf(AppData.Buffer, 64, "{\"temperature\":\%0.2f\,\"humidity\":\%0.2f\}", dht_data.temperature, dht_data.humidity);
 80029cc:	9807      	ldr	r0, [sp, #28]
  AppData.Port = LORAWAN_USER_APP_PORT;
 80029ce:	702b      	strb	r3, [r5, #0]
  snprintf(AppData.Buffer, 64, "{\"temperature\":\%0.2f\,\"humidity\":\%0.2f\}", dht_data.temperature, dht_data.humidity);
 80029d0:	f7ff fecc 	bl	800276c <__aeabi_f2d>
 80029d4:	9002      	str	r0, [sp, #8]
 80029d6:	9103      	str	r1, [sp, #12]
 80029d8:	9806      	ldr	r0, [sp, #24]
 80029da:	f7ff fec7 	bl	800276c <__aeabi_f2d>
 80029de:	9000      	str	r0, [sp, #0]
 80029e0:	9101      	str	r1, [sp, #4]
 80029e2:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <SendTxData+0x9c>)
 80029e4:	2140      	movs	r1, #64	; 0x40
 80029e6:	6868      	ldr	r0, [r5, #4]
 80029e8:	f00d fac2 	bl	800ff70 <sniprintf>
  AppData.BufferSize = strlen(AppData.Buffer);
 80029ec:	686e      	ldr	r6, [r5, #4]
 80029ee:	0030      	movs	r0, r6
 80029f0:	f7fd fb8a 	bl	8000108 <strlen>
  APP_LOG(TS_ON, VLEVEL_L, "Buffer: %s; Size: %d\r\n", AppData.Buffer, AppData.BufferSize);
 80029f4:	2201      	movs	r2, #1
  AppData.BufferSize = strlen(AppData.Buffer);
 80029f6:	7068      	strb	r0, [r5, #1]
  APP_LOG(TS_ON, VLEVEL_L, "Buffer: %s; Size: %d\r\n", AppData.Buffer, AppData.BufferSize);
 80029f8:	b2c0      	uxtb	r0, r0
 80029fa:	0021      	movs	r1, r4
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <SendTxData+0xa0>)
 80029fe:	9001      	str	r0, [sp, #4]
 8002a00:	9600      	str	r6, [sp, #0]
 8002a02:	0010      	movs	r0, r2
 8002a04:	f00c f90c 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8002a08:	0021      	movs	r1, r4
 8002a0a:	0023      	movs	r3, r4
 8002a0c:	0028      	movs	r0, r5
 8002a0e:	aa05      	add	r2, sp, #20
 8002a10:	f005 fbf2 	bl	80081f8 <LmHandlerSend>
 8002a14:	0001      	movs	r1, r0
 8002a16:	42a0      	cmp	r0, r4
 8002a18:	d106      	bne.n	8002a28 <SendTxData+0x78>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <SendTxData+0xa4>)
 8002a1e:	0010      	movs	r0, r2
 8002a20:	f00c f8fe 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8002a24:	b00e      	add	sp, #56	; 0x38
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
  else if (nextTxIn > 0)
 8002a28:	9805      	ldr	r0, [sp, #20]
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d0fa      	beq.n	8002a24 <SendTxData+0x74>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002a2e:	21fa      	movs	r1, #250	; 0xfa
 8002a30:	0089      	lsls	r1, r1, #2
 8002a32:	f7fd fb99 	bl	8000168 <__udivsi3>
 8002a36:	2201      	movs	r2, #1
 8002a38:	9000      	str	r0, [sp, #0]
 8002a3a:	0021      	movs	r1, r4
 8002a3c:	0010      	movs	r0, r2
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <SendTxData+0xa8>)
 8002a40:	f00c f8ee 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8002a44:	e7ee      	b.n	8002a24 <SendTxData+0x74>
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	08012dc8 	.word	0x08012dc8
 8002a50:	08012def 	.word	0x08012def
 8002a54:	08012e06 	.word	0x08012e06
 8002a58:	08012e15 	.word	0x08012e15

08002a5c <OnJoinTimerLedEvent>:
{
 8002a5c:	b510      	push	{r4, lr}
  LED_Toggle(LED_RED1) ;
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f001 fade 	bl	8004020 <BSP_LED_Toggle>
}
 8002a64:	bd10      	pop	{r4, pc}
	...

08002a68 <OnTxData>:
{
 8002a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a6a:	1e04      	subs	r4, r0, #0
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8002a6c:	d034      	beq.n	8002ad8 <OnTxData+0x70>
 8002a6e:	7803      	ldrb	r3, [r0, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d031      	beq.n	8002ad8 <OnTxData+0x70>
    LED_On(LED_RED2) ;
 8002a74:	2003      	movs	r0, #3
 8002a76:	f001 fab3 	bl	8003fe0 <BSP_LED_On>
    UTIL_TIMER_Start(&TxLedTimer);
 8002a7a:	481b      	ldr	r0, [pc, #108]	; (8002ae8 <OnTxData+0x80>)
 8002a7c:	3018      	adds	r0, #24
 8002a7e:	f00c fbf9 	bl	800f274 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002a82:	2200      	movs	r2, #0
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <OnTxData+0x84>)
 8002a86:	0011      	movs	r1, r2
 8002a88:	2002      	movs	r0, #2
 8002a8a:	f00c f8c9 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d ", params->UplinkCounter,
 8002a8e:	2314      	movs	r3, #20
 8002a90:	56e3      	ldrsb	r3, [r4, r3]
 8002a92:	2200      	movs	r2, #0
 8002a94:	9303      	str	r3, [sp, #12]
 8002a96:	2304      	movs	r3, #4
 8002a98:	56e3      	ldrsb	r3, [r4, r3]
 8002a9a:	0011      	movs	r1, r2
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	7b23      	ldrb	r3, [r4, #12]
 8002aa0:	2002      	movs	r0, #2
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	68a3      	ldr	r3, [r4, #8]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <OnTxData+0x88>)
 8002aaa:	f00c f8b9 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <OnTxData+0x8c>)
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f00c f8b3 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002aba:	78a3      	ldrb	r3, [r4, #2]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d10c      	bne.n	8002ada <OnTxData+0x72>
      APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8002ac0:	78e2      	ldrb	r2, [r4, #3]
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <OnTxData+0x90>)
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	d100      	bne.n	8002aca <OnTxData+0x62>
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <OnTxData+0x94>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	0011      	movs	r1, r2
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <OnTxData+0x98>)
 8002ad4:	f00c f8a4 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8002ad8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002ada:	2200      	movs	r2, #0
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <OnTxData+0x9c>)
 8002ade:	0011      	movs	r1, r2
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f00c f89d 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8002ae6:	e7f7      	b.n	8002ad8 <OnTxData+0x70>
 8002ae8:	20000388 	.word	0x20000388
 8002aec:	08012e38 	.word	0x08012e38
 8002af0:	08012e69 	.word	0x08012e69
 8002af4:	08012e9b 	.word	0x08012e9b
 8002af8:	08012e34 	.word	0x08012e34
 8002afc:	08012e33 	.word	0x08012e33
 8002b00:	08012ea8 	.word	0x08012ea8
 8002b04:	08012eb9 	.word	0x08012eb9

08002b08 <OnRxData>:
{
 8002b08:	b530      	push	{r4, r5, lr}
 8002b0a:	0004      	movs	r4, r0
 8002b0c:	000d      	movs	r5, r1
 8002b0e:	b087      	sub	sp, #28
  if ((appData != NULL) && (params != NULL))
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d035      	beq.n	8002b80 <OnRxData+0x78>
 8002b14:	2900      	cmp	r1, #0
 8002b16:	d033      	beq.n	8002b80 <OnRxData+0x78>
    LED_On(LED_BLUE);
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f001 fa61 	bl	8003fe0 <BSP_LED_On>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8002b1e:	2200      	movs	r2, #0
 8002b20:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <OnRxData+0xb4>)
 8002b22:	0011      	movs	r1, r2
 8002b24:	2002      	movs	r0, #2
 8002b26:	f00c f87b 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	56eb      	ldrsb	r3, [r5, r3]
 8002b2e:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <OnRxData+0xb8>)
 8002b30:	9305      	str	r3, [sp, #20]
 8002b32:	2303      	movs	r3, #3
 8002b34:	56eb      	ldrsb	r3, [r5, r3]
 8002b36:	2003      	movs	r0, #3
 8002b38:	9304      	str	r3, [sp, #16]
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	56eb      	ldrsb	r3, [r5, r3]
 8002b3e:	9303      	str	r3, [sp, #12]
 8002b40:	7823      	ldrb	r3, [r4, #0]
 8002b42:	9302      	str	r3, [sp, #8]
 8002b44:	230c      	movs	r3, #12
 8002b46:	56eb      	ldrsb	r3, [r5, r3]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	589b      	ldr	r3, [r3, r2]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	68ab      	ldr	r3, [r5, #8]
 8002b52:	0011      	movs	r1, r2
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <OnRxData+0xbc>)
 8002b58:	f00c f862 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8002b5c:	7823      	ldrb	r3, [r4, #0]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d010      	beq.n	8002b84 <OnRxData+0x7c>
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d10c      	bne.n	8002b80 <OnRxData+0x78>
        if (appData->BufferSize == 1)
 8002b66:	7863      	ldrb	r3, [r4, #1]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d109      	bne.n	8002b80 <OnRxData+0x78>
          switch (appData->Buffer[0])
 8002b6c:	6863      	ldr	r3, [r4, #4]
 8002b6e:	7818      	ldrb	r0, [r3, #0]
 8002b70:	2801      	cmp	r0, #1
 8002b72:	d003      	beq.n	8002b7c <OnRxData+0x74>
 8002b74:	2802      	cmp	r0, #2
 8002b76:	d001      	beq.n	8002b7c <OnRxData+0x74>
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	d101      	bne.n	8002b80 <OnRxData+0x78>
              LmHandlerRequestClass(CLASS_C);
 8002b7c:	f005 fa94 	bl	80080a8 <LmHandlerRequestClass>
}
 8002b80:	b007      	add	sp, #28
 8002b82:	bd30      	pop	{r4, r5, pc}
        if (appData->BufferSize == 1)
 8002b84:	7865      	ldrb	r5, [r4, #1]
 8002b86:	2d01      	cmp	r5, #1
 8002b88:	d1fa      	bne.n	8002b80 <OnRxData+0x78>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8002b8a:	6863      	ldr	r3, [r4, #4]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
          if (AppLedStateOn == RESET)
 8002b8e:	0019      	movs	r1, r3
 8002b90:	4029      	ands	r1, r5
 8002b92:	422b      	tst	r3, r5
 8002b94:	d108      	bne.n	8002ba8 <OnRxData+0xa0>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8002b96:	000a      	movs	r2, r1
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <OnRxData+0xc0>)
 8002b9a:	2003      	movs	r0, #3
 8002b9c:	f00c f840 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
            LED_Off(LED_RED1);
 8002ba0:	0028      	movs	r0, r5
 8002ba2:	f001 fa2d 	bl	8004000 <BSP_LED_Off>
 8002ba6:	e7eb      	b.n	8002b80 <OnRxData+0x78>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002ba8:	2200      	movs	r2, #0
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <OnRxData+0xc4>)
 8002bac:	0011      	movs	r1, r2
 8002bae:	2003      	movs	r0, #3
 8002bb0:	f00c f836 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 8002bb4:	0028      	movs	r0, r5
 8002bb6:	f001 fa13 	bl	8003fe0 <BSP_LED_On>
}
 8002bba:	e7e1      	b.n	8002b80 <OnRxData+0x78>
 8002bbc:	08012ec7 	.word	0x08012ec7
 8002bc0:	08012668 	.word	0x08012668
 8002bc4:	08012ef8 	.word	0x08012ef8
 8002bc8:	08012f3f 	.word	0x08012f3f
 8002bcc:	08012f49 	.word	0x08012f49

08002bd0 <OnJoinRequest>:
{
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	1e05      	subs	r5, r0, #0
  if (joinParams != NULL)
 8002bd4:	d019      	beq.n	8002c0a <OnJoinRequest+0x3a>
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002bd6:	2401      	movs	r4, #1
 8002bd8:	5704      	ldrsb	r4, [r0, r4]
 8002bda:	2c00      	cmp	r4, #0
 8002bdc:	d118      	bne.n	8002c10 <OnJoinRequest+0x40>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002bde:	480e      	ldr	r0, [pc, #56]	; (8002c18 <OnJoinRequest+0x48>)
 8002be0:	3030      	adds	r0, #48	; 0x30
 8002be2:	f00c faf3 	bl	800f1cc <UTIL_TIMER_Stop>
      LED_Off(LED_RED1) ;
 8002be6:	2001      	movs	r0, #1
 8002be8:	f001 fa0a 	bl	8004000 <BSP_LED_Off>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <OnJoinRequest+0x4c>)
 8002bee:	0022      	movs	r2, r4
 8002bf0:	0021      	movs	r1, r4
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	f00c f814 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002bf8:	78ab      	ldrb	r3, [r5, #2]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d106      	bne.n	8002c0c <OnJoinRequest+0x3c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <OnJoinRequest+0x50>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002c00:	0022      	movs	r2, r4
 8002c02:	0021      	movs	r1, r4
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002c04:	2002      	movs	r0, #2
 8002c06:	f00c f80b 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <OnJoinRequest+0x54>)
 8002c0e:	e7f7      	b.n	8002c00 <OnJoinRequest+0x30>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002c10:	2200      	movs	r2, #0
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <OnJoinRequest+0x58>)
 8002c14:	0011      	movs	r1, r2
 8002c16:	e7f5      	b.n	8002c04 <OnJoinRequest+0x34>
 8002c18:	20000388 	.word	0x20000388
 8002c1c:	08012f52 	.word	0x08012f52
 8002c20:	08012f67 	.word	0x08012f67
 8002c24:	08012f84 	.word	0x08012f84
 8002c28:	08012fa1 	.word	0x08012fa1

08002c2c <LoRaWAN_Init>:
{
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8002c2e:	2400      	movs	r4, #0
 8002c30:	2501      	movs	r5, #1
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8002c32:	2702      	movs	r7, #2
{
 8002c34:	b085      	sub	sp, #20
  LED_Init(LED_BLUE);
 8002c36:	2002      	movs	r0, #2
 8002c38:	f001 f990 	bl	8003f5c <BSP_LED_Init>
  LED_Init(LED_RED1);
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f001 f98d 	bl	8003f5c <BSP_LED_Init>
  LED_Init(LED_RED2);
 8002c42:	2003      	movs	r0, #3
 8002c44:	f001 f98a 	bl	8003f5c <BSP_LED_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8002c48:	0022      	movs	r2, r4
 8002c4a:	0021      	movs	r1, r4
 8002c4c:	9500      	str	r5, [sp, #0]
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <LoRaWAN_Init+0xfc>)
 8002c50:	9402      	str	r4, [sp, #8]
 8002c52:	9401      	str	r4, [sp, #4]
 8002c54:	2002      	movs	r0, #2
 8002c56:	f00b ffe3 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8002c5a:	0022      	movs	r2, r4
 8002c5c:	0021      	movs	r1, r4
 8002c5e:	9502      	str	r5, [sp, #8]
 8002c60:	0038      	movs	r0, r7
 8002c62:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <LoRaWAN_Init+0x100>)
 8002c64:	9701      	str	r7, [sp, #4]
 8002c66:	9700      	str	r7, [sp, #0]
 8002c68:	f00b ffda 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8002c6c:	0022      	movs	r2, r4
 8002c6e:	0021      	movs	r1, r4
 8002c70:	9502      	str	r5, [sp, #8]
 8002c72:	0038      	movs	r0, r7
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <LoRaWAN_Init+0x104>)
 8002c76:	9401      	str	r4, [sp, #4]
 8002c78:	9400      	str	r4, [sp, #0]
 8002c7a:	f00b ffd1 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002c7e:	2101      	movs	r1, #1
 8002c80:	0022      	movs	r2, r4
 8002c82:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <LoRaWAN_Init+0x108>)
 8002c84:	9400      	str	r4, [sp, #0]
 8002c86:	4249      	negs	r1, r1
 8002c88:	482b      	ldr	r0, [pc, #172]	; (8002d38 <LoRaWAN_Init+0x10c>)
 8002c8a:	4e2c      	ldr	r6, [pc, #176]	; (8002d3c <LoRaWAN_Init+0x110>)
 8002c8c:	f00c fa3e 	bl	800f10c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002c90:	2101      	movs	r1, #1
 8002c92:	0022      	movs	r2, r4
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <LoRaWAN_Init+0x114>)
 8002c96:	9400      	str	r4, [sp, #0]
 8002c98:	4249      	negs	r1, r1
 8002c9a:	482a      	ldr	r0, [pc, #168]	; (8002d44 <LoRaWAN_Init+0x118>)
 8002c9c:	f00c fa36 	bl	800f10c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <LoRaWAN_Init+0x11c>)
 8002ca4:	002a      	movs	r2, r5
 8002ca6:	9400      	str	r4, [sp, #0]
 8002ca8:	4249      	negs	r1, r1
 8002caa:	4828      	ldr	r0, [pc, #160]	; (8002d4c <LoRaWAN_Init+0x120>)
 8002cac:	f00c fa2e 	bl	800f10c <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8002cb0:	21fa      	movs	r1, #250	; 0xfa
 8002cb2:	4821      	ldr	r0, [pc, #132]	; (8002d38 <LoRaWAN_Init+0x10c>)
 8002cb4:	0049      	lsls	r1, r1, #1
 8002cb6:	f00c fb1f 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002cba:	21fa      	movs	r1, #250	; 0xfa
 8002cbc:	4821      	ldr	r0, [pc, #132]	; (8002d44 <LoRaWAN_Init+0x118>)
 8002cbe:	0049      	lsls	r1, r1, #1
 8002cc0:	f00c fb1a 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002cc4:	21fa      	movs	r1, #250	; 0xfa
 8002cc6:	4821      	ldr	r0, [pc, #132]	; (8002d4c <LoRaWAN_Init+0x120>)
 8002cc8:	0049      	lsls	r1, r1, #1
 8002cca:	f00c fb15 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002cce:	0021      	movs	r1, r4
 8002cd0:	0028      	movs	r0, r5
 8002cd2:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <LoRaWAN_Init+0x124>)
 8002cd4:	f00c f968 	bl	800efa8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002cd8:	0021      	movs	r1, r4
 8002cda:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <LoRaWAN_Init+0x128>)
 8002cdc:	0038      	movs	r0, r7
 8002cde:	f00c f963 	bl	800efa8 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002ce2:	f000 f83f 	bl	8002d64 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8002ce6:	4d1c      	ldr	r5, [pc, #112]	; (8002d58 <LoRaWAN_Init+0x12c>)
 8002ce8:	0028      	movs	r0, r5
 8002cea:	3008      	adds	r0, #8
 8002cec:	f005 fb14 	bl	8008318 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002cf0:	0028      	movs	r0, r5
 8002cf2:	3028      	adds	r0, #40	; 0x28
 8002cf4:	f005 f8fc 	bl	8007ef0 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002cf8:	4814      	ldr	r0, [pc, #80]	; (8002d4c <LoRaWAN_Init+0x120>)
 8002cfa:	f00c fabb 	bl	800f274 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 8002cfe:	0038      	movs	r0, r7
 8002d00:	f005 fa24 	bl	800814c <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002d04:	2101      	movs	r1, #1
 8002d06:	0022      	movs	r2, r4
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <LoRaWAN_Init+0x130>)
 8002d0a:	0030      	movs	r0, r6
 8002d0c:	9400      	str	r4, [sp, #0]
 8002d0e:	4249      	negs	r1, r1
 8002d10:	f00c f9fc 	bl	800f10c <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8002d14:	4912      	ldr	r1, [pc, #72]	; (8002d60 <LoRaWAN_Init+0x134>)
 8002d16:	0030      	movs	r0, r6
 8002d18:	f00c faee 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002d1c:	0030      	movs	r0, r6
 8002d1e:	f00c faa9 	bl	800f274 <UTIL_TIMER_Start>
}
 8002d22:	b005      	add	sp, #20
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	08012fba 	.word	0x08012fba
 8002d2c:	08012fda 	.word	0x08012fda
 8002d30:	08012ffa 	.word	0x08012ffa
 8002d34:	080029a7 	.word	0x080029a7
 8002d38:	200003a0 	.word	0x200003a0
 8002d3c:	20000388 	.word	0x20000388
 8002d40:	0800299d 	.word	0x0800299d
 8002d44:	200003d0 	.word	0x200003d0
 8002d48:	08002a5d 	.word	0x08002a5d
 8002d4c:	200003b8 	.word	0x200003b8
 8002d50:	08008045 	.word	0x08008045
 8002d54:	080029b1 	.word	0x080029b1
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	08002979 	.word	0x08002979
 8002d60:	00002710 	.word	0x00002710

08002d64 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8002d64:	2200      	movs	r2, #0
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <LoraInfo_Init+0x14>)
 8002d68:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002d6a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923) ;
 8002d6c:	3201      	adds	r2, #1
 8002d6e:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002d70:	3202      	adds	r2, #2
 8002d72:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002d74:	4770      	bx	lr
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	20000428 	.word	0x20000428

08002d7c <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002d7c:	4800      	ldr	r0, [pc, #0]	; (8002d80 <LoraInfo_GetPtr+0x4>)
 8002d7e:	4770      	bx	lr
 8002d80:	20000428 	.word	0x20000428

08002d84 <MX_ADC_Init>:
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
  hadc1.Init.LowPowerAutoWait      = DISABLE;
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8002d84:	2107      	movs	r1, #7
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8002d86:	2201      	movs	r2, #1
{
 8002d88:	b510      	push	{r4, lr}
  hadc1.Init.OversamplingMode      = DISABLE;
 8002d8a:	4c13      	ldr	r4, [pc, #76]	; (8002dd8 <MX_ADC_Init+0x54>)
 8002d8c:	2300      	movs	r3, #0
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8002d8e:	63a1      	str	r1, [r4, #56]	; 0x38
  hadc1.Instance  = ADC1;
 8002d90:	4912      	ldr	r1, [pc, #72]	; (8002ddc <MX_ADC_Init+0x58>)
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8002d92:	6362      	str	r2, [r4, #52]	; 0x34
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8002d94:	6122      	str	r2, [r4, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ContinuousConvMode    = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8002d96:	3203      	adds	r2, #3
  hadc1.Instance  = ADC1;
 8002d98:	6021      	str	r1, [r4, #0]
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8002d9a:	6162      	str	r2, [r4, #20]
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d9c:	2180      	movs	r1, #128	; 0x80
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d9e:	0022      	movs	r2, r4
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002da0:	0609      	lsls	r1, r1, #24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002da2:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002da4:	0020      	movs	r0, r4
  hadc1.Init.ContinuousConvMode    = DISABLE;
 8002da6:	8423      	strh	r3, [r4, #32]
  hadc1.Init.OversamplingMode      = DISABLE;
 8002da8:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002daa:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002dac:	6061      	str	r1, [r4, #4]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 8002dae:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8002db0:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 8002db2:	61a3      	str	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 8002db4:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002db6:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002db8:	f001 fc40 	bl	800463c <HAL_ADC_Init>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 8002dc0:	f000 fa6e 	bl	80032a0 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	0020      	movs	r0, r4
 8002dc8:	f001 fe66 	bl	8004a98 <HAL_ADCEx_Calibration_Start>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 8002dd0:	f000 fa66 	bl	80032a0 <Error_Handler>
  }
}
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	20001360 	.word	0x20001360
 8002ddc:	40012400 	.word	0x40012400

08002de0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_ADC_MspInit+0x18>)
 8002de2:	6802      	ldr	r2, [r0, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d105      	bne.n	8002df4 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <HAL_ADC_MspInit+0x1c>)
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002df0:	430b      	orrs	r3, r1
 8002df2:	6353      	str	r3, [r2, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 8002df4:	4770      	bx	lr
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	40012400 	.word	0x40012400
 8002dfc:	40021000 	.word	0x40021000

08002e00 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_ADC_MspDeInit+0x24>)
 8002e02:	6802      	ldr	r2, [r0, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d10c      	bne.n	8002e22 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <HAL_ADC_MspDeInit+0x28>)
 8002e0c:	0092      	lsls	r2, r2, #2
 8002e0e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8002e10:	4806      	ldr	r0, [pc, #24]	; (8002e2c <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC1_FORCE_RESET();
 8002e12:	430a      	orrs	r2, r1
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8002e16:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e18:	4001      	ands	r1, r0
 8002e1a:	6259      	str	r1, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1e:	4002      	ands	r2, r0
 8002e20:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8002e22:	4770      	bx	lr
 8002e24:	40012400 	.word	0x40012400
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	fffffdff 	.word	0xfffffdff

08002e30 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8002e30:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e32:	2208      	movs	r2, #8
 8002e34:	2100      	movs	r1, #0
{
 8002e36:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e38:	4668      	mov	r0, sp
 8002e3a:	f00c fc17 	bl	800f66c <memset>

  MX_ADC_Init();
 8002e3e:	f7ff ffa1 	bl	8002d84 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8002e42:	2308      	movs	r3, #8
 8002e44:	491f      	ldr	r1, [pc, #124]	; (8002ec4 <ADC_ReadChannels+0x94>)
 8002e46:	684a      	ldr	r2, [r1, #4]
 8002e48:	421a      	tst	r2, r3
 8002e4a:	d0fc      	beq.n	8002e46 <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	4d1e      	ldr	r5, [pc, #120]	; (8002ec8 <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002e50:	4c1e      	ldr	r4, [pc, #120]	; (8002ecc <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 8002e52:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002e58:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 8002e5a:	636b      	str	r3, [r5, #52]	; 0x34
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002e5c:	0020      	movs	r0, r4
 8002e5e:	f001 fe1b 	bl	8004a98 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002e64:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 8002e66:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002e6a:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 8002e6c:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002e6e:	f001 fdbf 	bl	80049f0 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e72:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e74:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e76:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e78:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 8002e7a:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e7c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e7e:	f001 fdb7 	bl	80049f0 <HAL_ADC_ConfigChannel>
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d001      	beq.n	8002e8a <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 8002e86:	f000 fa0b 	bl	80032a0 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8002e8a:	0020      	movs	r0, r4
 8002e8c:	f001 fd04 	bl	8004898 <HAL_ADC_Start>
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d001      	beq.n	8002e98 <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 8002e94:	f000 fa04 	bl	80032a0 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002e98:	2101      	movs	r1, #1
 8002e9a:	0020      	movs	r0, r4
 8002e9c:	4249      	negs	r1, r1
 8002e9e:	f001 fd45 	bl	800492c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8002ea2:	0020      	movs	r0, r4
 8002ea4:	f001 fd24 	bl	80048f0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8002ea8:	0020      	movs	r0, r4
 8002eaa:	f001 fd9d 	bl	80049e8 <HAL_ADC_GetValue>
 8002eae:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc1);
 8002eb0:	0020      	movs	r0, r4
 8002eb2:	f001 fc9d 	bl	80047f0 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8002eb6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002eb8:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8002eba:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	636b      	str	r3, [r5, #52]	; 0x34
}
 8002ec0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	20001360 	.word	0x20001360
 8002ed0:	0007ffff 	.word	0x0007ffff
 8002ed4:	00001001 	.word	0x00001001
 8002ed8:	fffffdff 	.word	0xfffffdff

08002edc <SYS_InitMeasurement>:
  hadc1.Instance = ADC1;
 8002edc:	4b01      	ldr	r3, [pc, #4]	; (8002ee4 <SYS_InitMeasurement+0x8>)
 8002ede:	4a02      	ldr	r2, [pc, #8]	; (8002ee8 <SYS_InitMeasurement+0xc>)
 8002ee0:	601a      	str	r2, [r3, #0]
}
 8002ee2:	4770      	bx	lr
 8002ee4:	20001360 	.word	0x20001360
 8002ee8:	40012400 	.word	0x40012400

08002eec <SYS_GetBatteryLevel>:
{
 8002eec:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8002eee:	4807      	ldr	r0, [pc, #28]	; (8002f0c <SYS_GetBatteryLevel+0x20>)
 8002ef0:	f7ff ff9e 	bl	8002e30 <ADC_ReadChannels>
 8002ef4:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 8002ef6:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 8002ef8:	4281      	cmp	r1, r0
 8002efa:	d006      	beq.n	8002f0a <SYS_GetBatteryLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <SYS_GetBatteryLevel+0x24>)
 8002efe:	4805      	ldr	r0, [pc, #20]	; (8002f14 <SYS_GetBatteryLevel+0x28>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	4358      	muls	r0, r3
 8002f04:	f7fd f930 	bl	8000168 <__udivsi3>
 8002f08:	b280      	uxth	r0, r0
}
 8002f0a:	bd10      	pop	{r4, pc}
 8002f0c:	44020000 	.word	0x44020000
 8002f10:	1ff80078 	.word	0x1ff80078
 8002f14:	00000bb8 	.word	0x00000bb8

08002f18 <SYS_GetTemperatureLevel>:
{
 8002f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8002f1a:	f7ff ffe7 	bl	8002eec <SYS_GetBatteryLevel>
 8002f1e:	0005      	movs	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8002f20:	480f      	ldr	r0, [pc, #60]	; (8002f60 <SYS_GetTemperatureLevel+0x48>)
 8002f22:	f7ff ff85 	bl	8002e30 <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8002f26:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <SYS_GetTemperatureLevel+0x4c>)
 8002f28:	4368      	muls	r0, r5
 8002f2a:	490f      	ldr	r1, [pc, #60]	; (8002f68 <SYS_GetTemperatureLevel+0x50>)
 8002f2c:	881c      	ldrh	r4, [r3, #0]
 8002f2e:	f7fd f91b 	bl	8000168 <__udivsi3>
 8002f32:	1b03      	subs	r3, r0, r4
 8002f34:	2050      	movs	r0, #80	; 0x50
 8002f36:	4358      	muls	r0, r3
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <SYS_GetTemperatureLevel+0x54>)
 8002f3a:	0200      	lsls	r0, r0, #8
 8002f3c:	8819      	ldrh	r1, [r3, #0]
 8002f3e:	1b09      	subs	r1, r1, r4
 8002f40:	f7fd f99c 	bl	800027c <__divsi3>
 8002f44:	23f0      	movs	r3, #240	; 0xf0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 8002f46:	2201      	movs	r2, #1
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8002f48:	015b      	lsls	r3, r3, #5
 8002f4a:	18c0      	adds	r0, r0, r3
 8002f4c:	b204      	sxth	r4, r0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 8002f4e:	1223      	asrs	r3, r4, #8
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2100      	movs	r1, #0
 8002f54:	0010      	movs	r0, r2
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <SYS_GetTemperatureLevel+0x58>)
 8002f58:	f00b fe62 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8002f5c:	0020      	movs	r0, r4
 8002f5e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002f60:	48040000 	.word	0x48040000
 8002f64:	1ff8007a 	.word	0x1ff8007a
 8002f68:	00000bb8 	.word	0x00000bb8
 8002f6c:	1ff8007e 	.word	0x1ff8007e
 8002f70:	0801304c 	.word	0x0801304c

08002f74 <SetPin_Input>:
/**
  * @brief Function to change pin into input
  * @param GPIO type, GPIO pin
  * @retval None
  */
void SetPin_Input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8002f74:	b510      	push	{r4, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	000c      	movs	r4, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	a804      	add	r0, sp, #16
 8002f80:	f00c fb74 	bl	800f66c <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f86:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f88:	a901      	add	r1, sp, #4
 8002f8a:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002f8c:	9401      	str	r4, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	f001 ff7b 	bl	8004e8c <HAL_GPIO_Init>
}
 8002f96:	b006      	add	sp, #24
 8002f98:	bd10      	pop	{r4, pc}

08002f9a <SetPin_Output>:
/**
  * @brief Function to change pin into output
  * @param GPIO type, GPIO pin
  * @retval None
  */
void SetPin_Output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8002f9a:	b510      	push	{r4, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	000c      	movs	r4, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	220c      	movs	r2, #12
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	a803      	add	r0, sp, #12
 8002fa6:	f00c fb61 	bl	800f66c <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002faa:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fac:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fae:	a901      	add	r1, sp, #4
 8002fb0:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002fb2:	9401      	str	r4, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb4:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	f001 ff69 	bl	8004e8c <HAL_GPIO_Init>
}
 8002fba:	b006      	add	sp, #24
 8002fbc:	bd10      	pop	{r4, pc}
	...

08002fc0 <DHT11_Start>:
  * @brief Function to start communication with DHT11 sensor
  * @param None
  * @retval None
  */
void DHT11_Start(void)
{
 8002fc0:	b570      	push	{r4, r5, r6, lr}
	SetPin_Output(DHT11_PORT, DHT11_PIN);// set pin as output
 8002fc2:	2580      	movs	r5, #128	; 0x80
 8002fc4:	24a0      	movs	r4, #160	; 0xa0
 8002fc6:	006d      	lsls	r5, r5, #1
 8002fc8:	05e4      	lsls	r4, r4, #23
 8002fca:	0029      	movs	r1, r5
 8002fcc:	0020      	movs	r0, r4
 8002fce:	f7ff ffe4 	bl	8002f9a <SetPin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);
 8002fd2:	0029      	movs	r1, r5
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	0020      	movs	r0, r4
 8002fd8:	f002 f89e 	bl	8005118 <HAL_GPIO_WritePin>
	delay_us(1000);
 8002fdc:	20fa      	movs	r0, #250	; 0xfa
 8002fde:	0080      	lsls	r0, r0, #2
 8002fe0:	f000 f954 	bl	800328c <delay_us>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);// pull the pin low
 8002fe4:	0029      	movs	r1, r5
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	0020      	movs	r0, r4
 8002fea:	f002 f895 	bl	8005118 <HAL_GPIO_WritePin>
	delay_us(18000);   // wait for 18ms
 8002fee:	4808      	ldr	r0, [pc, #32]	; (8003010 <DHT11_Start+0x50>)
 8002ff0:	f000 f94c 	bl	800328c <delay_us>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1); //pull the pin high
 8002ff4:	0029      	movs	r1, r5
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	0020      	movs	r0, r4
 8002ffa:	f002 f88d 	bl	8005118 <HAL_GPIO_WritePin>
	delay_us(20);
 8002ffe:	2014      	movs	r0, #20
 8003000:	f000 f944 	bl	800328c <delay_us>
	SetPin_Input(DHT11_PORT, DHT11_PIN);    // set pin as input
 8003004:	0029      	movs	r1, r5
 8003006:	0020      	movs	r0, r4
 8003008:	f7ff ffb4 	bl	8002f74 <SetPin_Input>
}
 800300c:	bd70      	pop	{r4, r5, r6, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	00004650 	.word	0x00004650

08003014 <DHT11_Check_Response>:
  * @brief Function to check DHT11 availability (respond from the sensor)
  * @param None
  * @retval None
  */
uint8_t DHT11_Check_Response(void)
{
 8003014:	b570      	push	{r4, r5, r6, lr}
	uint8_t Response = 0;
	delay_us(40);
 8003016:	2028      	movs	r0, #40	; 0x28
 8003018:	f000 f938 	bl	800328c <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	20a0      	movs	r0, #160	; 0xa0
 8003020:	0049      	lsls	r1, r1, #1
 8003022:	05c0      	lsls	r0, r0, #23
 8003024:	f002 f872 	bl	800510c <HAL_GPIO_ReadPin>
	uint8_t Response = 0;
 8003028:	2400      	movs	r4, #0
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800302a:	42a0      	cmp	r0, r4
 800302c:	d10c      	bne.n	8003048 <DHT11_Check_Response+0x34>
	{
		delay_us(80);
 800302e:	2050      	movs	r0, #80	; 0x50
 8003030:	f000 f92c 	bl	800328c <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	20a0      	movs	r0, #160	; 0xa0
 8003038:	0049      	lsls	r1, r1, #1
 800303a:	05c0      	lsls	r0, r0, #23
 800303c:	f002 f866 	bl	800510c <HAL_GPIO_ReadPin>
 8003040:	3401      	adds	r4, #1
 8003042:	2800      	cmp	r0, #0
 8003044:	d100      	bne.n	8003048 <DHT11_Check_Response+0x34>
		else Response = -1;
 8003046:	34fe      	adds	r4, #254	; 0xfe
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8003048:	2680      	movs	r6, #128	; 0x80
 800304a:	25a0      	movs	r5, #160	; 0xa0
 800304c:	0076      	lsls	r6, r6, #1
 800304e:	05ed      	lsls	r5, r5, #23
 8003050:	0031      	movs	r1, r6
 8003052:	0028      	movs	r0, r5
 8003054:	f002 f85a 	bl	800510c <HAL_GPIO_ReadPin>
 8003058:	2800      	cmp	r0, #0
 800305a:	d1f9      	bne.n	8003050 <DHT11_Check_Response+0x3c>
	return Response;
}
 800305c:	0020      	movs	r0, r4
 800305e:	bd70      	pop	{r4, r5, r6, pc}

08003060 <DHT11_Read>:
  * @brief Function to read sensor DHT11's data
  * @param None
  * @retval None
  */
uint8_t DHT11_Read (void)
{
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i = 0;
	uint8_t j = 0;
	for (j = 0; j < 8; j++)
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8003062:	2680      	movs	r6, #128	; 0x80
 8003064:	27a0      	movs	r7, #160	; 0xa0
{
 8003066:	2507      	movs	r5, #7
	uint8_t i = 0;
 8003068:	2400      	movs	r4, #0
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 800306a:	0076      	lsls	r6, r6, #1
 800306c:	05ff      	lsls	r7, r7, #23
 800306e:	2180      	movs	r1, #128	; 0x80
 8003070:	20a0      	movs	r0, #160	; 0xa0
 8003072:	0049      	lsls	r1, r1, #1
 8003074:	05c0      	lsls	r0, r0, #23
 8003076:	f002 f849 	bl	800510c <HAL_GPIO_ReadPin>
 800307a:	2800      	cmp	r0, #0
 800307c:	d0f7      	beq.n	800306e <DHT11_Read+0xe>
		delay_us(40);   // wait for 40 us
 800307e:	2028      	movs	r0, #40	; 0x28
 8003080:	f000 f904 	bl	800328c <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8003084:	0031      	movs	r1, r6
 8003086:	0038      	movs	r0, r7
 8003088:	f002 f840 	bl	800510c <HAL_GPIO_ReadPin>
 800308c:	2301      	movs	r3, #1
 800308e:	b262      	sxtb	r2, r4
 8003090:	40ab      	lsls	r3, r5
		{
			i&= ~(1<<(7-j));   // write 0
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8003092:	0014      	movs	r4, r2
 8003094:	b25b      	sxtb	r3, r3
 8003096:	431c      	orrs	r4, r3
 8003098:	b2e4      	uxtb	r4, r4
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800309a:	2800      	cmp	r0, #0
 800309c:	d101      	bne.n	80030a2 <DHT11_Read+0x42>
			i&= ~(1<<(7-j));   // write 0
 800309e:	439a      	bics	r2, r3
 80030a0:	b2d4      	uxtb	r4, r2
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80030a2:	0031      	movs	r1, r6
 80030a4:	0038      	movs	r0, r7
 80030a6:	f002 f831 	bl	800510c <HAL_GPIO_ReadPin>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d1f9      	bne.n	80030a2 <DHT11_Read+0x42>
	for (j = 0; j < 8; j++)
 80030ae:	3d01      	subs	r5, #1
 80030b0:	d2dd      	bcs.n	800306e <DHT11_Read+0xe>

	}
	return i;
}
 80030b2:	0020      	movs	r0, r4
 80030b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030b8 <DHT11_Process>:

DHT11_t DHT11_Process (void){
 80030b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030ba:	0004      	movs	r4, r0
	float Temp_f = {0};
	float RH_f = {0};


	//DHT 11 Process
	DHT11_Start();
 80030bc:	f7ff ff80 	bl	8002fc0 <DHT11_Start>
	Available   = DHT11_Check_Response();
 80030c0:	f7ff ffa8 	bl	8003014 <DHT11_Check_Response>
	RH_byte1    = DHT11_Read();
 80030c4:	f7ff ffcc 	bl	8003060 <DHT11_Read>
 80030c8:	9000      	str	r0, [sp, #0]
	RH_byte2    = DHT11_Read();
 80030ca:	f7ff ffc9 	bl	8003060 <DHT11_Read>
 80030ce:	9001      	str	r0, [sp, #4]
	Temp_byte1  = DHT11_Read();
 80030d0:	f7ff ffc6 	bl	8003060 <DHT11_Read>
 80030d4:	0005      	movs	r5, r0
	Temp_byte2  = DHT11_Read();
 80030d6:	f7ff ffc3 	bl	8003060 <DHT11_Read>
 80030da:	0006      	movs	r6, r0
	Sum     	= DHT11_Read();
 80030dc:	f7ff ffc0 	bl	8003060 <DHT11_Read>

	//sprintf(DHT11_Data,"T%02d.%02d;H%02d.%02dF\r\n",(int)(Temp_f),(int)(Temp_f*100)%100,(int)(RH_f),(int)(RH_f*100)%100);*/
	//sprintf(str,"T%d;H%d\r\n",(int)(Temp_f),(int)(RH_f));
	//HAL_UART_Transmit(&huart2, str, sizeof(str), 100);

	HAL_Delay(1200);
 80030e0:	2096      	movs	r0, #150	; 0x96
 80030e2:	00c0      	lsls	r0, r0, #3
 80030e4:	f000 fcb4 	bl	8003a50 <HAL_Delay>
	data.temperature = (float)(Temp_byte1) + ((float)(Temp_byte2) * 0.1);
 80030e8:	0030      	movs	r0, r6
 80030ea:	f7fd fceb 	bl	8000ac4 <__aeabi_ui2f>
 80030ee:	f7ff fb3d 	bl	800276c <__aeabi_f2d>
 80030f2:	4a17      	ldr	r2, [pc, #92]	; (8003150 <DHT11_Process+0x98>)
 80030f4:	4b17      	ldr	r3, [pc, #92]	; (8003154 <DHT11_Process+0x9c>)
 80030f6:	f7fe fc91 	bl	8001a1c <__aeabi_dmul>
 80030fa:	0006      	movs	r6, r0
 80030fc:	0028      	movs	r0, r5
 80030fe:	000f      	movs	r7, r1
 8003100:	f7fd fce0 	bl	8000ac4 <__aeabi_ui2f>
 8003104:	f7ff fb32 	bl	800276c <__aeabi_f2d>
 8003108:	0002      	movs	r2, r0
 800310a:	000b      	movs	r3, r1
 800310c:	0030      	movs	r0, r6
 800310e:	0039      	movs	r1, r7
 8003110:	f7fd fd14 	bl	8000b3c <__aeabi_dadd>
 8003114:	f7ff fb72 	bl	80027fc <__aeabi_d2f>
 8003118:	6020      	str	r0, [r4, #0]
	data.humidity 	 = (float)(RH_byte1) + ((float)(RH_byte2) * 0.1);
 800311a:	9801      	ldr	r0, [sp, #4]
 800311c:	f7fd fcd2 	bl	8000ac4 <__aeabi_ui2f>
 8003120:	f7ff fb24 	bl	800276c <__aeabi_f2d>
 8003124:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <DHT11_Process+0x98>)
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <DHT11_Process+0x9c>)
 8003128:	f7fe fc78 	bl	8001a1c <__aeabi_dmul>
 800312c:	0006      	movs	r6, r0
 800312e:	9800      	ldr	r0, [sp, #0]
 8003130:	000f      	movs	r7, r1
 8003132:	f7fd fcc7 	bl	8000ac4 <__aeabi_ui2f>
 8003136:	f7ff fb19 	bl	800276c <__aeabi_f2d>
 800313a:	0002      	movs	r2, r0
 800313c:	000b      	movs	r3, r1
 800313e:	0030      	movs	r0, r6
 8003140:	0039      	movs	r1, r7
 8003142:	f7fd fcfb 	bl	8000b3c <__aeabi_dadd>
 8003146:	f7ff fb59 	bl	80027fc <__aeabi_d2f>
 800314a:	6060      	str	r0, [r4, #4]
	return data;

}
 800314c:	0020      	movs	r0, r4
 800314e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003150:	9999999a 	.word	0x9999999a
 8003154:	3fb99999 	.word	0x3fb99999

08003158 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003158:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 800315a:	2001      	movs	r0, #1
 800315c:	4a08      	ldr	r2, [pc, #32]	; (8003180 <MX_DMA_Init+0x28>)
 800315e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003160:	4301      	orrs	r1, r0
 8003162:	6311      	str	r1, [r2, #48]	; 0x30
 8003164:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003168:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800316a:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800316c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800316e:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003170:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003172:	f001 fce1 	bl	8004b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003176:	200b      	movs	r0, #11
 8003178:	f001 fd08 	bl	8004b8c <HAL_NVIC_EnableIRQ>

}
 800317c:	bd07      	pop	{r0, r1, r2, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	40021000 	.word	0x40021000

08003184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003184:	b510      	push	{r4, lr}
 8003186:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003188:	2220      	movs	r2, #32
 800318a:	2100      	movs	r1, #0
 800318c:	a808      	add	r0, sp, #32
 800318e:	f00c fa6d 	bl	800f66c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003192:	2214      	movs	r2, #20
 8003194:	2100      	movs	r1, #0
 8003196:	a801      	add	r0, sp, #4
 8003198:	f00c fa68 	bl	800f66c <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 800319c:	2300      	movs	r3, #0
 800319e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 80031a0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	031b      	lsls	r3, r3, #12
 80031a6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80031a8:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80031aa:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80031ac:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031ae:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80031b0:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80031b4:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80031b6:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031b8:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80031ba:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80031bc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031be:	f002 f891 	bl	80052e4 <HAL_RCC_OscConfig>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d000      	beq.n	80031c8 <SystemClock_Config+0x44>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 80031c6:	e7fe      	b.n	80031c6 <SystemClock_Config+0x42>
  __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	4a11      	ldr	r2, [pc, #68]	; (8003210 <SystemClock_Config+0x8c>)
 80031cc:	055b      	lsls	r3, r3, #21
 80031ce:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <SystemClock_Config+0x90>)
 80031d6:	4910      	ldr	r1, [pc, #64]	; (8003218 <SystemClock_Config+0x94>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4011      	ands	r1, r2
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	0112      	lsls	r2, r2, #4
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	000a      	movs	r2, r1
 80031e8:	4022      	ands	r2, r4
 80031ea:	4221      	tst	r1, r4
 80031ec:	d1fa      	bne.n	80031e4 <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80031ee:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031f0:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80031f2:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031f4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031f6:	3b0c      	subs	r3, #12
 80031f8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031fa:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031fc:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031fe:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003200:	f002 fafc 	bl	80057fc <HAL_RCC_ClockConfig>
 8003204:	2800      	cmp	r0, #0
 8003206:	d000      	beq.n	800320a <SystemClock_Config+0x86>
  while (1)
 8003208:	e7fe      	b.n	8003208 <SystemClock_Config+0x84>
}
 800320a:	b014      	add	sp, #80	; 0x50
 800320c:	bd10      	pop	{r4, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	40021000 	.word	0x40021000
 8003214:	40007000 	.word	0x40007000
 8003218:	ffffe7ff 	.word	0xffffe7ff

0800321c <main>:
{
 800321c:	b513      	push	{r0, r1, r4, lr}
  HAL_Init();
 800321e:	f001 f929 	bl	8004474 <HAL_Init>
  SystemClock_Config();
 8003222:	f7ff ffaf 	bl	8003184 <SystemClock_Config>
  MX_LoRaWAN_Init();
 8003226:	f7ff fb9b 	bl	8002960 <MX_LoRaWAN_Init>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800322a:	2208      	movs	r2, #8
 800322c:	2100      	movs	r1, #0
 800322e:	4668      	mov	r0, sp
 8003230:	f00c fa1c 	bl	800f66c <memset>
 __HAL_RCC_TIM6_CLK_ENABLE();
 8003234:	2310      	movs	r3, #16
 8003236:	4a11      	ldr	r2, [pc, #68]	; (800327c <main+0x60>)
  htim6.Instance = TIM6;
 8003238:	4c11      	ldr	r4, [pc, #68]	; (8003280 <main+0x64>)
 __HAL_RCC_TIM6_CLK_ENABLE();
 800323a:	6b91      	ldr	r1, [r2, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800323c:	0020      	movs	r0, r4
 __HAL_RCC_TIM6_CLK_ENABLE();
 800323e:	430b      	orrs	r3, r1
 8003240:	6393      	str	r3, [r2, #56]	; 0x38
  htim6.Instance = TIM6;
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <main+0x68>)
 8003244:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 32-1;
 8003246:	231f      	movs	r3, #31
 8003248:	6063      	str	r3, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324a:	2300      	movs	r3, #0
 800324c:	60a3      	str	r3, [r4, #8]
  htim6.Init.Period = 65535;
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <main+0x6c>)
 8003250:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003252:	f003 fa3a 	bl	80066ca <HAL_TIM_Base_Init>
 8003256:	2800      	cmp	r0, #0
 8003258:	d000      	beq.n	800325c <main+0x40>
  while (1)
 800325a:	e7fe      	b.n	800325a <main+0x3e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800325c:	9000      	str	r0, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800325e:	9001      	str	r0, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003260:	4669      	mov	r1, sp
 8003262:	0020      	movs	r0, r4
 8003264:	f003 fa84 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 8003268:	2800      	cmp	r0, #0
 800326a:	d000      	beq.n	800326e <main+0x52>
  while (1)
 800326c:	e7fe      	b.n	800326c <main+0x50>
  HAL_TIM_Base_Start(&htim6);
 800326e:	0020      	movs	r0, r4
 8003270:	f003 fa50 	bl	8006714 <HAL_TIM_Base_Start>
    MX_LoRaWAN_Process();
 8003274:	f7ff fb7a 	bl	800296c <MX_LoRaWAN_Process>
  while (1)
 8003278:	e7fc      	b.n	8003274 <main+0x58>
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	40021000 	.word	0x40021000
 8003280:	20001404 	.word	0x20001404
 8003284:	40001000 	.word	0x40001000
 8003288:	0000ffff 	.word	0x0000ffff

0800328c <delay_us>:
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800328c:	2200      	movs	r2, #0
 800328e:	4b03      	ldr	r3, [pc, #12]	; (800329c <delay_us+0x10>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8003294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003296:	4282      	cmp	r2, r0
 8003298:	d3fc      	bcc.n	8003294 <delay_us+0x8>
}
 800329a:	4770      	bx	lr
 800329c:	20001404 	.word	0x20001404

080032a0 <Error_Handler>:
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <Error_Handler>
	...

080032a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80032a4:	b530      	push	{r4, r5, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80032a6:	2400      	movs	r4, #0
{
 80032a8:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 80032aa:	2214      	movs	r2, #20
 80032ac:	2100      	movs	r1, #0
 80032ae:	a801      	add	r0, sp, #4
 80032b0:	f00c f9dc 	bl	800f66c <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80032b4:	2228      	movs	r2, #40	; 0x28
 80032b6:	0021      	movs	r1, r4
 80032b8:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 80032ba:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80032bc:	f00c f9d6 	bl	800f66c <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80032c0:	4d24      	ldr	r5, [pc, #144]	; (8003354 <MX_RTC_Init+0xb0>)
 80032c2:	4b25      	ldr	r3, [pc, #148]	; (8003358 <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032c4:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 80032c6:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80032c8:	231f      	movs	r3, #31
 80032ca:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80032cc:	4b23      	ldr	r3, [pc, #140]	; (800335c <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80032ce:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80032d0:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032d2:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80032d4:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032d6:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032d8:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032da:	f002 fd23 	bl	8005d24 <HAL_RTC_Init>
 80032de:	42a0      	cmp	r0, r4
 80032e0:	d001      	beq.n	80032e6 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 80032e2:	f7ff ffdd 	bl	80032a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80032e6:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80032e8:	2200      	movs	r2, #0
 80032ea:	0028      	movs	r0, r5
  sTime.Hours = 0;
 80032ec:	809c      	strh	r4, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80032ee:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 80032f0:	719c      	strb	r4, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032f2:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80032f4:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80032f6:	f002 fd7d 	bl	8005df4 <HAL_RTC_SetTime>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d001      	beq.n	8003302 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80032fe:	f7ff ffcf 	bl	80032a0 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003304:	2200      	movs	r2, #0
 8003306:	4669      	mov	r1, sp
 8003308:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800330a:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800330c:	f002 fdf8 	bl	8005f00 <HAL_RTC_SetDate>
 8003310:	2800      	cmp	r0, #0
 8003312:	d001      	beq.n	8003318 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8003314:	f7ff ffc4 	bl	80032a0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003318:	2200      	movs	r2, #0
 800331a:	466b      	mov	r3, sp
 800331c:	831a      	strh	r2, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 800331e:	769a      	strb	r2, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003320:	23a0      	movs	r3, #160	; 0xa0
 8003322:	051b      	lsls	r3, r3, #20
 8003324:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 8003326:	2319      	movs	r3, #25
 8003328:	211e      	movs	r1, #30
 800332a:	446b      	add	r3, sp
 800332c:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 800332e:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003330:	0028      	movs	r0, r5
  sAlarm.Alarm = RTC_ALARM_A;
 8003332:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003334:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 8003336:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003338:	9209      	str	r2, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800333a:	920a      	str	r2, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800333c:	920b      	str	r2, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800333e:	920d      	str	r2, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 8003340:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003342:	f002 fe49 	bl	8005fd8 <HAL_RTC_SetAlarm_IT>
 8003346:	2800      	cmp	r0, #0
 8003348:	d001      	beq.n	800334e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800334a:	f7ff ffa9 	bl	80032a0 <Error_Handler>
  }

}
 800334e:	b011      	add	sp, #68	; 0x44
 8003350:	bd30      	pop	{r4, r5, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	20001444 	.word	0x20001444
 8003358:	40002800 	.word	0x40002800
 800335c:	000003ff 	.word	0x000003ff
 8003360:	00010101 	.word	0x00010101

08003364 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003364:	b510      	push	{r4, lr}
 8003366:	0004      	movs	r4, r0
 8003368:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800336a:	2238      	movs	r2, #56	; 0x38
 800336c:	2100      	movs	r1, #0
 800336e:	4668      	mov	r0, sp
 8003370:	f00c f97c 	bl	800f66c <memset>
  if (rtcHandle->Instance == RTC)
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HAL_RTC_MspInit+0x58>)
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d11c      	bne.n	80033b6 <HAL_RTC_MspInit+0x52>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800337c:	2304      	movs	r3, #4
 800337e:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003380:	33fc      	adds	r3, #252	; 0xfc
 8003382:	9302      	str	r3, [sp, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8003384:	2300      	movs	r3, #0
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003386:	4668      	mov	r0, sp
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8003388:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 800338a:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800338c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800338e:	f001 ffa9 	bl	80052e4 <HAL_RCC_OscConfig>
 8003392:	2800      	cmp	r0, #0
 8003394:	d001      	beq.n	800339a <HAL_RTC_MspInit+0x36>
    {
      Error_Handler();
 8003396:	f7ff ff83 	bl	80032a0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	4a08      	ldr	r2, [pc, #32]	; (80033c0 <HAL_RTC_MspInit+0x5c>)
 800339e:	02db      	lsls	r3, r3, #11
 80033a0:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80033a2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80033a8:	2200      	movs	r2, #0
 80033aa:	0011      	movs	r1, r2
 80033ac:	f001 fbc4 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80033b0:	2002      	movs	r0, #2
 80033b2:	f001 fbeb 	bl	8004b8c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 80033b6:	b00e      	add	sp, #56	; 0x38
 80033b8:	bd10      	pop	{r4, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	40002800 	.word	0x40002800
 80033c0:	40021000 	.word	0x40021000

080033c4 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 80033c4:	4b01      	ldr	r3, [pc, #4]	; (80033cc <RTC_IF_GetTimerContext+0x8>)
 80033c6:	6818      	ldr	r0, [r3, #0]
}
 80033c8:	4770      	bx	lr
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	20000438 	.word	0x20000438

080033d0 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 80033d0:	2003      	movs	r0, #3
 80033d2:	4770      	bx	lr

080033d4 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80033d4:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80033d6:	0e41      	lsrs	r1, r0, #25
 80033d8:	227d      	movs	r2, #125	; 0x7d
 80033da:	2300      	movs	r3, #0
 80033dc:	01c0      	lsls	r0, r0, #7
 80033de:	f7fd f877 	bl	80004d0 <__aeabi_uldivmod>
}
 80033e2:	bd10      	pop	{r4, pc}

080033e4 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 80033e4:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80033e6:	227d      	movs	r2, #125	; 0x7d
 80033e8:	2300      	movs	r3, #0
 80033ea:	2100      	movs	r1, #0
 80033ec:	f7fd f890 	bl	8000510 <__aeabi_lmul>
 80033f0:	0649      	lsls	r1, r1, #25
 80033f2:	09c0      	lsrs	r0, r0, #7
 80033f4:	4308      	orrs	r0, r1
}
 80033f6:	bd10      	pop	{r4, pc}

080033f8 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80033f8:	4806      	ldr	r0, [pc, #24]	; (8003414 <RTC_IF_StopTimer+0x1c>)
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <RTC_IF_StopTimer+0x20>)
 80033fc:	6801      	ldr	r1, [r0, #0]
{
 80033fe:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003400:	68ca      	ldr	r2, [r1, #12]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	4313      	orrs	r3, r2
 8003406:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	0049      	lsls	r1, r1, #1
 800340c:	f002 fbc2 	bl	8005b94 <HAL_RTC_DeactivateAlarm>
}
 8003410:	2000      	movs	r0, #0
 8003412:	bd10      	pop	{r4, pc}
 8003414:	20001444 	.word	0x20001444
 8003418:	fffffe7f 	.word	0xfffffe7f

0800341c <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800341c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800341e:	4e25      	ldr	r6, [pc, #148]	; (80034b4 <RTC_GetCalendarValue+0x98>)
{
 8003420:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003422:	2200      	movs	r2, #0
 8003424:	0030      	movs	r0, r6
{
 8003426:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003428:	f002 feb6 	bl	8006198 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800342c:	4f22      	ldr	r7, [pc, #136]	; (80034b8 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 800342e:	2200      	movs	r2, #0
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	0029      	movs	r1, r5
 8003434:	0030      	movs	r0, r6
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	f002 fed8 	bl	80061ec <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800343c:	2200      	movs	r2, #0
 800343e:	0021      	movs	r1, r4
 8003440:	0030      	movs	r0, r6
 8003442:	f002 fea9 	bl	8006198 <HAL_RTC_GetTime>
 8003446:	466b      	mov	r3, sp
 8003448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800344a:	889b      	ldrh	r3, [r3, #4]
 800344c:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800344e:	429a      	cmp	r2, r3
 8003450:	d1ec      	bne.n	800342c <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003452:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003454:	78ea      	ldrb	r2, [r5, #3]
 8003456:	4e19      	ldr	r6, [pc, #100]	; (80034bc <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003458:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800345a:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800345c:	400a      	ands	r2, r1
 800345e:	4253      	negs	r3, r2
 8003460:	4153      	adcs	r3, r2
 8003462:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <RTC_GetCalendarValue+0xa4>)
 8003464:	425b      	negs	r3, r3
 8003466:	4013      	ands	r3, r2
 8003468:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <RTC_GetCalendarValue+0xa8>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800346a:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800346c:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800346e:	223d      	movs	r2, #61	; 0x3d
 8003470:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8003472:	007f      	lsls	r7, r7, #1
 8003474:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003476:	3201      	adds	r2, #1
 8003478:	0fd0      	lsrs	r0, r2, #31
 800347a:	1882      	adds	r2, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 800347c:	78a8      	ldrb	r0, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800347e:	3603      	adds	r6, #3
 8003480:	3801      	subs	r0, #1
 8003482:	08b6      	lsrs	r6, r6, #2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003484:	1052      	asrs	r2, r2, #1
 8003486:	1986      	adds	r6, r0, r6
 8003488:	1996      	adds	r6, r2, r6

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 800348a:	480f      	ldr	r0, [pc, #60]	; (80034c8 <RTC_GetCalendarValue+0xac>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800348c:	400b      	ands	r3, r1
  calendarValue += (RTC_DateStruct->Date - 1);
 800348e:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 8003490:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8003492:	20e1      	movs	r0, #225	; 0xe1
 8003494:	7822      	ldrb	r2, [r4, #0]
 8003496:	0100      	lsls	r0, r0, #4
 8003498:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800349a:	223c      	movs	r2, #60	; 0x3c
 800349c:	7861      	ldrb	r1, [r4, #1]
 800349e:	434a      	muls	r2, r1
 80034a0:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80034a2:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80034a4:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80034a6:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	0280      	lsls	r0, r0, #10
 80034ac:	1ac0      	subs	r0, r0, r3
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <RTC_GetCalendarValue+0xb0>)
 80034b0:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 80034b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034b4:	20001444 	.word	0x20001444
 80034b8:	40002800 	.word	0x40002800
 80034bc:	000005b5 	.word	0x000005b5
 80034c0:	ffaaaab0 	.word	0xffaaaab0
 80034c4:	0099aaa0 	.word	0x0099aaa0
 80034c8:	00015180 	.word	0x00015180
 80034cc:	000003ff 	.word	0x000003ff

080034d0 <RTC_IF_SetTimerContext>:
{
 80034d0:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80034d2:	4c04      	ldr	r4, [pc, #16]	; (80034e4 <RTC_IF_SetTimerContext+0x14>)
 80034d4:	0020      	movs	r0, r4
 80034d6:	1d21      	adds	r1, r4, #4
 80034d8:	3018      	adds	r0, #24
 80034da:	f7ff ff9f 	bl	800341c <RTC_GetCalendarValue>
 80034de:	6020      	str	r0, [r4, #0]
}
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	20000438 	.word	0x20000438

080034e8 <RTC_IF_GetTimerElapsedTime>:
{
 80034e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80034ea:	4668      	mov	r0, sp
 80034ec:	a901      	add	r1, sp, #4
 80034ee:	f7ff ff95 	bl	800341c <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80034f2:	4b02      	ldr	r3, [pc, #8]	; (80034fc <RTC_IF_GetTimerElapsedTime+0x14>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1ac0      	subs	r0, r0, r3
}
 80034f8:	b007      	add	sp, #28
 80034fa:	bd00      	pop	{pc}
 80034fc:	20000438 	.word	0x20000438

08003500 <RTC_IF_StartTimer>:
{
 8003500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003502:	b087      	sub	sp, #28
 8003504:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003506:	f7ff ffef 	bl	80034e8 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 800350a:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 800350c:	1a30      	subs	r0, r6, r0
 800350e:	2803      	cmp	r0, #3
 8003510:	d800      	bhi.n	8003514 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003512:	2101      	movs	r1, #1
 8003514:	2002      	movs	r0, #2
 8003516:	f00b fc3b 	bl	800ed90 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 800351a:	f00b fc65 	bl	800ede8 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800351e:	4c41      	ldr	r4, [pc, #260]	; (8003624 <RTC_IF_StartTimer+0x124>)
 8003520:	7963      	ldrb	r3, [r4, #5]
 8003522:	68a7      	ldr	r7, [r4, #8]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	79a3      	ldrb	r3, [r4, #6]
 8003528:	7925      	ldrb	r5, [r4, #4]
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	79e3      	ldrb	r3, [r4, #7]
 800352e:	9302      	str	r3, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003530:	7e63      	ldrb	r3, [r4, #25]
 8003532:	9303      	str	r3, [sp, #12]
 8003534:	7ea3      	ldrb	r3, [r4, #26]
 8003536:	9304      	str	r3, [sp, #16]
 8003538:	7ee3      	ldrb	r3, [r4, #27]
 800353a:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 800353c:	f7ff ff5c 	bl	80033f8 <RTC_IF_StopTimer>
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003540:	4669      	mov	r1, sp
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003542:	4a39      	ldr	r2, [pc, #228]	; (8003628 <RTC_IF_StartTimer+0x128>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003544:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003546:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003548:	0d9b      	lsrs	r3, r3, #22
  rtcAlarmDays =  RTC_DateStruct.Date;
 800354a:	8a08      	ldrh	r0, [r1, #16]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	9204      	str	r2, [sp, #16]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003550:	4a36      	ldr	r2, [pc, #216]	; (800362c <RTC_IF_StartTimer+0x12c>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003552:	b29b      	uxth	r3, r3
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8003554:	0ab6      	lsrs	r6, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003556:	4296      	cmp	r6, r2
 8003558:	d843      	bhi.n	80035e2 <RTC_IF_StartTimer+0xe2>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800355a:	22e1      	movs	r2, #225	; 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800355c:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	4296      	cmp	r6, r2
 8003562:	d243      	bcs.n	80035ec <RTC_IF_StartTimer+0xec>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8003564:	466a      	mov	r2, sp
 8003566:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003568:	2e3b      	cmp	r6, #59	; 0x3b
 800356a:	d844      	bhi.n	80035f6 <RTC_IF_StartTimer+0xf6>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 800356c:	0a9a      	lsrs	r2, r3, #10
 800356e:	0291      	lsls	r1, r2, #10
 8003570:	1a5b      	subs	r3, r3, r1
 8003572:	b29b      	uxth	r3, r3
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	9b01      	ldr	r3, [sp, #4]
 8003578:	18d2      	adds	r2, r2, r3
 800357a:	1996      	adds	r6, r2, r6
 800357c:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800357e:	2e3b      	cmp	r6, #59	; 0x3b
 8003580:	d83d      	bhi.n	80035fe <RTC_IF_StartTimer+0xfe>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003582:	2f3b      	cmp	r7, #59	; 0x3b
 8003584:	d840      	bhi.n	8003608 <RTC_IF_StartTimer+0x108>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8003586:	2d17      	cmp	r5, #23
 8003588:	d843      	bhi.n	8003612 <RTC_IF_StartTimer+0x112>
  if (RTC_DateStruct.Year % 4 == 0)
 800358a:	9a03      	ldr	r2, [sp, #12]
 800358c:	9905      	ldr	r1, [sp, #20]
 800358e:	4b28      	ldr	r3, [pc, #160]	; (8003630 <RTC_IF_StartTimer+0x130>)
 8003590:	3a01      	subs	r2, #1
 8003592:	0789      	lsls	r1, r1, #30
 8003594:	d142      	bne.n	800361c <RTC_IF_StartTimer+0x11c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8003596:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003598:	4288      	cmp	r0, r1
 800359a:	d902      	bls.n	80035a2 <RTC_IF_StartTimer+0xa2>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800359c:	f7fc ff54 	bl	8000448 <__aeabi_idivmod>
 80035a0:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80035a2:	9a00      	ldr	r2, [sp, #0]
 80035a4:	9b04      	ldr	r3, [sp, #16]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80035a6:	7725      	strb	r5, [r4, #28]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80035ac:	23a0      	movs	r3, #160	; 0xa0
 80035ae:	051b      	lsls	r3, r3, #20
 80035b0:	6363      	str	r3, [r4, #52]	; 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80035b2:	0023      	movs	r3, r4
 80035b4:	333c      	adds	r3, #60	; 0x3c
 80035b6:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80035b8:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80035ba:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80035bc:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80035be:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80035c0:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80035c2:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80035c4:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80035c6:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80035c8:	481a      	ldr	r0, [pc, #104]	; (8003634 <RTC_IF_StartTimer+0x134>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80035ca:	77a6      	strb	r6, [r4, #30]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80035cc:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80035ce:	63a5      	str	r5, [r4, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80035d0:	6325      	str	r5, [r4, #48]	; 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80035d2:	6423      	str	r3, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035d4:	62a5      	str	r5, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035d6:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80035d8:	f002 fcfe 	bl	8005fd8 <HAL_RTC_SetAlarm_IT>
}
 80035dc:	0028      	movs	r0, r5
 80035de:	b007      	add	sp, #28
 80035e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 80035e2:	4915      	ldr	r1, [pc, #84]	; (8003638 <RTC_IF_StartTimer+0x138>)
    rtcAlarmDays++;
 80035e4:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 80035e6:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 80035e8:	b280      	uxth	r0, r0
 80035ea:	e7b4      	b.n	8003556 <RTC_IF_StartTimer+0x56>
    timeoutValue -= SECONDS_IN_1HOUR;
 80035ec:	4913      	ldr	r1, [pc, #76]	; (800363c <RTC_IF_StartTimer+0x13c>)
    rtcAlarmHours++;
 80035ee:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 80035f0:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 80035f2:	b2ad      	uxth	r5, r5
 80035f4:	e7b4      	b.n	8003560 <RTC_IF_StartTimer+0x60>
    rtcAlarmMinutes++;
 80035f6:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 80035f8:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 80035fa:	b2bf      	uxth	r7, r7
 80035fc:	e7b4      	b.n	8003568 <RTC_IF_StartTimer+0x68>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80035fe:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8003600:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003602:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 8003604:	b2bf      	uxth	r7, r7
 8003606:	e7ba      	b.n	800357e <RTC_IF_StartTimer+0x7e>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8003608:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 800360a:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800360c:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 800360e:	b2ad      	uxth	r5, r5
 8003610:	e7b7      	b.n	8003582 <RTC_IF_StartTimer+0x82>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003612:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 8003614:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003616:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 8003618:	b280      	uxth	r0, r0
 800361a:	e7b4      	b.n	8003586 <RTC_IF_StartTimer+0x86>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800361c:	189b      	adds	r3, r3, r2
 800361e:	7b19      	ldrb	r1, [r3, #12]
 8003620:	e7ba      	b.n	8003598 <RTC_IF_StartTimer+0x98>
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	20000438 	.word	0x20000438
 8003628:	000003ff 	.word	0x000003ff
 800362c:	0001517f 	.word	0x0001517f
 8003630:	08012680 	.word	0x08012680
 8003634:	20001444 	.word	0x20001444
 8003638:	fffeae80 	.word	0xfffeae80
 800363c:	fffff1f0 	.word	0xfffff1f0

08003640 <RTC_IF_GetTime>:
{
 8003640:	b530      	push	{r4, r5, lr}
 8003642:	b087      	sub	sp, #28
 8003644:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003646:	a901      	add	r1, sp, #4
 8003648:	4668      	mov	r0, sp
 800364a:	f7ff fee7 	bl	800341c <RTC_GetCalendarValue>
 800364e:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003650:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003652:	227d      	movs	r2, #125	; 0x7d
 8003654:	2300      	movs	r3, #0
 8003656:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003658:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800365a:	f7fc ff59 	bl	8000510 <__aeabi_lmul>
 800365e:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8003660:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8003662:	0aa0      	lsrs	r0, r4, #10
}
 8003664:	b007      	add	sp, #28
 8003666:	bd30      	pop	{r4, r5, pc}

08003668 <RTC_IF_BkUp_Write_Seconds>:
{
 8003668:	b510      	push	{r4, lr}
 800366a:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800366c:	2100      	movs	r1, #0
 800366e:	4802      	ldr	r0, [pc, #8]	; (8003678 <RTC_IF_BkUp_Write_Seconds+0x10>)
 8003670:	f002 fdde 	bl	8006230 <HAL_RTCEx_BKUPWrite>
}
 8003674:	bd10      	pop	{r4, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	20001444 	.word	0x20001444

0800367c <RTC_IF_BkUp_Write_SubSeconds>:
{
 800367c:	b510      	push	{r4, lr}
 800367e:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003680:	2101      	movs	r1, #1
 8003682:	4802      	ldr	r0, [pc, #8]	; (800368c <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8003684:	f002 fdd4 	bl	8006230 <HAL_RTCEx_BKUPWrite>
}
 8003688:	bd10      	pop	{r4, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	20001444 	.word	0x20001444

08003690 <RTC_IF_BkUp_Read_Seconds>:
{
 8003690:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003692:	2100      	movs	r1, #0
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <RTC_IF_BkUp_Read_Seconds+0xc>)
 8003696:	f002 fdd1 	bl	800623c <HAL_RTCEx_BKUPRead>
}
 800369a:	bd10      	pop	{r4, pc}
 800369c:	20001444 	.word	0x20001444

080036a0 <RTC_IF_BkUp_Read_SubSeconds>:
{
 80036a0:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80036a2:	2101      	movs	r1, #1
 80036a4:	4801      	ldr	r0, [pc, #4]	; (80036ac <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 80036a6:	f002 fdc9 	bl	800623c <HAL_RTCEx_BKUPRead>
}
 80036aa:	bd10      	pop	{r4, pc}
 80036ac:	20001444 	.word	0x20001444

080036b0 <RTC_IF_Init>:
{
 80036b0:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 80036b2:	4c11      	ldr	r4, [pc, #68]	; (80036f8 <RTC_IF_Init+0x48>)
{
 80036b4:	b08b      	sub	sp, #44	; 0x2c
  if (RTC_Initalized == false)
 80036b6:	3444      	adds	r4, #68	; 0x44
 80036b8:	7823      	ldrb	r3, [r4, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d119      	bne.n	80036f2 <RTC_IF_Init+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80036be:	3320      	adds	r3, #32
 80036c0:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80036c2:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036c4:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80036c6:	025b      	lsls	r3, r3, #9
 80036c8:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036ca:	f002 f985 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d000      	beq.n	80036d4 <RTC_IF_Init+0x24>
      while (1);
 80036d2:	e7fe      	b.n	80036d2 <RTC_IF_Init+0x22>
    MX_RTC_Init();
 80036d4:	f7ff fde6 	bl	80032a4 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	4d08      	ldr	r5, [pc, #32]	; (80036fc <RTC_IF_Init+0x4c>)
 80036dc:	0049      	lsls	r1, r1, #1
 80036de:	0028      	movs	r0, r5
 80036e0:	f002 fa58 	bl	8005b94 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80036e4:	0028      	movs	r0, r5
 80036e6:	f002 fdaf 	bl	8006248 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 80036ea:	f7ff fef1 	bl	80034d0 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 80036ee:	2301      	movs	r3, #1
 80036f0:	7023      	strb	r3, [r4, #0]
}
 80036f2:	2000      	movs	r0, #0
 80036f4:	b00b      	add	sp, #44	; 0x2c
 80036f6:	bd30      	pop	{r4, r5, pc}
 80036f8:	20000438 	.word	0x20000438
 80036fc:	20001444 	.word	0x20001444

08003700 <RTC_IF_GetTimerValue>:
{
 8003700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 8003702:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <RTC_IF_GetTimerValue+0x1c>)
 8003706:	3344      	adds	r3, #68	; 0x44
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	4283      	cmp	r3, r0
 800370c:	d003      	beq.n	8003716 <RTC_IF_GetTimerValue+0x16>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800370e:	4668      	mov	r0, sp
 8003710:	a901      	add	r1, sp, #4
 8003712:	f7ff fe83 	bl	800341c <RTC_GetCalendarValue>
}
 8003716:	b007      	add	sp, #28
 8003718:	bd00      	pop	{pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	20000438 	.word	0x20000438

08003720 <RTC_IF_DelayMs>:
{
 8003720:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003722:	227d      	movs	r2, #125	; 0x7d
 8003724:	2300      	movs	r3, #0
 8003726:	0e41      	lsrs	r1, r0, #25
 8003728:	01c0      	lsls	r0, r0, #7
 800372a:	f7fc fed1 	bl	80004d0 <__aeabi_uldivmod>
 800372e:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8003730:	f7ff ffe6 	bl	8003700 <RTC_IF_GetTimerValue>
 8003734:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003736:	f7ff ffe3 	bl	8003700 <RTC_IF_GetTimerValue>
 800373a:	1b40      	subs	r0, r0, r5
 800373c:	42a0      	cmp	r0, r4
 800373e:	d300      	bcc.n	8003742 <RTC_IF_DelayMs+0x22>
}
 8003740:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	e7f7      	b.n	8003736 <RTC_IF_DelayMs+0x16>

08003746 <HAL_RTC_AlarmAEventCallback>:
{
 8003746:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 8003748:	f00b fdf2 	bl	800f330 <UTIL_TIMER_IRQ_Handler>
}
 800374c:	bd10      	pop	{r4, pc}

0800374e <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800374e:	4770      	bx	lr

08003750 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8003750:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003752:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003756:	b672      	cpsid	i
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 8003758:	f000 fd62 	bl	8004220 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 800375c:	4807      	ldr	r0, [pc, #28]	; (800377c <PWR_EnterStopMode+0x2c>)
 800375e:	f7ff fb4f 	bl	8002e00 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8003762:	2304      	movs	r3, #4
 8003764:	4a06      	ldr	r2, [pc, #24]	; (8003780 <PWR_EnterStopMode+0x30>)
 8003766:	6811      	ldr	r1, [r2, #0]
 8003768:	430b      	orrs	r3, r1
 800376a:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003770:	2101      	movs	r1, #1
 8003772:	0008      	movs	r0, r1
 8003774:	f001 fd1e 	bl	80051b4 <HAL_PWR_EnterSTOPMode>
}
 8003778:	bd10      	pop	{r4, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	20001360 	.word	0x20001360
 8003780:	40007000 	.word	0x40007000

08003784 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8003784:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003786:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800378a:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800378c:	2201      	movs	r2, #1
 800378e:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <PWR_ExitStopMode+0x4c>)
 8003790:	6819      	ldr	r1, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8003796:	2204      	movs	r2, #4
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	4211      	tst	r1, r2
 800379c:	d0fc      	beq.n	8003798 <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	0452      	lsls	r2, r2, #17
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80037a8:	2280      	movs	r2, #128	; 0x80
 80037aa:	0492      	lsls	r2, r2, #18
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	4211      	tst	r1, r2
 80037b0:	d0fc      	beq.n	80037ac <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80037b2:	2203      	movs	r2, #3
 80037b4:	68d9      	ldr	r1, [r3, #12]
 80037b6:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80037b8:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80037ba:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	400a      	ands	r2, r1
 80037c0:	2a0c      	cmp	r2, #12
 80037c2:	d1fb      	bne.n	80037bc <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 80037c4:	f000 fc52 	bl	800406c <CMWX1ZZABZ0XX_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
}
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	40021000 	.word	0x40021000

080037d4 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80037d4:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80037d6:	2101      	movs	r1, #1
 80037d8:	2000      	movs	r0, #0
 80037da:	f001 fcb3 	bl	8005144 <HAL_PWR_EnterSLEEPMode>
}
 80037de:	bd10      	pop	{r4, pc}

080037e0 <PWR_ExitSleepMode>:
 80037e0:	4770      	bx	lr

080037e2 <PWR_ExitOffMode>:
 80037e2:	4770      	bx	lr

080037e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <HAL_MspInit+0x28>)
 80037e8:	055b      	lsls	r3, r3, #21
 80037ea:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 80037ec:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 80037f2:	f001 fc9f 	bl	8005134 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 80037f6:	f001 fd23 	bl	8005240 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 80037fa:	2308      	movs	r3, #8
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_MspInit+0x2c>)
 80037fe:	6811      	ldr	r1, [r2, #0]
 8003800:	430b      	orrs	r3, r1
 8003802:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8003804:	f001 fd12 	bl	800522c <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003808:	bd10      	pop	{r4, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	40021000 	.word	0x40021000
 8003810:	40022000 	.word	0x40022000

08003814 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003814:	4770      	bx	lr

08003816 <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8003816:	46c0      	nop			; (mov r8, r8)
  while (1)
 8003818:	e7fd      	b.n	8003816 <HardFault_Handler>

0800381a <SVC_Handler>:
 800381a:	4770      	bx	lr

0800381c <PendSV_Handler>:
 800381c:	4770      	bx	lr

0800381e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800381e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003820:	f000 fe3c 	bl	800449c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003824:	bd10      	pop	{r4, pc}
	...

08003828 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8003828:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800382a:	4803      	ldr	r0, [pc, #12]	; (8003838 <EXTI0_1_IRQHandler+0x10>)
 800382c:	f001 fb1c 	bl	8004e68 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8003830:	4802      	ldr	r0, [pc, #8]	; (800383c <EXTI0_1_IRQHandler+0x14>)
 8003832:	f001 fb19 	bl	8004e68 <HAL_EXTI_IRQHandler>
#endif
}
 8003836:	bd10      	pop	{r4, pc}
 8003838:	200015ec 	.word	0x200015ec
 800383c:	200015e4 	.word	0x200015e4

08003840 <EXTI2_3_IRQHandler>:
 8003840:	4770      	bx	lr
	...

08003844 <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 8003844:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8003846:	4803      	ldr	r0, [pc, #12]	; (8003854 <EXTI4_15_IRQHandler+0x10>)
 8003848:	f001 fb0e 	bl	8004e68 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <EXTI4_15_IRQHandler+0x14>)
 800384e:	f001 fb0b 	bl	8004e68 <HAL_EXTI_IRQHandler>
#endif
}
 8003852:	bd10      	pop	{r4, pc}
 8003854:	200015dc 	.word	0x200015dc
 8003858:	200015f4 	.word	0x200015f4

0800385c <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800385c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 800385e:	4b02      	ldr	r3, [pc, #8]	; (8003868 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8003860:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003862:	f001 faa8 	bl	8004db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003866:	bd10      	pop	{r4, pc}
 8003868:	200014b0 	.word	0x200014b0

0800386c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800386c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 800386e:	4802      	ldr	r0, [pc, #8]	; (8003878 <USART2_IRQHandler+0xc>)
 8003870:	f003 f874 	bl	800695c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003874:	bd10      	pop	{r4, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	200014b0 	.word	0x200014b0

0800387c <RTC_IRQHandler>:



void RTC_IRQHandler(void)
{
 800387c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800387e:	4802      	ldr	r0, [pc, #8]	; (8003888 <RTC_IRQHandler+0xc>)
 8003880:	f002 f9ea 	bl	8005c58 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003884:	bd10      	pop	{r4, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	20001444 	.word	0x20001444

0800388c <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 800388c:	b40c      	push	{r2, r3}
 800388e:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003890:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8003892:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003894:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 8003896:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003898:	f00b fd90 	bl	800f3bc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800389c:	b003      	add	sp, #12
 800389e:	bc08      	pop	{r3}
 80038a0:	b002      	add	sp, #8
 80038a2:	4718      	bx	r3
 80038a4:	08013057 	.word	0x08013057

080038a8 <TimestampNow>:
{
 80038a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80038aa:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 80038ac:	ae02      	add	r6, sp, #8
 80038ae:	0030      	movs	r0, r6
{
 80038b0:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 80038b2:	f00b fbe1 	bl	800f078 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80038b6:	2204      	movs	r2, #4
 80038b8:	5eb3      	ldrsh	r3, [r6, r2]
 80038ba:	2110      	movs	r1, #16
 80038bc:	0020      	movs	r0, r4
 80038be:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <TimestampNow+0x2c>)
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	9b02      	ldr	r3, [sp, #8]
 80038c4:	f7ff ffe2 	bl	800388c <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 80038c8:	0020      	movs	r0, r4
 80038ca:	f7fc fc1d 	bl	8000108 <strlen>
 80038ce:	8028      	strh	r0, [r5, #0]
}
 80038d0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	08013057 	.word	0x08013057

080038d8 <SystemApp_Init>:
{
 80038d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038da:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038dc:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038de:	2704      	movs	r7, #4
{
 80038e0:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 80038e2:	f00b fc07 	bl	800f0f4 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e6:	2208      	movs	r2, #8
 80038e8:	2100      	movs	r1, #0
 80038ea:	a808      	add	r0, sp, #32
 80038ec:	f00b febe 	bl	800f66c <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038f0:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f2:	4c2e      	ldr	r4, [pc, #184]	; (80039ac <SystemApp_Init+0xd4>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f4:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f8:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fa:	432b      	orrs	r3, r5
 80038fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003900:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003902:	402b      	ands	r3, r5
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800390a:	4333      	orrs	r3, r6
 800390c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800390e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003910:	4033      	ands	r3, r6
 8003912:	9302      	str	r3, [sp, #8]
 8003914:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003916:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003918:	433b      	orrs	r3, r7
 800391a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800391c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800391e:	403b      	ands	r3, r7
 8003920:	9303      	str	r3, [sp, #12]
 8003922:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003924:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003926:	4313      	orrs	r3, r2
 8003928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800392a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800392c:	4013      	ands	r3, r2
 800392e:	9304      	str	r3, [sp, #16]
 8003930:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003932:	2303      	movs	r3, #3
 8003934:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2300      	movs	r3, #0
 8003938:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800393a:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <SystemApp_Init+0xd8>)
 800393c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393e:	f001 faa5 	bl	8004e8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8003942:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <SystemApp_Init+0xdc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003944:	a905      	add	r1, sp, #20
 8003946:	481c      	ldr	r0, [pc, #112]	; (80039b8 <SystemApp_Init+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8003948:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394a:	f001 fa9f 	bl	8004e8c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394e:	a905      	add	r1, sp, #20
 8003950:	481a      	ldr	r0, [pc, #104]	; (80039bc <SystemApp_Init+0xe4>)
 8003952:	f001 fa9b 	bl	8004e8c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003956:	a905      	add	r1, sp, #20
 8003958:	4819      	ldr	r0, [pc, #100]	; (80039c0 <SystemApp_Init+0xe8>)
 800395a:	f001 fa97 	bl	8004e8c <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800395e:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8003960:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003962:	43ab      	bics	r3, r5
 8003964:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8003966:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003968:	43b3      	bics	r3, r6
 800396a:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800396c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800396e:	43bb      	bics	r3, r7
 8003970:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8003972:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003974:	4393      	bics	r3, r2
 8003976:	62e3      	str	r3, [r4, #44]	; 0x2c
  DBG_Init();
 8003978:	f000 f870 	bl	8003a5c <DBG_Init>
  UTIL_ADV_TRACE_Init();
 800397c:	f00b f8e8 	bl	800eb50 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8003980:	4810      	ldr	r0, [pc, #64]	; (80039c4 <SystemApp_Init+0xec>)
 8003982:	f00b f8ff 	bl	800eb84 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8003986:	0030      	movs	r0, r6
 8003988:	f00b f902 	bl	800eb90 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 800398c:	f7ff faa6 	bl	8002edc <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 8003990:	f000 fd1a 	bl	80043c8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8003994:	f000 fb6a 	bl	800406c <CMWX1ZZABZ0XX_RADIO_IoInit>
  EnvSensors_Init();
 8003998:	f000 f8aa 	bl	8003af0 <EnvSensors_Init>
  UTIL_LPM_Init();
 800399c:	f00b f9f0 	bl	800ed80 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80039a0:	0029      	movs	r1, r5
 80039a2:	0028      	movs	r0, r5
 80039a4:	f00b fa0a 	bl	800edbc <UTIL_LPM_SetOffMode>
}
 80039a8:	b00b      	add	sp, #44	; 0x2c
 80039aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	00009fff 	.word	0x00009fff
 80039b4:	0000ffff 	.word	0x0000ffff
 80039b8:	50000400 	.word	0x50000400
 80039bc:	50000800 	.word	0x50000800
 80039c0:	50001c00 	.word	0x50001c00
 80039c4:	080038a9 	.word	0x080038a9

080039c8 <UTIL_SEQ_Idle>:
{
 80039c8:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 80039ca:	f00b fa1f 	bl	800ee0c <UTIL_LPM_EnterLowPower>
}
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <GetBatteryLevel>:
{
 80039d0:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80039d2:	f7ff fa8b 	bl	8002eec <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <GetBatteryLevel+0x3c>)
    batteryLevel = LORAWAN_MAX_BAT;
 80039d8:	24fe      	movs	r4, #254	; 0xfe
  if (batteryLevelmV > VDD_BAT)
 80039da:	4298      	cmp	r0, r3
 80039dc:	d80d      	bhi.n	80039fa <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80039de:	23e1      	movs	r3, #225	; 0xe1
    batteryLevel = 0;
 80039e0:	2400      	movs	r4, #0
  else if (batteryLevelmV < VDD_MIN)
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4298      	cmp	r0, r3
 80039e6:	d308      	bcc.n	80039fa <GetBatteryLevel+0x2a>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <GetBatteryLevel+0x40>)
 80039ea:	2196      	movs	r1, #150	; 0x96
 80039ec:	18c0      	adds	r0, r0, r3
 80039ee:	23fe      	movs	r3, #254	; 0xfe
 80039f0:	00c9      	lsls	r1, r1, #3
 80039f2:	4358      	muls	r0, r3
 80039f4:	f7fc fbb8 	bl	8000168 <__udivsi3>
 80039f8:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80039fa:	2201      	movs	r2, #1
 80039fc:	2100      	movs	r1, #0
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <GetBatteryLevel+0x44>)
 8003a00:	9400      	str	r4, [sp, #0]
 8003a02:	2002      	movs	r0, #2
 8003a04:	f00b f90c 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8003a08:	0020      	movs	r0, r4
 8003a0a:	bd16      	pop	{r1, r2, r4, pc}
 8003a0c:	00000bb8 	.word	0x00000bb8
 8003a10:	fffff8f8 	.word	0xfffff8f8
 8003a14:	08013060 	.word	0x08013060

08003a18 <GetTemperatureLevel>:
{
 8003a18:	b510      	push	{r4, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8003a1a:	f7ff fa7d 	bl	8002f18 <SYS_GetTemperatureLevel>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	17c0      	asrs	r0, r0, #31
 8003a22:	b2c0      	uxtb	r0, r0
 8003a24:	1880      	adds	r0, r0, r2
 8003a26:	1200      	asrs	r0, r0, #8
  return temperatureLevel;
 8003a28:	b280      	uxth	r0, r0
}
 8003a2a:	bd10      	pop	{r4, pc}

08003a2c <UTIL_ADV_TRACE_PreSendHook>:
{
 8003a2c:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8003a2e:	2101      	movs	r1, #1
 8003a30:	2004      	movs	r0, #4
 8003a32:	f00b f9ad 	bl	800ed90 <UTIL_LPM_SetStopMode>
}
 8003a36:	bd10      	pop	{r4, pc}

08003a38 <UTIL_ADV_TRACE_PostSendHook>:
{
 8003a38:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	2004      	movs	r0, #4
 8003a3e:	f00b f9a7 	bl	800ed90 <UTIL_LPM_SetStopMode>
}
 8003a42:	bd10      	pop	{r4, pc}

08003a44 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8003a44:	2000      	movs	r0, #0
 8003a46:	4770      	bx	lr

08003a48 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8003a48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8003a4a:	f7ff fe59 	bl	8003700 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8003a4e:	bd10      	pop	{r4, pc}

08003a50 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8003a50:	b507      	push	{r0, r1, r2, lr}
 8003a52:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8003a54:	9801      	ldr	r0, [sp, #4]
 8003a56:	f7ff fe63 	bl	8003720 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8003a5a:	bd07      	pop	{r0, r1, r2, pc}

08003a5c <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 8003a5c:	b530      	push	{r4, r5, lr}
 8003a5e:	b087      	sub	sp, #28
  HAL_DBGMCU_EnableDBGStandbyMode();

#elif defined (DEBUGGER_ON) && (DEBUGGER_ON == 0) /* DEBUGGER_OFF */
  /* Put the debugger pin PA13 and P14 in analog for LowPower*/
  /* The 4 debug lines above are simply not set in this case */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	2208      	movs	r2, #8
 8003a62:	2100      	movs	r1, #0
 8003a64:	a804      	add	r0, sp, #16
 8003a66:	f00b fe01 	bl	800f66c <memset>
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8003a72:	23c0      	movs	r3, #192	; 0xc0
  /* make sure clock is enabled before setting the pins with HAL_GPIO_Init() */
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8003a74:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a76:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8003a78:	4c10      	ldr	r4, [pc, #64]	; (8003abc <DBG_Init+0x60>)
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	9301      	str	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8003a7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a80:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8003a82:	432b      	orrs	r3, r5
 8003a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a88:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8003a8a:	402b      	ands	r3, r5
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a90:	f001 f9fc 	bl	8004e8c <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE() ;
 8003a94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a96:	43ab      	bics	r3, r5
 8003a98:	62e3      	str	r3, [r4, #44]	; 0x2c

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003a9e:	03db      	lsls	r3, r3, #15
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode();
 8003aa4:	f000 fd06 	bl	80044b4 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8003aa8:	f000 fd0c 	bl	80044c4 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8003aac:	f000 fd12 	bl	80044d4 <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 8003ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ab2:	4a03      	ldr	r2, [pc, #12]	; (8003ac0 <DBG_Init+0x64>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	6363      	str	r3, [r4, #52]	; 0x34
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8003ab8:	b007      	add	sp, #28
 8003aba:	bd30      	pop	{r4, r5, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	ffbfffff 	.word	0xffbfffff

08003ac4 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <EnvSensors_Read+0x18>)
 8003ac6:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <EnvSensors_Read+0x1c>)
 8003aca:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <EnvSensors_Read+0x20>)
 8003ace:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <EnvSensors_Read+0x24>)
 8003ad2:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <EnvSensors_Read+0x28>)
 8003ad6:	6103      	str	r3, [r0, #16]
  /* USER CODE BEGIN EnvSensors_Read_Last */

  /* USER CODE END EnvSensors_Read_Last */
}
 8003ad8:	4770      	bx	lr
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	42480000 	.word	0x42480000
 8003ae0:	41900000 	.word	0x41900000
 8003ae4:	447a0000 	.word	0x447a0000
 8003ae8:	003e090d 	.word	0x003e090d
 8003aec:	000503ab 	.word	0x000503ab

08003af0 <EnvSensors_Init>:
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 8003af0:	4770      	bx	lr
	...

08003af4 <MX_USART2_Init>:
/* USART2 init function */

void MX_USART2_Init(void)
{

  husart2.Instance        = USART2;
 8003af4:	480a      	ldr	r0, [pc, #40]	; (8003b20 <MX_USART2_Init+0x2c>)
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <MX_USART2_Init+0x30>)
{
 8003af8:	b510      	push	{r4, lr}
  husart2.Instance        = USART2;
 8003afa:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8003afc:	23e1      	movs	r3, #225	; 0xe1
 8003afe:	025b      	lsls	r3, r3, #9
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
  husart2.Init.StopBits   = UART_STOPBITS_1;
  husart2.Init.Parity     = UART_PARITY_NONE;
  husart2.Init.Mode       = UART_MODE_TX;
 8003b00:	2208      	movs	r2, #8
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8003b02:	6043      	str	r3, [r0, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b04:	2300      	movs	r3, #0
  husart2.Init.Mode       = UART_MODE_TX;
 8003b06:	6142      	str	r2, [r0, #20]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b08:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8003b0a:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8003b0c:	6103      	str	r3, [r0, #16]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003b0e:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8003b10:	f003 fabc 	bl	800708c <HAL_UART_Init>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d001      	beq.n	8003b1c <MX_USART2_Init+0x28>
  {
    Error_Handler();
 8003b18:	f7ff fbc2 	bl	80032a0 <Error_Handler>
  }
}
 8003b1c:	bd10      	pop	{r4, pc}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	200014b0 	.word	0x200014b0
 8003b24:	40004400 	.word	0x40004400

08003b28 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8003b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b2a:	0006      	movs	r6, r0
 8003b2c:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2e:	2214      	movs	r2, #20
 8003b30:	2100      	movs	r1, #0
 8003b32:	a804      	add	r0, sp, #16
 8003b34:	f00b fd9a 	bl	800f66c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b38:	2224      	movs	r2, #36	; 0x24
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	a809      	add	r0, sp, #36	; 0x24
 8003b3e:	f00b fd95 	bl	800f66c <memset>
  if (uartHandle->Instance == USART2)
 8003b42:	4b37      	ldr	r3, [pc, #220]	; (8003c20 <HAL_UART_MspInit+0xf8>)
 8003b44:	6832      	ldr	r2, [r6, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d168      	bne.n	8003c1c <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4b35      	ldr	r3, [pc, #212]	; (8003c24 <HAL_UART_MspInit+0xfc>)
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8003b4e:	2504      	movs	r5, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 8003b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b52:	4311      	orrs	r1, r2
 8003b54:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003b56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b58:	4011      	ands	r1, r2
 8003b5a:	9101      	str	r1, [sp, #4]
 8003b5c:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8003b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b60:	4311      	orrs	r1, r2
 8003b62:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003b64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b66:	4011      	ands	r1, r2
 8003b68:	9102      	str	r1, [sp, #8]
 8003b6a:	9902      	ldr	r1, [sp, #8]
    __USART2_CLK_ENABLE();
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b70:	0289      	lsls	r1, r1, #10
 8003b72:	4308      	orrs	r0, r1
 8003b74:	6398      	str	r0, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 8003b76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b78:	4310      	orrs	r0, r2
 8003b7a:	6318      	str	r0, [r3, #48]	; 0x30
 8003b7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b7e:	4002      	ands	r2, r0
 8003b80:	9203      	str	r2, [sp, #12]
 8003b82:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b86:	a809      	add	r0, sp, #36	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b88:	4311      	orrs	r1, r2
 8003b8a:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b8c:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8003b8e:	950c      	str	r5, [sp, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b90:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b92:	f001 ff21 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8003b9a:	f7ff fb81 	bl	80032a0 <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003b9e:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba2:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003ba4:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003ba6:	a904      	add	r1, sp, #16
 8003ba8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003baa:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003bac:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8003bae:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8003bb2:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003bb4:	f001 f96a 	bl	8004e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8003bb8:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003bba:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8003bbc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003bbe:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003bc0:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003bc2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003bc6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8003bca:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003bcc:	f001 f95e 	bl	8004e8c <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8003bd0:	4f15      	ldr	r7, [pc, #84]	; (8003c28 <HAL_UART_MspInit+0x100>)
 8003bd2:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <HAL_UART_MspInit+0x104>)
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_tx.Init.Mode                = DMA_NORMAL;
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8003bd4:	0038      	movs	r0, r7
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8003bd6:	603b      	str	r3, [r7, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003bd8:	2310      	movs	r3, #16
 8003bda:	60bb      	str	r3, [r7, #8]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003bdc:	3370      	adds	r3, #112	; 0x70
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8003bde:	607d      	str	r5, [r7, #4]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003be0:	60fc      	str	r4, [r7, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003be2:	613b      	str	r3, [r7, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be4:	617c      	str	r4, [r7, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8003be6:	61bc      	str	r4, [r7, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8003be8:	61fc      	str	r4, [r7, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8003bea:	623c      	str	r4, [r7, #32]
    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8003bec:	f000 ffea 	bl	8004bc4 <HAL_DMA_Init>
 8003bf0:	42a0      	cmp	r0, r4
 8003bf2:	d001      	beq.n	8003bf8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003bf4:	f7ff fb54 	bl	80032a0 <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8003bfe:	66f7      	str	r7, [r6, #108]	; 0x6c
 8003c00:	62be      	str	r6, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8003c02:	f000 ff99 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8003c06:	200b      	movs	r0, #11
 8003c08:	f000 ffc0 	bl	8004b8c <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8003c0c:	201c      	movs	r0, #28
 8003c0e:	2201      	movs	r2, #1
 8003c10:	2100      	movs	r1, #0
 8003c12:	f000 ff91 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8003c16:	201c      	movs	r0, #28
 8003c18:	f000 ffb8 	bl	8004b8c <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c1c:	b013      	add	sp, #76	; 0x4c
 8003c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c20:	40004400 	.word	0x40004400
 8003c24:	40021000 	.word	0x40021000
 8003c28:	20001468 	.word	0x20001468
 8003c2c:	40020080 	.word	0x40020080

08003c30 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_UART_MspDeInit+0x30>)
 8003c32:	6802      	ldr	r2, [r0, #0]
{
 8003c34:	b510      	push	{r4, lr}
 8003c36:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d10f      	bne.n	8003c5c <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003c3c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8003c3e:	4a09      	ldr	r2, [pc, #36]	; (8003c64 <HAL_UART_MspDeInit+0x34>)
 8003c40:	4909      	ldr	r1, [pc, #36]	; (8003c68 <HAL_UART_MspDeInit+0x38>)
 8003c42:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003c44:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8003c46:	400b      	ands	r3, r1
 8003c48:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003c4a:	210c      	movs	r1, #12
 8003c4c:	f001 f9de 	bl	800500c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003c50:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003c52:	f000 fffb 	bl	8004c4c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003c56:	201c      	movs	r0, #28
 8003c58:	f000 ffa4 	bl	8004ba4 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	40004400 	.word	0x40004400
 8003c64:	40021000 	.word	0x40021000
 8003c68:	fffdffff 	.word	0xfffdffff

08003c6c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003c6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003c6e:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <vcom_Init+0x14>)
 8003c70:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8003c72:	f7ff fa71 	bl	8003158 <MX_DMA_Init>
  MX_USART2_Init();
 8003c76:	f7ff ff3d 	bl	8003af4 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	bd10      	pop	{r4, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	20000480 	.word	0x20000480

08003c84 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8003c84:	2280      	movs	r2, #128	; 0x80
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <vcom_DeInit+0x28>)
 8003c88:	0292      	lsls	r2, r2, #10
 8003c8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 8003c8c:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8003c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c94:	4906      	ldr	r1, [pc, #24]	; (8003cb0 <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8003c96:	4807      	ldr	r0, [pc, #28]	; (8003cb4 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8003c98:	400a      	ands	r2, r1
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&UartHandle);
 8003c9c:	f7ff ffc8 	bl	8003c30 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003ca0:	200b      	movs	r0, #11
 8003ca2:	f000 ff7f 	bl	8004ba4 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	fffdffff 	.word	0xfffdffff
 8003cb4:	200014b0 	.word	0x200014b0

08003cb8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8003cbc:	0001      	movs	r1, r0
 8003cbe:	4802      	ldr	r0, [pc, #8]	; (8003cc8 <vcom_Trace_DMA+0x10>)
 8003cc0:	f002 fda2 	bl	8006808 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	bd10      	pop	{r4, pc}
 8003cc8:	200014b0 	.word	0x200014b0

08003ccc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003ccc:	b513      	push	{r0, r1, r4, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003cce:	2180      	movs	r1, #128	; 0x80
  RxCpltCallback = RxCb;
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <vcom_ReceiveInit+0x48>)

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003cd2:	4c11      	ldr	r4, [pc, #68]	; (8003d18 <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 8003cd4:	6058      	str	r0, [r3, #4]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003cd6:	9a01      	ldr	r2, [sp, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003cd8:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003cda:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003cdc:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003cde:	f003 fa87 	bl	80071f0 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8003ce2:	2280      	movs	r2, #128	; 0x80
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	0252      	lsls	r2, r2, #9
 8003ce8:	69d9      	ldr	r1, [r3, #28]
 8003cea:	4211      	tst	r1, r2
 8003cec:	d1fc      	bne.n	8003ce8 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	03d2      	lsls	r2, r2, #15
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	4211      	tst	r1, r2
 8003cf6:	d0fc      	beq.n	8003cf2 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8003cf8:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8003cfa:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8003d00:	f003 faba 	bl	8007278 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8003d04:	2201      	movs	r2, #1
 8003d06:	0020      	movs	r0, r4
 8003d08:	4904      	ldr	r1, [pc, #16]	; (8003d1c <vcom_ReceiveInit+0x50>)
 8003d0a:	f003 fa3b 	bl	8007184 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003d0e:	2000      	movs	r0, #0
 8003d10:	bd16      	pop	{r1, r2, r4, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	20000480 	.word	0x20000480
 8003d18:	200014b0 	.word	0x200014b0
 8003d1c:	20001534 	.word	0x20001534

08003d20 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003d20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8003d22:	4b02      	ldr	r3, [pc, #8]	; (8003d2c <HAL_UART_TxCpltCallback+0xc>)
 8003d24:	2000      	movs	r0, #0
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003d2a:	bd10      	pop	{r4, pc}
 8003d2c:	20000480 	.word	0x20000480

08003d30 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_UART_RxCpltCallback+0x28>)
{
 8003d32:	b570      	push	{r4, r5, r6, lr}
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003d34:	685b      	ldr	r3, [r3, #4]
{
 8003d36:	0004      	movs	r4, r0
 8003d38:	4d08      	ldr	r5, [pc, #32]	; (8003d5c <HAL_UART_RxCpltCallback+0x2c>)
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <HAL_UART_RxCpltCallback+0x1c>
 8003d3e:	1d02      	adds	r2, r0, #4
 8003d40:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003d42:	2a00      	cmp	r2, #0
 8003d44:	d102      	bne.n	8003d4c <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 8003d46:	2101      	movs	r1, #1
 8003d48:	0028      	movs	r0, r5
 8003d4a:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8003d4c:	0029      	movs	r1, r5
 8003d4e:	2201      	movs	r2, #1
 8003d50:	0020      	movs	r0, r4
 8003d52:	f003 fa17 	bl	8007184 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	20000480 	.word	0x20000480
 8003d5c:	20001534 	.word	0x20001534

08003d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003d60:	480d      	ldr	r0, [pc, #52]	; (8003d98 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003d62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d64:	480d      	ldr	r0, [pc, #52]	; (8003d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8003d66:	490e      	ldr	r1, [pc, #56]	; (8003da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d68:	4a0e      	ldr	r2, [pc, #56]	; (8003da4 <LoopForever+0xe>)
  movs r3, #0
 8003d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d6c:	e002      	b.n	8003d74 <LoopCopyDataInit>

08003d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d72:	3304      	adds	r3, #4

08003d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d78:	d3f9      	bcc.n	8003d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d7a:	4a0b      	ldr	r2, [pc, #44]	; (8003da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d7c:	4c0b      	ldr	r4, [pc, #44]	; (8003dac <LoopForever+0x16>)
  movs r3, #0
 8003d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d80:	e001      	b.n	8003d86 <LoopFillZerobss>

08003d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d84:	3204      	adds	r2, #4

08003d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d88:	d3fb      	bcc.n	8003d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d8a:	f000 fb45 	bl	8004418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d8e:	f00b fc49 	bl	800f624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d92:	f7ff fa43 	bl	800321c <main>

08003d96 <LoopForever>:

LoopForever:
    b LoopForever
 8003d96:	e7fe      	b.n	8003d96 <LoopForever>
   ldr   r0, =_estack
 8003d98:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003da0:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 8003da4:	08013814 	.word	0x08013814
  ldr r2, =_sbss
 8003da8:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 8003dac:	200016d4 	.word	0x200016d4

08003db0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003db0:	e7fe      	b.n	8003db0 <ADC1_COMP_IRQHandler>

08003db2 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003db2:	2001      	movs	r0, #1
 8003db4:	4770      	bx	lr

08003db6 <_kill>:

int _kill(int pid, int sig)
{
 8003db6:	b510      	push	{r4, lr}
	errno = EINVAL;
 8003db8:	f00b fc2e 	bl	800f618 <__errno>
 8003dbc:	2316      	movs	r3, #22
 8003dbe:	6003      	str	r3, [r0, #0]
	return -1;
 8003dc0:	2001      	movs	r0, #1
}
 8003dc2:	4240      	negs	r0, r0
 8003dc4:	bd10      	pop	{r4, pc}

08003dc6 <_exit>:

void _exit (int status)
{
 8003dc6:	b510      	push	{r4, lr}
	errno = EINVAL;
 8003dc8:	f00b fc26 	bl	800f618 <__errno>
 8003dcc:	2316      	movs	r3, #22
 8003dce:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003dd0:	e7fe      	b.n	8003dd0 <_exit+0xa>

08003dd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dd2:	b570      	push	{r4, r5, r6, lr}
 8003dd4:	000e      	movs	r6, r1
 8003dd6:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd8:	2500      	movs	r5, #0
 8003dda:	42a5      	cmp	r5, r4
 8003ddc:	db01      	blt.n	8003de2 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003dde:	0020      	movs	r0, r4
 8003de0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003de2:	e000      	b.n	8003de6 <_read+0x14>
 8003de4:	bf00      	nop
 8003de6:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de8:	3501      	adds	r5, #1
 8003dea:	e7f6      	b.n	8003dda <_read+0x8>

08003dec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	000e      	movs	r6, r1
 8003df0:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df2:	2500      	movs	r5, #0
 8003df4:	42a5      	cmp	r5, r4
 8003df6:	db01      	blt.n	8003dfc <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8003df8:	0020      	movs	r0, r4
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8003dfc:	5d70      	ldrb	r0, [r6, r5]
 8003dfe:	e000      	b.n	8003e02 <_write+0x16>
 8003e00:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e02:	3501      	adds	r5, #1
 8003e04:	e7f6      	b.n	8003df4 <_write+0x8>
	...

08003e08 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003e08:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <_sbrk+0x2c>)
{
 8003e0a:	0003      	movs	r3, r0
	if (heap_end == 0)
 8003e0c:	6811      	ldr	r1, [r2, #0]
{
 8003e0e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8003e10:	2900      	cmp	r1, #0
 8003e12:	d101      	bne.n	8003e18 <_sbrk+0x10>
		heap_end = &end;
 8003e14:	4908      	ldr	r1, [pc, #32]	; (8003e38 <_sbrk+0x30>)
 8003e16:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003e18:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003e1a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003e1c:	18c3      	adds	r3, r0, r3
 8003e1e:	428b      	cmp	r3, r1
 8003e20:	d906      	bls.n	8003e30 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003e22:	f00b fbf9 	bl	800f618 <__errno>
 8003e26:	230c      	movs	r3, #12
 8003e28:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003e2e:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8003e30:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8003e32:	e7fc      	b.n	8003e2e <_sbrk+0x26>
 8003e34:	20000488 	.word	0x20000488
 8003e38:	200016d8 	.word	0x200016d8

08003e3c <_close>:

int _close(int file)
{
	return -1;
 8003e3c:	2001      	movs	r0, #1
}
 8003e3e:	4240      	negs	r0, r0
 8003e40:	4770      	bx	lr

08003e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	019b      	lsls	r3, r3, #6
	return 0;
}
 8003e46:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003e48:	604b      	str	r3, [r1, #4]
}
 8003e4a:	4770      	bx	lr

08003e4c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	4770      	bx	lr

08003e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003e50:	2000      	movs	r0, #0
 8003e52:	4770      	bx	lr

08003e54 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8003e54:	23fa      	movs	r3, #250	; 0xfa
{
 8003e56:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8003e58:	009b      	lsls	r3, r3, #2
{
 8003e5a:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	0013      	movs	r3, r2
 8003e60:	000a      	movs	r2, r1
 8003e62:	0001      	movs	r1, r0
 8003e64:	4804      	ldr	r0, [pc, #16]	; (8003e78 <BSP_SPI1_SendRecv+0x24>)
 8003e66:	f002 fafd 	bl	8006464 <HAL_SPI_TransmitReceive>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d101      	bne.n	8003e72 <BSP_SPI1_SendRecv+0x1e>
  {
    ret = len;
 8003e6e:	0020      	movs	r0, r4
  }
  return ret;
}
 8003e70:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003e72:	2006      	movs	r0, #6
 8003e74:	4240      	negs	r0, r0
  return ret;
 8003e76:	e7fb      	b.n	8003e70 <BSP_SPI1_SendRecv+0x1c>
 8003e78:	20001584 	.word	0x20001584

08003e7c <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <MX_SPI1_Init+0x54>)
{
 8003e7e:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8003e80:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003e82:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003e84:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003e8a:	33fc      	adds	r3, #252	; 0xfc
 8003e8c:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003e8e:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003e90:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e92:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e94:	6145      	str	r5, [r0, #20]
{
 8003e96:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8003e98:	f001 fd8e 	bl	80059b8 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8003e9c:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8003e9e:	4a0d      	ldr	r2, [pc, #52]	; (8003ed4 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8003ea0:	490d      	ldr	r1, [pc, #52]	; (8003ed8 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8003ea2:	4290      	cmp	r0, r2
 8003ea4:	d80d      	bhi.n	8003ec2 <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003eaa:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eac:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8003eae:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8003eb0:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8003eb2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003eb4:	0020      	movs	r0, r4
 8003eb6:	f002 fa73 	bl	80063a0 <HAL_SPI_Init>
 8003eba:	1e43      	subs	r3, r0, #1
 8003ebc:	4198      	sbcs	r0, r3
  return ret;
 8003ebe:	b2c0      	uxtb	r0, r0
}
 8003ec0:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8003ec2:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8003ec4:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8003ec6:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d0ec      	beq.n	8003ea6 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8003ecc:	0840      	lsrs	r0, r0, #1
 8003ece:	e7e8      	b.n	8003ea2 <MX_SPI1_Init+0x26>
 8003ed0:	40013000 	.word	0x40013000
 8003ed4:	00989680 	.word	0x00989680
 8003ed8:	08012700 	.word	0x08012700

08003edc <BSP_SPI1_Init>:
{
 8003edc:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8003ede:	4d1b      	ldr	r5, [pc, #108]	; (8003f4c <BSP_SPI1_Init+0x70>)
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003ee2:	0028      	movs	r0, r5
{
 8003ee4:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 8003ee6:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003ee8:	f002 fbb1 	bl	800664e <HAL_SPI_GetState>
 8003eec:	1e04      	subs	r4, r0, #0
 8003eee:	d002      	beq.n	8003ef6 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8003ef0:	2000      	movs	r0, #0
}
 8003ef2:	b007      	add	sp, #28
 8003ef4:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <BSP_SPI1_Init+0x78>)
 8003efa:	015b      	lsls	r3, r3, #5
 8003efc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003efe:	430b      	orrs	r3, r1
 8003f00:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f02:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003f06:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003f08:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f0a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003f10:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003f12:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003f14:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003f16:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003f18:	f000 ffb8 	bl	8004e8c <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003f1c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003f1e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003f20:	a901      	add	r1, sp, #4
 8003f22:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003f24:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003f26:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003f28:	f000 ffb0 	bl	8004e8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003f2c:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003f2e:	480a      	ldr	r0, [pc, #40]	; (8003f58 <BSP_SPI1_Init+0x7c>)
 8003f30:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003f32:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003f34:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003f36:	f000 ffa9 	bl	8004e8c <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8003f3a:	0028      	movs	r0, r5
 8003f3c:	f7ff ff9e 	bl	8003e7c <MX_SPI1_Init>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d0d5      	beq.n	8003ef0 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8003f44:	2008      	movs	r0, #8
 8003f46:	4240      	negs	r0, r0
  return ret;
 8003f48:	e7d3      	b.n	8003ef2 <BSP_SPI1_Init+0x16>
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	20001584 	.word	0x20001584
 8003f50:	40013000 	.word	0x40013000
 8003f54:	40021000 	.word	0x40021000
 8003f58:	50000400 	.word	0x50000400

08003f5c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003f5c:	b500      	push	{lr}
 8003f5e:	b08b      	sub	sp, #44	; 0x2c
 8003f60:	2803      	cmp	r0, #3
 8003f62:	d80c      	bhi.n	8003f7e <BSP_LED_Init+0x22>
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <BSP_LED_Init+0x78>)
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	f7fc f8e0 	bl	800012c <__gnu_thumb1_case_uqi>
 8003f6c:	2b231b02 	.word	0x2b231b02
 8003f70:	2102      	movs	r1, #2
 8003f72:	430a      	orrs	r2, r1
 8003f74:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	400b      	ands	r3, r1
 8003f7a:	9301      	str	r3, [sp, #4]
 8003f7c:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <BSP_LED_Init+0x7c>)
 8003f80:	0042      	lsls	r2, r0, #1
 8003f82:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8003f84:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8003f86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f90:	3303      	adds	r3, #3
 8003f92:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <BSP_LED_Init+0x80>)
 8003f96:	a905      	add	r1, sp, #20
 8003f98:	58c0      	ldr	r0, [r0, r3]
 8003f9a:	f000 ff77 	bl	8004e8c <HAL_GPIO_Init>
}
 8003f9e:	b00b      	add	sp, #44	; 0x2c
 8003fa0:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	400b      	ands	r3, r1
 8003fac:	9302      	str	r3, [sp, #8]
 8003fae:	9b02      	ldr	r3, [sp, #8]
 8003fb0:	e7e5      	b.n	8003f7e <BSP_LED_Init+0x22>
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	400b      	ands	r3, r1
 8003fbc:	9303      	str	r3, [sp, #12]
 8003fbe:	9b03      	ldr	r3, [sp, #12]
 8003fc0:	e7dd      	b.n	8003f7e <BSP_LED_Init+0x22>
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	400b      	ands	r3, r1
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	9b04      	ldr	r3, [sp, #16]
 8003fd0:	e7d5      	b.n	8003f7e <BSP_LED_Init+0x22>
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	08012720 	.word	0x08012720
 8003fdc:	20000030 	.word	0x20000030

08003fe0 <BSP_LED_On>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <BSP_LED_On+0x18>)
{
 8003fe2:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003fe4:	0042      	lsls	r2, r0, #1
 8003fe6:	5ad1      	ldrh	r1, [r2, r3]
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <BSP_LED_On+0x1c>)
 8003fea:	0080      	lsls	r0, r0, #2
 8003fec:	2201      	movs	r2, #1
 8003fee:	58c0      	ldr	r0, [r0, r3]
 8003ff0:	f001 f892 	bl	8005118 <HAL_GPIO_WritePin>
}
 8003ff4:	bd10      	pop	{r4, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	08012720 	.word	0x08012720
 8003ffc:	20000030 	.word	0x20000030

08004000 <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <BSP_LED_Off+0x18>)
{
 8004002:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004004:	0042      	lsls	r2, r0, #1
 8004006:	5ad1      	ldrh	r1, [r2, r3]
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <BSP_LED_Off+0x1c>)
 800400a:	0080      	lsls	r0, r0, #2
 800400c:	2200      	movs	r2, #0
 800400e:	58c0      	ldr	r0, [r0, r3]
 8004010:	f001 f882 	bl	8005118 <HAL_GPIO_WritePin>
}
 8004014:	bd10      	pop	{r4, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	08012720 	.word	0x08012720
 800401c:	20000030 	.word	0x20000030

08004020 <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <BSP_LED_Toggle+0x14>)
{
 8004022:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004024:	0042      	lsls	r2, r0, #1
 8004026:	5ad1      	ldrh	r1, [r2, r3]
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <BSP_LED_Toggle+0x18>)
 800402a:	0080      	lsls	r0, r0, #2
 800402c:	58c0      	ldr	r0, [r0, r3]
 800402e:	f001 f879 	bl	8005124 <HAL_GPIO_TogglePin>
}
 8004032:	bd10      	pop	{r4, pc}
 8004034:	08012720 	.word	0x08012720
 8004038:	20000030 	.word	0x20000030

0800403c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 800403c:	2005      	movs	r0, #5
 800403e:	4770      	bx	lr

08004040 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8004040:	0002      	movs	r2, r0
 8004042:	b510      	push	{r4, lr}

  if (state == SET)
 8004044:	2801      	cmp	r0, #1
 8004046:	d109      	bne.n	800405c <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	20a0      	movs	r0, #160	; 0xa0
 800404c:	0149      	lsls	r1, r1, #5
 800404e:	05c0      	lsls	r0, r0, #23
 8004050:	f001 f862 	bl	8005118 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8004054:	2005      	movs	r0, #5
 8004056:	f7ff fcfb 	bl	8003a50 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 800405a:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	20a0      	movs	r0, #160	; 0xa0
 8004060:	2200      	movs	r2, #0
 8004062:	0149      	lsls	r1, r1, #5
 8004064:	05c0      	lsls	r0, r0, #23
 8004066:	f001 f857 	bl	8005118 <HAL_GPIO_WritePin>
}
 800406a:	e7f6      	b.n	800405a <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

0800406c <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 800406c:	2300      	movs	r3, #0
{
 800406e:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8004070:	2702      	movs	r7, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8004072:	2204      	movs	r2, #4
{
 8004074:	b097      	sub	sp, #92	; 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8004076:	4c65      	ldr	r4, [pc, #404]	; (800420c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8004078:	9310      	str	r3, [sp, #64]	; 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800407a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 800407c:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800407e:	433b      	orrs	r3, r7
 8004080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004082:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004084:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8004086:	403b      	ands	r3, r7
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800408c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 800408e:	4e60      	ldr	r6, [pc, #384]	; (8004210 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004090:	433b      	orrs	r3, r7
 8004092:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004094:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004096:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004098:	403b      	ands	r3, r7
 800409a:	9302      	str	r3, [sp, #8]
 800409c:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 800409e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80040a0:	433b      	orrs	r3, r7
 80040a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80040a6:	403b      	ands	r3, r7
 80040a8:	9303      	str	r3, [sp, #12]
 80040aa:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80040ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80040ae:	4313      	orrs	r3, r2
 80040b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 80040b4:	910f      	str	r1, [sp, #60]	; 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80040b6:	4013      	ands	r3, r2
 80040b8:	9304      	str	r3, [sp, #16]
 80040ba:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80040bc:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80040be:	0001      	movs	r1, r0
 80040c0:	4854      	ldr	r0, [pc, #336]	; (8004214 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80040c2:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80040c4:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 80040c6:	970e      	str	r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80040c8:	f000 fee0 	bl	8004e8c <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 80040cc:	4b52      	ldr	r3, [pc, #328]	; (8004218 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80040ce:	a80c      	add	r0, sp, #48	; 0x30
 80040d0:	0001      	movs	r1, r0
 80040d2:	4850      	ldr	r0, [pc, #320]	; (8004214 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80040d4:	930d      	str	r3, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80040d6:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80040d8:	f000 fed8 	bl	8004e8c <HAL_GPIO_Init>
 80040dc:	a80c      	add	r0, sp, #48	; 0x30
 80040de:	0001      	movs	r1, r0
 80040e0:	484c      	ldr	r0, [pc, #304]	; (8004214 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80040e2:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80040e4:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80040e6:	f000 fed1 	bl	8004e8c <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 80040ea:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80040ec:	a80c      	add	r0, sp, #48	; 0x30
 80040ee:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 80040f0:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80040f2:	484a      	ldr	r0, [pc, #296]	; (800421c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80040f4:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80040f6:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80040f8:	f000 fec8 	bl	8004e8c <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80040fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80040fe:	26a0      	movs	r6, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8004100:	433b      	orrs	r3, r7
 8004102:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004104:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004106:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8004108:	403b      	ands	r3, r7
 800410a:	9309      	str	r3, [sp, #36]	; 0x24
 800410c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800410e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004110:	05f6      	lsls	r6, r6, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8004112:	432b      	orrs	r3, r5
 8004114:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004116:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004118:	a811      	add	r0, sp, #68	; 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800411a:	402b      	ands	r3, r5
 800411c:	930a      	str	r3, [sp, #40]	; 0x28
 800411e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8004120:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004122:	432b      	orrs	r3, r5
 8004124:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004126:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004128:	9114      	str	r1, [sp, #80]	; 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 800412a:	402b      	ands	r3, r5
 800412c:	930b      	str	r3, [sp, #44]	; 0x2c
 800412e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8004130:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004132:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8004134:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004136:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004138:	3380      	adds	r3, #128	; 0x80
 800413a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413c:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800413e:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004140:	f000 fea4 	bl	8004e8c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8004144:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004146:	a811      	add	r0, sp, #68	; 0x44
 8004148:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 800414a:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800414c:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800414e:	3340      	adds	r3, #64	; 0x40
 8004150:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004152:	f000 fe9b 	bl	8004e8c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8004156:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004158:	a811      	add	r0, sp, #68	; 0x44
 800415a:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 800415c:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800415e:	482d      	ldr	r0, [pc, #180]	; (8004214 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8004160:	3308      	adds	r3, #8
 8004162:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004164:	f000 fe92 	bl	8004e8c <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8004168:	2080      	movs	r0, #128	; 0x80
 800416a:	0200      	lsls	r0, r0, #8
 800416c:	900c      	str	r0, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416e:	950d      	str	r5, [sp, #52]	; 0x34
  initStruct.Pull = GPIO_PULLUP;
 8004170:	950e      	str	r5, [sp, #56]	; 0x38
  RADIO_NSS_CLK_ENABLE();
 8004172:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8004174:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_NSS_CLK_ENABLE();
 8004176:	432b      	orrs	r3, r5
 8004178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800417a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 800417c:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 800417e:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8004180:	0030      	movs	r0, r6
  RADIO_NSS_CLK_ENABLE();
 8004182:	9305      	str	r3, [sp, #20]
 8004184:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8004186:	f000 fe81 	bl	8004e8c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	002a      	movs	r2, r5
 800418e:	0030      	movs	r0, r6
 8004190:	0209      	lsls	r1, r1, #8
 8004192:	f000 ffc1 	bl	8005118 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8004196:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 8004198:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 800419a:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 800419c:	432b      	orrs	r3, r5
 800419e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80041a2:	0030      	movs	r0, r6
  RADIO_TCXO_VCC_CLK_ENABLE();
 80041a4:	402b      	ands	r3, r5
 80041a6:	9306      	str	r3, [sp, #24]
 80041a8:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 80041aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041ac:	432b      	orrs	r3, r5
 80041ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041b2:	402b      	ands	r3, r5
 80041b4:	9307      	str	r3, [sp, #28]
 80041b6:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80041b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041ba:	4313      	orrs	r3, r2
 80041bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041c0:	4013      	ands	r3, r2
 80041c2:	9308      	str	r3, [sp, #32]
 80041c4:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 80041c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041c8:	4313      	orrs	r3, r2
 80041ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041ce:	0014      	movs	r4, r2
 80041d0:	4013      	ands	r3, r2
 80041d2:	9311      	str	r3, [sp, #68]	; 0x44
 80041d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  initStruct.Pull = GPIO_NOPULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	930e      	str	r3, [sp, #56]	; 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80041da:	2380      	movs	r3, #128	; 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 80041dc:	910f      	str	r1, [sp, #60]	; 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80041de:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80041e0:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80041e2:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80041e6:	f000 fe51 	bl	8004e8c <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80041ea:	0030      	movs	r0, r6
 80041ec:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 80041ee:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80041f0:	f000 fe4c 	bl	8004e8c <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 80041f4:	a90c      	add	r1, sp, #48	; 0x30
 80041f6:	4809      	ldr	r0, [pc, #36]	; (800421c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 80041f8:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 80041fa:	f000 fe47 	bl	8004e8c <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 80041fe:	4807      	ldr	r0, [pc, #28]	; (800421c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 8004200:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8004202:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8004204:	f000 fe42 	bl	8004e8c <HAL_GPIO_Init>
}
 8004208:	b017      	add	sp, #92	; 0x5c
 800420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800420c:	40021000 	.word	0x40021000
 8004210:	10110000 	.word	0x10110000
 8004214:	50000400 	.word	0x50000400
 8004218:	10310000 	.word	0x10310000
 800421c:	50000800 	.word	0x50000800

08004220 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 8004220:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8004222:	2608      	movs	r6, #8
{
 8004224:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8004226:	0032      	movs	r2, r6
 8004228:	2100      	movs	r1, #0
 800422a:	a803      	add	r0, sp, #12
 800422c:	f00b fa1e 	bl	800f66c <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 8004230:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004232:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004234:	4c22      	ldr	r4, [pc, #136]	; (80042c0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004236:	4f23      	ldr	r7, [pc, #140]	; (80042c4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004238:	4669      	mov	r1, sp
 800423a:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 800423c:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 800423e:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004240:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004242:	f000 fe23 	bl	8004e8c <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004248:	4669      	mov	r1, sp
 800424a:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 800424c:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800424e:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004250:	f000 fe1c 	bl	8004e8c <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004254:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004256:	4669      	mov	r1, sp
 8004258:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 800425a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800425c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800425e:	f000 fe15 	bl	8004e8c <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004262:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004264:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004266:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004268:	4818      	ldr	r0, [pc, #96]	; (80042cc <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 800426a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800426c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800426e:	f000 fe0d 	bl	8004e8c <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004272:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004274:	25a0      	movs	r5, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004276:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004278:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800427a:	05ed      	lsls	r5, r5, #23
 800427c:	0028      	movs	r0, r5
 800427e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004280:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004282:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004284:	f000 fe02 	bl	8004e8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8004288:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800428a:	0028      	movs	r0, r5
 800428c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800428e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004290:	f000 fdfc 	bl	8004e8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004294:	0020      	movs	r0, r4
 8004296:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8004298:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800429a:	f000 fdf7 	bl	8004e8c <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 800429e:	0039      	movs	r1, r7
 80042a0:	0028      	movs	r0, r5
 80042a2:	2200      	movs	r2, #0
 80042a4:	f000 ff38 	bl	8005118 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 80042a8:	0028      	movs	r0, r5
 80042aa:	2200      	movs	r2, #0
 80042ac:	2140      	movs	r1, #64	; 0x40
 80042ae:	f000 ff33 	bl	8005118 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 80042b2:	2200      	movs	r2, #0
 80042b4:	0031      	movs	r1, r6
 80042b6:	0020      	movs	r0, r4
 80042b8:	f000 ff2e 	bl	8005118 <HAL_GPIO_WritePin>
}
 80042bc:	b00b      	add	sp, #44	; 0x2c
 80042be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c0:	50000400 	.word	0x50000400
 80042c4:	10110000 	.word	0x10110000
 80042c8:	10310000 	.word	0x10310000
 80042cc:	50000800 	.word	0x50000800

080042d0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 80042d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042d2:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d4:	f3ef 8310 	mrs	r3, PRIMASK
 80042d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80042da:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80042dc:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 80042de:	4b11      	ldr	r3, [pc, #68]	; (8004324 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 80042e0:	4d11      	ldr	r5, [pc, #68]	; (8004328 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 80042e2:	00e6      	lsls	r6, r4, #3
 80042e4:	18f6      	adds	r6, r6, r3
 80042e6:	00a7      	lsls	r7, r4, #2
 80042e8:	5979      	ldr	r1, [r7, r5]
 80042ea:	0030      	movs	r0, r6
 80042ec:	f000 fdb5 	bl	8004e5a <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 80042f0:	9b00      	ldr	r3, [sp, #0]
 80042f2:	2100      	movs	r1, #0
 80042f4:	59da      	ldr	r2, [r3, r7]
 80042f6:	0030      	movs	r0, r6
 80042f8:	f000 fda8 	bl	8004e4c <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 80042fc:	002b      	movs	r3, r5
 80042fe:	3310      	adds	r3, #16
 8004300:	56e6      	ldrsb	r6, [r4, r3]
 8004302:	3514      	adds	r5, #20
 8004304:	2200      	movs	r2, #0
 8004306:	0030      	movs	r0, r6
 8004308:	5979      	ldr	r1, [r7, r5]
 800430a:	f000 fc15 	bl	8004b38 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800430e:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8004310:	0030      	movs	r0, r6
 8004312:	f000 fc3b 	bl	8004b8c <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8004316:	2c04      	cmp	r4, #4
 8004318:	d1e1      	bne.n	80042de <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	9b01      	ldr	r3, [sp, #4]
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	200015dc 	.word	0x200015dc
 8004328:	0801272c 	.word	0x0801272c

0800432c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 800432c:	2000      	movs	r0, #0
 800432e:	4770      	bx	lr

08004330 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 8004330:	3801      	subs	r0, #1
{
 8004332:	b510      	push	{r4, lr}
 8004334:	2803      	cmp	r0, #3
 8004336:	d811      	bhi.n	800435c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8004338:	f7fb fef8 	bl	800012c <__gnu_thumb1_case_uqi>
 800433c:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8004340:	20a0      	movs	r0, #160	; 0xa0
 8004342:	2201      	movs	r2, #1
 8004344:	2102      	movs	r1, #2
 8004346:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8004348:	f000 fee6 	bl	8005118 <HAL_GPIO_WritePin>
}
 800434c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 800434e:	2201      	movs	r2, #1
 8004350:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8004352:	4809      	ldr	r0, [pc, #36]	; (8004378 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8004354:	e7f8      	b.n	8004348 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8004356:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8004358:	2102      	movs	r1, #2
 800435a:	e7fa      	b.n	8004352 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 800435c:	20a0      	movs	r0, #160	; 0xa0
 800435e:	2200      	movs	r2, #0
 8004360:	2102      	movs	r1, #2
 8004362:	05c0      	lsls	r0, r0, #23
 8004364:	f000 fed8 	bl	8005118 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8004368:	2200      	movs	r2, #0
 800436a:	2104      	movs	r1, #4
 800436c:	4802      	ldr	r0, [pc, #8]	; (8004378 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 800436e:	f000 fed3 	bl	8005118 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8004372:	2200      	movs	r2, #0
 8004374:	e7f0      	b.n	8004358 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	50000800 	.word	0x50000800

0800437c <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 800437c:	2001      	movs	r0, #1
 800437e:	4770      	bx	lr

08004380 <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 8004380:	b570      	push	{r4, r5, r6, lr}
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004382:	2303      	movs	r3, #3
  GPIO_InitTypeDef initStruct = { 0 };
 8004384:	2400      	movs	r4, #0
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004386:	2501      	movs	r5, #1
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004388:	4e0e      	ldr	r6, [pc, #56]	; (80043c4 <CMWX1ZZABZ0XX_RADIO_Reset+0x44>)
{
 800438a:	b086      	sub	sp, #24
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800438c:	0030      	movs	r0, r6
 800438e:	a901      	add	r1, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004390:	9304      	str	r3, [sp, #16]
  GPIO_InitTypeDef initStruct = { 0 };
 8004392:	9405      	str	r4, [sp, #20]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004394:	9502      	str	r5, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;
 8004396:	9403      	str	r4, [sp, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 8004398:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800439a:	f000 fd77 	bl	8004e8c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 800439e:	0022      	movs	r2, r4
 80043a0:	0029      	movs	r1, r5
 80043a2:	0030      	movs	r0, r6
 80043a4:	f000 feb8 	bl	8005118 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80043a8:	0028      	movs	r0, r5
 80043aa:	f7ff fb51 	bl	8003a50 <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80043ae:	0030      	movs	r0, r6
 80043b0:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 80043b2:	9402      	str	r4, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80043b4:	f000 fd6a 	bl	8004e8c <HAL_GPIO_Init>
  HAL_Delay(6);
 80043b8:	2006      	movs	r0, #6
 80043ba:	f7ff fb49 	bl	8003a50 <HAL_Delay>
}
 80043be:	b006      	add	sp, #24
 80043c0:	bd70      	pop	{r4, r5, r6, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	50000800 	.word	0x50000800

080043c8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 80043c8:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 80043ca:	f7ff fd87 	bl	8003edc <BSP_SPI1_Init>
}
 80043ce:	bd10      	pop	{r4, pc}

080043d0 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 80043d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80043d2:	240e      	movs	r4, #14
{
 80043d4:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80043d6:	446c      	add	r4, sp
{
 80043d8:	80d8      	strh	r0, [r3, #6]
 80043da:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80043dc:	2201      	movs	r2, #1
 80043de:	0021      	movs	r1, r4
 80043e0:	0018      	movs	r0, r3
 80043e2:	f7ff fd37 	bl	8003e54 <BSP_SPI1_SendRecv>
  return rxData;
 80043e6:	8820      	ldrh	r0, [r4, #0]
}
 80043e8:	b004      	add	sp, #16
 80043ea:	bd10      	pop	{r4, pc}

080043ec <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 80043ec:	0002      	movs	r2, r0
 80043ee:	b510      	push	{r4, lr}
  if (state == 0)
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d106      	bne.n	8004402 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80043f4:	2180      	movs	r1, #128	; 0x80
 80043f6:	20a0      	movs	r0, #160	; 0xa0
 80043f8:	0209      	lsls	r1, r1, #8
 80043fa:	05c0      	lsls	r0, r0, #23
 80043fc:	f000 fe8c 	bl	8005118 <HAL_GPIO_WritePin>
}
 8004400:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8004402:	2201      	movs	r2, #1
 8004404:	e7f6      	b.n	80043f4 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

08004408 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8004408:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 800440a:	2102      	movs	r1, #2
 800440c:	4801      	ldr	r0, [pc, #4]	; (8004414 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 800440e:	f000 fe7d 	bl	800510c <HAL_GPIO_ReadPin>
}
 8004412:	bd10      	pop	{r4, pc}
 8004414:	50000400 	.word	0x50000400

08004418 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004418:	2280      	movs	r2, #128	; 0x80
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <SystemInit+0x44>)
 800441c:	0052      	lsls	r2, r2, #1
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	490e      	ldr	r1, [pc, #56]	; (8004460 <SystemInit+0x48>)
 8004428:	400a      	ands	r2, r1
 800442a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	490d      	ldr	r1, [pc, #52]	; (8004464 <SystemInit+0x4c>)
 8004430:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004432:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004434:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	438a      	bics	r2, r1
 800443a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	490a      	ldr	r1, [pc, #40]	; (8004468 <SystemInit+0x50>)
 8004440:	400a      	ands	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	4909      	ldr	r1, [pc, #36]	; (800446c <SystemInit+0x54>)
 8004448:	400a      	ands	r2, r1
 800444a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800444c:	2200      	movs	r2, #0
 800444e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004450:	2280      	movs	r2, #128	; 0x80
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <SystemInit+0x58>)
 8004454:	0512      	lsls	r2, r2, #20
 8004456:	609a      	str	r2, [r3, #8]
#endif
}
 8004458:	4770      	bx	lr
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	40021000 	.word	0x40021000
 8004460:	88ff400c 	.word	0x88ff400c
 8004464:	fef6fff6 	.word	0xfef6fff6
 8004468:	fffbffff 	.word	0xfffbffff
 800446c:	ff02ffff 	.word	0xff02ffff
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004474:	2302      	movs	r3, #2
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <HAL_Init+0x24>)
{
 8004478:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800447a:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800447c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800447e:	430b      	orrs	r3, r1
 8004480:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004482:	f7ff fadf 	bl	8003a44 <HAL_InitTick>
 8004486:	1e04      	subs	r4, r0, #0
 8004488:	d103      	bne.n	8004492 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800448a:	f7ff f9ab 	bl	80037e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800448e:	0020      	movs	r0, r4
 8004490:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004492:	2401      	movs	r4, #1
 8004494:	e7fb      	b.n	800448e <HAL_Init+0x1a>
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	40022000 	.word	0x40022000

0800449c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800449c:	4a03      	ldr	r2, [pc, #12]	; (80044ac <HAL_IncTick+0x10>)
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <HAL_IncTick+0x14>)
 80044a0:	6811      	ldr	r1, [r2, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	185b      	adds	r3, r3, r1
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	4770      	bx	lr
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	200015fc 	.word	0x200015fc
 80044b0:	20000048 	.word	0x20000048

080044b4 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80044b4:	2101      	movs	r1, #1
 80044b6:	4a02      	ldr	r2, [pc, #8]	; (80044c0 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80044b8:	6853      	ldr	r3, [r2, #4]
 80044ba:	438b      	bics	r3, r1
 80044bc:	6053      	str	r3, [r2, #4]
}
 80044be:	4770      	bx	lr
 80044c0:	40015800 	.word	0x40015800

080044c4 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80044c4:	2102      	movs	r1, #2
 80044c6:	4a02      	ldr	r2, [pc, #8]	; (80044d0 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80044c8:	6853      	ldr	r3, [r2, #4]
 80044ca:	438b      	bics	r3, r1
 80044cc:	6053      	str	r3, [r2, #4]
}
 80044ce:	4770      	bx	lr
 80044d0:	40015800 	.word	0x40015800

080044d4 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80044d4:	2104      	movs	r1, #4
 80044d6:	4a02      	ldr	r2, [pc, #8]	; (80044e0 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80044d8:	6853      	ldr	r3, [r2, #4]
 80044da:	438b      	bics	r3, r1
 80044dc:	6053      	str	r3, [r2, #4]
}
 80044de:	4770      	bx	lr
 80044e0:	40015800 	.word	0x40015800

080044e4 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80044e4:	4b08      	ldr	r3, [pc, #32]	; (8004508 <ADC_DelayMicroSecond+0x24>)
{
 80044e6:	b513      	push	{r0, r1, r4, lr}
 80044e8:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80044ea:	4908      	ldr	r1, [pc, #32]	; (800450c <ADC_DelayMicroSecond+0x28>)
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	f7fb fe3b 	bl	8000168 <__udivsi3>
 80044f2:	4344      	muls	r4, r0
 80044f4:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80044f6:	9b01      	ldr	r3, [sp, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d100      	bne.n	80044fe <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 80044fc:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 80044fe:	9b01      	ldr	r3, [sp, #4]
 8004500:	3b01      	subs	r3, #1
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	e7f7      	b.n	80044f6 <ADC_DelayMicroSecond+0x12>
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	20000044 	.word	0x20000044
 800450c:	000f4240 	.word	0x000f4240

08004510 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004510:	2103      	movs	r1, #3
 8004512:	6803      	ldr	r3, [r0, #0]
{
 8004514:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004516:	689a      	ldr	r2, [r3, #8]
{
 8004518:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800451a:	400a      	ands	r2, r1
 800451c:	2a01      	cmp	r2, #1
 800451e:	d104      	bne.n	800452a <ADC_Enable+0x1a>
 8004520:	6819      	ldr	r1, [r3, #0]
 8004522:	4211      	tst	r1, r2
 8004524:	d001      	beq.n	800452a <ADC_Enable+0x1a>
  return HAL_OK;
 8004526:	2000      	movs	r0, #0
}
 8004528:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800452a:	6899      	ldr	r1, [r3, #8]
 800452c:	4a13      	ldr	r2, [pc, #76]	; (800457c <ADC_Enable+0x6c>)
 800452e:	4211      	tst	r1, r2
 8004530:	d008      	beq.n	8004544 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004532:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004534:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004536:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004538:	4313      	orrs	r3, r2
 800453a:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800453e:	4303      	orrs	r3, r0
 8004540:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8004542:	e7f1      	b.n	8004528 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8004544:	2501      	movs	r5, #1
 8004546:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004548:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800454a:	432a      	orrs	r2, r5
 800454c:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800454e:	f7ff ffc9 	bl	80044e4 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8004552:	f7ff fa79 	bl	8003a48 <HAL_GetTick>
 8004556:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	422b      	tst	r3, r5
 800455e:	d1e2      	bne.n	8004526 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004560:	f7ff fa72 	bl	8003a48 <HAL_GetTick>
 8004564:	1b80      	subs	r0, r0, r6
 8004566:	280a      	cmp	r0, #10
 8004568:	d9f6      	bls.n	8004558 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800456a:	2310      	movs	r3, #16
 800456c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800456e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004570:	4313      	orrs	r3, r2
 8004572:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004574:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004576:	431d      	orrs	r5, r3
 8004578:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800457a:	e7d5      	b.n	8004528 <ADC_Enable+0x18>
 800457c:	80000017 	.word	0x80000017

08004580 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004580:	2103      	movs	r1, #3
 8004582:	6803      	ldr	r3, [r0, #0]
{
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004588:	6898      	ldr	r0, [r3, #8]
 800458a:	4008      	ands	r0, r1
 800458c:	2801      	cmp	r0, #1
 800458e:	d001      	beq.n	8004594 <ADC_Disable+0x14>
  return HAL_OK;
 8004590:	2000      	movs	r0, #0
}
 8004592:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4202      	tst	r2, r0
 8004598:	d0fa      	beq.n	8004590 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800459a:	2205      	movs	r2, #5
 800459c:	689d      	ldr	r5, [r3, #8]
 800459e:	4015      	ands	r5, r2
 80045a0:	2d01      	cmp	r5, #1
 80045a2:	d119      	bne.n	80045d8 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 80045a4:	6898      	ldr	r0, [r3, #8]
 80045a6:	3a03      	subs	r2, #3
 80045a8:	4302      	orrs	r2, r0
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80045ae:	f7ff fa4b 	bl	8003a48 <HAL_GetTick>
 80045b2:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	422b      	tst	r3, r5
 80045ba:	d0e9      	beq.n	8004590 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045bc:	f7ff fa44 	bl	8003a48 <HAL_GetTick>
 80045c0:	1b80      	subs	r0, r0, r6
 80045c2:	280a      	cmp	r0, #10
 80045c4:	d9f6      	bls.n	80045b4 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c6:	2310      	movs	r3, #16
 80045c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ca:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045cc:	4313      	orrs	r3, r2
 80045ce:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045d2:	431d      	orrs	r5, r3
 80045d4:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 80045d6:	e7dc      	b.n	8004592 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d8:	2310      	movs	r3, #16
 80045da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80045dc:	4313      	orrs	r3, r2
 80045de:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045e2:	4303      	orrs	r3, r0
 80045e4:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80045e6:	e7d4      	b.n	8004592 <ADC_Disable+0x12>

080045e8 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80045e8:	2204      	movs	r2, #4
 80045ea:	6803      	ldr	r3, [r0, #0]
{
 80045ec:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80045ee:	6899      	ldr	r1, [r3, #8]
{
 80045f0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80045f2:	4211      	tst	r1, r2
 80045f4:	d101      	bne.n	80045fa <ADC_ConversionStop+0x12>
  return HAL_OK;
 80045f6:	2000      	movs	r0, #0
}
 80045f8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80045fa:	6899      	ldr	r1, [r3, #8]
 80045fc:	4211      	tst	r1, r2
 80045fe:	d006      	beq.n	800460e <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8004600:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004602:	0792      	lsls	r2, r2, #30
 8004604:	d403      	bmi.n	800460e <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004606:	2210      	movs	r2, #16
 8004608:	6899      	ldr	r1, [r3, #8]
 800460a:	430a      	orrs	r2, r1
 800460c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800460e:	f7ff fa1b 	bl	8003a48 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004612:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8004614:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	4233      	tst	r3, r6
 800461c:	d0eb      	beq.n	80045f6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800461e:	f7ff fa13 	bl	8003a48 <HAL_GetTick>
 8004622:	1b40      	subs	r0, r0, r5
 8004624:	280a      	cmp	r0, #10
 8004626:	d9f6      	bls.n	8004616 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004628:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800462c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800462e:	4313      	orrs	r3, r2
 8004630:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004634:	4303      	orrs	r3, r0
 8004636:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004638:	e7de      	b.n	80045f8 <ADC_ConversionStop+0x10>
	...

0800463c <HAL_ADC_Init>:
{
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004640:	2001      	movs	r0, #1
  if(hadc == NULL)
 8004642:	2c00      	cmp	r4, #0
 8004644:	d01b      	beq.n	800467e <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004646:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800464c:	0022      	movs	r2, r4
 800464e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8004650:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8004652:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8004654:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8004656:	f7fe fbc3 	bl	8002de0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800465a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800465c:	06db      	lsls	r3, r3, #27
 800465e:	d406      	bmi.n	800466e <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	2204      	movs	r2, #4
 8004664:	6899      	ldr	r1, [r3, #8]
 8004666:	0008      	movs	r0, r1
 8004668:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800466a:	4211      	tst	r1, r2
 800466c:	d008      	beq.n	8004680 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466e:	2310      	movs	r3, #16
 8004670:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8004672:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004674:	4313      	orrs	r3, r2
 8004676:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004678:	2300      	movs	r3, #0
 800467a:	3450      	adds	r4, #80	; 0x50
 800467c:	7023      	strb	r3, [r4, #0]
}
 800467e:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8004680:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004682:	4955      	ldr	r1, [pc, #340]	; (80047d8 <HAL_ADC_Init+0x19c>)
 8004684:	4011      	ands	r1, r2
 8004686:	2202      	movs	r2, #2
 8004688:	430a      	orrs	r2, r1
 800468a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 800468c:	2203      	movs	r2, #3
 800468e:	6899      	ldr	r1, [r3, #8]
 8004690:	4011      	ands	r1, r2
 8004692:	4a52      	ldr	r2, [pc, #328]	; (80047dc <HAL_ADC_Init+0x1a0>)
 8004694:	2901      	cmp	r1, #1
 8004696:	d102      	bne.n	800469e <HAL_ADC_Init+0x62>
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	420d      	tst	r5, r1
 800469c:	d119      	bne.n	80046d2 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800469e:	2680      	movs	r6, #128	; 0x80
 80046a0:	6861      	ldr	r1, [r4, #4]
 80046a2:	05f6      	lsls	r6, r6, #23
 80046a4:	004d      	lsls	r5, r1, #1
 80046a6:	086d      	lsrs	r5, r5, #1
 80046a8:	42b5      	cmp	r5, r6
 80046aa:	d003      	beq.n	80046b4 <HAL_ADC_Init+0x78>
 80046ac:	2580      	movs	r5, #128	; 0x80
 80046ae:	062d      	lsls	r5, r5, #24
 80046b0:	42a9      	cmp	r1, r5
 80046b2:	d176      	bne.n	80047a2 <HAL_ADC_Init+0x166>
 80046b4:	691d      	ldr	r5, [r3, #16]
 80046b6:	00ad      	lsls	r5, r5, #2
 80046b8:	08ad      	lsrs	r5, r5, #2
 80046ba:	611d      	str	r5, [r3, #16]
 80046bc:	691d      	ldr	r5, [r3, #16]
 80046be:	4329      	orrs	r1, r5
 80046c0:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80046c2:	2518      	movs	r5, #24
 80046c4:	68d9      	ldr	r1, [r3, #12]
 80046c6:	43a9      	bics	r1, r5
 80046c8:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80046ca:	68d9      	ldr	r1, [r3, #12]
 80046cc:	68a5      	ldr	r5, [r4, #8]
 80046ce:	4329      	orrs	r1, r5
 80046d0:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80046d2:	6811      	ldr	r1, [r2, #0]
 80046d4:	4d42      	ldr	r5, [pc, #264]	; (80047e0 <HAL_ADC_Init+0x1a4>)
 80046d6:	4029      	ands	r1, r5
 80046d8:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80046da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046dc:	6815      	ldr	r5, [r2, #0]
 80046de:	0649      	lsls	r1, r1, #25
 80046e0:	4329      	orrs	r1, r5
 80046e2:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80046e4:	2280      	movs	r2, #128	; 0x80
 80046e6:	6899      	ldr	r1, [r3, #8]
 80046e8:	0552      	lsls	r2, r2, #21
 80046ea:	4211      	tst	r1, r2
 80046ec:	d102      	bne.n	80046f4 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80046ee:	6899      	ldr	r1, [r3, #8]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	493b      	ldr	r1, [pc, #236]	; (80047e4 <HAL_ADC_Init+0x1a8>)
 80046f8:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80046fa:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80046fc:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80046fe:	68dd      	ldr	r5, [r3, #12]
 8004700:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004702:	2902      	cmp	r1, #2
 8004704:	d100      	bne.n	8004708 <HAL_ADC_Init+0xcc>
 8004706:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004708:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800470a:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800470c:	4332      	orrs	r2, r6
 800470e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004710:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004712:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004714:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004716:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004718:	69e5      	ldr	r5, [r4, #28]
 800471a:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800471c:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800471e:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004720:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004722:	0025      	movs	r5, r4
 8004724:	352c      	adds	r5, #44	; 0x2c
 8004726:	782d      	ldrb	r5, [r5, #0]
 8004728:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800472a:	432a      	orrs	r2, r5
 800472c:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800472e:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004730:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004732:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004734:	30ff      	adds	r0, #255	; 0xff
 8004736:	4282      	cmp	r2, r0
 8004738:	d004      	beq.n	8004744 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800473a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800473c:	68d8      	ldr	r0, [r3, #12]
 800473e:	432a      	orrs	r2, r5
 8004740:	4302      	orrs	r2, r0
 8004742:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004744:	1ca2      	adds	r2, r4, #2
 8004746:	7fd2      	ldrb	r2, [r2, #31]
 8004748:	2a01      	cmp	r2, #1
 800474a:	d106      	bne.n	800475a <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800474c:	2900      	cmp	r1, #0
 800474e:	d134      	bne.n	80047ba <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004750:	2280      	movs	r2, #128	; 0x80
 8004752:	68d9      	ldr	r1, [r3, #12]
 8004754:	0252      	lsls	r2, r2, #9
 8004756:	430a      	orrs	r2, r1
 8004758:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800475a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800475c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800475e:	2901      	cmp	r1, #1
 8004760:	d133      	bne.n	80047ca <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004762:	4821      	ldr	r0, [pc, #132]	; (80047e8 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004764:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004766:	4002      	ands	r2, r0
 8004768:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800476a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800476c:	6918      	ldr	r0, [r3, #16]
 800476e:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8004770:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004772:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004774:	4302      	orrs	r2, r0
 8004776:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	4311      	orrs	r1, r2
 800477c:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800477e:	2107      	movs	r1, #7
 8004780:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8004782:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004784:	438a      	bics	r2, r1
 8004786:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004788:	695a      	ldr	r2, [r3, #20]
 800478a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800478c:	430a      	orrs	r2, r1
 800478e:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8004790:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8004792:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8004794:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004796:	4393      	bics	r3, r2
 8004798:	001a      	movs	r2, r3
 800479a:	2301      	movs	r3, #1
 800479c:	4313      	orrs	r3, r2
 800479e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80047a0:	e76d      	b.n	800467e <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80047a2:	691d      	ldr	r5, [r3, #16]
 80047a4:	4e11      	ldr	r6, [pc, #68]	; (80047ec <HAL_ADC_Init+0x1b0>)
 80047a6:	00ad      	lsls	r5, r5, #2
 80047a8:	08ad      	lsrs	r5, r5, #2
 80047aa:	611d      	str	r5, [r3, #16]
 80047ac:	6815      	ldr	r5, [r2, #0]
 80047ae:	4035      	ands	r5, r6
 80047b0:	6015      	str	r5, [r2, #0]
 80047b2:	6815      	ldr	r5, [r2, #0]
 80047b4:	4329      	orrs	r1, r5
 80047b6:	6011      	str	r1, [r2, #0]
 80047b8:	e783      	b.n	80046c2 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ba:	2120      	movs	r1, #32
 80047bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047be:	4301      	orrs	r1, r0
 80047c0:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80047c4:	430a      	orrs	r2, r1
 80047c6:	65a2      	str	r2, [r4, #88]	; 0x58
 80047c8:	e7c7      	b.n	800475a <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80047ca:	2101      	movs	r1, #1
 80047cc:	420a      	tst	r2, r1
 80047ce:	d0d6      	beq.n	800477e <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	438a      	bics	r2, r1
 80047d4:	611a      	str	r2, [r3, #16]
 80047d6:	e7d2      	b.n	800477e <HAL_ADC_Init+0x142>
 80047d8:	fffffefd 	.word	0xfffffefd
 80047dc:	40012708 	.word	0x40012708
 80047e0:	fdffffff 	.word	0xfdffffff
 80047e4:	fffe0219 	.word	0xfffe0219
 80047e8:	fffffc03 	.word	0xfffffc03
 80047ec:	ffc3ffff 	.word	0xffc3ffff

080047f0 <HAL_ADC_DeInit>:
{
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80047f4:	2501      	movs	r5, #1
  if(hadc == NULL)
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d011      	beq.n	800481e <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80047fa:	2302      	movs	r3, #2
 80047fc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80047fe:	4313      	orrs	r3, r2
 8004800:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004802:	f7ff fef1 	bl	80045e8 <ADC_ConversionStop>
 8004806:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8004808:	d137      	bne.n	800487a <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 800480a:	0020      	movs	r0, r4
 800480c:	f7ff feb8 	bl	8004580 <ADC_Disable>
 8004810:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8004812:	2801      	cmp	r0, #1
 8004814:	d105      	bne.n	8004822 <HAL_ADC_DeInit+0x32>
{
 8004816:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8004818:	2300      	movs	r3, #0
 800481a:	3450      	adds	r4, #80	; 0x50
 800481c:	7023      	strb	r3, [r4, #0]
}
 800481e:	0028      	movs	r0, r5
 8004820:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8004822:	2301      	movs	r3, #1
 8004824:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	4915      	ldr	r1, [pc, #84]	; (8004880 <HAL_ADC_DeInit+0x90>)
 800482a:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 800482c:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800482e:	400a      	ands	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8004832:	4a14      	ldr	r2, [pc, #80]	; (8004884 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8004834:	4914      	ldr	r1, [pc, #80]	; (8004888 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8004836:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	400a      	ands	r2, r1
 800483c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	4912      	ldr	r1, [pc, #72]	; (800488c <HAL_ADC_DeInit+0x9c>)
 8004842:	400a      	ands	r2, r1
 8004844:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	4911      	ldr	r1, [pc, #68]	; (8004890 <HAL_ADC_DeInit+0xa0>)
 800484a:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 800484c:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800484e:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	438a      	bics	r2, r1
 8004854:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8004856:	6a1a      	ldr	r2, [r3, #32]
 8004858:	490e      	ldr	r1, [pc, #56]	; (8004894 <HAL_ADC_DeInit+0xa4>)
 800485a:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800485c:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800485e:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004860:	33b4      	adds	r3, #180	; 0xb4
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	438a      	bics	r2, r1
 8004866:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	438a      	bics	r2, r1
 800486c:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 800486e:	f7fe fac7 	bl	8002e00 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004872:	2300      	movs	r3, #0
 8004874:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8004876:	6563      	str	r3, [r4, #84]	; 0x54
 8004878:	e7ce      	b.n	8004818 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 800487a:	2801      	cmp	r0, #1
 800487c:	d0cb      	beq.n	8004816 <HAL_ADC_DeInit+0x26>
 800487e:	e7d2      	b.n	8004826 <HAL_ADC_DeInit+0x36>
 8004880:	fffff760 	.word	0xfffff760
 8004884:	0000089f 	.word	0x0000089f
 8004888:	efffffff 	.word	0xefffffff
 800488c:	833e0200 	.word	0x833e0200
 8004890:	3ffffc02 	.word	0x3ffffc02
 8004894:	f000f000 	.word	0xf000f000

08004898 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004898:	6803      	ldr	r3, [r0, #0]
{
 800489a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800489c:	689b      	ldr	r3, [r3, #8]
{
 800489e:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80048a0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80048a2:	075b      	lsls	r3, r3, #29
 80048a4:	d41a      	bmi.n	80048dc <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80048a6:	0025      	movs	r5, r4
 80048a8:	3550      	adds	r5, #80	; 0x50
 80048aa:	782b      	ldrb	r3, [r5, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d015      	beq.n	80048dc <HAL_ADC_Start+0x44>
 80048b0:	2301      	movs	r3, #1
 80048b2:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80048b4:	69e3      	ldr	r3, [r4, #28]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d111      	bne.n	80048de <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80048ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048bc:	4a0b      	ldr	r2, [pc, #44]	; (80048ec <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80048be:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80048c0:	401a      	ands	r2, r3
 80048c2:	2380      	movs	r3, #128	; 0x80
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80048c8:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80048ca:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80048cc:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80048ce:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80048d4:	6899      	ldr	r1, [r3, #8]
 80048d6:	3a18      	subs	r2, #24
 80048d8:	430a      	orrs	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80048de:	0020      	movs	r0, r4
 80048e0:	f7ff fe16 	bl	8004510 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d0e8      	beq.n	80048ba <HAL_ADC_Start+0x22>
 80048e8:	e7f8      	b.n	80048dc <HAL_ADC_Start+0x44>
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	fffff0fe 	.word	0xfffff0fe

080048f0 <HAL_ADC_Stop>:
{
 80048f0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80048f2:	0006      	movs	r6, r0
 80048f4:	3650      	adds	r6, #80	; 0x50
 80048f6:	7833      	ldrb	r3, [r6, #0]
{
 80048f8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80048fa:	2002      	movs	r0, #2
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d012      	beq.n	8004926 <HAL_ADC_Stop+0x36>
 8004900:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004902:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8004904:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004906:	f7ff fe6f 	bl	80045e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800490a:	2800      	cmp	r0, #0
 800490c:	d109      	bne.n	8004922 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800490e:	0020      	movs	r0, r4
 8004910:	f7ff fe36 	bl	8004580 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004914:	2800      	cmp	r0, #0
 8004916:	d104      	bne.n	8004922 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8004918:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800491a:	4a03      	ldr	r2, [pc, #12]	; (8004928 <HAL_ADC_Stop+0x38>)
 800491c:	4013      	ands	r3, r2
 800491e:	431d      	orrs	r5, r3
 8004920:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004922:	2300      	movs	r3, #0
 8004924:	7033      	strb	r3, [r6, #0]
}
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	fffffefe 	.word	0xfffffefe

0800492c <HAL_ADC_PollForConversion>:
{
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800492e:	6946      	ldr	r6, [r0, #20]
{
 8004930:	0004      	movs	r4, r0
 8004932:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004934:	2e08      	cmp	r6, #8
 8004936:	d00d      	beq.n	8004954 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004938:	6803      	ldr	r3, [r0, #0]
 800493a:	2001      	movs	r0, #1
 800493c:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800493e:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004940:	4203      	tst	r3, r0
 8004942:	d007      	beq.n	8004954 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004944:	2320      	movs	r3, #32
 8004946:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8004948:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494a:	4313      	orrs	r3, r2
 800494c:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800494e:	2300      	movs	r3, #0
 8004950:	7023      	strb	r3, [r4, #0]
}
 8004952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8004954:	f7ff f878 	bl	8003a48 <HAL_GetTick>
 8004958:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4216      	tst	r6, r2
 8004960:	d024      	beq.n	80049ac <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004966:	0092      	lsls	r2, r2, #2
 8004968:	430a      	orrs	r2, r1
 800496a:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800496c:	22c0      	movs	r2, #192	; 0xc0
 800496e:	68d9      	ldr	r1, [r3, #12]
 8004970:	0112      	lsls	r2, r2, #4
 8004972:	4211      	tst	r1, r2
 8004974:	d113      	bne.n	800499e <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004976:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004978:	7fd2      	ldrb	r2, [r2, #31]
 800497a:	2a00      	cmp	r2, #0
 800497c:	d10f      	bne.n	800499e <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	0712      	lsls	r2, r2, #28
 8004982:	d50c      	bpl.n	800499e <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	0752      	lsls	r2, r2, #29
 8004988:	d423      	bmi.n	80049d2 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800498a:	210c      	movs	r1, #12
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	438a      	bics	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8004992:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004994:	4913      	ldr	r1, [pc, #76]	; (80049e4 <HAL_ADC_PollForConversion+0xb8>)
 8004996:	4011      	ands	r1, r2
 8004998:	2201      	movs	r2, #1
 800499a:	430a      	orrs	r2, r1
 800499c:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 800499e:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80049a0:	69a2      	ldr	r2, [r4, #24]
 80049a2:	4282      	cmp	r2, r0
 80049a4:	d1d5      	bne.n	8004952 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80049a6:	220c      	movs	r2, #12
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e7d2      	b.n	8004952 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80049ac:	1c6a      	adds	r2, r5, #1
 80049ae:	d0d5      	beq.n	800495c <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80049b0:	2d00      	cmp	r5, #0
 80049b2:	d108      	bne.n	80049c6 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80049b4:	2304      	movs	r3, #4
 80049b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80049b8:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80049ba:	4313      	orrs	r3, r2
 80049bc:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80049be:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80049c0:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80049c2:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80049c4:	e7c5      	b.n	8004952 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80049c6:	f7ff f83f 	bl	8003a48 <HAL_GetTick>
 80049ca:	1bc0      	subs	r0, r0, r7
 80049cc:	42a8      	cmp	r0, r5
 80049ce:	d9c4      	bls.n	800495a <HAL_ADC_PollForConversion+0x2e>
 80049d0:	e7f0      	b.n	80049b4 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d2:	2220      	movs	r2, #32
 80049d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80049d6:	430a      	orrs	r2, r1
 80049d8:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049da:	2201      	movs	r2, #1
 80049dc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80049de:	430a      	orrs	r2, r1
 80049e0:	65a2      	str	r2, [r4, #88]	; 0x58
 80049e2:	e7dc      	b.n	800499e <HAL_ADC_PollForConversion+0x72>
 80049e4:	fffffefe 	.word	0xfffffefe

080049e8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80049e8:	6803      	ldr	r3, [r0, #0]
 80049ea:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80049ec:	4770      	bx	lr
	...

080049f0 <HAL_ADC_ConfigChannel>:
{
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80049f2:	0004      	movs	r4, r0
 80049f4:	3450      	adds	r4, #80	; 0x50
 80049f6:	7822      	ldrb	r2, [r4, #0]
{
 80049f8:	0003      	movs	r3, r0
 80049fa:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80049fc:	2002      	movs	r0, #2
 80049fe:	2a01      	cmp	r2, #1
 8004a00:	d00b      	beq.n	8004a1a <HAL_ADC_ConfigChannel+0x2a>
 8004a02:	3801      	subs	r0, #1
 8004a04:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	6891      	ldr	r1, [r2, #8]
 8004a0a:	0749      	lsls	r1, r1, #29
 8004a0c:	d506      	bpl.n	8004a1c <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a0e:	2220      	movs	r2, #32
 8004a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a12:	430a      	orrs	r2, r1
 8004a14:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004a16:	2300      	movs	r3, #0
 8004a18:	7023      	strb	r3, [r4, #0]
}
 8004a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sConfig->Rank != ADC_RANK_NONE)
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	6828      	ldr	r0, [r5, #0]
 8004a20:	4e19      	ldr	r6, [pc, #100]	; (8004a88 <HAL_ADC_ConfigChannel+0x98>)
 8004a22:	686f      	ldr	r7, [r5, #4]
 8004a24:	0341      	lsls	r1, r0, #13
 8004a26:	02db      	lsls	r3, r3, #11
 8004a28:	0b49      	lsrs	r1, r1, #13
 8004a2a:	4003      	ands	r3, r0
 8004a2c:	42b7      	cmp	r7, r6
 8004a2e:	d019      	beq.n	8004a64 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004a30:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004a32:	4301      	orrs	r1, r0
 8004a34:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <HAL_ADC_ConfigChannel+0x9c>)
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004a42:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004a48:	f7ff fd4c 	bl	80044e4 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	039b      	lsls	r3, r3, #14
 8004a50:	d505      	bpl.n	8004a5e <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <HAL_ADC_ConfigChannel+0x9c>)
 8004a56:	03db      	lsls	r3, r3, #15
 8004a58:	6811      	ldr	r1, [r2, #0]
 8004a5a:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004a5c:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8004a5e:	2000      	movs	r0, #0
 8004a60:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004a62:	e7da      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004a64:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8004a66:	438d      	bics	r5, r1
 8004a68:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d004      	beq.n	8004a78 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004a6e:	4a07      	ldr	r2, [pc, #28]	; (8004a8c <HAL_ADC_ConfigChannel+0x9c>)
 8004a70:	4907      	ldr	r1, [pc, #28]	; (8004a90 <HAL_ADC_ConfigChannel+0xa0>)
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	400b      	ands	r3, r1
 8004a76:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004a78:	0383      	lsls	r3, r0, #14
 8004a7a:	d5f0      	bpl.n	8004a5e <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004a7c:	4a03      	ldr	r2, [pc, #12]	; (8004a8c <HAL_ADC_ConfigChannel+0x9c>)
 8004a7e:	4905      	ldr	r1, [pc, #20]	; (8004a94 <HAL_ADC_ConfigChannel+0xa4>)
 8004a80:	6813      	ldr	r3, [r2, #0]
 8004a82:	400b      	ands	r3, r1
 8004a84:	e7ea      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x6c>
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	00001001 	.word	0x00001001
 8004a8c:	40012708 	.word	0x40012708
 8004a90:	ff7fffff 	.word	0xff7fffff
 8004a94:	ffbfffff 	.word	0xffbfffff

08004a98 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a9a:	0005      	movs	r5, r0
 8004a9c:	3550      	adds	r5, #80	; 0x50
 8004a9e:	782b      	ldrb	r3, [r5, #0]
{
 8004aa0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8004aa2:	2002      	movs	r0, #2
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d044      	beq.n	8004b32 <HAL_ADCEx_Calibration_Start+0x9a>
 8004aa8:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004aaa:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8004aac:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	6898      	ldr	r0, [r3, #8]
 8004ab2:	4010      	ands	r0, r2
 8004ab4:	2801      	cmp	r0, #1
 8004ab6:	d109      	bne.n	8004acc <HAL_ADCEx_Calibration_Start+0x34>
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4202      	tst	r2, r0
 8004abc:	d006      	beq.n	8004acc <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004abe:	2320      	movs	r3, #32
 8004ac0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8004aca:	e032      	b.n	8004b32 <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 8004acc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004ace:	4919      	ldr	r1, [pc, #100]	; (8004b34 <HAL_ADCEx_Calibration_Start+0x9c>)
 8004ad0:	4011      	ands	r1, r2
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004ad6:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8004ad8:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004ada:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	438a      	bics	r2, r1
 8004ae0:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004ae2:	2280      	movs	r2, #128	; 0x80
 8004ae4:	6899      	ldr	r1, [r3, #8]
 8004ae6:	0612      	lsls	r2, r2, #24
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8004aec:	f7fe ffac 	bl	8003a48 <HAL_GetTick>
 8004af0:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	db0c      	blt.n	8004b14 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004afa:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004afc:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004afe:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004b00:	430e      	orrs	r6, r1
 8004b02:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004b04:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b06:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8004b08:	4393      	bics	r3, r2
 8004b0a:	001a      	movs	r2, r3
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	6563      	str	r3, [r4, #84]	; 0x54
 8004b12:	e7d8      	b.n	8004ac6 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004b14:	f7fe ff98 	bl	8003a48 <HAL_GetTick>
 8004b18:	1bc0      	subs	r0, r0, r7
 8004b1a:	280a      	cmp	r0, #10
 8004b1c:	d9e9      	bls.n	8004af2 <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 8004b1e:	2212      	movs	r2, #18
 8004b20:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004b22:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8004b24:	4393      	bics	r3, r2
 8004b26:	001a      	movs	r2, r3
 8004b28:	2310      	movs	r3, #16
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	702b      	strb	r3, [r5, #0]
}
 8004b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b34:	fffffefd 	.word	0xfffffefd

08004b38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b38:	b530      	push	{r4, r5, lr}
 8004b3a:	25ff      	movs	r5, #255	; 0xff
 8004b3c:	2403      	movs	r4, #3
 8004b3e:	002a      	movs	r2, r5
 8004b40:	4004      	ands	r4, r0
 8004b42:	00e4      	lsls	r4, r4, #3
 8004b44:	40a2      	lsls	r2, r4
 8004b46:	0189      	lsls	r1, r1, #6
 8004b48:	4029      	ands	r1, r5
 8004b4a:	43d2      	mvns	r2, r2
 8004b4c:	40a1      	lsls	r1, r4
 8004b4e:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004b50:	2800      	cmp	r0, #0
 8004b52:	db0a      	blt.n	8004b6a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b54:	24c0      	movs	r4, #192	; 0xc0
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_NVIC_SetPriority+0x4c>)
 8004b58:	0880      	lsrs	r0, r0, #2
 8004b5a:	0080      	lsls	r0, r0, #2
 8004b5c:	18c0      	adds	r0, r0, r3
 8004b5e:	00a4      	lsls	r4, r4, #2
 8004b60:	5903      	ldr	r3, [r0, r4]
 8004b62:	401a      	ands	r2, r3
 8004b64:	4311      	orrs	r1, r2
 8004b66:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004b68:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b6a:	200f      	movs	r0, #15
 8004b6c:	4003      	ands	r3, r0
 8004b6e:	3b08      	subs	r3, #8
 8004b70:	4805      	ldr	r0, [pc, #20]	; (8004b88 <HAL_NVIC_SetPriority+0x50>)
 8004b72:	089b      	lsrs	r3, r3, #2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	181b      	adds	r3, r3, r0
 8004b78:	69d8      	ldr	r0, [r3, #28]
 8004b7a:	4002      	ands	r2, r0
 8004b7c:	4311      	orrs	r1, r2
 8004b7e:	61d9      	str	r1, [r3, #28]
 8004b80:	e7f2      	b.n	8004b68 <HAL_NVIC_SetPriority+0x30>
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	e000e100 	.word	0xe000e100
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	db05      	blt.n	8004b9c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b90:	231f      	movs	r3, #31
 8004b92:	4018      	ands	r0, r3
 8004b94:	3b1e      	subs	r3, #30
 8004b96:	4083      	lsls	r3, r0
 8004b98:	4a01      	ldr	r2, [pc, #4]	; (8004ba0 <HAL_NVIC_EnableIRQ+0x14>)
 8004b9a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b9c:	4770      	bx	lr
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	e000e100 	.word	0xe000e100

08004ba4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	db09      	blt.n	8004bbc <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba8:	231f      	movs	r3, #31
 8004baa:	4018      	ands	r0, r3
 8004bac:	3b1e      	subs	r3, #30
 8004bae:	4083      	lsls	r3, r0
 8004bb0:	4a03      	ldr	r2, [pc, #12]	; (8004bc0 <HAL_NVIC_DisableIRQ+0x1c>)
 8004bb2:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004bb8:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004bbc:	4770      	bx	lr
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	e000e104 	.word	0xe000e104

08004bc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004bc8:	2001      	movs	r0, #1
  if(hdma == NULL)
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d035      	beq.n	8004c3a <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bce:	6825      	ldr	r5, [r4, #0]
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <HAL_DMA_Init+0x78>)
 8004bd2:	2114      	movs	r1, #20
 8004bd4:	18e8      	adds	r0, r5, r3
 8004bd6:	f7fb fac7 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8004bda:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bdc:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8004bde:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004be0:	2302      	movs	r3, #2
 8004be2:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004be4:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8004be6:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004be8:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bea:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bec:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bee:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8004bf0:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf2:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8004bf4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf6:	433b      	orrs	r3, r7
 8004bf8:	6967      	ldr	r7, [r4, #20]
 8004bfa:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bfc:	69a7      	ldr	r7, [r4, #24]
 8004bfe:	433b      	orrs	r3, r7
 8004c00:	69e7      	ldr	r7, [r4, #28]
 8004c02:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c04:	6a27      	ldr	r7, [r4, #32]
 8004c06:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8004c08:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c0a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004c0c:	2380      	movs	r3, #128	; 0x80
 8004c0e:	01db      	lsls	r3, r3, #7
 8004c10:	4299      	cmp	r1, r3
 8004c12:	d00c      	beq.n	8004c2e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c14:	251c      	movs	r5, #28
 8004c16:	4028      	ands	r0, r5
 8004c18:	3d0d      	subs	r5, #13
 8004c1a:	4085      	lsls	r5, r0
 8004c1c:	490a      	ldr	r1, [pc, #40]	; (8004c48 <HAL_DMA_Init+0x84>)
 8004c1e:	680b      	ldr	r3, [r1, #0]
 8004c20:	43ab      	bics	r3, r5
 8004c22:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004c24:	6863      	ldr	r3, [r4, #4]
 8004c26:	680d      	ldr	r5, [r1, #0]
 8004c28:	4083      	lsls	r3, r0
 8004c2a:	432b      	orrs	r3, r5
 8004c2c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c2e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c30:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c32:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c34:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8004c36:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8004c38:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8004c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c3c:	bffdfff8 	.word	0xbffdfff8
 8004c40:	40020000 	.word	0x40020000
 8004c44:	ffff800f 	.word	0xffff800f
 8004c48:	400200a8 	.word	0x400200a8

08004c4c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	2501      	movs	r5, #1
 8004c50:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8004c52:	0028      	movs	r0, r5
  if (NULL == hdma )
 8004c54:	2c00      	cmp	r4, #0
 8004c56:	d021      	beq.n	8004c9c <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004c58:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c5a:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8004c5c:	6833      	ldr	r3, [r6, #0]
 8004c5e:	43ab      	bics	r3, r5
 8004c60:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_DMA_DeInit+0x54>)
 8004c64:	18f0      	adds	r0, r6, r3
 8004c66:	f7fb fa7f 	bl	8000168 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c6a:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c6c:	0083      	lsls	r3, r0, #2
 8004c6e:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c70:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 8004c72:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c74:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c76:	390d      	subs	r1, #13
 8004c78:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 8004c7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004c7c:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 8004c7e:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 8004c80:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c82:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c84:	4d08      	ldr	r5, [pc, #32]	; (8004ca8 <HAL_DMA_DeInit+0x5c>)
 8004c86:	682a      	ldr	r2, [r5, #0]
 8004c88:	438a      	bics	r2, r1
 8004c8a:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8004c8c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004c8e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004c90:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004c92:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c94:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004c96:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8004c98:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 8004c9a:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	bffdfff8 	.word	0xbffdfff8
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	400200a8 	.word	0x400200a8

08004cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cae:	1d45      	adds	r5, r0, #5
{
 8004cb0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8004cb2:	7feb      	ldrb	r3, [r5, #31]
{
 8004cb4:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8004cb6:	2002      	movs	r0, #2
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d029      	beq.n	8004d10 <HAL_DMA_Start_IT+0x64>
 8004cbc:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8004cbe:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8004cc0:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cc2:	7ffb      	ldrb	r3, [r7, #31]
 8004cc4:	2600      	movs	r6, #0
 8004cc6:	469c      	mov	ip, r3
 8004cc8:	4660      	mov	r0, ip
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2801      	cmp	r0, #1
 8004cce:	d12a      	bne.n	8004d26 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cd4:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cd6:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cd8:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8004cda:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cdc:	361c      	adds	r6, #28
 8004cde:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8004ce0:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ce2:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8004ce4:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ce6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8004ce8:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cea:	9b01      	ldr	r3, [sp, #4]
 8004cec:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cee:	68a3      	ldr	r3, [r4, #8]
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d10e      	bne.n	8004d12 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cf4:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004cf6:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004cf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cfe:	230e      	movs	r3, #14
 8004d00:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d02:	4313      	orrs	r3, r2
 8004d04:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8004d06:	2301      	movs	r3, #1
 8004d08:	6802      	ldr	r2, [r0, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2000      	movs	r0, #0
}
 8004d10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004d12:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004d14:	60c2      	str	r2, [r0, #12]
 8004d16:	e7ef      	b.n	8004cf8 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d18:	2204      	movs	r2, #4
 8004d1a:	6803      	ldr	r3, [r0, #0]
 8004d1c:	4393      	bics	r3, r2
 8004d1e:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d20:	6802      	ldr	r2, [r0, #0]
 8004d22:	230a      	movs	r3, #10
 8004d24:	e7ed      	b.n	8004d02 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8004d26:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8004d28:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8004d2a:	e7f1      	b.n	8004d10 <HAL_DMA_Start_IT+0x64>

08004d2c <HAL_DMA_Abort>:
{
 8004d2c:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d2e:	1d85      	adds	r5, r0, #6
 8004d30:	7feb      	ldrb	r3, [r5, #31]
 8004d32:	1d44      	adds	r4, r0, #5
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d005      	beq.n	8004d44 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d38:	2304      	movs	r3, #4
 8004d3a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004d3c:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004d3e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004d40:	77e3      	strb	r3, [r4, #31]
}
 8004d42:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d44:	210e      	movs	r1, #14
 8004d46:	6803      	ldr	r3, [r0, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	438a      	bics	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004d4e:	2201      	movs	r2, #1
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	4391      	bics	r1, r2
 8004d54:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d56:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d58:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d5a:	201c      	movs	r0, #28
 8004d5c:	4003      	ands	r3, r0
 8004d5e:	0010      	movs	r0, r2
 8004d60:	4098      	lsls	r0, r3
 8004d62:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004d64:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004d66:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 8004d68:	77e0      	strb	r0, [r4, #31]
    return status;
 8004d6a:	e7ea      	b.n	8004d42 <HAL_DMA_Abort+0x16>

08004d6c <HAL_DMA_Abort_IT>:
{
 8004d6c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d6e:	1d84      	adds	r4, r0, #6
 8004d70:	7fe3      	ldrb	r3, [r4, #31]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d004      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d76:	2304      	movs	r3, #4
 8004d78:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004d7a:	3b03      	subs	r3, #3
}
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d80:	210e      	movs	r1, #14
 8004d82:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d84:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	438a      	bics	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	4391      	bics	r1, r2
 8004d92:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d94:	231c      	movs	r3, #28
 8004d96:	402b      	ands	r3, r5
 8004d98:	0015      	movs	r5, r2
 8004d9a:	409d      	lsls	r5, r3
 8004d9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8004d9e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004da0:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004da2:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8004da4:	2400      	movs	r4, #0
 8004da6:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8004da8:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8004dac:	42a2      	cmp	r2, r4
 8004dae:	d0e5      	beq.n	8004d7c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8004db0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004db2:	0023      	movs	r3, r4
 8004db4:	e7e2      	b.n	8004d7c <HAL_DMA_Abort_IT+0x10>

08004db6 <HAL_DMA_IRQHandler>:
{
 8004db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004db8:	221c      	movs	r2, #28
 8004dba:	2704      	movs	r7, #4
 8004dbc:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004dbe:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004dc0:	4032      	ands	r2, r6
 8004dc2:	003e      	movs	r6, r7
 8004dc4:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004dc6:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004dc8:	6803      	ldr	r3, [r0, #0]
 8004dca:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004dcc:	4235      	tst	r5, r6
 8004dce:	d00d      	beq.n	8004dec <HAL_DMA_IRQHandler+0x36>
 8004dd0:	423c      	tst	r4, r7
 8004dd2:	d00b      	beq.n	8004dec <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	0692      	lsls	r2, r2, #26
 8004dd8:	d402      	bmi.n	8004de0 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	43ba      	bics	r2, r7
 8004dde:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004de0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004de2:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d019      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8004de8:	4798      	blx	r3
  return;
 8004dea:	e017      	b.n	8004e1c <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004dec:	2702      	movs	r7, #2
 8004dee:	003e      	movs	r6, r7
 8004df0:	4096      	lsls	r6, r2
 8004df2:	4235      	tst	r5, r6
 8004df4:	d013      	beq.n	8004e1e <HAL_DMA_IRQHandler+0x68>
 8004df6:	423c      	tst	r4, r7
 8004df8:	d011      	beq.n	8004e1e <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	0692      	lsls	r2, r2, #26
 8004dfe:	d406      	bmi.n	8004e0e <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e00:	240a      	movs	r4, #10
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	43a2      	bics	r2, r4
 8004e06:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004e08:	2201      	movs	r2, #1
 8004e0a:	1d83      	adds	r3, r0, #6
 8004e0c:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e12:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004e14:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8004e16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d1e5      	bne.n	8004de8 <HAL_DMA_IRQHandler+0x32>
}
 8004e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004e1e:	2608      	movs	r6, #8
 8004e20:	0037      	movs	r7, r6
 8004e22:	4097      	lsls	r7, r2
 8004e24:	423d      	tst	r5, r7
 8004e26:	d0f9      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x66>
 8004e28:	4234      	tst	r4, r6
 8004e2a:	d0f7      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e2c:	250e      	movs	r5, #14
 8004e2e:	681c      	ldr	r4, [r3, #0]
 8004e30:	43ac      	bics	r4, r5
 8004e32:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e34:	2301      	movs	r3, #1
 8004e36:	001c      	movs	r4, r3
 8004e38:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8004e3a:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e3c:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e3e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004e40:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8004e42:	2200      	movs	r2, #0
 8004e44:	1d43      	adds	r3, r0, #5
 8004e46:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8004e48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e4a:	e7e5      	b.n	8004e18 <HAL_DMA_IRQHandler+0x62>

08004e4c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8004e50:	d101      	bne.n	8004e56 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004e52:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8004e54:	4770      	bx	lr
      status = HAL_ERROR;
 8004e56:	2001      	movs	r0, #1
 8004e58:	e7fc      	b.n	8004e54 <HAL_EXTI_RegisterCallback+0x8>

08004e5a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004e5a:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8004e5c:	2001      	movs	r0, #1
  if (hexti == NULL)
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8004e62:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8004e64:	6019      	str	r1, [r3, #0]
  }
}
 8004e66:	4770      	bx	lr

08004e68 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004e68:	221f      	movs	r2, #31
 8004e6a:	6803      	ldr	r3, [r0, #0]
{
 8004e6c:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004e6e:	401a      	ands	r2, r3
 8004e70:	2301      	movs	r3, #1
 8004e72:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <HAL_EXTI_IRQHandler+0x20>)
 8004e76:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8004e78:	420b      	tst	r3, r1
 8004e7a:	d004      	beq.n	8004e86 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8004e7c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004e7e:	6843      	ldr	r3, [r0, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d000      	beq.n	8004e86 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8004e84:	4798      	blx	r3
    }
  }
}
 8004e86:	bd10      	pop	{r4, pc}
 8004e88:	40010400 	.word	0x40010400

08004e8c <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004e8c:	4a57      	ldr	r2, [pc, #348]	; (8004fec <HAL_GPIO_Init+0x160>)
{
 8004e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004e90:	1882      	adds	r2, r0, r2
 8004e92:	1e54      	subs	r4, r2, #1
 8004e94:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8004e96:	2300      	movs	r3, #0
{
 8004e98:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004e9a:	3205      	adds	r2, #5
{
 8004e9c:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004e9e:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004ea0:	9a02      	ldr	r2, [sp, #8]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	0014      	movs	r4, r2
 8004ea6:	40dc      	lsrs	r4, r3
 8004ea8:	d101      	bne.n	8004eae <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8004eaa:	b007      	add	sp, #28
 8004eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004eae:	2101      	movs	r1, #1
 8004eb0:	000d      	movs	r5, r1
 8004eb2:	0014      	movs	r4, r2
 8004eb4:	409d      	lsls	r5, r3
 8004eb6:	402c      	ands	r4, r5
 8004eb8:	9401      	str	r4, [sp, #4]
    if (iocurrent)
 8004eba:	422a      	tst	r2, r5
 8004ebc:	d100      	bne.n	8004ec0 <HAL_GPIO_Init+0x34>
 8004ebe:	e093      	b.n	8004fe8 <HAL_GPIO_Init+0x15c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ec0:	9a02      	ldr	r2, [sp, #8]
 8004ec2:	005f      	lsls	r7, r3, #1
 8004ec4:	6854      	ldr	r4, [r2, #4]
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	0026      	movs	r6, r4
 8004eca:	4396      	bics	r6, r2
 8004ecc:	3a0d      	subs	r2, #13
 8004ece:	40ba      	lsls	r2, r7
 8004ed0:	43d2      	mvns	r2, r2
 8004ed2:	9203      	str	r2, [sp, #12]
 8004ed4:	0032      	movs	r2, r6
 8004ed6:	3a01      	subs	r2, #1
 8004ed8:	9604      	str	r6, [sp, #16]
 8004eda:	428a      	cmp	r2, r1
 8004edc:	d80f      	bhi.n	8004efe <HAL_GPIO_Init+0x72>
        temp = GPIOx->OSPEEDR;
 8004ede:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004ee0:	9a03      	ldr	r2, [sp, #12]
 8004ee2:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ee4:	9a02      	ldr	r2, [sp, #8]
 8004ee6:	68d2      	ldr	r2, [r2, #12]
 8004ee8:	40ba      	lsls	r2, r7
 8004eea:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8004eec:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8004eee:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ef0:	43aa      	bics	r2, r5
 8004ef2:	0015      	movs	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ef4:	0922      	lsrs	r2, r4, #4
 8004ef6:	400a      	ands	r2, r1
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8004efc:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8004efe:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f00:	9a03      	ldr	r2, [sp, #12]
 8004f02:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f04:	9a02      	ldr	r2, [sp, #8]
 8004f06:	6892      	ldr	r2, [r2, #8]
 8004f08:	40ba      	lsls	r2, r7
 8004f0a:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8004f0c:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f0e:	9a04      	ldr	r2, [sp, #16]
 8004f10:	2a02      	cmp	r2, #2
 8004f12:	d10e      	bne.n	8004f32 <HAL_GPIO_Init+0xa6>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004f14:	2507      	movs	r5, #7
 8004f16:	210f      	movs	r1, #15
 8004f18:	401d      	ands	r5, r3
 8004f1a:	00ad      	lsls	r5, r5, #2
 8004f1c:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8004f1e:	08da      	lsrs	r2, r3, #3
 8004f20:	0092      	lsls	r2, r2, #2
 8004f22:	1882      	adds	r2, r0, r2
 8004f24:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004f26:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004f28:	9902      	ldr	r1, [sp, #8]
 8004f2a:	6909      	ldr	r1, [r1, #16]
 8004f2c:	40a9      	lsls	r1, r5
 8004f2e:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8004f30:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8004f32:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f34:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f36:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f38:	402a      	ands	r2, r5
 8004f3a:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f3c:	0022      	movs	r2, r4
 8004f3e:	4032      	ands	r2, r6
 8004f40:	40ba      	lsls	r2, r7
 8004f42:	4315      	orrs	r5, r2
      GPIOx->MODER = temp;
 8004f44:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f46:	00e2      	lsls	r2, r4, #3
 8004f48:	d54e      	bpl.n	8004fe8 <HAL_GPIO_Init+0x15c>
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004f4a:	001f      	movs	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4d28      	ldr	r5, [pc, #160]	; (8004ff0 <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004f50:	4037      	ands	r7, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f52:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004f54:	468c      	mov	ip, r1
 8004f56:	430a      	orrs	r2, r1
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004f58:	00b9      	lsls	r1, r7, #2
 8004f5a:	270f      	movs	r7, #15
 8004f5c:	408f      	lsls	r7, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5e:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8004f60:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <HAL_GPIO_Init+0x168>)
 8004f62:	089d      	lsrs	r5, r3, #2
 8004f64:	00ad      	lsls	r5, r5, #2
 8004f66:	18ad      	adds	r5, r5, r2
 8004f68:	68aa      	ldr	r2, [r5, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004f6a:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004f6c:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004f6e:	9203      	str	r2, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004f70:	05ff      	lsls	r7, r7, #23
 8004f72:	2200      	movs	r2, #0
 8004f74:	42b8      	cmp	r0, r7
 8004f76:	d010      	beq.n	8004f9a <HAL_GPIO_Init+0x10e>
 8004f78:	4f1f      	ldr	r7, [pc, #124]	; (8004ff8 <HAL_GPIO_Init+0x16c>)
 8004f7a:	4662      	mov	r2, ip
 8004f7c:	42b8      	cmp	r0, r7
 8004f7e:	d00c      	beq.n	8004f9a <HAL_GPIO_Init+0x10e>
 8004f80:	4f1e      	ldr	r7, [pc, #120]	; (8004ffc <HAL_GPIO_Init+0x170>)
 8004f82:	1892      	adds	r2, r2, r2
 8004f84:	42b8      	cmp	r0, r7
 8004f86:	d008      	beq.n	8004f9a <HAL_GPIO_Init+0x10e>
 8004f88:	4f1d      	ldr	r7, [pc, #116]	; (8005000 <HAL_GPIO_Init+0x174>)
 8004f8a:	0032      	movs	r2, r6
 8004f8c:	42b8      	cmp	r0, r7
 8004f8e:	d004      	beq.n	8004f9a <HAL_GPIO_Init+0x10e>
 8004f90:	4e1c      	ldr	r6, [pc, #112]	; (8005004 <HAL_GPIO_Init+0x178>)
 8004f92:	4462      	add	r2, ip
 8004f94:	42b0      	cmp	r0, r6
 8004f96:	d000      	beq.n	8004f9a <HAL_GPIO_Init+0x10e>
 8004f98:	9a05      	ldr	r2, [sp, #20]
 8004f9a:	408a      	lsls	r2, r1
 8004f9c:	9903      	ldr	r1, [sp, #12]
 8004f9e:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8004fa0:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fa2:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 8004fa4:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 8004fa6:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8004fa8:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8004faa:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 8004fac:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fae:	03e1      	lsls	r1, r4, #15
 8004fb0:	d401      	bmi.n	8004fb6 <HAL_GPIO_Init+0x12a>
        temp &= ~((uint32_t)iocurrent);
 8004fb2:	003e      	movs	r6, r7
 8004fb4:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8004fb6:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8004fb8:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 8004fba:	9e01      	ldr	r6, [sp, #4]
 8004fbc:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fbe:	03a1      	lsls	r1, r4, #14
 8004fc0:	d401      	bmi.n	8004fc6 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8004fc2:	003e      	movs	r6, r7
 8004fc4:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8004fc6:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8004fc8:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 8004fca:	9e01      	ldr	r6, [sp, #4]
 8004fcc:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fce:	02e1      	lsls	r1, r4, #11
 8004fd0:	d401      	bmi.n	8004fd6 <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 8004fd2:	003e      	movs	r6, r7
 8004fd4:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8004fd6:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8004fd8:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8004fda:	9f01      	ldr	r7, [sp, #4]
 8004fdc:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fde:	02a1      	lsls	r1, r4, #10
 8004fe0:	d401      	bmi.n	8004fe6 <HAL_GPIO_Init+0x15a>
        temp &= ~((uint32_t)iocurrent);
 8004fe2:	402e      	ands	r6, r5
 8004fe4:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8004fe6:	60d7      	str	r7, [r2, #12]
    position++;
 8004fe8:	3301      	adds	r3, #1
 8004fea:	e759      	b.n	8004ea0 <HAL_GPIO_Init+0x14>
 8004fec:	afffe400 	.word	0xafffe400
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	50000400 	.word	0x50000400
 8004ffc:	50000800 	.word	0x50000800
 8005000:	50000c00 	.word	0x50000c00
 8005004:	50001000 	.word	0x50001000
 8005008:	40010400 	.word	0x40010400

0800500c <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800500e:	4a38      	ldr	r2, [pc, #224]	; (80050f0 <HAL_GPIO_DeInit+0xe4>)
{
 8005010:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005012:	1882      	adds	r2, r0, r2
{
 8005014:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005016:	1e51      	subs	r1, r2, #1
 8005018:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 800501a:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800501c:	3205      	adds	r2, #5
 800501e:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 8005020:	9a02      	ldr	r2, [sp, #8]
 8005022:	40da      	lsrs	r2, r3
 8005024:	d101      	bne.n	800502a <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8005026:	b007      	add	sp, #28
 8005028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 800502a:	2701      	movs	r7, #1
 800502c:	003a      	movs	r2, r7
 800502e:	409a      	lsls	r2, r3
 8005030:	9c02      	ldr	r4, [sp, #8]
 8005032:	9201      	str	r2, [sp, #4]
 8005034:	4014      	ands	r4, r2
    if (iocurrent)
 8005036:	9901      	ldr	r1, [sp, #4]
 8005038:	9a02      	ldr	r2, [sp, #8]
 800503a:	420a      	tst	r2, r1
 800503c:	d056      	beq.n	80050ec <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800503e:	4a2d      	ldr	r2, [pc, #180]	; (80050f4 <HAL_GPIO_DeInit+0xe8>)
 8005040:	0899      	lsrs	r1, r3, #2
 8005042:	0089      	lsls	r1, r1, #2
 8005044:	1889      	adds	r1, r1, r2
 8005046:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8005048:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 800504a:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800504c:	2203      	movs	r2, #3
 800504e:	4015      	ands	r5, r2
 8005050:	00ad      	lsls	r5, r5, #2
 8005052:	320c      	adds	r2, #12
 8005054:	40aa      	lsls	r2, r5
 8005056:	9203      	str	r2, [sp, #12]
 8005058:	4032      	ands	r2, r6
 800505a:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800505c:	22a0      	movs	r2, #160	; 0xa0
 800505e:	05d2      	lsls	r2, r2, #23
 8005060:	4694      	mov	ip, r2
 8005062:	2200      	movs	r2, #0
 8005064:	4560      	cmp	r0, ip
 8005066:	d011      	beq.n	800508c <HAL_GPIO_DeInit+0x80>
 8005068:	4a23      	ldr	r2, [pc, #140]	; (80050f8 <HAL_GPIO_DeInit+0xec>)
 800506a:	4694      	mov	ip, r2
 800506c:	003a      	movs	r2, r7
 800506e:	4560      	cmp	r0, ip
 8005070:	d00c      	beq.n	800508c <HAL_GPIO_DeInit+0x80>
 8005072:	4f22      	ldr	r7, [pc, #136]	; (80050fc <HAL_GPIO_DeInit+0xf0>)
 8005074:	1892      	adds	r2, r2, r2
 8005076:	42b8      	cmp	r0, r7
 8005078:	d008      	beq.n	800508c <HAL_GPIO_DeInit+0x80>
 800507a:	4f21      	ldr	r7, [pc, #132]	; (8005100 <HAL_GPIO_DeInit+0xf4>)
 800507c:	3201      	adds	r2, #1
 800507e:	42b8      	cmp	r0, r7
 8005080:	d004      	beq.n	800508c <HAL_GPIO_DeInit+0x80>
 8005082:	4e20      	ldr	r6, [pc, #128]	; (8005104 <HAL_GPIO_DeInit+0xf8>)
 8005084:	3201      	adds	r2, #1
 8005086:	42b0      	cmp	r0, r6
 8005088:	d000      	beq.n	800508c <HAL_GPIO_DeInit+0x80>
 800508a:	9a05      	ldr	r2, [sp, #20]
 800508c:	40aa      	lsls	r2, r5
 800508e:	9d04      	ldr	r5, [sp, #16]
 8005090:	42aa      	cmp	r2, r5
 8005092:	d110      	bne.n	80050b6 <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005094:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <HAL_GPIO_DeInit+0xfc>)
 8005096:	6815      	ldr	r5, [r2, #0]
 8005098:	43a5      	bics	r5, r4
 800509a:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800509c:	6855      	ldr	r5, [r2, #4]
 800509e:	43a5      	bics	r5, r4
 80050a0:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80050a2:	6895      	ldr	r5, [r2, #8]
 80050a4:	43a5      	bics	r5, r4
 80050a6:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80050a8:	68d5      	ldr	r5, [r2, #12]
 80050aa:	43a5      	bics	r5, r4
 80050ac:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80050ae:	688a      	ldr	r2, [r1, #8]
 80050b0:	9c03      	ldr	r4, [sp, #12]
 80050b2:	43a2      	bics	r2, r4
 80050b4:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80050b6:	2103      	movs	r1, #3
 80050b8:	005c      	lsls	r4, r3, #1
 80050ba:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80050bc:	2407      	movs	r4, #7
 80050be:	260f      	movs	r6, #15
 80050c0:	401c      	ands	r4, r3
 80050c2:	00a4      	lsls	r4, r4, #2
 80050c4:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80050c6:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80050c8:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80050ca:	430a      	orrs	r2, r1
 80050cc:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80050ce:	08da      	lsrs	r2, r3, #3
 80050d0:	0092      	lsls	r2, r2, #2
 80050d2:	1882      	adds	r2, r0, r2
 80050d4:	6a15      	ldr	r5, [r2, #32]
 80050d6:	43b5      	bics	r5, r6
 80050d8:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050da:	68c2      	ldr	r2, [r0, #12]
 80050dc:	438a      	bics	r2, r1
 80050de:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80050e0:	6842      	ldr	r2, [r0, #4]
 80050e2:	43a2      	bics	r2, r4
 80050e4:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80050e6:	6882      	ldr	r2, [r0, #8]
 80050e8:	438a      	bics	r2, r1
 80050ea:	6082      	str	r2, [r0, #8]
    position++;
 80050ec:	3301      	adds	r3, #1
 80050ee:	e797      	b.n	8005020 <HAL_GPIO_DeInit+0x14>
 80050f0:	afffe400 	.word	0xafffe400
 80050f4:	40010000 	.word	0x40010000
 80050f8:	50000400 	.word	0x50000400
 80050fc:	50000800 	.word	0x50000800
 8005100:	50000c00 	.word	0x50000c00
 8005104:	50001000 	.word	0x50001000
 8005108:	40010400 	.word	0x40010400

0800510c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800510c:	6900      	ldr	r0, [r0, #16]
 800510e:	4008      	ands	r0, r1
 8005110:	1e41      	subs	r1, r0, #1
 8005112:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8005114:	b2c0      	uxtb	r0, r0
}
 8005116:	4770      	bx	lr

08005118 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005118:	2a00      	cmp	r2, #0
 800511a:	d001      	beq.n	8005120 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800511c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800511e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8005120:	6281      	str	r1, [r0, #40]	; 0x28
}
 8005122:	e7fc      	b.n	800511e <HAL_GPIO_WritePin+0x6>

08005124 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005124:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005126:	0013      	movs	r3, r2
 8005128:	400b      	ands	r3, r1
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	4391      	bics	r1, r2
 800512e:	4319      	orrs	r1, r3
 8005130:	6181      	str	r1, [r0, #24]
}
 8005132:	4770      	bx	lr

08005134 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8005134:	2110      	movs	r1, #16
 8005136:	4a02      	ldr	r2, [pc, #8]	; (8005140 <HAL_PWR_DisablePVD+0xc>)
 8005138:	6813      	ldr	r3, [r2, #0]
 800513a:	438b      	bics	r3, r1
 800513c:	6013      	str	r3, [r2, #0]
}
 800513e:	4770      	bx	lr
 8005140:	40007000 	.word	0x40007000

08005144 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005144:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 8005146:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005148:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800514a:	681e      	ldr	r6, [r3, #0]
{
 800514c:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800514e:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005150:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005152:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005154:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005156:	0080      	lsls	r0, r0, #2
 8005158:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800515a:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 800515c:	4206      	tst	r6, r0
 800515e:	d005      	beq.n	800516c <HAL_PWR_EnterSLEEPMode+0x28>
 8005160:	2a00      	cmp	r2, #0
 8005162:	d003      	beq.n	800516c <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	4e11      	ldr	r6, [pc, #68]	; (80051ac <HAL_PWR_EnterSLEEPMode+0x68>)
 8005168:	4030      	ands	r0, r6
 800516a:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800516c:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 800516e:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005170:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005172:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005174:	4d0e      	ldr	r5, [pc, #56]	; (80051b0 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8005176:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005178:	6928      	ldr	r0, [r5, #16]
 800517a:	3601      	adds	r6, #1
 800517c:	43b0      	bics	r0, r6
 800517e:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005180:	2901      	cmp	r1, #1
 8005182:	d10b      	bne.n	800519c <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005184:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8005186:	2c00      	cmp	r4, #0
 8005188:	d006      	beq.n	8005198 <HAL_PWR_EnterSLEEPMode+0x54>
 800518a:	2a00      	cmp	r2, #0
 800518c:	d004      	beq.n	8005198 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800518e:	2280      	movs	r2, #128	; 0x80
 8005190:	6819      	ldr	r1, [r3, #0]
 8005192:	0092      	lsls	r2, r2, #2
 8005194:	430a      	orrs	r2, r1
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8005198:	46c0      	nop			; (mov r8, r8)

}
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 800519c:	bf40      	sev
    __WFE();
 800519e:	bf20      	wfe
    __WFE();
 80051a0:	bf20      	wfe
 80051a2:	e7f0      	b.n	8005186 <HAL_PWR_EnterSLEEPMode+0x42>
 80051a4:	40007000 	.word	0x40007000
 80051a8:	40010000 	.word	0x40010000
 80051ac:	fffffdff 	.word	0xfffffdff
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80051b4:	4b19      	ldr	r3, [pc, #100]	; (800521c <HAL_PWR_EnterSTOPMode+0x68>)
{
 80051b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80051b8:	681e      	ldr	r6, [r3, #0]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80051ba:	4c19      	ldr	r4, [pc, #100]	; (8005220 <HAL_PWR_EnterSTOPMode+0x6c>)
{
 80051bc:	0002      	movs	r2, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80051be:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80051c0:	6a27      	ldr	r7, [r4, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80051c2:	0035      	movs	r5, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80051c4:	2401      	movs	r4, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80051c6:	0080      	lsls	r0, r0, #2
 80051c8:	4005      	ands	r5, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80051ca:	403c      	ands	r4, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 80051cc:	4206      	tst	r6, r0
 80051ce:	d005      	beq.n	80051dc <HAL_PWR_EnterSTOPMode+0x28>
 80051d0:	2c00      	cmp	r4, #0
 80051d2:	d003      	beq.n	80051dc <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	4e13      	ldr	r6, [pc, #76]	; (8005224 <HAL_PWR_EnterSTOPMode+0x70>)
 80051d8:	4030      	ands	r0, r6
 80051da:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80051dc:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 80051de:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80051e0:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80051e2:	4310      	orrs	r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 80051e4:	6018      	str	r0, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80051e6:	2004      	movs	r0, #4
 80051e8:	4a0f      	ldr	r2, [pc, #60]	; (8005228 <HAL_PWR_EnterSTOPMode+0x74>)
 80051ea:	6916      	ldr	r6, [r2, #16]
 80051ec:	4330      	orrs	r0, r6
 80051ee:	6110      	str	r0, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80051f0:	2901      	cmp	r1, #1
 80051f2:	d10e      	bne.n	8005212 <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80051f4:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80051f6:	2004      	movs	r0, #4
 80051f8:	6911      	ldr	r1, [r2, #16]
 80051fa:	4381      	bics	r1, r0
 80051fc:	6111      	str	r1, [r2, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80051fe:	2d00      	cmp	r5, #0
 8005200:	d006      	beq.n	8005210 <HAL_PWR_EnterSTOPMode+0x5c>
 8005202:	2c00      	cmp	r4, #0
 8005204:	d004      	beq.n	8005210 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8005206:	2280      	movs	r2, #128	; 0x80
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	0092      	lsls	r2, r2, #2
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]
  }
}
 8005210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8005212:	bf40      	sev
    __WFE();
 8005214:	bf20      	wfe
    __WFE();
 8005216:	bf20      	wfe
 8005218:	e7ed      	b.n	80051f6 <HAL_PWR_EnterSTOPMode+0x42>
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	40007000 	.word	0x40007000
 8005220:	40010000 	.word	0x40010000
 8005224:	fffffdff 	.word	0xfffffdff
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	4a03      	ldr	r2, [pc, #12]	; (800523c <HAL_PWREx_EnableFastWakeUp+0x10>)
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	6811      	ldr	r1, [r2, #0]
 8005234:	430b      	orrs	r3, r1
 8005236:	6013      	str	r3, [r2, #0]
}
 8005238:	4770      	bx	lr
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	40007000 	.word	0x40007000

08005240 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	4a03      	ldr	r2, [pc, #12]	; (8005250 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	6811      	ldr	r1, [r2, #0]
 8005248:	430b      	orrs	r3, r1
 800524a:	6013      	str	r3, [r2, #0]
}
 800524c:	4770      	bx	lr
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	40007000 	.word	0x40007000

08005254 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005254:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_RCC_GetSysClockFreq+0x78>)
{
 8005258:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800525a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800525c:	4022      	ands	r2, r4
 800525e:	2a08      	cmp	r2, #8
 8005260:	d031      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0x72>
 8005262:	2a0c      	cmp	r2, #12
 8005264:	d009      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0x26>
 8005266:	2a04      	cmp	r2, #4
 8005268:	d125      	bne.n	80052b6 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800526a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800526c:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800526e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8005270:	17c0      	asrs	r0, r0, #31
 8005272:	4018      	ands	r0, r3
 8005274:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x80>)
 8005276:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8005278:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800527a:	02a2      	lsls	r2, r4, #10
 800527c:	4816      	ldr	r0, [pc, #88]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x84>)
 800527e:	0f12      	lsrs	r2, r2, #28
 8005280:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005282:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005284:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005286:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005288:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800528a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800528c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800528e:	4211      	tst	r1, r2
 8005290:	d009      	beq.n	80052a6 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <HAL_RCC_GetSysClockFreq+0x88>)
 8005294:	2300      	movs	r3, #0
 8005296:	2100      	movs	r1, #0
 8005298:	f7fb f93a 	bl	8000510 <__aeabi_lmul>
 800529c:	0022      	movs	r2, r4
 800529e:	2300      	movs	r3, #0
 80052a0:	f7fb f916 	bl	80004d0 <__aeabi_uldivmod>
 80052a4:	e7e8      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	2310      	movs	r3, #16
 80052aa:	421a      	tst	r2, r3
 80052ac:	d001      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80052ae:	4a0c      	ldr	r2, [pc, #48]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x8c>)
 80052b0:	e7f0      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80052b2:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x80>)
 80052b4:	e7ee      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80052b6:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80052b8:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80052ba:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80052c0:	3301      	adds	r3, #1
 80052c2:	4098      	lsls	r0, r3
  return sysclockfreq;
 80052c4:	e7d8      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80052c6:	4805      	ldr	r0, [pc, #20]	; (80052dc <HAL_RCC_GetSysClockFreq+0x88>)
 80052c8:	e7d6      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x24>
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	40021000 	.word	0x40021000
 80052d0:	ff48e500 	.word	0xff48e500
 80052d4:	00f42400 	.word	0x00f42400
 80052d8:	08012750 	.word	0x08012750
 80052dc:	007a1200 	.word	0x007a1200
 80052e0:	003d0900 	.word	0x003d0900

080052e4 <HAL_RCC_OscConfig>:
{
 80052e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e6:	0005      	movs	r5, r0
 80052e8:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d059      	beq.n	80053a2 <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ee:	230c      	movs	r3, #12
 80052f0:	4cb8      	ldr	r4, [pc, #736]	; (80055d4 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f2:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052f4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052f6:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052f8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	025b      	lsls	r3, r3, #9
 80052fe:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005300:	07d2      	lsls	r2, r2, #31
 8005302:	d442      	bmi.n	800538a <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	079b      	lsls	r3, r3, #30
 8005308:	d500      	bpl.n	800530c <HAL_RCC_OscConfig+0x28>
 800530a:	e08b      	b.n	8005424 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	06db      	lsls	r3, r3, #27
 8005310:	d529      	bpl.n	8005366 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005312:	2e00      	cmp	r6, #0
 8005314:	d000      	beq.n	8005318 <HAL_RCC_OscConfig+0x34>
 8005316:	e0e4      	b.n	80054e2 <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	059b      	lsls	r3, r3, #22
 800531c:	d502      	bpl.n	8005324 <HAL_RCC_OscConfig+0x40>
 800531e:	69eb      	ldr	r3, [r5, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d03e      	beq.n	80053a2 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005324:	6862      	ldr	r2, [r4, #4]
 8005326:	49ac      	ldr	r1, [pc, #688]	; (80055d8 <HAL_RCC_OscConfig+0x2f4>)
 8005328:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800532a:	400a      	ands	r2, r1
 800532c:	431a      	orrs	r2, r3
 800532e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005330:	6861      	ldr	r1, [r4, #4]
 8005332:	6a2a      	ldr	r2, [r5, #32]
 8005334:	0209      	lsls	r1, r1, #8
 8005336:	0a09      	lsrs	r1, r1, #8
 8005338:	0612      	lsls	r2, r2, #24
 800533a:	430a      	orrs	r2, r1
 800533c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800533e:	2280      	movs	r2, #128	; 0x80
 8005340:	0b5b      	lsrs	r3, r3, #13
 8005342:	3301      	adds	r3, #1
 8005344:	0212      	lsls	r2, r2, #8
 8005346:	409a      	lsls	r2, r3
 8005348:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800534a:	68e1      	ldr	r1, [r4, #12]
 800534c:	060a      	lsls	r2, r1, #24
 800534e:	49a3      	ldr	r1, [pc, #652]	; (80055dc <HAL_RCC_OscConfig+0x2f8>)
 8005350:	0f12      	lsrs	r2, r2, #28
 8005352:	5c8a      	ldrb	r2, [r1, r2]
 8005354:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005356:	4aa2      	ldr	r2, [pc, #648]	; (80055e0 <HAL_RCC_OscConfig+0x2fc>)
 8005358:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800535a:	4ba2      	ldr	r3, [pc, #648]	; (80055e4 <HAL_RCC_OscConfig+0x300>)
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	f7fe fb71 	bl	8003a44 <HAL_InitTick>
        if(status != HAL_OK)
 8005362:	2800      	cmp	r0, #0
 8005364:	d134      	bne.n	80053d0 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005366:	682b      	ldr	r3, [r5, #0]
 8005368:	071b      	lsls	r3, r3, #28
 800536a:	d500      	bpl.n	800536e <HAL_RCC_OscConfig+0x8a>
 800536c:	e0f0      	b.n	8005550 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800536e:	682b      	ldr	r3, [r5, #0]
 8005370:	075b      	lsls	r3, r3, #29
 8005372:	d500      	bpl.n	8005376 <HAL_RCC_OscConfig+0x92>
 8005374:	e112      	b.n	800559c <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	069b      	lsls	r3, r3, #26
 800537a:	d500      	bpl.n	800537e <HAL_RCC_OscConfig+0x9a>
 800537c:	e199      	b.n	80056b2 <HAL_RCC_OscConfig+0x3ce>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800537e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d000      	beq.n	8005386 <HAL_RCC_OscConfig+0xa2>
 8005384:	e1c8      	b.n	8005718 <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 8005386:	2000      	movs	r0, #0
 8005388:	e022      	b.n	80053d0 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800538a:	2e08      	cmp	r6, #8
 800538c:	d003      	beq.n	8005396 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800538e:	2e0c      	cmp	r6, #12
 8005390:	d109      	bne.n	80053a6 <HAL_RCC_OscConfig+0xc2>
 8005392:	2f00      	cmp	r7, #0
 8005394:	d007      	beq.n	80053a6 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	039b      	lsls	r3, r3, #14
 800539a:	d5b3      	bpl.n	8005304 <HAL_RCC_OscConfig+0x20>
 800539c:	686b      	ldr	r3, [r5, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1b0      	bne.n	8005304 <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 80053a2:	2001      	movs	r0, #1
 80053a4:	e014      	b.n	80053d0 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a6:	686a      	ldr	r2, [r5, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d113      	bne.n	80053d4 <HAL_RCC_OscConfig+0xf0>
 80053ac:	6822      	ldr	r2, [r4, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80053b2:	f7fe fb49 	bl	8003a48 <HAL_GetTick>
 80053b6:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053b8:	2280      	movs	r2, #128	; 0x80
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	0292      	lsls	r2, r2, #10
 80053be:	4213      	tst	r3, r2
 80053c0:	d1a0      	bne.n	8005304 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053c2:	f7fe fb41 	bl	8003a48 <HAL_GetTick>
 80053c6:	9b01      	ldr	r3, [sp, #4]
 80053c8:	1ac0      	subs	r0, r0, r3
 80053ca:	2864      	cmp	r0, #100	; 0x64
 80053cc:	d9f4      	bls.n	80053b8 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 80053ce:	2003      	movs	r0, #3
}
 80053d0:	b007      	add	sp, #28
 80053d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d4:	21a0      	movs	r1, #160	; 0xa0
 80053d6:	02c9      	lsls	r1, r1, #11
 80053d8:	428a      	cmp	r2, r1
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0x104>
 80053dc:	2280      	movs	r2, #128	; 0x80
 80053de:	6821      	ldr	r1, [r4, #0]
 80053e0:	02d2      	lsls	r2, r2, #11
 80053e2:	430a      	orrs	r2, r1
 80053e4:	6022      	str	r2, [r4, #0]
 80053e6:	e7e1      	b.n	80053ac <HAL_RCC_OscConfig+0xc8>
 80053e8:	6821      	ldr	r1, [r4, #0]
 80053ea:	487f      	ldr	r0, [pc, #508]	; (80055e8 <HAL_RCC_OscConfig+0x304>)
 80053ec:	4001      	ands	r1, r0
 80053ee:	6021      	str	r1, [r4, #0]
 80053f0:	6821      	ldr	r1, [r4, #0]
 80053f2:	400b      	ands	r3, r1
 80053f4:	9305      	str	r3, [sp, #20]
 80053f6:	9b05      	ldr	r3, [sp, #20]
 80053f8:	497c      	ldr	r1, [pc, #496]	; (80055ec <HAL_RCC_OscConfig+0x308>)
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	400b      	ands	r3, r1
 80053fe:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005400:	2a00      	cmp	r2, #0
 8005402:	d1d6      	bne.n	80053b2 <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8005404:	f7fe fb20 	bl	8003a48 <HAL_GetTick>
 8005408:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	0292      	lsls	r2, r2, #10
 8005410:	4213      	tst	r3, r2
 8005412:	d100      	bne.n	8005416 <HAL_RCC_OscConfig+0x132>
 8005414:	e776      	b.n	8005304 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005416:	f7fe fb17 	bl	8003a48 <HAL_GetTick>
 800541a:	9b01      	ldr	r3, [sp, #4]
 800541c:	1ac0      	subs	r0, r0, r3
 800541e:	2864      	cmp	r0, #100	; 0x64
 8005420:	d9f3      	bls.n	800540a <HAL_RCC_OscConfig+0x126>
 8005422:	e7d4      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005424:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8005426:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005428:	4213      	tst	r3, r2
 800542a:	d003      	beq.n	8005434 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800542c:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800542e:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005430:	4311      	orrs	r1, r2
 8005432:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005434:	2e04      	cmp	r6, #4
 8005436:	d003      	beq.n	8005440 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005438:	2e0c      	cmp	r6, #12
 800543a:	d124      	bne.n	8005486 <HAL_RCC_OscConfig+0x1a2>
 800543c:	2f00      	cmp	r7, #0
 800543e:	d122      	bne.n	8005486 <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	0752      	lsls	r2, r2, #29
 8005444:	d501      	bpl.n	800544a <HAL_RCC_OscConfig+0x166>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0ab      	beq.n	80053a2 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544a:	6861      	ldr	r1, [r4, #4]
 800544c:	692a      	ldr	r2, [r5, #16]
 800544e:	4868      	ldr	r0, [pc, #416]	; (80055f0 <HAL_RCC_OscConfig+0x30c>)
 8005450:	0212      	lsls	r2, r2, #8
 8005452:	4001      	ands	r1, r0
 8005454:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005456:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005458:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	438a      	bics	r2, r1
 800545e:	4313      	orrs	r3, r2
 8005460:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005462:	f7ff fef7 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8005466:	68e3      	ldr	r3, [r4, #12]
 8005468:	4a5c      	ldr	r2, [pc, #368]	; (80055dc <HAL_RCC_OscConfig+0x2f8>)
 800546a:	061b      	lsls	r3, r3, #24
 800546c:	0f1b      	lsrs	r3, r3, #28
 800546e:	5cd3      	ldrb	r3, [r2, r3]
 8005470:	40d8      	lsrs	r0, r3
 8005472:	4b5b      	ldr	r3, [pc, #364]	; (80055e0 <HAL_RCC_OscConfig+0x2fc>)
 8005474:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8005476:	4b5b      	ldr	r3, [pc, #364]	; (80055e4 <HAL_RCC_OscConfig+0x300>)
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	f7fe fae3 	bl	8003a44 <HAL_InitTick>
      if(status != HAL_OK)
 800547e:	2800      	cmp	r0, #0
 8005480:	d100      	bne.n	8005484 <HAL_RCC_OscConfig+0x1a0>
 8005482:	e743      	b.n	800530c <HAL_RCC_OscConfig+0x28>
 8005484:	e7a4      	b.n	80053d0 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 8005486:	2b00      	cmp	r3, #0
 8005488:	d019      	beq.n	80054be <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800548a:	2109      	movs	r1, #9
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	438a      	bics	r2, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005494:	f7fe fad8 	bl	8003a48 <HAL_GetTick>
 8005498:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800549a:	2204      	movs	r2, #4
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	4213      	tst	r3, r2
 80054a0:	d007      	beq.n	80054b2 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a2:	6862      	ldr	r2, [r4, #4]
 80054a4:	692b      	ldr	r3, [r5, #16]
 80054a6:	4952      	ldr	r1, [pc, #328]	; (80055f0 <HAL_RCC_OscConfig+0x30c>)
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	400a      	ands	r2, r1
 80054ac:	4313      	orrs	r3, r2
 80054ae:	6063      	str	r3, [r4, #4]
 80054b0:	e72c      	b.n	800530c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b2:	f7fe fac9 	bl	8003a48 <HAL_GetTick>
 80054b6:	1bc0      	subs	r0, r0, r7
 80054b8:	2802      	cmp	r0, #2
 80054ba:	d9ee      	bls.n	800549a <HAL_RCC_OscConfig+0x1b6>
 80054bc:	e787      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 80054be:	2201      	movs	r2, #1
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	4393      	bics	r3, r2
 80054c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80054c6:	f7fe fabf 	bl	8003a48 <HAL_GetTick>
 80054ca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054cc:	2204      	movs	r2, #4
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	4213      	tst	r3, r2
 80054d2:	d100      	bne.n	80054d6 <HAL_RCC_OscConfig+0x1f2>
 80054d4:	e71a      	b.n	800530c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d6:	f7fe fab7 	bl	8003a48 <HAL_GetTick>
 80054da:	1bc0      	subs	r0, r0, r7
 80054dc:	2802      	cmp	r0, #2
 80054de:	d9f5      	bls.n	80054cc <HAL_RCC_OscConfig+0x1e8>
 80054e0:	e775      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054e2:	69eb      	ldr	r3, [r5, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d020      	beq.n	800552a <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4313      	orrs	r3, r2
 80054f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80054f2:	f7fe faa9 	bl	8003a48 <HAL_GetTick>
 80054f6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054f8:	2280      	movs	r2, #128	; 0x80
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	0092      	lsls	r2, r2, #2
 80054fe:	4213      	tst	r3, r2
 8005500:	d00d      	beq.n	800551e <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005502:	6863      	ldr	r3, [r4, #4]
 8005504:	4a34      	ldr	r2, [pc, #208]	; (80055d8 <HAL_RCC_OscConfig+0x2f4>)
 8005506:	4013      	ands	r3, r2
 8005508:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800550a:	4313      	orrs	r3, r2
 800550c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800550e:	6862      	ldr	r2, [r4, #4]
 8005510:	6a2b      	ldr	r3, [r5, #32]
 8005512:	0212      	lsls	r2, r2, #8
 8005514:	061b      	lsls	r3, r3, #24
 8005516:	0a12      	lsrs	r2, r2, #8
 8005518:	4313      	orrs	r3, r2
 800551a:	6063      	str	r3, [r4, #4]
 800551c:	e723      	b.n	8005366 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800551e:	f7fe fa93 	bl	8003a48 <HAL_GetTick>
 8005522:	1bc0      	subs	r0, r0, r7
 8005524:	2802      	cmp	r0, #2
 8005526:	d9e7      	bls.n	80054f8 <HAL_RCC_OscConfig+0x214>
 8005528:	e751      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	4a31      	ldr	r2, [pc, #196]	; (80055f4 <HAL_RCC_OscConfig+0x310>)
 800552e:	4013      	ands	r3, r2
 8005530:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005532:	f7fe fa89 	bl	8003a48 <HAL_GetTick>
 8005536:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005538:	2280      	movs	r2, #128	; 0x80
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	0092      	lsls	r2, r2, #2
 800553e:	4213      	tst	r3, r2
 8005540:	d100      	bne.n	8005544 <HAL_RCC_OscConfig+0x260>
 8005542:	e710      	b.n	8005366 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005544:	f7fe fa80 	bl	8003a48 <HAL_GetTick>
 8005548:	1bc0      	subs	r0, r0, r7
 800554a:	2802      	cmp	r0, #2
 800554c:	d9f4      	bls.n	8005538 <HAL_RCC_OscConfig+0x254>
 800554e:	e73e      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005550:	696a      	ldr	r2, [r5, #20]
 8005552:	2301      	movs	r3, #1
 8005554:	2a00      	cmp	r2, #0
 8005556:	d010      	beq.n	800557a <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8005558:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800555a:	4313      	orrs	r3, r2
 800555c:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800555e:	f7fe fa73 	bl	8003a48 <HAL_GetTick>
 8005562:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005564:	2202      	movs	r2, #2
 8005566:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005568:	4213      	tst	r3, r2
 800556a:	d000      	beq.n	800556e <HAL_RCC_OscConfig+0x28a>
 800556c:	e6ff      	b.n	800536e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800556e:	f7fe fa6b 	bl	8003a48 <HAL_GetTick>
 8005572:	1bc0      	subs	r0, r0, r7
 8005574:	2802      	cmp	r0, #2
 8005576:	d9f5      	bls.n	8005564 <HAL_RCC_OscConfig+0x280>
 8005578:	e729      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 800557a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800557c:	439a      	bics	r2, r3
 800557e:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005580:	f7fe fa62 	bl	8003a48 <HAL_GetTick>
 8005584:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005586:	2202      	movs	r2, #2
 8005588:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800558a:	4213      	tst	r3, r2
 800558c:	d100      	bne.n	8005590 <HAL_RCC_OscConfig+0x2ac>
 800558e:	e6ee      	b.n	800536e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005590:	f7fe fa5a 	bl	8003a48 <HAL_GetTick>
 8005594:	1bc0      	subs	r0, r0, r7
 8005596:	2802      	cmp	r0, #2
 8005598:	d9f5      	bls.n	8005586 <HAL_RCC_OscConfig+0x2a2>
 800559a:	e718      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800559e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055a2:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80055a4:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a6:	421a      	tst	r2, r3
 80055a8:	d104      	bne.n	80055b4 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80055aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055ac:	4313      	orrs	r3, r2
 80055ae:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80055b0:	2301      	movs	r3, #1
 80055b2:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	4f10      	ldr	r7, [pc, #64]	; (80055f8 <HAL_RCC_OscConfig+0x314>)
 80055b8:	0052      	lsls	r2, r2, #1
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	4213      	tst	r3, r2
 80055be:	d01d      	beq.n	80055fc <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055c0:	2280      	movs	r2, #128	; 0x80
 80055c2:	68ab      	ldr	r3, [r5, #8]
 80055c4:	0052      	lsls	r2, r2, #1
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d12e      	bne.n	8005628 <HAL_RCC_OscConfig+0x344>
 80055ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80055cc:	4313      	orrs	r3, r2
 80055ce:	6523      	str	r3, [r4, #80]	; 0x50
 80055d0:	e04f      	b.n	8005672 <HAL_RCC_OscConfig+0x38e>
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	40021000 	.word	0x40021000
 80055d8:	ffff1fff 	.word	0xffff1fff
 80055dc:	08012759 	.word	0x08012759
 80055e0:	20000044 	.word	0x20000044
 80055e4:	2000004c 	.word	0x2000004c
 80055e8:	fffeffff 	.word	0xfffeffff
 80055ec:	fffbffff 	.word	0xfffbffff
 80055f0:	ffffe0ff 	.word	0xffffe0ff
 80055f4:	fffffeff 	.word	0xfffffeff
 80055f8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	0052      	lsls	r2, r2, #1
 8005602:	4313      	orrs	r3, r2
 8005604:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005606:	f7fe fa1f 	bl	8003a48 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560a:	2380      	movs	r3, #128	; 0x80
 800560c:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800560e:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005610:	9303      	str	r3, [sp, #12]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	9a03      	ldr	r2, [sp, #12]
 8005616:	4213      	tst	r3, r2
 8005618:	d1d2      	bne.n	80055c0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561a:	f7fe fa15 	bl	8003a48 <HAL_GetTick>
 800561e:	9b02      	ldr	r3, [sp, #8]
 8005620:	1ac0      	subs	r0, r0, r3
 8005622:	2864      	cmp	r0, #100	; 0x64
 8005624:	d9f5      	bls.n	8005612 <HAL_RCC_OscConfig+0x32e>
 8005626:	e6d2      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005628:	2b00      	cmp	r3, #0
 800562a:	d116      	bne.n	800565a <HAL_RCC_OscConfig+0x376>
 800562c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800562e:	4a6b      	ldr	r2, [pc, #428]	; (80057dc <HAL_RCC_OscConfig+0x4f8>)
 8005630:	4013      	ands	r3, r2
 8005632:	6523      	str	r3, [r4, #80]	; 0x50
 8005634:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005636:	4a6a      	ldr	r2, [pc, #424]	; (80057e0 <HAL_RCC_OscConfig+0x4fc>)
 8005638:	4013      	ands	r3, r2
 800563a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800563c:	f7fe fa04 	bl	8003a48 <HAL_GetTick>
 8005640:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005642:	2280      	movs	r2, #128	; 0x80
 8005644:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005646:	0092      	lsls	r2, r2, #2
 8005648:	4213      	tst	r3, r2
 800564a:	d01a      	beq.n	8005682 <HAL_RCC_OscConfig+0x39e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800564c:	f7fe f9fc 	bl	8003a48 <HAL_GetTick>
 8005650:	4b64      	ldr	r3, [pc, #400]	; (80057e4 <HAL_RCC_OscConfig+0x500>)
 8005652:	1bc0      	subs	r0, r0, r7
 8005654:	4298      	cmp	r0, r3
 8005656:	d9f4      	bls.n	8005642 <HAL_RCC_OscConfig+0x35e>
 8005658:	e6b9      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800565a:	21a0      	movs	r1, #160	; 0xa0
 800565c:	00c9      	lsls	r1, r1, #3
 800565e:	428b      	cmp	r3, r1
 8005660:	d118      	bne.n	8005694 <HAL_RCC_OscConfig+0x3b0>
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	430b      	orrs	r3, r1
 800566a:	6523      	str	r3, [r4, #80]	; 0x50
 800566c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800566e:	431a      	orrs	r2, r3
 8005670:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005672:	f7fe f9e9 	bl	8003a48 <HAL_GetTick>
 8005676:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005678:	2280      	movs	r2, #128	; 0x80
 800567a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800567c:	0092      	lsls	r2, r2, #2
 800567e:	4213      	tst	r3, r2
 8005680:	d010      	beq.n	80056a4 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8005682:	9b01      	ldr	r3, [sp, #4]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d000      	beq.n	800568a <HAL_RCC_OscConfig+0x3a6>
 8005688:	e675      	b.n	8005376 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 800568a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800568c:	4a56      	ldr	r2, [pc, #344]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800568e:	4013      	ands	r3, r2
 8005690:	63a3      	str	r3, [r4, #56]	; 0x38
 8005692:	e670      	b.n	8005376 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005694:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005696:	4a51      	ldr	r2, [pc, #324]	; (80057dc <HAL_RCC_OscConfig+0x4f8>)
 8005698:	4013      	ands	r3, r2
 800569a:	6523      	str	r3, [r4, #80]	; 0x50
 800569c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800569e:	4a50      	ldr	r2, [pc, #320]	; (80057e0 <HAL_RCC_OscConfig+0x4fc>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	e794      	b.n	80055ce <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f7fe f9d0 	bl	8003a48 <HAL_GetTick>
 80056a8:	4b4e      	ldr	r3, [pc, #312]	; (80057e4 <HAL_RCC_OscConfig+0x500>)
 80056aa:	1bc0      	subs	r0, r0, r7
 80056ac:	4298      	cmp	r0, r3
 80056ae:	d9e3      	bls.n	8005678 <HAL_RCC_OscConfig+0x394>
 80056b0:	e68d      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056b2:	69a9      	ldr	r1, [r5, #24]
 80056b4:	2301      	movs	r3, #1
 80056b6:	4a4d      	ldr	r2, [pc, #308]	; (80057ec <HAL_RCC_OscConfig+0x508>)
 80056b8:	2900      	cmp	r1, #0
 80056ba:	d018      	beq.n	80056ee <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_HSI48_ENABLE();
 80056bc:	68a1      	ldr	r1, [r4, #8]
 80056be:	4319      	orrs	r1, r3
 80056c0:	60a1      	str	r1, [r4, #8]
 80056c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6363      	str	r3, [r4, #52]	; 0x34
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	6a11      	ldr	r1, [r2, #32]
 80056cc:	019b      	lsls	r3, r3, #6
 80056ce:	430b      	orrs	r3, r1
 80056d0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80056d2:	f7fe f9b9 	bl	8003a48 <HAL_GetTick>
 80056d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056d8:	2202      	movs	r2, #2
 80056da:	68a3      	ldr	r3, [r4, #8]
 80056dc:	4213      	tst	r3, r2
 80056de:	d000      	beq.n	80056e2 <HAL_RCC_OscConfig+0x3fe>
 80056e0:	e64d      	b.n	800537e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056e2:	f7fe f9b1 	bl	8003a48 <HAL_GetTick>
 80056e6:	1bc0      	subs	r0, r0, r7
 80056e8:	2802      	cmp	r0, #2
 80056ea:	d9f5      	bls.n	80056d8 <HAL_RCC_OscConfig+0x3f4>
 80056ec:	e66f      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 80056ee:	68a1      	ldr	r1, [r4, #8]
 80056f0:	4399      	bics	r1, r3
 80056f2:	60a1      	str	r1, [r4, #8]
 80056f4:	6a13      	ldr	r3, [r2, #32]
 80056f6:	493e      	ldr	r1, [pc, #248]	; (80057f0 <HAL_RCC_OscConfig+0x50c>)
 80056f8:	400b      	ands	r3, r1
 80056fa:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80056fc:	f7fe f9a4 	bl	8003a48 <HAL_GetTick>
 8005700:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005702:	2202      	movs	r2, #2
 8005704:	68a3      	ldr	r3, [r4, #8]
 8005706:	4213      	tst	r3, r2
 8005708:	d100      	bne.n	800570c <HAL_RCC_OscConfig+0x428>
 800570a:	e638      	b.n	800537e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800570c:	f7fe f99c 	bl	8003a48 <HAL_GetTick>
 8005710:	1bc0      	subs	r0, r0, r7
 8005712:	2802      	cmp	r0, #2
 8005714:	d9f5      	bls.n	8005702 <HAL_RCC_OscConfig+0x41e>
 8005716:	e65a      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005718:	2e0c      	cmp	r6, #12
 800571a:	d043      	beq.n	80057a4 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800571c:	4a35      	ldr	r2, [pc, #212]	; (80057f4 <HAL_RCC_OscConfig+0x510>)
 800571e:	2b02      	cmp	r3, #2
 8005720:	d12e      	bne.n	8005780 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_DISABLE();
 8005722:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005724:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005726:	4013      	ands	r3, r2
 8005728:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800572a:	f7fe f98d 	bl	8003a48 <HAL_GetTick>
 800572e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005730:	04bf      	lsls	r7, r7, #18
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	423b      	tst	r3, r7
 8005736:	d11d      	bne.n	8005774 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005738:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800573a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800573c:	68e2      	ldr	r2, [r4, #12]
 800573e:	430b      	orrs	r3, r1
 8005740:	492d      	ldr	r1, [pc, #180]	; (80057f8 <HAL_RCC_OscConfig+0x514>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005742:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005744:	400a      	ands	r2, r1
 8005746:	4313      	orrs	r3, r2
 8005748:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800574a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800574c:	4313      	orrs	r3, r2
 800574e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	045b      	lsls	r3, r3, #17
 8005756:	4313      	orrs	r3, r2
 8005758:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800575a:	f7fe f975 	bl	8003a48 <HAL_GetTick>
 800575e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	4233      	tst	r3, r6
 8005764:	d000      	beq.n	8005768 <HAL_RCC_OscConfig+0x484>
 8005766:	e60e      	b.n	8005386 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005768:	f7fe f96e 	bl	8003a48 <HAL_GetTick>
 800576c:	1b40      	subs	r0, r0, r5
 800576e:	2802      	cmp	r0, #2
 8005770:	d9f6      	bls.n	8005760 <HAL_RCC_OscConfig+0x47c>
 8005772:	e62c      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005774:	f7fe f968 	bl	8003a48 <HAL_GetTick>
 8005778:	1b80      	subs	r0, r0, r6
 800577a:	2802      	cmp	r0, #2
 800577c:	d9d9      	bls.n	8005732 <HAL_RCC_OscConfig+0x44e>
 800577e:	e626      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8005780:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005782:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005784:	4013      	ands	r3, r2
 8005786:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005788:	f7fe f95e 	bl	8003a48 <HAL_GetTick>
 800578c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800578e:	04b6      	lsls	r6, r6, #18
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	4233      	tst	r3, r6
 8005794:	d100      	bne.n	8005798 <HAL_RCC_OscConfig+0x4b4>
 8005796:	e5f6      	b.n	8005386 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005798:	f7fe f956 	bl	8003a48 <HAL_GetTick>
 800579c:	1b40      	subs	r0, r0, r5
 800579e:	2802      	cmp	r0, #2
 80057a0:	d9f6      	bls.n	8005790 <HAL_RCC_OscConfig+0x4ac>
 80057a2:	e614      	b.n	80053ce <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 80057a4:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d100      	bne.n	80057ac <HAL_RCC_OscConfig+0x4c8>
 80057aa:	e611      	b.n	80053d0 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ac:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80057ae:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80057b2:	0252      	lsls	r2, r2, #9
 80057b4:	401a      	ands	r2, r3
 80057b6:	428a      	cmp	r2, r1
 80057b8:	d000      	beq.n	80057bc <HAL_RCC_OscConfig+0x4d8>
 80057ba:	e5f2      	b.n	80053a2 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80057bc:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057be:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80057c0:	0392      	lsls	r2, r2, #14
 80057c2:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c4:	428a      	cmp	r2, r1
 80057c6:	d000      	beq.n	80057ca <HAL_RCC_OscConfig+0x4e6>
 80057c8:	e5eb      	b.n	80053a2 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80057ca:	22c0      	movs	r2, #192	; 0xc0
 80057cc:	0412      	lsls	r2, r2, #16
 80057ce:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80057d0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d100      	bne.n	80057d8 <HAL_RCC_OscConfig+0x4f4>
 80057d6:	e5d6      	b.n	8005386 <HAL_RCC_OscConfig+0xa2>
 80057d8:	e5e3      	b.n	80053a2 <HAL_RCC_OscConfig+0xbe>
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	fffffeff 	.word	0xfffffeff
 80057e0:	fffffbff 	.word	0xfffffbff
 80057e4:	00001388 	.word	0x00001388
 80057e8:	efffffff 	.word	0xefffffff
 80057ec:	40010000 	.word	0x40010000
 80057f0:	ffffdfff 	.word	0xffffdfff
 80057f4:	feffffff 	.word	0xfeffffff
 80057f8:	ff02ffff 	.word	0xff02ffff

080057fc <HAL_RCC_ClockConfig>:
{
 80057fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057fe:	1e04      	subs	r4, r0, #0
 8005800:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8005802:	d101      	bne.n	8005808 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8005804:	2001      	movs	r0, #1
}
 8005806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005808:	2601      	movs	r6, #1
 800580a:	4d5b      	ldr	r5, [pc, #364]	; (8005978 <HAL_RCC_ClockConfig+0x17c>)
 800580c:	9a01      	ldr	r2, [sp, #4]
 800580e:	682b      	ldr	r3, [r5, #0]
 8005810:	4033      	ands	r3, r6
 8005812:	4293      	cmp	r3, r2
 8005814:	d331      	bcc.n	800587a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	0793      	lsls	r3, r2, #30
 800581a:	d443      	bmi.n	80058a4 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800581c:	07d3      	lsls	r3, r2, #31
 800581e:	d449      	bmi.n	80058b4 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005820:	2601      	movs	r6, #1
 8005822:	682b      	ldr	r3, [r5, #0]
 8005824:	9a01      	ldr	r2, [sp, #4]
 8005826:	4033      	ands	r3, r6
 8005828:	4293      	cmp	r3, r2
 800582a:	d909      	bls.n	8005840 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	43b3      	bics	r3, r6
 8005830:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005832:	f7fe f909 	bl	8003a48 <HAL_GetTick>
 8005836:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	4233      	tst	r3, r6
 800583c:	d000      	beq.n	8005840 <HAL_RCC_ClockConfig+0x44>
 800583e:	e08c      	b.n	800595a <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005840:	6822      	ldr	r2, [r4, #0]
 8005842:	4d4e      	ldr	r5, [pc, #312]	; (800597c <HAL_RCC_ClockConfig+0x180>)
 8005844:	0753      	lsls	r3, r2, #29
 8005846:	d500      	bpl.n	800584a <HAL_RCC_ClockConfig+0x4e>
 8005848:	e08f      	b.n	800596a <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800584a:	0713      	lsls	r3, r2, #28
 800584c:	d506      	bpl.n	800585c <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800584e:	68ea      	ldr	r2, [r5, #12]
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	494b      	ldr	r1, [pc, #300]	; (8005980 <HAL_RCC_ClockConfig+0x184>)
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	400a      	ands	r2, r1
 8005858:	4313      	orrs	r3, r2
 800585a:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800585c:	f7ff fcfa 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8005860:	68eb      	ldr	r3, [r5, #12]
 8005862:	4a48      	ldr	r2, [pc, #288]	; (8005984 <HAL_RCC_ClockConfig+0x188>)
 8005864:	061b      	lsls	r3, r3, #24
 8005866:	0f1b      	lsrs	r3, r3, #28
 8005868:	5cd3      	ldrb	r3, [r2, r3]
 800586a:	40d8      	lsrs	r0, r3
 800586c:	4b46      	ldr	r3, [pc, #280]	; (8005988 <HAL_RCC_ClockConfig+0x18c>)
 800586e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8005870:	4b46      	ldr	r3, [pc, #280]	; (800598c <HAL_RCC_ClockConfig+0x190>)
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	f7fe f8e6 	bl	8003a44 <HAL_InitTick>
  if(status != HAL_OK)
 8005878:	e7c5      	b.n	8005806 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	682b      	ldr	r3, [r5, #0]
 800587c:	9a01      	ldr	r2, [sp, #4]
 800587e:	43b3      	bics	r3, r6
 8005880:	4313      	orrs	r3, r2
 8005882:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005884:	f7fe f8e0 	bl	8003a48 <HAL_GetTick>
 8005888:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	682b      	ldr	r3, [r5, #0]
 800588c:	9a01      	ldr	r2, [sp, #4]
 800588e:	4033      	ands	r3, r6
 8005890:	4293      	cmp	r3, r2
 8005892:	d0c0      	beq.n	8005816 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005894:	f7fe f8d8 	bl	8003a48 <HAL_GetTick>
 8005898:	4b3d      	ldr	r3, [pc, #244]	; (8005990 <HAL_RCC_ClockConfig+0x194>)
 800589a:	1bc0      	subs	r0, r0, r7
 800589c:	4298      	cmp	r0, r3
 800589e:	d9f4      	bls.n	800588a <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80058a0:	2003      	movs	r0, #3
 80058a2:	e7b0      	b.n	8005806 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a4:	20f0      	movs	r0, #240	; 0xf0
 80058a6:	4935      	ldr	r1, [pc, #212]	; (800597c <HAL_RCC_ClockConfig+0x180>)
 80058a8:	68cb      	ldr	r3, [r1, #12]
 80058aa:	4383      	bics	r3, r0
 80058ac:	68a0      	ldr	r0, [r4, #8]
 80058ae:	4303      	orrs	r3, r0
 80058b0:	60cb      	str	r3, [r1, #12]
 80058b2:	e7b3      	b.n	800581c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b4:	4e31      	ldr	r6, [pc, #196]	; (800597c <HAL_RCC_ClockConfig+0x180>)
 80058b6:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058b8:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ba:	2a02      	cmp	r2, #2
 80058bc:	d118      	bne.n	80058f0 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058be:	039b      	lsls	r3, r3, #14
 80058c0:	d5a0      	bpl.n	8005804 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058c2:	2103      	movs	r1, #3
 80058c4:	68f3      	ldr	r3, [r6, #12]
 80058c6:	438b      	bics	r3, r1
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80058cc:	f7fe f8bc 	bl	8003a48 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d0:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80058d2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d118      	bne.n	800590a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058d8:	220c      	movs	r2, #12
 80058da:	68f3      	ldr	r3, [r6, #12]
 80058dc:	4013      	ands	r3, r2
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d09e      	beq.n	8005820 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e2:	f7fe f8b1 	bl	8003a48 <HAL_GetTick>
 80058e6:	4b2a      	ldr	r3, [pc, #168]	; (8005990 <HAL_RCC_ClockConfig+0x194>)
 80058e8:	1bc0      	subs	r0, r0, r7
 80058ea:	4298      	cmp	r0, r3
 80058ec:	d9f4      	bls.n	80058d8 <HAL_RCC_ClockConfig+0xdc>
 80058ee:	e7d7      	b.n	80058a0 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058f0:	2a03      	cmp	r2, #3
 80058f2:	d102      	bne.n	80058fa <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058f4:	019b      	lsls	r3, r3, #6
 80058f6:	d4e4      	bmi.n	80058c2 <HAL_RCC_ClockConfig+0xc6>
 80058f8:	e784      	b.n	8005804 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80058fa:	2a01      	cmp	r2, #1
 80058fc:	d102      	bne.n	8005904 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058fe:	075b      	lsls	r3, r3, #29
 8005900:	d4df      	bmi.n	80058c2 <HAL_RCC_ClockConfig+0xc6>
 8005902:	e77f      	b.n	8005804 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005904:	059b      	lsls	r3, r3, #22
 8005906:	d4dc      	bmi.n	80058c2 <HAL_RCC_ClockConfig+0xc6>
 8005908:	e77c      	b.n	8005804 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800590a:	2b03      	cmp	r3, #3
 800590c:	d10b      	bne.n	8005926 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800590e:	220c      	movs	r2, #12
 8005910:	68f3      	ldr	r3, [r6, #12]
 8005912:	4013      	ands	r3, r2
 8005914:	4293      	cmp	r3, r2
 8005916:	d083      	beq.n	8005820 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005918:	f7fe f896 	bl	8003a48 <HAL_GetTick>
 800591c:	4b1c      	ldr	r3, [pc, #112]	; (8005990 <HAL_RCC_ClockConfig+0x194>)
 800591e:	1bc0      	subs	r0, r0, r7
 8005920:	4298      	cmp	r0, r3
 8005922:	d9f4      	bls.n	800590e <HAL_RCC_ClockConfig+0x112>
 8005924:	e7bc      	b.n	80058a0 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005926:	2b01      	cmp	r3, #1
 8005928:	d011      	beq.n	800594e <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800592a:	220c      	movs	r2, #12
 800592c:	68f3      	ldr	r3, [r6, #12]
 800592e:	4213      	tst	r3, r2
 8005930:	d100      	bne.n	8005934 <HAL_RCC_ClockConfig+0x138>
 8005932:	e775      	b.n	8005820 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005934:	f7fe f888 	bl	8003a48 <HAL_GetTick>
 8005938:	4b15      	ldr	r3, [pc, #84]	; (8005990 <HAL_RCC_ClockConfig+0x194>)
 800593a:	1bc0      	subs	r0, r0, r7
 800593c:	4298      	cmp	r0, r3
 800593e:	d9f4      	bls.n	800592a <HAL_RCC_ClockConfig+0x12e>
 8005940:	e7ae      	b.n	80058a0 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005942:	f7fe f881 	bl	8003a48 <HAL_GetTick>
 8005946:	4b12      	ldr	r3, [pc, #72]	; (8005990 <HAL_RCC_ClockConfig+0x194>)
 8005948:	1bc0      	subs	r0, r0, r7
 800594a:	4298      	cmp	r0, r3
 800594c:	d8a8      	bhi.n	80058a0 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800594e:	220c      	movs	r2, #12
 8005950:	68f3      	ldr	r3, [r6, #12]
 8005952:	4013      	ands	r3, r2
 8005954:	2b04      	cmp	r3, #4
 8005956:	d1f4      	bne.n	8005942 <HAL_RCC_ClockConfig+0x146>
 8005958:	e762      	b.n	8005820 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595a:	f7fe f875 	bl	8003a48 <HAL_GetTick>
 800595e:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <HAL_RCC_ClockConfig+0x194>)
 8005960:	1bc0      	subs	r0, r0, r7
 8005962:	4298      	cmp	r0, r3
 8005964:	d800      	bhi.n	8005968 <HAL_RCC_ClockConfig+0x16c>
 8005966:	e767      	b.n	8005838 <HAL_RCC_ClockConfig+0x3c>
 8005968:	e79a      	b.n	80058a0 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800596a:	68eb      	ldr	r3, [r5, #12]
 800596c:	4909      	ldr	r1, [pc, #36]	; (8005994 <HAL_RCC_ClockConfig+0x198>)
 800596e:	400b      	ands	r3, r1
 8005970:	68e1      	ldr	r1, [r4, #12]
 8005972:	430b      	orrs	r3, r1
 8005974:	60eb      	str	r3, [r5, #12]
 8005976:	e768      	b.n	800584a <HAL_RCC_ClockConfig+0x4e>
 8005978:	40022000 	.word	0x40022000
 800597c:	40021000 	.word	0x40021000
 8005980:	ffffc7ff 	.word	0xffffc7ff
 8005984:	08012759 	.word	0x08012759
 8005988:	20000044 	.word	0x20000044
 800598c:	2000004c 	.word	0x2000004c
 8005990:	00001388 	.word	0x00001388
 8005994:	fffff8ff 	.word	0xfffff8ff

08005998 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800599a:	4a05      	ldr	r2, [pc, #20]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	055b      	lsls	r3, r3, #21
 80059a0:	0f5b      	lsrs	r3, r3, #29
 80059a2:	5cd3      	ldrb	r3, [r2, r3]
 80059a4:	4a03      	ldr	r2, [pc, #12]	; (80059b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80059a6:	6810      	ldr	r0, [r2, #0]
 80059a8:	40d8      	lsrs	r0, r3
}
 80059aa:	4770      	bx	lr
 80059ac:	40021000 	.word	0x40021000
 80059b0:	08012769 	.word	0x08012769
 80059b4:	20000044 	.word	0x20000044

080059b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80059ba:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	049b      	lsls	r3, r3, #18
 80059c0:	0f5b      	lsrs	r3, r3, #29
 80059c2:	5cd3      	ldrb	r3, [r2, r3]
 80059c4:	4a03      	ldr	r2, [pc, #12]	; (80059d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80059c6:	6810      	ldr	r0, [r2, #0]
 80059c8:	40d8      	lsrs	r0, r3
}
 80059ca:	4770      	bx	lr
 80059cc:	40021000 	.word	0x40021000
 80059d0:	08012769 	.word	0x08012769
 80059d4:	20000044 	.word	0x20000044

080059d8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059d8:	6803      	ldr	r3, [r0, #0]
{
 80059da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059dc:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059de:	069b      	lsls	r3, r3, #26
 80059e0:	d53f      	bpl.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e2:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80059e4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e6:	4c60      	ldr	r4, [pc, #384]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80059e8:	055b      	lsls	r3, r3, #21
 80059ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80059ec:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ee:	421a      	tst	r2, r3
 80059f0:	d104      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80059f4:	4313      	orrs	r3, r2
 80059f6:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80059f8:	2301      	movs	r3, #1
 80059fa:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059fc:	2780      	movs	r7, #128	; 0x80
 80059fe:	4e5b      	ldr	r6, [pc, #364]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005a00:	007f      	lsls	r7, r7, #1
 8005a02:	6833      	ldr	r3, [r6, #0]
 8005a04:	423b      	tst	r3, r7
 8005a06:	d06e      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005a08:	686b      	ldr	r3, [r5, #4]
 8005a0a:	22c0      	movs	r2, #192	; 0xc0
 8005a0c:	20c0      	movs	r0, #192	; 0xc0
 8005a0e:	001e      	movs	r6, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005a10:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005a12:	0292      	lsls	r2, r2, #10
 8005a14:	0380      	lsls	r0, r0, #14
 8005a16:	0017      	movs	r7, r2
 8005a18:	4016      	ands	r6, r2
 8005a1a:	4003      	ands	r3, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005a1c:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005a1e:	428b      	cmp	r3, r1
 8005a20:	d000      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8005a22:	e071      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005a24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005a26:	001a      	movs	r2, r3
 8005a28:	403a      	ands	r2, r7

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005a2a:	423b      	tst	r3, r7
 8005a2c:	d000      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005a2e:	e074      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x142>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a30:	6869      	ldr	r1, [r5, #4]
 8005a32:	23c0      	movs	r3, #192	; 0xc0
 8005a34:	000a      	movs	r2, r1
 8005a36:	029b      	lsls	r3, r3, #10
 8005a38:	401a      	ands	r2, r3
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	484b      	ldr	r0, [pc, #300]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005a42:	4003      	ands	r3, r0
 8005a44:	20c0      	movs	r0, #192	; 0xc0
 8005a46:	0380      	lsls	r0, r0, #14
 8005a48:	4001      	ands	r1, r0
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005a50:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a52:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a54:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d103      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a5c:	4a45      	ldr	r2, [pc, #276]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a62:	682b      	ldr	r3, [r5, #0]
 8005a64:	07da      	lsls	r2, r3, #31
 8005a66:	d506      	bpl.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a68:	2003      	movs	r0, #3
 8005a6a:	493f      	ldr	r1, [pc, #252]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005a6c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005a6e:	4382      	bics	r2, r0
 8005a70:	68a8      	ldr	r0, [r5, #8]
 8005a72:	4302      	orrs	r2, r0
 8005a74:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a76:	079a      	lsls	r2, r3, #30
 8005a78:	d506      	bpl.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a7a:	200c      	movs	r0, #12
 8005a7c:	493a      	ldr	r1, [pc, #232]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005a7e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005a80:	4382      	bics	r2, r0
 8005a82:	68e8      	ldr	r0, [r5, #12]
 8005a84:	4302      	orrs	r2, r0
 8005a86:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a88:	075a      	lsls	r2, r3, #29
 8005a8a:	d506      	bpl.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a8c:	4936      	ldr	r1, [pc, #216]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005a8e:	483a      	ldr	r0, [pc, #232]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8005a90:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005a92:	4002      	ands	r2, r0
 8005a94:	6928      	ldr	r0, [r5, #16]
 8005a96:	4302      	orrs	r2, r0
 8005a98:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a9a:	071a      	lsls	r2, r3, #28
 8005a9c:	d506      	bpl.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a9e:	4932      	ldr	r1, [pc, #200]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005aa0:	4836      	ldr	r0, [pc, #216]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005aa2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005aa4:	4002      	ands	r2, r0
 8005aa6:	6968      	ldr	r0, [r5, #20]
 8005aa8:	4302      	orrs	r2, r0
 8005aaa:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005aac:	05da      	lsls	r2, r3, #23
 8005aae:	d506      	bpl.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ab0:	492d      	ldr	r1, [pc, #180]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005ab2:	4833      	ldr	r0, [pc, #204]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005ab4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005ab6:	4002      	ands	r2, r0
 8005ab8:	69a8      	ldr	r0, [r5, #24]
 8005aba:	4302      	orrs	r2, r0
 8005abc:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005abe:	065a      	lsls	r2, r3, #25
 8005ac0:	d506      	bpl.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ac2:	4929      	ldr	r1, [pc, #164]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005ac4:	482f      	ldr	r0, [pc, #188]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ac6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005ac8:	4002      	ands	r2, r0
 8005aca:	6a28      	ldr	r0, [r5, #32]
 8005acc:	4302      	orrs	r2, r0
 8005ace:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8005ad0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ad2:	061b      	lsls	r3, r3, #24
 8005ad4:	d517      	bpl.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x12e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005ad6:	4a24      	ldr	r2, [pc, #144]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005ad8:	492b      	ldr	r1, [pc, #172]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005ada:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005adc:	400b      	ands	r3, r1
 8005ade:	69e9      	ldr	r1, [r5, #28]
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ae4:	e00f      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ae6:	6833      	ldr	r3, [r6, #0]
 8005ae8:	433b      	orrs	r3, r7
 8005aea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005aec:	f7fd ffac 	bl	8003a48 <HAL_GetTick>
 8005af0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af2:	6833      	ldr	r3, [r6, #0]
 8005af4:	423b      	tst	r3, r7
 8005af6:	d187      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af8:	f7fd ffa6 	bl	8003a48 <HAL_GetTick>
 8005afc:	9b01      	ldr	r3, [sp, #4]
 8005afe:	1ac0      	subs	r0, r0, r3
 8005b00:	2864      	cmp	r0, #100	; 0x64
 8005b02:	d9f6      	bls.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          return HAL_TIMEOUT;
 8005b04:	2003      	movs	r0, #3
}
 8005b06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005b08:	4296      	cmp	r6, r2
 8005b0a:	d000      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b0c:	e78a      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b0e:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8005b10:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b12:	039b      	lsls	r3, r3, #14
 8005b14:	d400      	bmi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8005b16:	e785      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8005b18:	e7f5      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x12e>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005b1a:	42b2      	cmp	r2, r6
 8005b1c:	d100      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005b1e:	e787      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x58>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	069b      	lsls	r3, r3, #26
 8005b24:	d400      	bmi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005b26:	e783      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b28:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b2a:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b2c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005b2e:	0312      	lsls	r2, r2, #12
 8005b30:	4302      	orrs	r2, r0
 8005b32:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b34:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b38:	4814      	ldr	r0, [pc, #80]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b3a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b3c:	4002      	ands	r2, r0
 8005b3e:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8005b40:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b42:	05cb      	lsls	r3, r1, #23
 8005b44:	d400      	bmi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8005b46:	e773      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 8005b48:	f7fd ff7e 	bl	8003a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b4c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8005b4e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b50:	00bf      	lsls	r7, r7, #2
 8005b52:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005b54:	423b      	tst	r3, r7
 8005b56:	d000      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005b58:	e76a      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x58>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b5a:	f7fd ff75 	bl	8003a48 <HAL_GetTick>
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b60:	1b80      	subs	r0, r0, r6
 8005b62:	4298      	cmp	r0, r3
 8005b64:	d9f5      	bls.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005b66:	e7cd      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	40007000 	.word	0x40007000
 8005b70:	ffcfffff 	.word	0xffcfffff
 8005b74:	efffffff 	.word	0xefffffff
 8005b78:	fffff3ff 	.word	0xfffff3ff
 8005b7c:	ffffcfff 	.word	0xffffcfff
 8005b80:	fffcffff 	.word	0xfffcffff
 8005b84:	fbffffff 	.word	0xfbffffff
 8005b88:	fff3ffff 	.word	0xfff3ffff
 8005b8c:	fff7ffff 	.word	0xfff7ffff
 8005b90:	00001388 	.word	0x00001388

08005b94 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b96:	2502      	movs	r5, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b98:	1c46      	adds	r6, r0, #1
 8005b9a:	7ff3      	ldrb	r3, [r6, #31]
{
 8005b9c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8005b9e:	0028      	movs	r0, r5
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d025      	beq.n	8005bf0 <HAL_RTC_DeactivateAlarm+0x5c>
 8005ba4:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ba6:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ba8:	1967      	adds	r7, r4, r5
  __HAL_LOCK(hrtc);
 8005baa:	77f3      	strb	r3, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bac:	77fd      	strb	r5, [r7, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	625a      	str	r2, [r3, #36]	; 0x24
 8005bb2:	3a77      	subs	r2, #119	; 0x77
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8005bb6:	32ad      	adds	r2, #173	; 0xad
 8005bb8:	4291      	cmp	r1, r2
 8005bba:	d12a      	bne.n	8005c12 <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	4922      	ldr	r1, [pc, #136]	; (8005c48 <HAL_RTC_DeactivateAlarm+0xb4>)
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);

    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005bc0:	3d01      	subs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005bc2:	400a      	ands	r2, r1
 8005bc4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	4920      	ldr	r1, [pc, #128]	; (8005c4c <HAL_RTC_DeactivateAlarm+0xb8>)
 8005bca:	400a      	ands	r2, r1
 8005bcc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005bce:	f7fd ff3b 	bl	8003a48 <HAL_GetTick>
 8005bd2:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	001a      	movs	r2, r3
 8005bda:	402a      	ands	r2, r5
 8005bdc:	9201      	str	r2, [sp, #4]
 8005bde:	422b      	tst	r3, r5
 8005be0:	d007      	beq.n	8005bf2 <HAL_RTC_DeactivateAlarm+0x5e>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be2:	22ff      	movs	r2, #255	; 0xff
 8005be4:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005be6:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005bea:	2301      	movs	r3, #1
 8005bec:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 8005bee:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
}
 8005bf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005bf2:	f7fd ff29 	bl	8003a48 <HAL_GetTick>
 8005bf6:	9b00      	ldr	r3, [sp, #0]
 8005bf8:	1ac0      	subs	r0, r0, r3
 8005bfa:	23fa      	movs	r3, #250	; 0xfa
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4298      	cmp	r0, r3
 8005c00:	d9e8      	bls.n	8005bd4 <HAL_RTC_DeactivateAlarm+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c02:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c04:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c0a:	77f8      	strb	r0, [r7, #31]
        __HAL_UNLOCK(hrtc);
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	77f3      	strb	r3, [r6, #31]
        return HAL_TIMEOUT;
 8005c10:	e7ee      	b.n	8005bf0 <HAL_RTC_DeactivateAlarm+0x5c>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	490e      	ldr	r1, [pc, #56]	; (8005c50 <HAL_RTC_DeactivateAlarm+0xbc>)
 8005c16:	400a      	ands	r2, r1
 8005c18:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	490d      	ldr	r1, [pc, #52]	; (8005c54 <HAL_RTC_DeactivateAlarm+0xc0>)
 8005c1e:	400a      	ands	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005c22:	f7fd ff11 	bl	8003a48 <HAL_GetTick>
 8005c26:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	402a      	ands	r2, r5
 8005c30:	9201      	str	r2, [sp, #4]
 8005c32:	422b      	tst	r3, r5
 8005c34:	d1d5      	bne.n	8005be2 <HAL_RTC_DeactivateAlarm+0x4e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c36:	f7fd ff07 	bl	8003a48 <HAL_GetTick>
 8005c3a:	9b00      	ldr	r3, [sp, #0]
 8005c3c:	1ac0      	subs	r0, r0, r3
 8005c3e:	23fa      	movs	r3, #250	; 0xfa
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4298      	cmp	r0, r3
 8005c44:	d9f0      	bls.n	8005c28 <HAL_RTC_DeactivateAlarm+0x94>
 8005c46:	e7dc      	b.n	8005c02 <HAL_RTC_DeactivateAlarm+0x6e>
 8005c48:	fffffeff 	.word	0xfffffeff
 8005c4c:	ffffefff 	.word	0xffffefff
 8005c50:	fffffdff 	.word	0xfffffdff
 8005c54:	ffffdfff 	.word	0xffffdfff

08005c58 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005c58:	6803      	ldr	r3, [r0, #0]
{
 8005c5a:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005c5c:	689a      	ldr	r2, [r3, #8]
{
 8005c5e:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005c60:	04d2      	lsls	r2, r2, #19
 8005c62:	d50a      	bpl.n	8005c7a <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	05db      	lsls	r3, r3, #23
 8005c68:	d507      	bpl.n	8005c7a <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005c6a:	f7fd fd6c 	bl	8003746 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c6e:	6821      	ldr	r1, [r4, #0]
 8005c70:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <HAL_RTC_AlarmIRQHandler+0x54>)
 8005c72:	68ca      	ldr	r2, [r1, #12]
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	0492      	lsls	r2, r2, #18
 8005c80:	d50b      	bpl.n	8005c9a <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	059b      	lsls	r3, r3, #22
 8005c86:	d508      	bpl.n	8005c9a <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005c88:	0020      	movs	r0, r4
 8005c8a:	f000 faf7 	bl	800627c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005c8e:	6821      	ldr	r1, [r4, #0]
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <HAL_RTC_AlarmIRQHandler+0x58>)
 8005c92:	68ca      	ldr	r2, [r1, #12]
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8005c9e:	0292      	lsls	r2, r2, #10
 8005ca0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	3402      	adds	r4, #2
 8005ca6:	77e3      	strb	r3, [r4, #31]
}
 8005ca8:	bd10      	pop	{r4, pc}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	fffffe7f 	.word	0xfffffe7f
 8005cb0:	fffffd7f 	.word	0xfffffd7f
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005cb8:	21a0      	movs	r1, #160	; 0xa0
 8005cba:	6802      	ldr	r2, [r0, #0]
{
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005cbe:	68d3      	ldr	r3, [r2, #12]
{
 8005cc0:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005cc2:	438b      	bics	r3, r1
 8005cc4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005cc6:	f7fd febf 	bl	8003a48 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cca:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8005ccc:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cce:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cd0:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	4233      	tst	r3, r6
 8005cd8:	d001      	beq.n	8005cde <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8005cda:	2000      	movs	r0, #0
}
 8005cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cde:	f7fd feb3 	bl	8003a48 <HAL_GetTick>
 8005ce2:	1b40      	subs	r0, r0, r5
 8005ce4:	42b8      	cmp	r0, r7
 8005ce6:	d9f4      	bls.n	8005cd2 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8005ce8:	2003      	movs	r0, #3
 8005cea:	e7f7      	b.n	8005cdc <HAL_RTC_WaitForSynchro+0x24>

08005cec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005cee:	2440      	movs	r4, #64	; 0x40
 8005cf0:	6803      	ldr	r3, [r0, #0]
{
 8005cf2:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	4222      	tst	r2, r4
 8005cf8:	d001      	beq.n	8005cfe <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005cfa:	2000      	movs	r0, #0
}
 8005cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005cfe:	2201      	movs	r2, #1
 8005d00:	4252      	negs	r2, r2
 8005d02:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005d04:	f7fd fea0 	bl	8003a48 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005d08:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8005d0a:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005d0c:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005d0e:	682b      	ldr	r3, [r5, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	4223      	tst	r3, r4
 8005d14:	d1f1      	bne.n	8005cfa <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005d16:	f7fd fe97 	bl	8003a48 <HAL_GetTick>
 8005d1a:	1b80      	subs	r0, r0, r6
 8005d1c:	42b8      	cmp	r0, r7
 8005d1e:	d9f6      	bls.n	8005d0e <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8005d20:	2003      	movs	r0, #3
 8005d22:	e7eb      	b.n	8005cfc <RTC_EnterInitMode+0x10>

08005d24 <HAL_RTC_Init>:
{
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005d28:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d01a      	beq.n	8005d64 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d2e:	1c86      	adds	r6, r0, #2
 8005d30:	7ff3      	ldrb	r3, [r6, #31]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d103      	bne.n	8005d40 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8005d38:	1943      	adds	r3, r0, r5
 8005d3a:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8005d3c:	f7fd fb12 	bl	8003364 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d40:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d42:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d44:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d46:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d48:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24
 8005d4c:	3a77      	subs	r2, #119	; 0x77
 8005d4e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d50:	f7ff ffcc 	bl	8005cec <RTC_EnterInitMode>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	1e05      	subs	r5, r0, #0
 8005d58:	d006      	beq.n	8005d68 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d5a:	22ff      	movs	r2, #255	; 0xff
 8005d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d5e:	2304      	movs	r3, #4
 8005d60:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8005d62:	2501      	movs	r5, #1
}
 8005d64:	0028      	movs	r0, r5
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	491b      	ldr	r1, [pc, #108]	; (8005dd8 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d6c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d6e:	400a      	ands	r2, r1
 8005d70:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d72:	6862      	ldr	r2, [r4, #4]
 8005d74:	6899      	ldr	r1, [r3, #8]
 8005d76:	4302      	orrs	r2, r0
 8005d78:	69a0      	ldr	r0, [r4, #24]
 8005d7a:	4302      	orrs	r2, r0
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d80:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005d82:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d84:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005d86:	68a2      	ldr	r2, [r4, #8]
 8005d88:	6919      	ldr	r1, [r3, #16]
 8005d8a:	0412      	lsls	r2, r2, #16
 8005d8c:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d8e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005d90:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	438a      	bics	r2, r1
 8005d96:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d9a:	397d      	subs	r1, #125	; 0x7d
 8005d9c:	438a      	bics	r2, r1
 8005d9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005da0:	69e2      	ldr	r2, [r4, #28]
 8005da2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005da4:	4302      	orrs	r2, r0
 8005da6:	430a      	orrs	r2, r1
 8005da8:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	069b      	lsls	r3, r3, #26
 8005dae:	d40c      	bmi.n	8005dca <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005db0:	0020      	movs	r0, r4
 8005db2:	f7ff ff81 	bl	8005cb8 <HAL_RTC_WaitForSynchro>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d007      	beq.n	8005dca <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dba:	22ff      	movs	r2, #255	; 0xff
 8005dbc:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8005dbe:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dc2:	2304      	movs	r3, #4
 8005dc4:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8005dc6:	77e5      	strb	r5, [r4, #31]
 8005dc8:	e7cb      	b.n	8005d62 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dca:	22ff      	movs	r2, #255	; 0xff
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8005dd4:	e7c6      	b.n	8005d64 <HAL_RTC_Init+0x40>
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	ff8fffbf 	.word	0xff8fffbf

08005ddc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005ddc:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8005dde:	2809      	cmp	r0, #9
 8005de0:	d803      	bhi.n	8005dea <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	4318      	orrs	r0, r3
 8005de6:	b2c0      	uxtb	r0, r0
}
 8005de8:	4770      	bx	lr
    Param -= 10U;
 8005dea:	380a      	subs	r0, #10
    bcdhigh++;
 8005dec:	3301      	adds	r3, #1
    Param -= 10U;
 8005dee:	b2c0      	uxtb	r0, r0
 8005df0:	e7f5      	b.n	8005dde <RTC_ByteToBcd2+0x2>
	...

08005df4 <HAL_RTC_SetTime>:
{
 8005df4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005df6:	1c43      	adds	r3, r0, #1
{
 8005df8:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005dfa:	9302      	str	r3, [sp, #8]
{
 8005dfc:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8005dfe:	7fd9      	ldrb	r1, [r3, #31]
 8005e00:	2302      	movs	r3, #2
{
 8005e02:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8005e04:	001f      	movs	r7, r3
 8005e06:	2901      	cmp	r1, #1
 8005e08:	d038      	beq.n	8005e7c <HAL_RTC_SetTime+0x88>
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	1840      	adds	r0, r0, r1
 8005e0e:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e10:	18e9      	adds	r1, r5, r3
 8005e12:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	7820      	ldrb	r0, [r4, #0]
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	7866      	ldrb	r6, [r4, #1]
 8005e1c:	2340      	movs	r3, #64	; 0x40
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e1e:	9103      	str	r1, [sp, #12]
  if (Format == RTC_FORMAT_BIN)
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	d12e      	bne.n	8005e82 <HAL_RTC_SetTime+0x8e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e24:	9a01      	ldr	r2, [sp, #4]
 8005e26:	6892      	ldr	r2, [r2, #8]
 8005e28:	0011      	movs	r1, r2
 8005e2a:	4019      	ands	r1, r3
 8005e2c:	421a      	tst	r2, r3
 8005e2e:	d100      	bne.n	8005e32 <HAL_RTC_SetTime+0x3e>
      sTime->TimeFormat = 0x00U;
 8005e30:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005e32:	f7ff ffd3 	bl	8005ddc <RTC_ByteToBcd2>
 8005e36:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005e38:	0030      	movs	r0, r6
 8005e3a:	f7ff ffcf 	bl	8005ddc <RTC_ByteToBcd2>
 8005e3e:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005e40:	78a0      	ldrb	r0, [r4, #2]
 8005e42:	f7ff ffcb 	bl	8005ddc <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005e46:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005e48:	043f      	lsls	r7, r7, #16
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005e4a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005e4c:	4303      	orrs	r3, r0
 8005e4e:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005e50:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e52:	23ca      	movs	r3, #202	; 0xca
 8005e54:	9a01      	ldr	r2, [sp, #4]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e56:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e58:	6253      	str	r3, [r2, #36]	; 0x24
 8005e5a:	3b77      	subs	r3, #119	; 0x77
 8005e5c:	6253      	str	r3, [r2, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e5e:	f7ff ff45 	bl	8005cec <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005e62:	433e      	orrs	r6, r7
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	1e07      	subs	r7, r0, #0
 8005e68:	d01a      	beq.n	8005ea0 <HAL_RTC_SetTime+0xac>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e6a:	22ff      	movs	r2, #255	; 0xff
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e6e:	2304      	movs	r3, #4
 8005e70:	9a03      	ldr	r2, [sp, #12]
 8005e72:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005e74:	2300      	movs	r3, #0
 8005e76:	9a02      	ldr	r2, [sp, #8]
 8005e78:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8005e7a:	2701      	movs	r7, #1
}
 8005e7c:	0038      	movs	r0, r7
 8005e7e:	b005      	add	sp, #20
 8005e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e82:	9a01      	ldr	r2, [sp, #4]
 8005e84:	6892      	ldr	r2, [r2, #8]
 8005e86:	0011      	movs	r1, r2
 8005e88:	4019      	ands	r1, r3
 8005e8a:	421a      	tst	r2, r3
 8005e8c:	d100      	bne.n	8005e90 <HAL_RTC_SetTime+0x9c>
      sTime->TimeFormat = 0x00U;
 8005e8e:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005e90:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005e92:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005e94:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005e96:	78e7      	ldrb	r7, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8005e98:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005e9a:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005e9c:	4306      	orrs	r6, r0
 8005e9e:	e7d8      	b.n	8005e52 <HAL_RTC_SetTime+0x5e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ea0:	4815      	ldr	r0, [pc, #84]	; (8005ef8 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005ea2:	4916      	ldr	r1, [pc, #88]	; (8005efc <HAL_RTC_SetTime+0x108>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ea4:	4006      	ands	r6, r0
 8005ea6:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005ea8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005eaa:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005eac:	400a      	ands	r2, r1
 8005eae:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005eb0:	68e2      	ldr	r2, [r4, #12]
 8005eb2:	6899      	ldr	r1, [r3, #8]
 8005eb4:	4302      	orrs	r2, r0
 8005eb6:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005eb8:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005eba:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	438a      	bics	r2, r1
 8005ec0:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	069b      	lsls	r3, r3, #26
 8005ec6:	d40d      	bmi.n	8005ee4 <HAL_RTC_SetTime+0xf0>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ec8:	0028      	movs	r0, r5
 8005eca:	f7ff fef5 	bl	8005cb8 <HAL_RTC_WaitForSynchro>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d008      	beq.n	8005ee4 <HAL_RTC_SetTime+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ed2:	22ff      	movs	r2, #255	; 0xff
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ed8:	2304      	movs	r3, #4
 8005eda:	9a03      	ldr	r2, [sp, #12]
 8005edc:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8005ede:	9b02      	ldr	r3, [sp, #8]
 8005ee0:	77df      	strb	r7, [r3, #31]
 8005ee2:	e7ca      	b.n	8005e7a <HAL_RTC_SetTime+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ee4:	22ff      	movs	r2, #255	; 0xff
 8005ee6:	682b      	ldr	r3, [r5, #0]
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005eea:	2301      	movs	r3, #1
 8005eec:	9a03      	ldr	r2, [sp, #12]
 8005eee:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9a02      	ldr	r2, [sp, #8]
 8005ef4:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8005ef6:	e7c1      	b.n	8005e7c <HAL_RTC_SetTime+0x88>
 8005ef8:	007f7f7f 	.word	0x007f7f7f
 8005efc:	fffbffff 	.word	0xfffbffff

08005f00 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8005f00:	2302      	movs	r3, #2
{
 8005f02:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005f04:	1c47      	adds	r7, r0, #1
{
 8005f06:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8005f08:	7ff9      	ldrb	r1, [r7, #31]
{
 8005f0a:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8005f0c:	001d      	movs	r5, r3
{
 8005f0e:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005f10:	2901      	cmp	r1, #1
 8005f12:	d036      	beq.n	8005f82 <HAL_RTC_SetDate+0x82>
 8005f14:	2101      	movs	r1, #1
 8005f16:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f18:	18c1      	adds	r1, r0, r3
 8005f1a:	77cb      	strb	r3, [r1, #31]
 8005f1c:	9101      	str	r1, [sp, #4]
 8005f1e:	7831      	ldrb	r1, [r6, #0]
 8005f20:	78f0      	ldrb	r0, [r6, #3]
 8005f22:	0349      	lsls	r1, r1, #13
 8005f24:	7873      	ldrb	r3, [r6, #1]
 8005f26:	78b5      	ldrb	r5, [r6, #2]
 8005f28:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f2a:	2a00      	cmp	r2, #0
 8005f2c:	d14c      	bne.n	8005fc8 <HAL_RTC_SetDate+0xc8>
 8005f2e:	3210      	adds	r2, #16
 8005f30:	4213      	tst	r3, r2
 8005f32:	d002      	beq.n	8005f3a <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f34:	4393      	bics	r3, r2
 8005f36:	330a      	adds	r3, #10
 8005f38:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005f3a:	f7ff ff4f 	bl	8005ddc <RTC_ByteToBcd2>
 8005f3e:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005f40:	7870      	ldrb	r0, [r6, #1]
 8005f42:	f7ff ff4b 	bl	8005ddc <RTC_ByteToBcd2>
 8005f46:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005f48:	0028      	movs	r0, r5
 8005f4a:	f7ff ff47 	bl	8005ddc <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005f4e:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005f50:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005f52:	041d      	lsls	r5, r3, #16
 8005f54:	9b02      	ldr	r3, [sp, #8]
 8005f56:	4318      	orrs	r0, r3
 8005f58:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f5a:	22ca      	movs	r2, #202	; 0xca
 8005f5c:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f5e:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f60:	625a      	str	r2, [r3, #36]	; 0x24
 8005f62:	3a77      	subs	r2, #119	; 0x77
 8005f64:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f66:	f7ff fec1 	bl	8005cec <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005f6a:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	1e05      	subs	r5, r0, #0
 8005f70:	d00a      	beq.n	8005f88 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f72:	22ff      	movs	r2, #255	; 0xff
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f76:	2304      	movs	r3, #4
 8005f78:	9a01      	ldr	r2, [sp, #4]
 8005f7a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8005f80:	2501      	movs	r5, #1
}
 8005f82:	0028      	movs	r0, r5
 8005f84:	b005      	add	sp, #20
 8005f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005f88:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f8a:	4812      	ldr	r0, [pc, #72]	; (8005fd4 <HAL_RTC_SetDate+0xd4>)
 8005f8c:	4006      	ands	r6, r0
 8005f8e:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	438a      	bics	r2, r1
 8005f94:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	069b      	lsls	r3, r3, #26
 8005f9a:	d40c      	bmi.n	8005fb6 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f9c:	0020      	movs	r0, r4
 8005f9e:	f7ff fe8b 	bl	8005cb8 <HAL_RTC_WaitForSynchro>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d007      	beq.n	8005fb6 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fa6:	22ff      	movs	r2, #255	; 0xff
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fac:	2304      	movs	r3, #4
 8005fae:	9a01      	ldr	r2, [sp, #4]
 8005fb0:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8005fb2:	77fd      	strb	r5, [r7, #31]
 8005fb4:	e7e4      	b.n	8005f80 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fb6:	22ff      	movs	r2, #255	; 0xff
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	9a01      	ldr	r2, [sp, #4]
 8005fc0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8005fc6:	e7dc      	b.n	8005f82 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005fc8:	9a02      	ldr	r2, [sp, #8]
 8005fca:	0400      	lsls	r0, r0, #16
 8005fcc:	4310      	orrs	r0, r2
 8005fce:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8005fd0:	021e      	lsls	r6, r3, #8
 8005fd2:	e7c2      	b.n	8005f5a <HAL_RTC_SetDate+0x5a>
 8005fd4:	00ffff3f 	.word	0x00ffff3f

08005fd8 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005fd8:	2302      	movs	r3, #2
{
 8005fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fdc:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8005fde:	1c41      	adds	r1, r0, #1
 8005fe0:	7fce      	ldrb	r6, [r1, #31]
{
 8005fe2:	0004      	movs	r4, r0
 8005fe4:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	2e01      	cmp	r6, #1
 8005fea:	d100      	bne.n	8005fee <HAL_RTC_SetAlarm_IT+0x16>
 8005fec:	e095      	b.n	800611a <HAL_RTC_SetAlarm_IT+0x142>
 8005fee:	3801      	subs	r0, #1
 8005ff0:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ff2:	18e1      	adds	r1, r4, r3
 8005ff4:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8005ff6:	7869      	ldrb	r1, [r5, #1]
 8005ff8:	6826      	ldr	r6, [r4, #0]
 8005ffa:	9101      	str	r1, [sp, #4]
 8005ffc:	7828      	ldrb	r0, [r5, #0]
 8005ffe:	78af      	ldrb	r7, [r5, #2]
 8006000:	333e      	adds	r3, #62	; 0x3e
 8006002:	2a00      	cmp	r2, #0
 8006004:	d165      	bne.n	80060d2 <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006006:	68b2      	ldr	r2, [r6, #8]
 8006008:	0011      	movs	r1, r2
 800600a:	4019      	ands	r1, r3
 800600c:	421a      	tst	r2, r3
 800600e:	d100      	bne.n	8006012 <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006010:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006012:	f7ff fee3 	bl	8005ddc <RTC_ByteToBcd2>
 8006016:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006018:	9801      	ldr	r0, [sp, #4]
 800601a:	f7ff fedf 	bl	8005ddc <RTC_ByteToBcd2>
 800601e:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006020:	0038      	movs	r0, r7
 8006022:	f7ff fedb 	bl	8005ddc <RTC_ByteToBcd2>
 8006026:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006028:	1c6b      	adds	r3, r5, #1
 800602a:	7fd8      	ldrb	r0, [r3, #31]
 800602c:	f7ff fed6 	bl	8005ddc <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006030:	696a      	ldr	r2, [r5, #20]
 8006032:	69eb      	ldr	r3, [r5, #28]
 8006034:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006036:	78ea      	ldrb	r2, [r5, #3]
 8006038:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800603a:	4313      	orrs	r3, r2
 800603c:	431f      	orrs	r7, r3
 800603e:	9b02      	ldr	r3, [sp, #8]
 8006040:	041b      	lsls	r3, r3, #16
 8006042:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006044:	9b01      	ldr	r3, [sp, #4]
 8006046:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006048:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800604a:	69aa      	ldr	r2, [r5, #24]
 800604c:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800604e:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006050:	4313      	orrs	r3, r2
 8006052:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006054:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006056:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006058:	6273      	str	r3, [r6, #36]	; 0x24
 800605a:	3b77      	subs	r3, #119	; 0x77
 800605c:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800605e:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006060:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006062:	429a      	cmp	r2, r3
 8006064:	d15b      	bne.n	800611e <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006066:	68b3      	ldr	r3, [r6, #8]
 8006068:	4a41      	ldr	r2, [pc, #260]	; (8006170 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800606a:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800606c:	4013      	ands	r3, r2
 800606e:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006070:	68f2      	ldr	r2, [r6, #12]
 8006072:	4b40      	ldr	r3, [pc, #256]	; (8006174 <HAL_RTC_SetAlarm_IT+0x19c>)
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	4313      	orrs	r3, r2
 8006078:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800607a:	f7fd fce5 	bl	8003a48 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800607e:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8006080:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006082:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	0011      	movs	r1, r2
 800608a:	4029      	ands	r1, r5
 800608c:	9103      	str	r1, [sp, #12]
 800608e:	422a      	tst	r2, r5
 8006090:	d034      	beq.n	80060fc <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006092:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006094:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006096:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006098:	2280      	movs	r2, #128	; 0x80
 800609a:	6899      	ldr	r1, [r3, #8]
 800609c:	0052      	lsls	r2, r2, #1
 800609e:	430a      	orrs	r2, r1
 80060a0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80060a2:	2280      	movs	r2, #128	; 0x80
 80060a4:	6899      	ldr	r1, [r3, #8]
 80060a6:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80060a8:	430a      	orrs	r2, r1
 80060aa:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80060ac:	2280      	movs	r2, #128	; 0x80
 80060ae:	4b32      	ldr	r3, [pc, #200]	; (8006178 <HAL_RTC_SetAlarm_IT+0x1a0>)
 80060b0:	0292      	lsls	r2, r2, #10
 80060b2:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80060b4:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80060b6:	4311      	orrs	r1, r2
 80060b8:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80060ba:	6899      	ldr	r1, [r3, #8]
 80060bc:	430a      	orrs	r2, r1
 80060be:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80060c6:	3afe      	subs	r2, #254	; 0xfe
 80060c8:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 80060ca:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 80060cc:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80060ce:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80060d0:	e023      	b.n	800611a <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060d2:	68b2      	ldr	r2, [r6, #8]
 80060d4:	0011      	movs	r1, r2
 80060d6:	4019      	ands	r1, r3
 80060d8:	421a      	tst	r2, r3
 80060da:	d100      	bne.n	80060de <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80060dc:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80060de:	69eb      	ldr	r3, [r5, #28]
 80060e0:	696a      	ldr	r2, [r5, #20]
 80060e2:	0400      	lsls	r0, r0, #16
 80060e4:	4313      	orrs	r3, r2
 80060e6:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80060e8:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80060ea:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80060ec:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80060ee:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80060f0:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80060f2:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80060f4:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80060f6:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80060f8:	7fd8      	ldrb	r0, [r3, #31]
 80060fa:	e7a6      	b.n	800604a <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060fc:	f7fd fca4 	bl	8003a48 <HAL_GetTick>
 8006100:	9b02      	ldr	r3, [sp, #8]
 8006102:	1ac0      	subs	r0, r0, r3
 8006104:	42b0      	cmp	r0, r6
 8006106:	d9bd      	bls.n	8006084 <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006108:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800610a:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006110:	1ca3      	adds	r3, r4, #2
 8006112:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8006114:	9b03      	ldr	r3, [sp, #12]
 8006116:	3401      	adds	r4, #1
 8006118:	77e3      	strb	r3, [r4, #31]
}
 800611a:	b005      	add	sp, #20
 800611c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800611e:	68b3      	ldr	r3, [r6, #8]
 8006120:	4a16      	ldr	r2, [pc, #88]	; (800617c <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006122:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006124:	4013      	ands	r3, r2
 8006126:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006128:	68f2      	ldr	r2, [r6, #12]
 800612a:	4b15      	ldr	r3, [pc, #84]	; (8006180 <HAL_RTC_SetAlarm_IT+0x1a8>)
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	4313      	orrs	r3, r2
 8006130:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006132:	f7fd fc89 	bl	8003a48 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006136:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8006138:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800613a:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	0011      	movs	r1, r2
 8006142:	4029      	ands	r1, r5
 8006144:	9103      	str	r1, [sp, #12]
 8006146:	422a      	tst	r2, r5
 8006148:	d00b      	beq.n	8006162 <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800614a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800614c:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800614e:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006150:	2280      	movs	r2, #128	; 0x80
 8006152:	6899      	ldr	r1, [r3, #8]
 8006154:	0092      	lsls	r2, r2, #2
 8006156:	430a      	orrs	r2, r1
 8006158:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800615a:	2280      	movs	r2, #128	; 0x80
 800615c:	6899      	ldr	r1, [r3, #8]
 800615e:	0192      	lsls	r2, r2, #6
 8006160:	e7a2      	b.n	80060a8 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006162:	f7fd fc71 	bl	8003a48 <HAL_GetTick>
 8006166:	9b02      	ldr	r3, [sp, #8]
 8006168:	1ac0      	subs	r0, r0, r3
 800616a:	42b0      	cmp	r0, r6
 800616c:	d9e6      	bls.n	800613c <HAL_RTC_SetAlarm_IT+0x164>
 800616e:	e7cb      	b.n	8006108 <HAL_RTC_SetAlarm_IT+0x130>
 8006170:	fffffeff 	.word	0xfffffeff
 8006174:	fffffe7f 	.word	0xfffffe7f
 8006178:	40010400 	.word	0x40010400
 800617c:	fffffdff 	.word	0xfffffdff
 8006180:	fffffd7f 	.word	0xfffffd7f

08006184 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006184:	0902      	lsrs	r2, r0, #4
{
 8006186:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006188:	200a      	movs	r0, #10
 800618a:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800618c:	220f      	movs	r2, #15
 800618e:	4013      	ands	r3, r2
 8006190:	18c0      	adds	r0, r0, r3
 8006192:	b2c0      	uxtb	r0, r0
}
 8006194:	4770      	bx	lr
	...

08006198 <HAL_RTC_GetTime>:
{
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800619c:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800619e:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80061a0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80061a2:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80061a4:	690b      	ldr	r3, [r1, #16]
 80061a6:	045b      	lsls	r3, r3, #17
 80061a8:	0c5b      	lsrs	r3, r3, #17
 80061aa:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80061ac:	680b      	ldr	r3, [r1, #0]
 80061ae:	490e      	ldr	r1, [pc, #56]	; (80061e8 <HAL_RTC_GetTime+0x50>)
 80061b0:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80061b2:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80061b4:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80061b6:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80061b8:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80061ba:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80061bc:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80061be:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80061c0:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80061c2:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80061c4:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80061c6:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80061c8:	2a00      	cmp	r2, #0
 80061ca:	d10a      	bne.n	80061e2 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80061cc:	f7ff ffda 	bl	8006184 <RTC_Bcd2ToByte>
 80061d0:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80061d2:	0030      	movs	r0, r6
 80061d4:	f7ff ffd6 	bl	8006184 <RTC_Bcd2ToByte>
 80061d8:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80061da:	0028      	movs	r0, r5
 80061dc:	f7ff ffd2 	bl	8006184 <RTC_Bcd2ToByte>
 80061e0:	70a0      	strb	r0, [r4, #2]
}
 80061e2:	2000      	movs	r0, #0
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	007f7f7f 	.word	0x007f7f7f

080061ec <HAL_RTC_GetDate>:
{
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80061f0:	6803      	ldr	r3, [r0, #0]
 80061f2:	490e      	ldr	r1, [pc, #56]	; (800622c <HAL_RTC_GetDate+0x40>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80061f8:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80061fa:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80061fc:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80061fe:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006200:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006202:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006204:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006206:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006208:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800620a:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 800620c:	2a00      	cmp	r2, #0
 800620e:	d10a      	bne.n	8006226 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006210:	f7ff ffb8 	bl	8006184 <RTC_Bcd2ToByte>
 8006214:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006216:	0028      	movs	r0, r5
 8006218:	f7ff ffb4 	bl	8006184 <RTC_Bcd2ToByte>
 800621c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800621e:	0030      	movs	r0, r6
 8006220:	f7ff ffb0 	bl	8006184 <RTC_Bcd2ToByte>
 8006224:	70a0      	strb	r0, [r4, #2]
}
 8006226:	2000      	movs	r0, #0
 8006228:	bd70      	pop	{r4, r5, r6, pc}
 800622a:	46c0      	nop			; (mov r8, r8)
 800622c:	00ffff3f 	.word	0x00ffff3f

08006230 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006230:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8006232:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006234:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8006236:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006238:	600a      	str	r2, [r1, #0]
}
 800623a:	4770      	bx	lr

0800623c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800623c:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800623e:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006240:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8006242:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006244:	6808      	ldr	r0, [r1, #0]
}
 8006246:	4770      	bx	lr

08006248 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006248:	2202      	movs	r2, #2
{
 800624a:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 800624c:	1c41      	adds	r1, r0, #1
 800624e:	7fcc      	ldrb	r4, [r1, #31]
{
 8006250:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8006252:	0010      	movs	r0, r2
 8006254:	2c01      	cmp	r4, #1
 8006256:	d010      	beq.n	800627a <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006258:	1898      	adds	r0, r3, r2
 800625a:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	32c8      	adds	r2, #200	; 0xc8
 8006260:	625a      	str	r2, [r3, #36]	; 0x24
 8006262:	3a77      	subs	r2, #119	; 0x77
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006266:	689c      	ldr	r4, [r3, #8]
 8006268:	3a33      	subs	r2, #51	; 0x33
 800626a:	4322      	orrs	r2, r4
 800626c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800626e:	22ff      	movs	r2, #255	; 0xff
 8006270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006272:	2301      	movs	r3, #1
 8006274:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006276:	2000      	movs	r0, #0
 8006278:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 800627a:	bd10      	pop	{r4, pc}

0800627c <HAL_RTCEx_AlarmBEventCallback>:
 800627c:	4770      	bx	lr
	...

08006280 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006282:	001d      	movs	r5, r3
 8006284:	0017      	movs	r7, r2
 8006286:	b085      	sub	sp, #20
 8006288:	000e      	movs	r6, r1
 800628a:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800628c:	f7fd fbdc 	bl	8003a48 <HAL_GetTick>
 8006290:	19ed      	adds	r5, r5, r7
 8006292:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8006294:	f7fd fbd8 	bl	8003a48 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006298:	4b25      	ldr	r3, [pc, #148]	; (8006330 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 800629a:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	015b      	lsls	r3, r3, #5
 80062a0:	0d1b      	lsrs	r3, r3, #20
 80062a2:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062a4:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80062a6:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062a8:	6893      	ldr	r3, [r2, #8]
 80062aa:	4033      	ands	r3, r6
 80062ac:	429e      	cmp	r6, r3
 80062ae:	d001      	beq.n	80062b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80062b0:	2000      	movs	r0, #0
 80062b2:	e032      	b.n	800631a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 80062b4:	1c7b      	adds	r3, r7, #1
 80062b6:	d0f7      	beq.n	80062a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062b8:	f7fd fbc6 	bl	8003a48 <HAL_GetTick>
 80062bc:	9b01      	ldr	r3, [sp, #4]
 80062be:	1ac0      	subs	r0, r0, r3
 80062c0:	42a8      	cmp	r0, r5
 80062c2:	d32c      	bcc.n	800631e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062c4:	21e0      	movs	r1, #224	; 0xe0
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	438a      	bics	r2, r1
 80062cc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ce:	2282      	movs	r2, #130	; 0x82
 80062d0:	6861      	ldr	r1, [r4, #4]
 80062d2:	0052      	lsls	r2, r2, #1
 80062d4:	4291      	cmp	r1, r2
 80062d6:	d10c      	bne.n	80062f2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 80062d8:	2180      	movs	r1, #128	; 0x80
 80062da:	68a2      	ldr	r2, [r4, #8]
 80062dc:	0209      	lsls	r1, r1, #8
 80062de:	428a      	cmp	r2, r1
 80062e0:	d003      	beq.n	80062ea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062e2:	2180      	movs	r1, #128	; 0x80
 80062e4:	00c9      	lsls	r1, r1, #3
 80062e6:	428a      	cmp	r2, r1
 80062e8:	d103      	bne.n	80062f2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 80062ea:	2140      	movs	r1, #64	; 0x40
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	438a      	bics	r2, r1
 80062f0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062f2:	2180      	movs	r1, #128	; 0x80
 80062f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80062f6:	0189      	lsls	r1, r1, #6
 80062f8:	428a      	cmp	r2, r1
 80062fa:	d106      	bne.n	800630a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 80062fc:	6819      	ldr	r1, [r3, #0]
 80062fe:	480d      	ldr	r0, [pc, #52]	; (8006334 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8006300:	4001      	ands	r1, r0
 8006302:	6019      	str	r1, [r3, #0]
 8006304:	6819      	ldr	r1, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800630a:	0023      	movs	r3, r4
 800630c:	2201      	movs	r2, #1
 800630e:	3351      	adds	r3, #81	; 0x51
 8006310:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8006312:	2300      	movs	r3, #0
 8006314:	2003      	movs	r0, #3
 8006316:	3450      	adds	r4, #80	; 0x50
 8006318:	7023      	strb	r3, [r4, #0]
}
 800631a:	b005      	add	sp, #20
 800631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 800631e:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8006320:	1e5a      	subs	r2, r3, #1
 8006322:	4193      	sbcs	r3, r2
 8006324:	425b      	negs	r3, r3
 8006326:	401d      	ands	r5, r3
      count--;
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	3b01      	subs	r3, #1
 800632c:	e7ba      	b.n	80062a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	20000044 	.word	0x20000044
 8006334:	ffffdfff 	.word	0xffffdfff

08006338 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006338:	4b16      	ldr	r3, [pc, #88]	; (8006394 <SPI_EndRxTxTransaction+0x5c>)
{
 800633a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800633c:	0004      	movs	r4, r0
 800633e:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	4915      	ldr	r1, [pc, #84]	; (8006398 <SPI_EndRxTxTransaction+0x60>)
{
 8006344:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006346:	f7f9 ff0f 	bl	8000168 <__udivsi3>
 800634a:	23fa      	movs	r3, #250	; 0xfa
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4343      	muls	r3, r0
 8006350:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006352:	2382      	movs	r3, #130	; 0x82
 8006354:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006356:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4299      	cmp	r1, r3
 800635c:	d10d      	bne.n	800637a <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800635e:	0033      	movs	r3, r6
 8006360:	002a      	movs	r2, r5
 8006362:	2180      	movs	r1, #128	; 0x80
 8006364:	0020      	movs	r0, r4
 8006366:	f7ff ff8b 	bl	8006280 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800636a:	2800      	cmp	r0, #0
 800636c:	d00f      	beq.n	800638e <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800636e:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006370:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006372:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006374:	4313      	orrs	r3, r2
 8006376:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8006378:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 800637a:	9b01      	ldr	r3, [sp, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d006      	beq.n	800638e <SPI_EndRxTxTransaction+0x56>
      count--;
 8006380:	9b01      	ldr	r3, [sp, #4]
 8006382:	3b01      	subs	r3, #1
 8006384:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	4213      	tst	r3, r2
 800638c:	d1f5      	bne.n	800637a <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 800638e:	2000      	movs	r0, #0
 8006390:	e7f2      	b.n	8006378 <SPI_EndRxTxTransaction+0x40>
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	20000044 	.word	0x20000044
 8006398:	016e3600 	.word	0x016e3600

0800639c <HAL_SPI_MspInit>:
}
 800639c:	4770      	bx	lr
	...

080063a0 <HAL_SPI_Init>:
{
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80063a4:	2001      	movs	r0, #1
  if (hspi == NULL)
 80063a6:	2c00      	cmp	r4, #0
 80063a8:	d054      	beq.n	8006454 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d152      	bne.n	8006456 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063b0:	2282      	movs	r2, #130	; 0x82
 80063b2:	6861      	ldr	r1, [r4, #4]
 80063b4:	0052      	lsls	r2, r2, #1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	d000      	beq.n	80063bc <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063ba:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063bc:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80063be:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063c0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c2:	3551      	adds	r5, #81	; 0x51
 80063c4:	782b      	ldrb	r3, [r5, #0]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d105      	bne.n	80063d8 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80063cc:	0023      	movs	r3, r4
 80063ce:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 80063d0:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80063d2:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80063d4:	f7ff ffe2 	bl	800639c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80063d8:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 80063da:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80063dc:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80063de:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063e0:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 80063e2:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063e4:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80063e6:	4393      	bics	r3, r2
 80063e8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063ea:	2382      	movs	r3, #130	; 0x82
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	4033      	ands	r3, r6
 80063f0:	2684      	movs	r6, #132	; 0x84
 80063f2:	0236      	lsls	r6, r6, #8
 80063f4:	403e      	ands	r6, r7
 80063f6:	4333      	orrs	r3, r6
 80063f8:	2680      	movs	r6, #128	; 0x80
 80063fa:	68e7      	ldr	r7, [r4, #12]
 80063fc:	0136      	lsls	r6, r6, #4
 80063fe:	403e      	ands	r6, r7
 8006400:	4333      	orrs	r3, r6
 8006402:	6926      	ldr	r6, [r4, #16]
 8006404:	69a2      	ldr	r2, [r4, #24]
 8006406:	4030      	ands	r0, r6
 8006408:	2601      	movs	r6, #1
 800640a:	4303      	orrs	r3, r0
 800640c:	6960      	ldr	r0, [r4, #20]
 800640e:	69e7      	ldr	r7, [r4, #28]
 8006410:	4030      	ands	r0, r6
 8006412:	4303      	orrs	r3, r0
 8006414:	2080      	movs	r0, #128	; 0x80
 8006416:	0080      	lsls	r0, r0, #2
 8006418:	4010      	ands	r0, r2
 800641a:	4303      	orrs	r3, r0
 800641c:	2038      	movs	r0, #56	; 0x38
 800641e:	4038      	ands	r0, r7
 8006420:	4303      	orrs	r3, r0
 8006422:	2080      	movs	r0, #128	; 0x80
 8006424:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006426:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006428:	4038      	ands	r0, r7
 800642a:	4303      	orrs	r3, r0
 800642c:	2080      	movs	r0, #128	; 0x80
 800642e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006430:	0180      	lsls	r0, r0, #6
 8006432:	4038      	ands	r0, r7
 8006434:	4303      	orrs	r3, r0
 8006436:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006438:	2304      	movs	r3, #4
 800643a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800643c:	401a      	ands	r2, r3
 800643e:	330c      	adds	r3, #12
 8006440:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006442:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006444:	431a      	orrs	r2, r3
 8006446:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006448:	69cb      	ldr	r3, [r1, #28]
 800644a:	4a05      	ldr	r2, [pc, #20]	; (8006460 <HAL_SPI_Init+0xc0>)
 800644c:	4013      	ands	r3, r2
 800644e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006450:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006452:	702e      	strb	r6, [r5, #0]
}
 8006454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006456:	2300      	movs	r3, #0
 8006458:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800645a:	6163      	str	r3, [r4, #20]
 800645c:	e7ae      	b.n	80063bc <HAL_SPI_Init+0x1c>
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	fffff7ff 	.word	0xfffff7ff

08006464 <HAL_SPI_TransmitReceive>:
{
 8006464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006466:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8006468:	0003      	movs	r3, r0
 800646a:	3350      	adds	r3, #80	; 0x50
{
 800646c:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800646e:	781a      	ldrb	r2, [r3, #0]
{
 8006470:	0004      	movs	r4, r0
 8006472:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8006474:	2002      	movs	r0, #2
{
 8006476:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8006478:	2a01      	cmp	r2, #1
 800647a:	d100      	bne.n	800647e <HAL_SPI_TransmitReceive+0x1a>
 800647c:	e092      	b.n	80065a4 <HAL_SPI_TransmitReceive+0x140>
 800647e:	2201      	movs	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006482:	f7fd fae1 	bl	8003a48 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006486:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8006488:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 800648a:	3351      	adds	r3, #81	; 0x51
 800648c:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800648e:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8006490:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006492:	2b01      	cmp	r3, #1
 8006494:	d00a      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x48>
 8006496:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8006498:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	4299      	cmp	r1, r3
 800649e:	d000      	beq.n	80064a2 <HAL_SPI_TransmitReceive+0x3e>
 80064a0:	e079      	b.n	8006596 <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d176      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x132>
 80064a8:	2a04      	cmp	r2, #4
 80064aa:	d174      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 80064ac:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064ae:	2d00      	cmp	r5, #0
 80064b0:	d071      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x132>
 80064b2:	2f00      	cmp	r7, #0
 80064b4:	d06f      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x132>
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	d06d      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064ba:	0023      	movs	r3, r4
 80064bc:	3351      	adds	r3, #81	; 0x51
 80064be:	781a      	ldrb	r2, [r3, #0]
 80064c0:	2a04      	cmp	r2, #4
 80064c2:	d001      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064c4:	2205      	movs	r2, #5
 80064c6:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064c8:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064ca:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064cc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80064ce:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064d0:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064d2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80064d4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80064d6:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064d8:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064da:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80064dc:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064de:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064e0:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e2:	4210      	tst	r0, r2
 80064e4:	d102      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	4302      	orrs	r2, r0
 80064ea:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064ec:	2280      	movs	r2, #128	; 0x80
 80064ee:	68e0      	ldr	r0, [r4, #12]
 80064f0:	0112      	lsls	r2, r2, #4
 80064f2:	4290      	cmp	r0, r2
 80064f4:	d158      	bne.n	80065a8 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064f6:	2900      	cmp	r1, #0
 80064f8:	d001      	beq.n	80064fe <HAL_SPI_TransmitReceive+0x9a>
 80064fa:	2e01      	cmp	r6, #1
 80064fc:	d107      	bne.n	800650e <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064fe:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006500:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006502:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006504:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006506:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006508:	3b01      	subs	r3, #1
 800650a:	b29b      	uxth	r3, r3
 800650c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800650e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006510:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006512:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006514:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10e      	bne.n	8006538 <HAL_SPI_TransmitReceive+0xd4>
 800651a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006520:	0020      	movs	r0, r4
 8006522:	9a01      	ldr	r2, [sp, #4]
 8006524:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006526:	f7ff ff07 	bl	8006338 <SPI_EndRxTxTransaction>
 800652a:	2800      	cmp	r0, #0
 800652c:	d100      	bne.n	8006530 <HAL_SPI_TransmitReceive+0xcc>
 800652e:	e083      	b.n	8006638 <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006530:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8006532:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006534:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8006536:	e02e      	b.n	8006596 <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006538:	6821      	ldr	r1, [r4, #0]
 800653a:	688b      	ldr	r3, [r1, #8]
 800653c:	423b      	tst	r3, r7
 800653e:	d00e      	beq.n	800655e <HAL_SPI_TransmitReceive+0xfa>
 8006540:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <HAL_SPI_TransmitReceive+0xfa>
 8006546:	2d01      	cmp	r5, #1
 8006548:	d109      	bne.n	800655e <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 800654a:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800654c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800654e:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006550:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006552:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006554:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006556:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006558:	3b01      	subs	r3, #1
 800655a:	b29b      	uxth	r3, r3
 800655c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800655e:	688b      	ldr	r3, [r1, #8]
 8006560:	001a      	movs	r2, r3
 8006562:	4032      	ands	r2, r6
 8006564:	4233      	tst	r3, r6
 8006566:	d00c      	beq.n	8006582 <HAL_SPI_TransmitReceive+0x11e>
 8006568:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 800656e:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006570:	68c9      	ldr	r1, [r1, #12]
 8006572:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006574:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006576:	3302      	adds	r3, #2
 8006578:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800657a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800657c:	3b01      	subs	r3, #1
 800657e:	b29b      	uxth	r3, r3
 8006580:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006582:	f7fd fa61 	bl	8003a48 <HAL_GetTick>
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	1ac0      	subs	r0, r0, r3
 800658a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800658c:	4298      	cmp	r0, r3
 800658e:	d3c1      	bcc.n	8006514 <HAL_SPI_TransmitReceive+0xb0>
 8006590:	3301      	adds	r3, #1
 8006592:	d0bf      	beq.n	8006514 <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8006594:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006596:	0023      	movs	r3, r4
 8006598:	2201      	movs	r2, #1
 800659a:	3351      	adds	r3, #81	; 0x51
 800659c:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800659e:	2300      	movs	r3, #0
 80065a0:	3450      	adds	r4, #80	; 0x50
 80065a2:	7023      	strb	r3, [r4, #0]
}
 80065a4:	b005      	add	sp, #20
 80065a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a8:	2900      	cmp	r1, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_SPI_TransmitReceive+0x14c>
 80065ac:	2e01      	cmp	r6, #1
 80065ae:	d108      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b0:	782a      	ldrb	r2, [r5, #0]
 80065b2:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065b6:	3301      	adds	r3, #1
 80065b8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80065ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29b      	uxth	r3, r3
 80065c0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80065c2:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065c4:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065c6:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d102      	bne.n	80065d4 <HAL_SPI_TransmitReceive+0x170>
 80065ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0a5      	beq.n	8006520 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	423a      	tst	r2, r7
 80065da:	d00f      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x198>
 80065dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80065de:	2a00      	cmp	r2, #0
 80065e0:	d00c      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x198>
 80065e2:	2d01      	cmp	r5, #1
 80065e4:	d10a      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 80065e6:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80065ea:	7812      	ldrb	r2, [r2, #0]
 80065ec:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80065ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065f0:	3301      	adds	r3, #1
 80065f2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80065f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	6899      	ldr	r1, [r3, #8]
 8006600:	000a      	movs	r2, r1
 8006602:	4032      	ands	r2, r6
 8006604:	4231      	tst	r1, r6
 8006606:	d00d      	beq.n	8006624 <HAL_SPI_TransmitReceive+0x1c0>
 8006608:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800660a:	2900      	cmp	r1, #0
 800660c:	d00a      	beq.n	8006624 <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 800660e:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006614:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8006616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006618:	3301      	adds	r3, #1
 800661a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800661c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800661e:	3b01      	subs	r3, #1
 8006620:	b29b      	uxth	r3, r3
 8006622:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006624:	f7fd fa10 	bl	8003a48 <HAL_GetTick>
 8006628:	9b01      	ldr	r3, [sp, #4]
 800662a:	1ac0      	subs	r0, r0, r3
 800662c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662e:	4298      	cmp	r0, r3
 8006630:	d3ca      	bcc.n	80065c8 <HAL_SPI_TransmitReceive+0x164>
 8006632:	3301      	adds	r3, #1
 8006634:	d0c8      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x164>
 8006636:	e7ad      	b.n	8006594 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006638:	68a3      	ldr	r3, [r4, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1ab      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	9003      	str	r0, [sp, #12]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	9203      	str	r2, [sp, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	e7a3      	b.n	8006596 <HAL_SPI_TransmitReceive+0x132>

0800664e <HAL_SPI_GetState>:
  return hspi->State;
 800664e:	3051      	adds	r0, #81	; 0x51
 8006650:	7800      	ldrb	r0, [r0, #0]
 8006652:	b2c0      	uxtb	r0, r0
}
 8006654:	4770      	bx	lr
	...

08006658 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006658:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 800665a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800665c:	05d2      	lsls	r2, r2, #23
 800665e:	4290      	cmp	r0, r2
 8006660:	d008      	beq.n	8006674 <TIM_Base_SetConfig+0x1c>
 8006662:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <TIM_Base_SetConfig+0x60>)
 8006664:	4290      	cmp	r0, r2
 8006666:	d005      	beq.n	8006674 <TIM_Base_SetConfig+0x1c>
 8006668:	4a14      	ldr	r2, [pc, #80]	; (80066bc <TIM_Base_SetConfig+0x64>)
 800666a:	4290      	cmp	r0, r2
 800666c:	d002      	beq.n	8006674 <TIM_Base_SetConfig+0x1c>
 800666e:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <TIM_Base_SetConfig+0x68>)
 8006670:	4290      	cmp	r0, r2
 8006672:	d114      	bne.n	800669e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006674:	2270      	movs	r2, #112	; 0x70
 8006676:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8006678:	684a      	ldr	r2, [r1, #4]
 800667a:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800667c:	2280      	movs	r2, #128	; 0x80
 800667e:	05d2      	lsls	r2, r2, #23
 8006680:	4290      	cmp	r0, r2
 8006682:	d008      	beq.n	8006696 <TIM_Base_SetConfig+0x3e>
 8006684:	4a0c      	ldr	r2, [pc, #48]	; (80066b8 <TIM_Base_SetConfig+0x60>)
 8006686:	4290      	cmp	r0, r2
 8006688:	d005      	beq.n	8006696 <TIM_Base_SetConfig+0x3e>
 800668a:	4a0c      	ldr	r2, [pc, #48]	; (80066bc <TIM_Base_SetConfig+0x64>)
 800668c:	4290      	cmp	r0, r2
 800668e:	d002      	beq.n	8006696 <TIM_Base_SetConfig+0x3e>
 8006690:	4a0b      	ldr	r2, [pc, #44]	; (80066c0 <TIM_Base_SetConfig+0x68>)
 8006692:	4290      	cmp	r0, r2
 8006694:	d103      	bne.n	800669e <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006696:	4a0b      	ldr	r2, [pc, #44]	; (80066c4 <TIM_Base_SetConfig+0x6c>)
 8006698:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800669a:	68ca      	ldr	r2, [r1, #12]
 800669c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800669e:	2280      	movs	r2, #128	; 0x80
 80066a0:	4393      	bics	r3, r2
 80066a2:	690a      	ldr	r2, [r1, #16]
 80066a4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80066a6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a8:	688b      	ldr	r3, [r1, #8]
 80066aa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066ac:	680b      	ldr	r3, [r1, #0]
 80066ae:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b0:	2301      	movs	r3, #1
 80066b2:	6143      	str	r3, [r0, #20]
}
 80066b4:	4770      	bx	lr
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40010800 	.word	0x40010800
 80066c0:	40011400 	.word	0x40011400
 80066c4:	fffffcff 	.word	0xfffffcff

080066c8 <HAL_TIM_Base_MspInit>:
}
 80066c8:	4770      	bx	lr

080066ca <HAL_TIM_Base_Init>:
{
 80066ca:	b570      	push	{r4, r5, r6, lr}
 80066cc:	0004      	movs	r4, r0
    return HAL_ERROR;
 80066ce:	2001      	movs	r0, #1
  if (htim == NULL)
 80066d0:	2c00      	cmp	r4, #0
 80066d2:	d01d      	beq.n	8006710 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 80066d4:	0025      	movs	r5, r4
 80066d6:	3539      	adds	r5, #57	; 0x39
 80066d8:	782b      	ldrb	r3, [r5, #0]
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80066e0:	0023      	movs	r3, r4
 80066e2:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80066e4:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80066e6:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80066e8:	f7ff ffee 	bl	80066c8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80066ec:	2302      	movs	r3, #2
 80066ee:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	1d21      	adds	r1, r4, #4
 80066f4:	f7ff ffb0 	bl	8006658 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f8:	0022      	movs	r2, r4
 80066fa:	2301      	movs	r3, #1
  return HAL_OK;
 80066fc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066fe:	323e      	adds	r2, #62	; 0x3e
 8006700:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006702:	343d      	adds	r4, #61	; 0x3d
 8006704:	3a04      	subs	r2, #4
 8006706:	7013      	strb	r3, [r2, #0]
 8006708:	7053      	strb	r3, [r2, #1]
 800670a:	7093      	strb	r3, [r2, #2]
 800670c:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800670e:	702b      	strb	r3, [r5, #0]
}
 8006710:	bd70      	pop	{r4, r5, r6, pc}
	...

08006714 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006714:	0002      	movs	r2, r0
{
 8006716:	0003      	movs	r3, r0
    return HAL_ERROR;
 8006718:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800671a:	3239      	adds	r2, #57	; 0x39
 800671c:	7811      	ldrb	r1, [r2, #0]
 800671e:	4281      	cmp	r1, r0
 8006720:	d119      	bne.n	8006756 <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8006722:	2102      	movs	r1, #2
 8006724:	7011      	strb	r1, [r2, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006726:	2280      	movs	r2, #128	; 0x80
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	05d2      	lsls	r2, r2, #23
 800672c:	4293      	cmp	r3, r2
 800672e:	d008      	beq.n	8006742 <HAL_TIM_Base_Start+0x2e>
 8006730:	4a0c      	ldr	r2, [pc, #48]	; (8006764 <HAL_TIM_Base_Start+0x50>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d005      	beq.n	8006742 <HAL_TIM_Base_Start+0x2e>
 8006736:	4a0c      	ldr	r2, [pc, #48]	; (8006768 <HAL_TIM_Base_Start+0x54>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d002      	beq.n	8006742 <HAL_TIM_Base_Start+0x2e>
 800673c:	4a0b      	ldr	r2, [pc, #44]	; (800676c <HAL_TIM_Base_Start+0x58>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10a      	bne.n	8006758 <HAL_TIM_Base_Start+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006742:	2107      	movs	r1, #7
 8006744:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8006746:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006748:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674a:	2a06      	cmp	r2, #6
 800674c:	d003      	beq.n	8006756 <HAL_TIM_Base_Start+0x42>
      __HAL_TIM_ENABLE(htim);
 800674e:	2201      	movs	r2, #1
 8006750:	6819      	ldr	r1, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	601a      	str	r2, [r3, #0]
}
 8006756:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4310      	orrs	r0, r2
 800675c:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800675e:	2000      	movs	r0, #0
 8006760:	e7f9      	b.n	8006756 <HAL_TIM_Base_Start+0x42>
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	40000400 	.word	0x40000400
 8006768:	40010800 	.word	0x40010800
 800676c:	40011400 	.word	0x40011400

08006770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006770:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006772:	0004      	movs	r4, r0
 8006774:	2202      	movs	r2, #2
 8006776:	3438      	adds	r4, #56	; 0x38
 8006778:	7825      	ldrb	r5, [r4, #0]
{
 800677a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800677c:	0010      	movs	r0, r2
 800677e:	2d01      	cmp	r5, #1
 8006780:	d020      	beq.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006782:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006784:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8006786:	3539      	adds	r5, #57	; 0x39
 8006788:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800678e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006790:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006792:	680e      	ldr	r6, [r1, #0]
 8006794:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006796:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006798:	2080      	movs	r0, #128	; 0x80
 800679a:	05c0      	lsls	r0, r0, #23
 800679c:	4283      	cmp	r3, r0
 800679e:	d008      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80067a0:	4809      	ldr	r0, [pc, #36]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80067a2:	4283      	cmp	r3, r0
 80067a4:	d005      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80067a6:	4809      	ldr	r0, [pc, #36]	; (80067cc <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 80067a8:	4283      	cmp	r3, r0
 80067aa:	d002      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80067ac:	4808      	ldr	r0, [pc, #32]	; (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80067ae:	4283      	cmp	r3, r0
 80067b0:	d104      	bne.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067b2:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067b6:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b8:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067bc:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80067be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80067c0:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80067c2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80067c4:	bd70      	pop	{r4, r5, r6, pc}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	40000400 	.word	0x40000400
 80067cc:	40010800 	.word	0x40010800
 80067d0:	40011400 	.word	0x40011400

080067d4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d4:	6803      	ldr	r3, [r0, #0]
 80067d6:	490b      	ldr	r1, [pc, #44]	; (8006804 <UART_EndRxTransfer+0x30>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	400a      	ands	r2, r1
 80067dc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	3123      	adds	r1, #35	; 0x23
 80067e2:	31ff      	adds	r1, #255	; 0xff
 80067e4:	438a      	bics	r2, r1
 80067e6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80067ea:	428a      	cmp	r2, r1
 80067ec:	d103      	bne.n	80067f6 <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	310f      	adds	r1, #15
 80067f2:	438a      	bics	r2, r1
 80067f4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067f6:	2320      	movs	r3, #32
 80067f8:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fa:	2300      	movs	r3, #0
 80067fc:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067fe:	6643      	str	r3, [r0, #100]	; 0x64
}
 8006800:	4770      	bx	lr
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	fffffedf 	.word	0xfffffedf

08006808 <HAL_UART_Transmit_DMA>:
{
 8006808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800680a:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800680c:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 800680e:	0004      	movs	r4, r0
    return HAL_BUSY;
 8006810:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8006812:	2a20      	cmp	r2, #32
 8006814:	d13a      	bne.n	800688c <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 8006816:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8006818:	2900      	cmp	r1, #0
 800681a:	d037      	beq.n	800688c <HAL_UART_Transmit_DMA+0x84>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d035      	beq.n	800688c <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006820:	2280      	movs	r2, #128	; 0x80
 8006822:	68a0      	ldr	r0, [r4, #8]
 8006824:	0152      	lsls	r2, r2, #5
 8006826:	4290      	cmp	r0, r2
 8006828:	d106      	bne.n	8006838 <HAL_UART_Transmit_DMA+0x30>
 800682a:	6922      	ldr	r2, [r4, #16]
 800682c:	2a00      	cmp	r2, #0
 800682e:	d103      	bne.n	8006838 <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006830:	3201      	adds	r2, #1
      return HAL_ERROR;
 8006832:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 8006834:	4211      	tst	r1, r2
 8006836:	d129      	bne.n	800688c <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 8006838:	0025      	movs	r5, r4
 800683a:	3574      	adds	r5, #116	; 0x74
 800683c:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 800683e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006840:	2a01      	cmp	r2, #1
 8006842:	d023      	beq.n	800688c <HAL_UART_Transmit_DMA+0x84>
 8006844:	2201      	movs	r2, #1
 8006846:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 8006848:	0022      	movs	r2, r4
 800684a:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 800684c:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684e:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8006850:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8006852:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006854:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8006856:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006858:	1d27      	adds	r7, r4, #4
 800685a:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800685c:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 800685e:	42b0      	cmp	r0, r6
 8006860:	d015      	beq.n	800688e <HAL_UART_Transmit_DMA+0x86>
 8006862:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8006864:	6386      	str	r6, [r0, #56]	; 0x38
 8006866:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006868:	4a0e      	ldr	r2, [pc, #56]	; (80068a4 <HAL_UART_Transmit_DMA+0x9c>)
 800686a:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800686c:	4a0e      	ldr	r2, [pc, #56]	; (80068a8 <HAL_UART_Transmit_DMA+0xa0>)
 800686e:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006870:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <HAL_UART_Transmit_DMA+0xa4>)
 8006872:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006874:	9a01      	ldr	r2, [sp, #4]
 8006876:	3228      	adds	r2, #40	; 0x28
 8006878:	f7fe fa18 	bl	8004cac <HAL_DMA_Start_IT>
 800687c:	42b0      	cmp	r0, r6
 800687e:	d006      	beq.n	800688e <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006880:	2310      	movs	r3, #16
        return HAL_ERROR;
 8006882:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006884:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8006886:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8006888:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 800688a:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800688c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800688e:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8006890:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006892:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8006894:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006896:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006898:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800689a:	6899      	ldr	r1, [r3, #8]
 800689c:	1892      	adds	r2, r2, r2
 800689e:	430a      	orrs	r2, r1
 80068a0:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80068a2:	e7f3      	b.n	800688c <HAL_UART_Transmit_DMA+0x84>
 80068a4:	080068b1 	.word	0x080068b1
 80068a8:	080068e7 	.word	0x080068e7
 80068ac:	080068f3 	.word	0x080068f3

080068b0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068b0:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80068b2:	681b      	ldr	r3, [r3, #0]
{
 80068b4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	2320      	movs	r3, #32
 80068ba:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80068be:	4019      	ands	r1, r3
 80068c0:	421a      	tst	r2, r3
 80068c2:	d10c      	bne.n	80068de <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 80068c4:	0003      	movs	r3, r0
 80068c6:	3352      	adds	r3, #82	; 0x52
 80068c8:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068ca:	2180      	movs	r1, #128	; 0x80
 80068cc:	6803      	ldr	r3, [r0, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	438a      	bics	r2, r1
 80068d2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068d4:	2240      	movs	r2, #64	; 0x40
 80068d6:	6819      	ldr	r1, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068dc:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80068de:	f7fd fa1f 	bl	8003d20 <HAL_UART_TxCpltCallback>
}
 80068e2:	e7fb      	b.n	80068dc <UART_DMATransmitCplt+0x2c>

080068e4 <HAL_UART_TxHalfCpltCallback>:
 80068e4:	4770      	bx	lr

080068e6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068e6:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80068ea:	f7ff fffb 	bl	80068e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ee:	bd10      	pop	{r4, pc}

080068f0 <HAL_UART_ErrorCallback>:
 80068f0:	4770      	bx	lr

080068f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068f2:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068f4:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80068f6:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80068f8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80068fa:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80068fc:	6898      	ldr	r0, [r3, #8]
 80068fe:	0600      	lsls	r0, r0, #24
 8006900:	d50b      	bpl.n	800691a <UART_DMAError+0x28>
 8006902:	2a21      	cmp	r2, #33	; 0x21
 8006904:	d109      	bne.n	800691a <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006906:	0022      	movs	r2, r4
 8006908:	2000      	movs	r0, #0
 800690a:	3252      	adds	r2, #82	; 0x52
 800690c:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	30c0      	adds	r0, #192	; 0xc0
 8006912:	4382      	bics	r2, r0
 8006914:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006916:	2220      	movs	r2, #32
 8006918:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	065b      	lsls	r3, r3, #25
 800691e:	d508      	bpl.n	8006932 <UART_DMAError+0x40>
 8006920:	2922      	cmp	r1, #34	; 0x22
 8006922:	d106      	bne.n	8006932 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006924:	0023      	movs	r3, r4
 8006926:	2200      	movs	r2, #0
 8006928:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 800692a:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 800692c:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800692e:	f7ff ff51 	bl	80067d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006932:	2310      	movs	r3, #16
 8006934:	1d22      	adds	r2, r4, #4
 8006936:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006938:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800693a:	430b      	orrs	r3, r1
 800693c:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800693e:	f7ff ffd7 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006942:	bd10      	pop	{r4, pc}

08006944 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006944:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	0002      	movs	r2, r0
{
 800694a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800694c:	325a      	adds	r2, #90	; 0x5a
 800694e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8006950:	3a08      	subs	r2, #8
 8006952:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006954:	f7ff ffcc 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006958:	bd10      	pop	{r4, pc}

0800695a <HAL_UARTEx_RxEventCallback>:
}
 800695a:	4770      	bx	lr

0800695c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800695c:	6803      	ldr	r3, [r0, #0]
{
 800695e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006960:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006962:	4a85      	ldr	r2, [pc, #532]	; (8006b78 <HAL_UART_IRQHandler+0x21c>)
{
 8006964:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006966:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006968:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 800696a:	4211      	tst	r1, r2
 800696c:	d10b      	bne.n	8006986 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800696e:	2220      	movs	r2, #32
 8006970:	4211      	tst	r1, r2
 8006972:	d100      	bne.n	8006976 <HAL_UART_IRQHandler+0x1a>
 8006974:	e076      	b.n	8006a64 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006976:	4210      	tst	r0, r2
 8006978:	d100      	bne.n	800697c <HAL_UART_IRQHandler+0x20>
 800697a:	e073      	b.n	8006a64 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 800697c:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 800697e:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8006980:	2b00      	cmp	r3, #0
 8006982:	d165      	bne.n	8006a50 <HAL_UART_IRQHandler+0xf4>
 8006984:	e065      	b.n	8006a52 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006986:	2201      	movs	r2, #1
 8006988:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800698a:	4d7c      	ldr	r5, [pc, #496]	; (8006b7c <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800698c:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800698e:	4005      	ands	r5, r0
 8006990:	433d      	orrs	r5, r7
 8006992:	d067      	beq.n	8006a64 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006994:	1d25      	adds	r5, r4, #4
 8006996:	4211      	tst	r1, r2
 8006998:	d005      	beq.n	80069a6 <HAL_UART_IRQHandler+0x4a>
 800699a:	05c6      	lsls	r6, r0, #23
 800699c:	d503      	bpl.n	80069a6 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800699e:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069a0:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80069a2:	4332      	orrs	r2, r6
 80069a4:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069a6:	2202      	movs	r2, #2
 80069a8:	4211      	tst	r1, r2
 80069aa:	d006      	beq.n	80069ba <HAL_UART_IRQHandler+0x5e>
 80069ac:	2f00      	cmp	r7, #0
 80069ae:	d004      	beq.n	80069ba <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069b0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069b2:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80069b4:	1892      	adds	r2, r2, r2
 80069b6:	4332      	orrs	r2, r6
 80069b8:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069ba:	2204      	movs	r2, #4
 80069bc:	4211      	tst	r1, r2
 80069be:	d006      	beq.n	80069ce <HAL_UART_IRQHandler+0x72>
 80069c0:	2f00      	cmp	r7, #0
 80069c2:	d004      	beq.n	80069ce <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069c4:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069c6:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80069c8:	3a02      	subs	r2, #2
 80069ca:	4332      	orrs	r2, r6
 80069cc:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069ce:	2208      	movs	r2, #8
 80069d0:	4211      	tst	r1, r2
 80069d2:	d007      	beq.n	80069e4 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069d4:	2620      	movs	r6, #32
 80069d6:	4006      	ands	r6, r0
 80069d8:	433e      	orrs	r6, r7
 80069da:	d003      	beq.n	80069e4 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069dc:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069de:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80069e0:	4332      	orrs	r2, r6
 80069e2:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069e4:	2280      	movs	r2, #128	; 0x80
 80069e6:	0112      	lsls	r2, r2, #4
 80069e8:	4211      	tst	r1, r2
 80069ea:	d006      	beq.n	80069fa <HAL_UART_IRQHandler+0x9e>
 80069ec:	0146      	lsls	r6, r0, #5
 80069ee:	d504      	bpl.n	80069fa <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069f2:	2320      	movs	r3, #32
 80069f4:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80069f6:	4313      	orrs	r3, r2
 80069f8:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069fa:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d028      	beq.n	8006a52 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a00:	2320      	movs	r3, #32
 8006a02:	4219      	tst	r1, r3
 8006a04:	d006      	beq.n	8006a14 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a06:	4218      	tst	r0, r3
 8006a08:	d004      	beq.n	8006a14 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8006a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8006a10:	0020      	movs	r0, r4
 8006a12:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a14:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8006a16:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a18:	2740      	movs	r7, #64	; 0x40
 8006a1a:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a1c:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a1e:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a20:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8006a22:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a24:	431e      	orrs	r6, r3
 8006a26:	d019      	beq.n	8006a5c <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8006a28:	f7ff fed4 	bl	80067d4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	423a      	tst	r2, r7
 8006a32:	d00f      	beq.n	8006a54 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a34:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006a36:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a38:	43ba      	bics	r2, r7
 8006a3a:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d009      	beq.n	8006a54 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a40:	4b4f      	ldr	r3, [pc, #316]	; (8006b80 <HAL_UART_IRQHandler+0x224>)
 8006a42:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a44:	f7fe f992 	bl	8004d6c <HAL_DMA_Abort_IT>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d002      	beq.n	8006a52 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a4c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006a4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006a50:	4798      	blx	r3
}
 8006a52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8006a54:	0020      	movs	r0, r4
 8006a56:	f7ff ff4b 	bl	80068f0 <HAL_UART_ErrorCallback>
 8006a5a:	e7fa      	b.n	8006a52 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8006a5c:	f7ff ff48 	bl	80068f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a60:	67ee      	str	r6, [r5, #124]	; 0x7c
 8006a62:	e7f6      	b.n	8006a52 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a64:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006a66:	2d01      	cmp	r5, #1
 8006a68:	d161      	bne.n	8006b2e <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006a6a:	2210      	movs	r2, #16
 8006a6c:	4211      	tst	r1, r2
 8006a6e:	d05e      	beq.n	8006b2e <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006a70:	4210      	tst	r0, r2
 8006a72:	d05c      	beq.n	8006b2e <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a74:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a76:	6899      	ldr	r1, [r3, #8]
 8006a78:	2640      	movs	r6, #64	; 0x40
 8006a7a:	000f      	movs	r7, r1
 8006a7c:	4037      	ands	r7, r6
 8006a7e:	4231      	tst	r1, r6
 8006a80:	d038      	beq.n	8006af4 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a82:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006a84:	680f      	ldr	r7, [r1, #0]
 8006a86:	9100      	str	r1, [sp, #0]
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	d0e0      	beq.n	8006a52 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006a90:	2058      	movs	r0, #88	; 0x58
 8006a92:	4684      	mov	ip, r0
 8006a94:	44a4      	add	ip, r4
 8006a96:	4660      	mov	r0, ip
 8006a98:	8800      	ldrh	r0, [r0, #0]
 8006a9a:	4288      	cmp	r0, r1
 8006a9c:	d9d9      	bls.n	8006a52 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8006a9e:	205a      	movs	r0, #90	; 0x5a
 8006aa0:	4684      	mov	ip, r0
 8006aa2:	44a4      	add	ip, r4
 8006aa4:	4660      	mov	r0, ip
 8006aa6:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006aa8:	683f      	ldr	r7, [r7, #0]
 8006aaa:	2120      	movs	r1, #32
 8006aac:	0038      	movs	r0, r7
 8006aae:	4008      	ands	r0, r1
 8006ab0:	9001      	str	r0, [sp, #4]
 8006ab2:	420f      	tst	r7, r1
 8006ab4:	d112      	bne.n	8006adc <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab6:	681f      	ldr	r7, [r3, #0]
 8006ab8:	4832      	ldr	r0, [pc, #200]	; (8006b84 <HAL_UART_IRQHandler+0x228>)
 8006aba:	4007      	ands	r7, r0
 8006abc:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ac0:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac2:	43af      	bics	r7, r5
 8006ac4:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac6:	689d      	ldr	r5, [r3, #8]
 8006ac8:	43b5      	bics	r5, r6
 8006aca:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8006acc:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	9901      	ldr	r1, [sp, #4]
 8006ad0:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad2:	6819      	ldr	r1, [r3, #0]
 8006ad4:	4391      	bics	r1, r2
 8006ad6:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ad8:	f7fe f928 	bl	8004d2c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006adc:	0023      	movs	r3, r4
 8006ade:	0022      	movs	r2, r4
 8006ae0:	335a      	adds	r3, #90	; 0x5a
 8006ae2:	3258      	adds	r2, #88	; 0x58
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	8811      	ldrh	r1, [r2, #0]
 8006ae8:	1ac9      	subs	r1, r1, r3
 8006aea:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aec:	0020      	movs	r0, r4
 8006aee:	f7ff ff34 	bl	800695a <HAL_UARTEx_RxEventCallback>
 8006af2:	e7ae      	b.n	8006a52 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af4:	0026      	movs	r6, r4
 8006af6:	365a      	adds	r6, #90	; 0x5a
 8006af8:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8006afa:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006afc:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8006afe:	2900      	cmp	r1, #0
 8006b00:	d0a7      	beq.n	8006a52 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b02:	0021      	movs	r1, r4
 8006b04:	3158      	adds	r1, #88	; 0x58
 8006b06:	8809      	ldrh	r1, [r1, #0]
 8006b08:	1a09      	subs	r1, r1, r0
 8006b0a:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d0a0      	beq.n	8006a52 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b10:	6818      	ldr	r0, [r3, #0]
 8006b12:	4e1d      	ldr	r6, [pc, #116]	; (8006b88 <HAL_UART_IRQHandler+0x22c>)
 8006b14:	4030      	ands	r0, r6
 8006b16:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b18:	6898      	ldr	r0, [r3, #8]
 8006b1a:	43a8      	bics	r0, r5
 8006b1c:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	2020      	movs	r0, #32
 8006b20:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b22:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b24:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 8006b26:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b28:	4390      	bics	r0, r2
 8006b2a:	6018      	str	r0, [r3, #0]
 8006b2c:	e7de      	b.n	8006aec <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b2e:	2280      	movs	r2, #128	; 0x80
 8006b30:	0352      	lsls	r2, r2, #13
 8006b32:	4211      	tst	r1, r2
 8006b34:	d006      	beq.n	8006b44 <HAL_UART_IRQHandler+0x1e8>
 8006b36:	0275      	lsls	r5, r6, #9
 8006b38:	d504      	bpl.n	8006b44 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8006b3a:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b3c:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006b3e:	f000 fb55 	bl	80071ec <HAL_UARTEx_WakeupCallback>
    return;
 8006b42:	e786      	b.n	8006a52 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b44:	2280      	movs	r2, #128	; 0x80
 8006b46:	4211      	tst	r1, r2
 8006b48:	d003      	beq.n	8006b52 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b4a:	4210      	tst	r0, r2
 8006b4c:	d001      	beq.n	8006b52 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 8006b4e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006b50:	e715      	b.n	800697e <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b52:	2540      	movs	r5, #64	; 0x40
 8006b54:	4229      	tst	r1, r5
 8006b56:	d100      	bne.n	8006b5a <HAL_UART_IRQHandler+0x1fe>
 8006b58:	e77b      	b.n	8006a52 <HAL_UART_IRQHandler+0xf6>
 8006b5a:	4228      	tst	r0, r5
 8006b5c:	d100      	bne.n	8006b60 <HAL_UART_IRQHandler+0x204>
 8006b5e:	e778      	b.n	8006a52 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b60:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b62:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b64:	43aa      	bics	r2, r5
 8006b66:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b68:	2320      	movs	r3, #32
 8006b6a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8006b70:	f7fd f8d6 	bl	8003d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b74:	e76d      	b.n	8006a52 <HAL_UART_IRQHandler+0xf6>
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	0000080f 	.word	0x0000080f
 8006b7c:	04000120 	.word	0x04000120
 8006b80:	08006945 	.word	0x08006945
 8006b84:	fffffeff 	.word	0xfffffeff
 8006b88:	fffffedf 	.word	0xfffffedf

08006b8c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b8c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	6803      	ldr	r3, [r0, #0]
 8006b92:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b94:	2a22      	cmp	r2, #34	; 0x22
 8006b96:	d134      	bne.n	8006c02 <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 8006b98:	0002      	movs	r2, r0
 8006b9a:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b9e:	8812      	ldrh	r2, [r2, #0]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006ba4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8006ba6:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8006ba8:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8006baa:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8006bac:	3301      	adds	r3, #1
 8006bae:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8006bb0:	8813      	ldrh	r3, [r2, #0]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8006bb8:	8813      	ldrh	r3, [r2, #0]
 8006bba:	b299      	uxth	r1, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d11b      	bne.n	8006bf8 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bc0:	6803      	ldr	r3, [r0, #0]
 8006bc2:	4812      	ldr	r0, [pc, #72]	; (8006c0c <UART_RxISR_8BIT+0x80>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4002      	ands	r2, r0
 8006bc8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	3023      	adds	r0, #35	; 0x23
 8006bce:	30ff      	adds	r0, #255	; 0xff
 8006bd0:	4382      	bics	r2, r0
 8006bd2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd8:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8006bda:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	4282      	cmp	r2, r0
 8006bde:	d10c      	bne.n	8006bfa <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be0:	2110      	movs	r1, #16
 8006be2:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006be4:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be6:	438a      	bics	r2, r1
 8006be8:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bea:	0023      	movs	r3, r4
 8006bec:	3358      	adds	r3, #88	; 0x58
 8006bee:	8819      	ldrh	r1, [r3, #0]
 8006bf0:	f7ff feb3 	bl	800695a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bf8:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8006bfa:	0020      	movs	r0, r4
 8006bfc:	f7fd f898 	bl	8003d30 <HAL_UART_RxCpltCallback>
 8006c00:	e7f8      	b.n	8006bf4 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c02:	2208      	movs	r2, #8
 8006c04:	6999      	ldr	r1, [r3, #24]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	619a      	str	r2, [r3, #24]
}
 8006c0a:	e7f5      	b.n	8006bf8 <UART_RxISR_8BIT+0x6c>
 8006c0c:	fffffedf 	.word	0xfffffedf

08006c10 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c10:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8006c12:	b510      	push	{r4, lr}
 8006c14:	6803      	ldr	r3, [r0, #0]
 8006c16:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c18:	2a22      	cmp	r2, #34	; 0x22
 8006c1a:	d131      	bne.n	8006c80 <UART_RxISR_16BIT+0x70>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c1c:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8006c1e:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c20:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c22:	8800      	ldrh	r0, [r0, #0]
 8006c24:	4001      	ands	r1, r0
 8006c26:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8006c28:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8006c2a:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8006c2c:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8006c2e:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8006c30:	880a      	ldrh	r2, [r1, #0]
 8006c32:	3a01      	subs	r2, #1
 8006c34:	b292      	uxth	r2, r2
 8006c36:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8006c38:	880a      	ldrh	r2, [r1, #0]
 8006c3a:	b291      	uxth	r1, r2
 8006c3c:	2a00      	cmp	r2, #0
 8006c3e:	d11a      	bne.n	8006c76 <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	4812      	ldr	r0, [pc, #72]	; (8006c8c <UART_RxISR_16BIT+0x7c>)
 8006c44:	4002      	ands	r2, r0
 8006c46:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	3023      	adds	r0, #35	; 0x23
 8006c4c:	30ff      	adds	r0, #255	; 0xff
 8006c4e:	4382      	bics	r2, r0
 8006c50:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c52:	2220      	movs	r2, #32
 8006c54:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c56:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8006c58:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c5a:	4282      	cmp	r2, r0
 8006c5c:	d10c      	bne.n	8006c78 <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5e:	2110      	movs	r1, #16
 8006c60:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c62:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c64:	438a      	bics	r2, r1
 8006c66:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c68:	0023      	movs	r3, r4
 8006c6a:	3358      	adds	r3, #88	; 0x58
 8006c6c:	8819      	ldrh	r1, [r3, #0]
 8006c6e:	f7ff fe74 	bl	800695a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c72:	2300      	movs	r3, #0
 8006c74:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c76:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8006c78:	0020      	movs	r0, r4
 8006c7a:	f7fd f859 	bl	8003d30 <HAL_UART_RxCpltCallback>
 8006c7e:	e7f8      	b.n	8006c72 <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c80:	2208      	movs	r2, #8
 8006c82:	6999      	ldr	r1, [r3, #24]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	619a      	str	r2, [r3, #24]
}
 8006c88:	e7f5      	b.n	8006c76 <UART_RxISR_16BIT+0x66>
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	fffffedf 	.word	0xfffffedf

08006c90 <UART_SetConfig>:
{
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c94:	6925      	ldr	r5, [r4, #16]
 8006c96:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c98:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c9a:	4329      	orrs	r1, r5
 8006c9c:	6965      	ldr	r5, [r4, #20]
 8006c9e:	69c3      	ldr	r3, [r0, #28]
 8006ca0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ca2:	6810      	ldr	r0, [r2, #0]
 8006ca4:	4d79      	ldr	r5, [pc, #484]	; (8006e8c <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ca6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ca8:	4028      	ands	r0, r5
 8006caa:	4301      	orrs	r1, r0
 8006cac:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cae:	6851      	ldr	r1, [r2, #4]
 8006cb0:	4877      	ldr	r0, [pc, #476]	; (8006e90 <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cb2:	4d78      	ldr	r5, [pc, #480]	; (8006e94 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb4:	4001      	ands	r1, r0
 8006cb6:	68e0      	ldr	r0, [r4, #12]
 8006cb8:	4301      	orrs	r1, r0
 8006cba:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cbc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cbe:	42aa      	cmp	r2, r5
 8006cc0:	d001      	beq.n	8006cc6 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8006cc2:	6a21      	ldr	r1, [r4, #32]
 8006cc4:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cc6:	6891      	ldr	r1, [r2, #8]
 8006cc8:	4e73      	ldr	r6, [pc, #460]	; (8006e98 <UART_SetConfig+0x208>)
 8006cca:	4031      	ands	r1, r6
 8006ccc:	4301      	orrs	r1, r0
 8006cce:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cd0:	4972      	ldr	r1, [pc, #456]	; (8006e9c <UART_SetConfig+0x20c>)
 8006cd2:	428a      	cmp	r2, r1
 8006cd4:	d10f      	bne.n	8006cf6 <UART_SetConfig+0x66>
 8006cd6:	2103      	movs	r1, #3
 8006cd8:	4a71      	ldr	r2, [pc, #452]	; (8006ea0 <UART_SetConfig+0x210>)
 8006cda:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006cdc:	400a      	ands	r2, r1
 8006cde:	3a01      	subs	r2, #1
 8006ce0:	4970      	ldr	r1, [pc, #448]	; (8006ea4 <UART_SetConfig+0x214>)
 8006ce2:	2a02      	cmp	r2, #2
 8006ce4:	d910      	bls.n	8006d08 <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce6:	2280      	movs	r2, #128	; 0x80
 8006ce8:	0212      	lsls	r2, r2, #8
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d000      	beq.n	8006cf0 <UART_SetConfig+0x60>
 8006cee:	e0a3      	b.n	8006e38 <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf0:	f7fe fe62 	bl	80059b8 <HAL_RCC_GetPCLK2Freq>
 8006cf4:	e0c5      	b.n	8006e82 <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cf6:	496c      	ldr	r1, [pc, #432]	; (8006ea8 <UART_SetConfig+0x218>)
 8006cf8:	428a      	cmp	r2, r1
 8006cfa:	d118      	bne.n	8006d2e <UART_SetConfig+0x9e>
 8006cfc:	200c      	movs	r0, #12
 8006cfe:	4a68      	ldr	r2, [pc, #416]	; (8006ea0 <UART_SetConfig+0x210>)
 8006d00:	4968      	ldr	r1, [pc, #416]	; (8006ea4 <UART_SetConfig+0x214>)
 8006d02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006d04:	3103      	adds	r1, #3
 8006d06:	4002      	ands	r2, r0
 8006d08:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d0a:	2280      	movs	r2, #128	; 0x80
 8006d0c:	0212      	lsls	r2, r2, #8
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d000      	beq.n	8006d14 <UART_SetConfig+0x84>
 8006d12:	e083      	b.n	8006e1c <UART_SetConfig+0x18c>
    switch (clocksource)
 8006d14:	2808      	cmp	r0, #8
 8006d16:	d824      	bhi.n	8006d62 <UART_SetConfig+0xd2>
 8006d18:	f7f9 fa12 	bl	8000140 <__gnu_thumb1_case_shi>
 8006d1c:	ffea00b1 	.word	0xffea00b1
 8006d20:	0023005c 	.word	0x0023005c
 8006d24:	0023007d 	.word	0x0023007d
 8006d28:	00230023 	.word	0x00230023
 8006d2c:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d2e:	495f      	ldr	r1, [pc, #380]	; (8006eac <UART_SetConfig+0x21c>)
 8006d30:	428a      	cmp	r2, r1
 8006d32:	d100      	bne.n	8006d36 <UART_SetConfig+0xa6>
 8006d34:	e09f      	b.n	8006e76 <UART_SetConfig+0x1e6>
 8006d36:	495e      	ldr	r1, [pc, #376]	; (8006eb0 <UART_SetConfig+0x220>)
 8006d38:	428a      	cmp	r2, r1
 8006d3a:	d100      	bne.n	8006d3e <UART_SetConfig+0xae>
 8006d3c:	e09b      	b.n	8006e76 <UART_SetConfig+0x1e6>
 8006d3e:	42aa      	cmp	r2, r5
 8006d40:	d10f      	bne.n	8006d62 <UART_SetConfig+0xd2>
 8006d42:	21c0      	movs	r1, #192	; 0xc0
 8006d44:	2080      	movs	r0, #128	; 0x80
 8006d46:	4a56      	ldr	r2, [pc, #344]	; (8006ea0 <UART_SetConfig+0x210>)
 8006d48:	0109      	lsls	r1, r1, #4
 8006d4a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006d4c:	0100      	lsls	r0, r0, #4
 8006d4e:	400b      	ands	r3, r1
 8006d50:	4283      	cmp	r3, r0
 8006d52:	d016      	beq.n	8006d82 <UART_SetConfig+0xf2>
 8006d54:	d807      	bhi.n	8006d66 <UART_SetConfig+0xd6>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <UART_SetConfig+0xe0>
 8006d5a:	2280      	movs	r2, #128	; 0x80
 8006d5c:	00d2      	lsls	r2, r2, #3
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d035      	beq.n	8006dce <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d62:	2001      	movs	r0, #1
 8006d64:	e009      	b.n	8006d7a <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d66:	428b      	cmp	r3, r1
 8006d68:	d1fb      	bne.n	8006d62 <UART_SetConfig+0xd2>
 8006d6a:	2080      	movs	r0, #128	; 0x80
 8006d6c:	0200      	lsls	r0, r0, #8
 8006d6e:	e012      	b.n	8006d96 <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d70:	f7fe fe12 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d10e      	bne.n	8006d96 <UART_SetConfig+0x106>
 8006d78:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8006d7e:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8006d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d82:	2310      	movs	r3, #16
 8006d84:	6810      	ldr	r0, [r2, #0]
 8006d86:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006d88:	4243      	negs	r3, r0
 8006d8a:	4158      	adcs	r0, r3
 8006d8c:	4b49      	ldr	r3, [pc, #292]	; (8006eb4 <UART_SetConfig+0x224>)
 8006d8e:	4240      	negs	r0, r0
 8006d90:	4018      	ands	r0, r3
 8006d92:	4b49      	ldr	r3, [pc, #292]	; (8006eb8 <UART_SetConfig+0x228>)
 8006d94:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d96:	2203      	movs	r2, #3
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	435a      	muls	r2, r3
 8006d9c:	4282      	cmp	r2, r0
 8006d9e:	d8e0      	bhi.n	8006d62 <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006da0:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006da2:	4282      	cmp	r2, r0
 8006da4:	d3dd      	bcc.n	8006d62 <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006da6:	2700      	movs	r7, #0
 8006da8:	0e02      	lsrs	r2, r0, #24
 8006daa:	0201      	lsls	r1, r0, #8
 8006dac:	085e      	lsrs	r6, r3, #1
 8006dae:	1989      	adds	r1, r1, r6
 8006db0:	417a      	adcs	r2, r7
 8006db2:	0008      	movs	r0, r1
 8006db4:	0011      	movs	r1, r2
 8006db6:	001a      	movs	r2, r3
 8006db8:	003b      	movs	r3, r7
 8006dba:	f7f9 fb89 	bl	80004d0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dbe:	4b3f      	ldr	r3, [pc, #252]	; (8006ebc <UART_SetConfig+0x22c>)
 8006dc0:	18c2      	adds	r2, r0, r3
 8006dc2:	4b3f      	ldr	r3, [pc, #252]	; (8006ec0 <UART_SetConfig+0x230>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d8cc      	bhi.n	8006d62 <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	60d8      	str	r0, [r3, #12]
 8006dcc:	e7d4      	b.n	8006d78 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8006dce:	f7fe fa41 	bl	8005254 <HAL_RCC_GetSysClockFreq>
        break;
 8006dd2:	e7cf      	b.n	8006d74 <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dd4:	4b32      	ldr	r3, [pc, #200]	; (8006ea0 <UART_SetConfig+0x210>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006dd6:	4a38      	ldr	r2, [pc, #224]	; (8006eb8 <UART_SetConfig+0x228>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	2310      	movs	r3, #16
 8006ddc:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006dde:	4243      	negs	r3, r0
 8006de0:	4158      	adcs	r0, r3
 8006de2:	4b34      	ldr	r3, [pc, #208]	; (8006eb4 <UART_SetConfig+0x224>)
 8006de4:	4240      	negs	r0, r0
 8006de6:	4003      	ands	r3, r0
 8006de8:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dea:	0058      	lsls	r0, r3, #1
 8006dec:	6863      	ldr	r3, [r4, #4]
 8006dee:	6861      	ldr	r1, [r4, #4]
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	18c0      	adds	r0, r0, r3
 8006df4:	f7f9 f9b8 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006df8:	4932      	ldr	r1, [pc, #200]	; (8006ec4 <UART_SetConfig+0x234>)
 8006dfa:	b282      	uxth	r2, r0
 8006dfc:	3a10      	subs	r2, #16
 8006dfe:	0403      	lsls	r3, r0, #16
 8006e00:	428a      	cmp	r2, r1
 8006e02:	d8ae      	bhi.n	8006d62 <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e04:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e06:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e08:	4390      	bics	r0, r2
 8006e0a:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8006e0c:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e0e:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8006e10:	4318      	orrs	r0, r3
 8006e12:	60d0      	str	r0, [r2, #12]
 8006e14:	e7b0      	b.n	8006d78 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e16:	f7fe fa1d 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8006e1a:	e032      	b.n	8006e82 <UART_SetConfig+0x1f2>
    switch (clocksource)
 8006e1c:	2808      	cmp	r0, #8
 8006e1e:	d8a0      	bhi.n	8006d62 <UART_SetConfig+0xd2>
 8006e20:	f7f9 f97a 	bl	8000118 <__gnu_thumb1_case_sqi>
 8006e24:	9f0d0a05 	.word	0x9f0d0a05
 8006e28:	9f9f9f23 	.word	0x9f9f9f23
 8006e2c:	26          	.byte	0x26
 8006e2d:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e2e:	f7fe fdb3 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d0a0      	beq.n	8006d78 <UART_SetConfig+0xe8>
 8006e36:	e00d      	b.n	8006e54 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e38:	f7fe fdbe 	bl	80059b8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006e3c:	e7f9      	b.n	8006e32 <UART_SetConfig+0x1a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e3e:	4b18      	ldr	r3, [pc, #96]	; (8006ea0 <UART_SetConfig+0x210>)
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	2310      	movs	r3, #16
 8006e44:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006e46:	4243      	negs	r3, r0
 8006e48:	4158      	adcs	r0, r3
 8006e4a:	4b1a      	ldr	r3, [pc, #104]	; (8006eb4 <UART_SetConfig+0x224>)
 8006e4c:	4240      	negs	r0, r0
 8006e4e:	4018      	ands	r0, r3
 8006e50:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <UART_SetConfig+0x228>)
 8006e52:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	6861      	ldr	r1, [r4, #4]
 8006e58:	085b      	lsrs	r3, r3, #1
 8006e5a:	1818      	adds	r0, r3, r0
 8006e5c:	f7f9 f984 	bl	8000168 <__udivsi3>
 8006e60:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e62:	0002      	movs	r2, r0
 8006e64:	4b17      	ldr	r3, [pc, #92]	; (8006ec4 <UART_SetConfig+0x234>)
 8006e66:	3a10      	subs	r2, #16
 8006e68:	e7ac      	b.n	8006dc4 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6a:	f7fe f9f3 	bl	8005254 <HAL_RCC_GetSysClockFreq>
        break;
 8006e6e:	e7e0      	b.n	8006e32 <UART_SetConfig+0x1a2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e70:	2080      	movs	r0, #128	; 0x80
 8006e72:	0200      	lsls	r0, r0, #8
 8006e74:	e7ee      	b.n	8006e54 <UART_SetConfig+0x1c4>
 8006e76:	2280      	movs	r2, #128	; 0x80
 8006e78:	0212      	lsls	r2, r2, #8
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d1d7      	bne.n	8006e2e <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e7e:	f7fe fd8b 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e82:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8006e84:	d100      	bne.n	8006e88 <UART_SetConfig+0x1f8>
 8006e86:	e777      	b.n	8006d78 <UART_SetConfig+0xe8>
 8006e88:	e7af      	b.n	8006dea <UART_SetConfig+0x15a>
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	efff69f3 	.word	0xefff69f3
 8006e90:	ffffcfff 	.word	0xffffcfff
 8006e94:	40004800 	.word	0x40004800
 8006e98:	fffff4ff 	.word	0xfffff4ff
 8006e9c:	40013800 	.word	0x40013800
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	08012771 	.word	0x08012771
 8006ea8:	40004400 	.word	0x40004400
 8006eac:	40004c00 	.word	0x40004c00
 8006eb0:	40005000 	.word	0x40005000
 8006eb4:	00b71b00 	.word	0x00b71b00
 8006eb8:	003d0900 	.word	0x003d0900
 8006ebc:	fffffd00 	.word	0xfffffd00
 8006ec0:	000ffcff 	.word	0x000ffcff
 8006ec4:	0000ffef 	.word	0x0000ffef

08006ec8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ec8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8006eca:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ecc:	07da      	lsls	r2, r3, #31
 8006ece:	d506      	bpl.n	8006ede <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ed0:	6801      	ldr	r1, [r0, #0]
 8006ed2:	4c28      	ldr	r4, [pc, #160]	; (8006f74 <UART_AdvFeatureConfig+0xac>)
 8006ed4:	684a      	ldr	r2, [r1, #4]
 8006ed6:	4022      	ands	r2, r4
 8006ed8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006eda:	4322      	orrs	r2, r4
 8006edc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ede:	079a      	lsls	r2, r3, #30
 8006ee0:	d506      	bpl.n	8006ef0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ee2:	6801      	ldr	r1, [r0, #0]
 8006ee4:	4c24      	ldr	r4, [pc, #144]	; (8006f78 <UART_AdvFeatureConfig+0xb0>)
 8006ee6:	684a      	ldr	r2, [r1, #4]
 8006ee8:	4022      	ands	r2, r4
 8006eea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006eec:	4322      	orrs	r2, r4
 8006eee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ef0:	075a      	lsls	r2, r3, #29
 8006ef2:	d506      	bpl.n	8006f02 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ef4:	6801      	ldr	r1, [r0, #0]
 8006ef6:	4c21      	ldr	r4, [pc, #132]	; (8006f7c <UART_AdvFeatureConfig+0xb4>)
 8006ef8:	684a      	ldr	r2, [r1, #4]
 8006efa:	4022      	ands	r2, r4
 8006efc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006efe:	4322      	orrs	r2, r4
 8006f00:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f02:	071a      	lsls	r2, r3, #28
 8006f04:	d506      	bpl.n	8006f14 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f06:	6801      	ldr	r1, [r0, #0]
 8006f08:	4c1d      	ldr	r4, [pc, #116]	; (8006f80 <UART_AdvFeatureConfig+0xb8>)
 8006f0a:	684a      	ldr	r2, [r1, #4]
 8006f0c:	4022      	ands	r2, r4
 8006f0e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006f10:	4322      	orrs	r2, r4
 8006f12:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f14:	06da      	lsls	r2, r3, #27
 8006f16:	d506      	bpl.n	8006f26 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f18:	6801      	ldr	r1, [r0, #0]
 8006f1a:	4c1a      	ldr	r4, [pc, #104]	; (8006f84 <UART_AdvFeatureConfig+0xbc>)
 8006f1c:	688a      	ldr	r2, [r1, #8]
 8006f1e:	4022      	ands	r2, r4
 8006f20:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006f22:	4322      	orrs	r2, r4
 8006f24:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f26:	069a      	lsls	r2, r3, #26
 8006f28:	d506      	bpl.n	8006f38 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f2a:	6801      	ldr	r1, [r0, #0]
 8006f2c:	4c16      	ldr	r4, [pc, #88]	; (8006f88 <UART_AdvFeatureConfig+0xc0>)
 8006f2e:	688a      	ldr	r2, [r1, #8]
 8006f30:	4022      	ands	r2, r4
 8006f32:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006f34:	4322      	orrs	r2, r4
 8006f36:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f38:	065a      	lsls	r2, r3, #25
 8006f3a:	d510      	bpl.n	8006f5e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f3c:	6801      	ldr	r1, [r0, #0]
 8006f3e:	4d13      	ldr	r5, [pc, #76]	; (8006f8c <UART_AdvFeatureConfig+0xc4>)
 8006f40:	684a      	ldr	r2, [r1, #4]
 8006f42:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006f44:	402a      	ands	r2, r5
 8006f46:	4322      	orrs	r2, r4
 8006f48:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f4a:	2280      	movs	r2, #128	; 0x80
 8006f4c:	0352      	lsls	r2, r2, #13
 8006f4e:	4294      	cmp	r4, r2
 8006f50:	d105      	bne.n	8006f5e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f52:	684a      	ldr	r2, [r1, #4]
 8006f54:	4c0e      	ldr	r4, [pc, #56]	; (8006f90 <UART_AdvFeatureConfig+0xc8>)
 8006f56:	4022      	ands	r2, r4
 8006f58:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006f5a:	4322      	orrs	r2, r4
 8006f5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f5e:	061b      	lsls	r3, r3, #24
 8006f60:	d506      	bpl.n	8006f70 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f62:	6802      	ldr	r2, [r0, #0]
 8006f64:	490b      	ldr	r1, [pc, #44]	; (8006f94 <UART_AdvFeatureConfig+0xcc>)
 8006f66:	6853      	ldr	r3, [r2, #4]
 8006f68:	400b      	ands	r3, r1
 8006f6a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6053      	str	r3, [r2, #4]
}
 8006f70:	bd30      	pop	{r4, r5, pc}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	fffdffff 	.word	0xfffdffff
 8006f78:	fffeffff 	.word	0xfffeffff
 8006f7c:	fffbffff 	.word	0xfffbffff
 8006f80:	ffff7fff 	.word	0xffff7fff
 8006f84:	ffffefff 	.word	0xffffefff
 8006f88:	ffffdfff 	.word	0xffffdfff
 8006f8c:	ffefffff 	.word	0xffefffff
 8006f90:	ff9fffff 	.word	0xff9fffff
 8006f94:	fff7ffff 	.word	0xfff7ffff

08006f98 <UART_WaitOnFlagUntilTimeout>:
{
 8006f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f9a:	2780      	movs	r7, #128	; 0x80
{
 8006f9c:	0004      	movs	r4, r0
 8006f9e:	000d      	movs	r5, r1
 8006fa0:	0016      	movs	r6, r2
 8006fa2:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fa4:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	69d3      	ldr	r3, [r2, #28]
 8006faa:	402b      	ands	r3, r5
 8006fac:	1b5b      	subs	r3, r3, r5
 8006fae:	4259      	negs	r1, r3
 8006fb0:	414b      	adcs	r3, r1
 8006fb2:	42b3      	cmp	r3, r6
 8006fb4:	d001      	beq.n	8006fba <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	e01c      	b.n	8006ff4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006fba:	9b08      	ldr	r3, [sp, #32]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	d0f3      	beq.n	8006fa8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc0:	f7fc fd42 	bl	8003a48 <HAL_GetTick>
 8006fc4:	9b01      	ldr	r3, [sp, #4]
 8006fc6:	9a08      	ldr	r2, [sp, #32]
 8006fc8:	1ac0      	subs	r0, r0, r3
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	4290      	cmp	r0, r2
 8006fce:	d801      	bhi.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x3c>
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	d110      	bne.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4913      	ldr	r1, [pc, #76]	; (8007024 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8006fd8:	400a      	ands	r2, r1
 8006fda:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	31a3      	adds	r1, #163	; 0xa3
 8006fe0:	31ff      	adds	r1, #255	; 0xff
 8006fe2:	438a      	bics	r2, r1
 8006fe4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006fe6:	2320      	movs	r3, #32
 8006fe8:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fea:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8006fec:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8006fee:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8006ff0:	3474      	adds	r4, #116	; 0x74
 8006ff2:	7023      	strb	r3, [r4, #0]
}
 8006ff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ff6:	2104      	movs	r1, #4
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	420a      	tst	r2, r1
 8006ffc:	d0d3      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ffe:	69da      	ldr	r2, [r3, #28]
 8007000:	423a      	tst	r2, r7
 8007002:	d0d0      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007004:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	4906      	ldr	r1, [pc, #24]	; (8007024 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800700a:	400a      	ands	r2, r1
 800700c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	31a3      	adds	r1, #163	; 0xa3
 8007012:	31ff      	adds	r1, #255	; 0xff
 8007014:	438a      	bics	r2, r1
 8007016:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8007018:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800701a:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 800701c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800701e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007020:	67d3      	str	r3, [r2, #124]	; 0x7c
 8007022:	e7e3      	b.n	8006fec <UART_WaitOnFlagUntilTimeout+0x54>
 8007024:	fffffe5f 	.word	0xfffffe5f

08007028 <UART_CheckIdleState>:
{
 8007028:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702a:	2600      	movs	r6, #0
{
 800702c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702e:	1d03      	adds	r3, r0, #4
 8007030:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8007032:	f7fc fd09 	bl	8003a48 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007036:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007038:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	071b      	lsls	r3, r3, #28
 800703e:	d416      	bmi.n	800706e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	075b      	lsls	r3, r3, #29
 8007046:	d50a      	bpl.n	800705e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007048:	2180      	movs	r1, #128	; 0x80
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <UART_CheckIdleState+0x60>)
 800704c:	2200      	movs	r2, #0
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	0020      	movs	r0, r4
 8007052:	002b      	movs	r3, r5
 8007054:	03c9      	lsls	r1, r1, #15
 8007056:	f7ff ff9f 	bl	8006f98 <UART_WaitOnFlagUntilTimeout>
 800705a:	2800      	cmp	r0, #0
 800705c:	d112      	bne.n	8007084 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800705e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007060:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007062:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007064:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007066:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8007068:	3474      	adds	r4, #116	; 0x74
 800706a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800706c:	e00b      	b.n	8007086 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800706e:	2180      	movs	r1, #128	; 0x80
 8007070:	4b05      	ldr	r3, [pc, #20]	; (8007088 <UART_CheckIdleState+0x60>)
 8007072:	0032      	movs	r2, r6
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	0389      	lsls	r1, r1, #14
 8007078:	0003      	movs	r3, r0
 800707a:	0020      	movs	r0, r4
 800707c:	f7ff ff8c 	bl	8006f98 <UART_WaitOnFlagUntilTimeout>
 8007080:	2800      	cmp	r0, #0
 8007082:	d0dd      	beq.n	8007040 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8007084:	2003      	movs	r0, #3
}
 8007086:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8007088:	01ffffff 	.word	0x01ffffff

0800708c <HAL_UART_Init>:
{
 800708c:	b510      	push	{r4, lr}
 800708e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8007090:	d101      	bne.n	8007096 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8007092:	2001      	movs	r0, #1
}
 8007094:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8007096:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800709c:	0002      	movs	r2, r0
 800709e:	3274      	adds	r2, #116	; 0x74
 80070a0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80070a2:	f7fc fd41 	bl	8003b28 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80070a6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80070a8:	2101      	movs	r1, #1
 80070aa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80070ac:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80070ae:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070b0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80070b2:	438b      	bics	r3, r1
 80070b4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070b6:	f7ff fdeb 	bl	8006c90 <UART_SetConfig>
 80070ba:	2801      	cmp	r0, #1
 80070bc:	d0e9      	beq.n	8007092 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80070c4:	0020      	movs	r0, r4
 80070c6:	f7ff feff 	bl	8006ec8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	4907      	ldr	r1, [pc, #28]	; (80070ec <HAL_UART_Init+0x60>)
 80070ce:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80070d0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070d4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	438a      	bics	r2, r1
 80070dc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80070de:	2201      	movs	r2, #1
 80070e0:	6819      	ldr	r1, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80070e6:	f7ff ff9f 	bl	8007028 <UART_CheckIdleState>
 80070ea:	e7d3      	b.n	8007094 <HAL_UART_Init+0x8>
 80070ec:	ffffb7ff 	.word	0xffffb7ff

080070f0 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80070f0:	0003      	movs	r3, r0
 80070f2:	3358      	adds	r3, #88	; 0x58
{
 80070f4:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 80070f6:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 80070f8:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 80070fa:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80070fc:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 80070fe:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 8007100:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8007102:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8007104:	0164      	lsls	r4, r4, #5
 8007106:	3304      	adds	r3, #4
 8007108:	42a1      	cmp	r1, r4
 800710a:	d124      	bne.n	8007156 <UART_Start_Receive_IT+0x66>
 800710c:	6902      	ldr	r2, [r0, #16]
 800710e:	2a00      	cmp	r2, #0
 8007110:	d11f      	bne.n	8007152 <UART_Start_Receive_IT+0x62>
 8007112:	4a19      	ldr	r2, [pc, #100]	; (8007178 <UART_Start_Receive_IT+0x88>)
 8007114:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007116:	2200      	movs	r2, #0
 8007118:	1d03      	adds	r3, r0, #4
 800711a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800711c:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711e:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007120:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007122:	6894      	ldr	r4, [r2, #8]
 8007124:	3b21      	subs	r3, #33	; 0x21
 8007126:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007128:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712a:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800712c:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007130:	42a1      	cmp	r1, r4
 8007132:	d103      	bne.n	800713c <UART_Start_Receive_IT+0x4c>
 8007134:	6901      	ldr	r1, [r0, #16]
 8007136:	2900      	cmp	r1, #0
 8007138:	d100      	bne.n	800713c <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 800713a:	4b11      	ldr	r3, [pc, #68]	; (8007180 <UART_Start_Receive_IT+0x90>)
 800713c:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800713e:	0003      	movs	r3, r0
 8007140:	2000      	movs	r0, #0
 8007142:	3374      	adds	r3, #116	; 0x74
 8007144:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007146:	2390      	movs	r3, #144	; 0x90
 8007148:	6811      	ldr	r1, [r2, #0]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	430b      	orrs	r3, r1
 800714e:	6013      	str	r3, [r2, #0]
}
 8007150:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8007152:	22ff      	movs	r2, #255	; 0xff
 8007154:	e7de      	b.n	8007114 <UART_Start_Receive_IT+0x24>
 8007156:	2900      	cmp	r1, #0
 8007158:	d104      	bne.n	8007164 <UART_Start_Receive_IT+0x74>
 800715a:	6902      	ldr	r2, [r0, #16]
 800715c:	2a00      	cmp	r2, #0
 800715e:	d0f8      	beq.n	8007152 <UART_Start_Receive_IT+0x62>
 8007160:	227f      	movs	r2, #127	; 0x7f
 8007162:	e7d7      	b.n	8007114 <UART_Start_Receive_IT+0x24>
 8007164:	2480      	movs	r4, #128	; 0x80
 8007166:	0564      	lsls	r4, r4, #21
 8007168:	42a1      	cmp	r1, r4
 800716a:	d1d3      	bne.n	8007114 <UART_Start_Receive_IT+0x24>
 800716c:	6902      	ldr	r2, [r0, #16]
 800716e:	2a00      	cmp	r2, #0
 8007170:	d0f6      	beq.n	8007160 <UART_Start_Receive_IT+0x70>
 8007172:	223f      	movs	r2, #63	; 0x3f
 8007174:	e7ce      	b.n	8007114 <UART_Start_Receive_IT+0x24>
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	000001ff 	.word	0x000001ff
 800717c:	08006b8d 	.word	0x08006b8d
 8007180:	08006c11 	.word	0x08006c11

08007184 <HAL_UART_Receive_IT>:
{
 8007184:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007186:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8007188:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800718a:	2c20      	cmp	r4, #32
 800718c:	d129      	bne.n	80071e2 <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 800718e:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8007190:	2900      	cmp	r1, #0
 8007192:	d026      	beq.n	80071e2 <HAL_UART_Receive_IT+0x5e>
 8007194:	2a00      	cmp	r2, #0
 8007196:	d024      	beq.n	80071e2 <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	6884      	ldr	r4, [r0, #8]
 800719c:	015b      	lsls	r3, r3, #5
 800719e:	429c      	cmp	r4, r3
 80071a0:	d106      	bne.n	80071b0 <HAL_UART_Receive_IT+0x2c>
 80071a2:	6903      	ldr	r3, [r0, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d103      	bne.n	80071b0 <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 80071a8:	2401      	movs	r4, #1
      return HAL_ERROR;
 80071aa:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 80071ac:	4221      	tst	r1, r4
 80071ae:	d118      	bne.n	80071e2 <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 80071b0:	0004      	movs	r4, r0
 80071b2:	3474      	adds	r4, #116	; 0x74
 80071b4:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 80071b6:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 80071b8:	2d01      	cmp	r5, #1
 80071ba:	d012      	beq.n	80071e2 <HAL_UART_Receive_IT+0x5e>
 80071bc:	3b01      	subs	r3, #1
 80071be:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c0:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071c2:	4c09      	ldr	r4, [pc, #36]	; (80071e8 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c4:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071c6:	6803      	ldr	r3, [r0, #0]
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d007      	beq.n	80071dc <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071cc:	685c      	ldr	r4, [r3, #4]
 80071ce:	0224      	lsls	r4, r4, #8
 80071d0:	d504      	bpl.n	80071dc <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071d2:	2480      	movs	r4, #128	; 0x80
 80071d4:	681d      	ldr	r5, [r3, #0]
 80071d6:	04e4      	lsls	r4, r4, #19
 80071d8:	432c      	orrs	r4, r5
 80071da:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80071dc:	f7ff ff88 	bl	80070f0 <UART_Start_Receive_IT>
 80071e0:	0003      	movs	r3, r0
}
 80071e2:	0018      	movs	r0, r3
 80071e4:	bd70      	pop	{r4, r5, r6, pc}
 80071e6:	46c0      	nop			; (mov r8, r8)
 80071e8:	40004800 	.word	0x40004800

080071ec <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071ec:	4770      	bx	lr
	...

080071f0 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80071f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f2:	0005      	movs	r5, r0
{
 80071f4:	9102      	str	r1, [sp, #8]
 80071f6:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 80071f8:	3574      	adds	r5, #116	; 0x74
 80071fa:	782b      	ldrb	r3, [r5, #0]
{
 80071fc:	0004      	movs	r4, r0
 80071fe:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 8007200:	2002      	movs	r0, #2
 8007202:	2b01      	cmp	r3, #1
 8007204:	d030      	beq.n	8007268 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007206:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8007208:	3801      	subs	r0, #1
 800720a:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800720c:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4382      	bics	r2, r0
 8007214:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	4815      	ldr	r0, [pc, #84]	; (8007270 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>)
 800721a:	4002      	ands	r2, r0
 800721c:	430a      	orrs	r2, r1
 800721e:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007220:	2900      	cmp	r1, #0
 8007222:	d10c      	bne.n	800723e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x4e>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007224:	2210      	movs	r2, #16
 8007226:	6859      	ldr	r1, [r3, #4]
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007228:	79b0      	ldrb	r0, [r6, #6]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800722a:	4391      	bics	r1, r2
 800722c:	88b2      	ldrh	r2, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800722e:	0600      	lsls	r0, r0, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007230:	4311      	orrs	r1, r2
 8007232:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	0212      	lsls	r2, r2, #8
 8007238:	0a12      	lsrs	r2, r2, #8
 800723a:	4302      	orrs	r2, r0
 800723c:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 800723e:	2201      	movs	r2, #1
 8007240:	6819      	ldr	r1, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8007246:	f7fc fbff 	bl	8003a48 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800724a:	2180      	movs	r1, #128	; 0x80
 800724c:	4a09      	ldr	r2, [pc, #36]	; (8007274 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
  tickstart = HAL_GetTick();
 800724e:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007250:	9200      	str	r2, [sp, #0]
 8007252:	0020      	movs	r0, r4
 8007254:	2200      	movs	r2, #0
 8007256:	03c9      	lsls	r1, r1, #15
 8007258:	f7ff fe9e 	bl	8006f98 <UART_WaitOnFlagUntilTimeout>
 800725c:	2800      	cmp	r0, #0
 800725e:	d105      	bne.n	800726c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8007260:	2320      	movs	r3, #32
 8007262:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8007264:	2300      	movs	r3, #0
 8007266:	702b      	strb	r3, [r5, #0]
}
 8007268:	b004      	add	sp, #16
 800726a:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIMEOUT;
 800726c:	2003      	movs	r0, #3
 800726e:	e7f9      	b.n	8007264 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
 8007270:	ffcfffff 	.word	0xffcfffff
 8007274:	01ffffff 	.word	0x01ffffff

08007278 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8007278:	0001      	movs	r1, r0
 800727a:	2302      	movs	r3, #2
{
 800727c:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800727e:	3174      	adds	r1, #116	; 0x74
 8007280:	780c      	ldrb	r4, [r1, #0]
{
 8007282:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 8007284:	0018      	movs	r0, r3
 8007286:	2c01      	cmp	r4, #1
 8007288:	d005      	beq.n	8007296 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800728a:	6812      	ldr	r2, [r2, #0]
 800728c:	6810      	ldr	r0, [r2, #0]
 800728e:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 8007290:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007292:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8007294:	7008      	strb	r0, [r1, #0]
}
 8007296:	bd10      	pop	{r4, pc}

08007298 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8007298:	b510      	push	{r4, lr}
 800729a:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800729c:	2210      	movs	r2, #16
 800729e:	2100      	movs	r1, #0
 80072a0:	30f1      	adds	r0, #241	; 0xf1
 80072a2:	f006 f923 	bl	800d4ec <memset1>
    ctx->M_n = 0;
 80072a6:	0023      	movs	r3, r4
 80072a8:	2100      	movs	r1, #0
 80072aa:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80072ac:	22f0      	movs	r2, #240	; 0xf0
 80072ae:	0020      	movs	r0, r4
    ctx->M_n = 0;
 80072b0:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80072b2:	f006 f91b 	bl	800d4ec <memset1>
}
 80072b6:	bd10      	pop	{r4, pc}

080072b8 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80072b8:	b510      	push	{r4, lr}
 80072ba:	0002      	movs	r2, r0
 80072bc:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80072be:	2110      	movs	r1, #16
 80072c0:	f000 f9a0 	bl	8007604 <lorawan_aes_set_key>
}
 80072c4:	bd10      	pop	{r4, pc}

080072c6 <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80072c6:	0003      	movs	r3, r0
{
 80072c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ca:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 80072cc:	33fc      	adds	r3, #252	; 0xfc
 80072ce:	6998      	ldr	r0, [r3, #24]
 80072d0:	1ca3      	adds	r3, r4, #2
{
 80072d2:	b087      	sub	sp, #28
 80072d4:	33ff      	adds	r3, #255	; 0xff
 80072d6:	000e      	movs	r6, r1
 80072d8:	0015      	movs	r5, r2
 80072da:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 80072dc:	2800      	cmp	r0, #0
 80072de:	d036      	beq.n	800734e <AES_CMAC_Update+0x88>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 80072e0:	2710      	movs	r7, #16
 80072e2:	1a3f      	subs	r7, r7, r0
 80072e4:	9700      	str	r7, [sp, #0]
 80072e6:	4297      	cmp	r7, r2
 80072e8:	d900      	bls.n	80072ec <AES_CMAC_Update+0x26>
 80072ea:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80072ec:	466b      	mov	r3, sp
 80072ee:	881a      	ldrh	r2, [r3, #0]
 80072f0:	1ca3      	adds	r3, r4, #2
 80072f2:	33ff      	adds	r3, #255	; 0xff
 80072f4:	0031      	movs	r1, r6
 80072f6:	1818      	adds	r0, r3, r0
 80072f8:	f006 f8e2 	bl	800d4c0 <memcpy1>
        ctx->M_n += mlen;
 80072fc:	0022      	movs	r2, r4
 80072fe:	32fc      	adds	r2, #252	; 0xfc
 8007300:	6991      	ldr	r1, [r2, #24]
 8007302:	9b00      	ldr	r3, [sp, #0]
 8007304:	185b      	adds	r3, r3, r1
 8007306:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 8007308:	2b0f      	cmp	r3, #15
 800730a:	d929      	bls.n	8007360 <AES_CMAC_Update+0x9a>
 800730c:	42af      	cmp	r7, r5
 800730e:	d227      	bcs.n	8007360 <AES_CMAC_Update+0x9a>
 8007310:	0023      	movs	r3, r4
 8007312:	1ca1      	adds	r1, r4, #2
 8007314:	33f1      	adds	r3, #241	; 0xf1
 8007316:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 8007318:	781a      	ldrb	r2, [r3, #0]
 800731a:	7c18      	ldrb	r0, [r3, #16]
 800731c:	4042      	eors	r2, r0
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	3301      	adds	r3, #1
 8007322:	428b      	cmp	r3, r1
 8007324:	d1f8      	bne.n	8007318 <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007326:	0027      	movs	r7, r4
 8007328:	37f1      	adds	r7, #241	; 0xf1
 800732a:	2210      	movs	r2, #16
 800732c:	0039      	movs	r1, r7
 800732e:	a802      	add	r0, sp, #8
 8007330:	f006 f8c6 	bl	800d4c0 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8007334:	a902      	add	r1, sp, #8
 8007336:	0022      	movs	r2, r4
 8007338:	0008      	movs	r0, r1
 800733a:	f000 f9e9 	bl	8007710 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800733e:	2210      	movs	r2, #16
 8007340:	0038      	movs	r0, r7
 8007342:	a902      	add	r1, sp, #8
 8007344:	f006 f8bc 	bl	800d4c0 <memcpy1>

        data += mlen;
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	18f6      	adds	r6, r6, r3
        len -= mlen;
 800734c:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 800734e:	2d10      	cmp	r5, #16
 8007350:	d808      	bhi.n	8007364 <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8007352:	0031      	movs	r1, r6
 8007354:	9801      	ldr	r0, [sp, #4]
 8007356:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 8007358:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 800735a:	f006 f8b1 	bl	800d4c0 <memcpy1>
    ctx->M_n = len;
 800735e:	61a5      	str	r5, [r4, #24]
}
 8007360:	b007      	add	sp, #28
 8007362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007364:	0023      	movs	r3, r4
 8007366:	0032      	movs	r2, r6
 8007368:	1ca0      	adds	r0, r4, #2
 800736a:	33f1      	adds	r3, #241	; 0xf1
 800736c:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 800736e:	7819      	ldrb	r1, [r3, #0]
 8007370:	7817      	ldrb	r7, [r2, #0]
 8007372:	3201      	adds	r2, #1
 8007374:	4079      	eors	r1, r7
 8007376:	7019      	strb	r1, [r3, #0]
 8007378:	3301      	adds	r3, #1
 800737a:	4283      	cmp	r3, r0
 800737c:	d1f7      	bne.n	800736e <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800737e:	0027      	movs	r7, r4
 8007380:	37f1      	adds	r7, #241	; 0xf1
 8007382:	2210      	movs	r2, #16
 8007384:	0039      	movs	r1, r7
 8007386:	a802      	add	r0, sp, #8
 8007388:	f006 f89a 	bl	800d4c0 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800738c:	a902      	add	r1, sp, #8
 800738e:	0022      	movs	r2, r4
 8007390:	0008      	movs	r0, r1
 8007392:	f000 f9bd 	bl	8007710 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8007396:	2210      	movs	r2, #16
 8007398:	0038      	movs	r0, r7
 800739a:	a902      	add	r1, sp, #8
 800739c:	f006 f890 	bl	800d4c0 <memcpy1>
        data += 16;
 80073a0:	3610      	adds	r6, #16
        len -= 16;
 80073a2:	3d10      	subs	r5, #16
 80073a4:	e7d3      	b.n	800734e <AES_CMAC_Update+0x88>

080073a6 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80073a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073a8:	000c      	movs	r4, r1
 80073aa:	b089      	sub	sp, #36	; 0x24
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80073ac:	2210      	movs	r2, #16
 80073ae:	2100      	movs	r1, #0
{
 80073b0:	0005      	movs	r5, r0
    memset1( K, '\0', 16 );
 80073b2:	4668      	mov	r0, sp
 80073b4:	f006 f89a 	bl	800d4ec <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80073b8:	0022      	movs	r2, r4
 80073ba:	4669      	mov	r1, sp
 80073bc:	4668      	mov	r0, sp
 80073be:	f000 f9a7 	bl	8007710 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80073c2:	466b      	mov	r3, sp
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b7f      	cmp	r3, #127	; 0x7f
 80073c8:	d940      	bls.n	800744c <AES_CMAC_Final+0xa6>
 80073ca:	466b      	mov	r3, sp
    {
        LSHIFT( K, K );
 80073cc:	2100      	movs	r1, #0
 80073ce:	781a      	ldrb	r2, [r3, #0]
 80073d0:	7858      	ldrb	r0, [r3, #1]
 80073d2:	0052      	lsls	r2, r2, #1
 80073d4:	09c0      	lsrs	r0, r0, #7
 80073d6:	4302      	orrs	r2, r0
 80073d8:	3101      	adds	r1, #1
 80073da:	701a      	strb	r2, [r3, #0]
 80073dc:	3301      	adds	r3, #1
 80073de:	290f      	cmp	r1, #15
 80073e0:	d1f5      	bne.n	80073ce <AES_CMAC_Final+0x28>
 80073e2:	466b      	mov	r3, sp
 80073e4:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 80073e6:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 80073e8:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 80073ea:	425b      	negs	r3, r3
 80073ec:	4053      	eors	r3, r2
    }
    else
        LSHIFT( K, K );

    if( ctx->M_n == 16 )
 80073ee:	0020      	movs	r0, r4
        LSHIFT( K, K );
 80073f0:	466a      	mov	r2, sp
    if( ctx->M_n == 16 )
 80073f2:	30fc      	adds	r0, #252	; 0xfc
 80073f4:	6986      	ldr	r6, [r0, #24]
        LSHIFT( K, K );
 80073f6:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 80073f8:	2e10      	cmp	r6, #16
 80073fa:	d137      	bne.n	800746c <AES_CMAC_Final+0xc6>
 80073fc:	466a      	mov	r2, sp
 80073fe:	1ca3      	adds	r3, r4, #2
 8007400:	33ff      	adds	r3, #255	; 0xff
 8007402:	3015      	adds	r0, #21
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8007404:	7819      	ldrb	r1, [r3, #0]
 8007406:	7816      	ldrb	r6, [r2, #0]
 8007408:	3201      	adds	r2, #1
 800740a:	4071      	eors	r1, r6
 800740c:	7019      	strb	r1, [r3, #0]
 800740e:	3301      	adds	r3, #1
 8007410:	4298      	cmp	r0, r3
 8007412:	d1f7      	bne.n	8007404 <AES_CMAC_Final+0x5e>
 8007414:	0023      	movs	r3, r4
 8007416:	33f1      	adds	r3, #241	; 0xf1
 8007418:	0019      	movs	r1, r3
 800741a:	1ca0      	adds	r0, r4, #2
 800741c:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 800741e:	781a      	ldrb	r2, [r3, #0]
 8007420:	7c1e      	ldrb	r6, [r3, #16]
 8007422:	4072      	eors	r2, r6
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	4298      	cmp	r0, r3
 800742a:	d1f8      	bne.n	800741e <AES_CMAC_Final+0x78>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800742c:	a804      	add	r0, sp, #16
 800742e:	2210      	movs	r2, #16
 8007430:	f006 f846 	bl	800d4c0 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8007434:	0022      	movs	r2, r4
 8007436:	0029      	movs	r1, r5
 8007438:	a804      	add	r0, sp, #16
 800743a:	f000 f969 	bl	8007710 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800743e:	2210      	movs	r2, #16
 8007440:	2100      	movs	r1, #0
 8007442:	4668      	mov	r0, sp
 8007444:	f006 f852 	bl	800d4ec <memset1>
}
 8007448:	b009      	add	sp, #36	; 0x24
 800744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744c:	466b      	mov	r3, sp
        LSHIFT( K, K );
 800744e:	2100      	movs	r1, #0
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	7858      	ldrb	r0, [r3, #1]
 8007454:	0052      	lsls	r2, r2, #1
 8007456:	09c0      	lsrs	r0, r0, #7
 8007458:	4302      	orrs	r2, r0
 800745a:	3101      	adds	r1, #1
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	3301      	adds	r3, #1
 8007460:	290f      	cmp	r1, #15
 8007462:	d1f5      	bne.n	8007450 <AES_CMAC_Final+0xaa>
 8007464:	466b      	mov	r3, sp
 8007466:	7bdb      	ldrb	r3, [r3, #15]
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	e7c0      	b.n	80073ee <AES_CMAC_Final+0x48>
        if( K[0] & 0x80 )
 800746c:	7813      	ldrb	r3, [r2, #0]
 800746e:	2b7f      	cmp	r3, #127	; 0x7f
 8007470:	d932      	bls.n	80074d8 <AES_CMAC_Final+0x132>
 8007472:	466b      	mov	r3, sp
            LSHIFT( K, K );
 8007474:	2100      	movs	r1, #0
 8007476:	781a      	ldrb	r2, [r3, #0]
 8007478:	785f      	ldrb	r7, [r3, #1]
 800747a:	0052      	lsls	r2, r2, #1
 800747c:	09ff      	lsrs	r7, r7, #7
 800747e:	433a      	orrs	r2, r7
 8007480:	3101      	adds	r1, #1
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	3301      	adds	r3, #1
 8007486:	290f      	cmp	r1, #15
 8007488:	d1f5      	bne.n	8007476 <AES_CMAC_Final+0xd0>
 800748a:	466b      	mov	r3, sp
 800748c:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 800748e:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 8007490:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 8007492:	425b      	negs	r3, r3
 8007494:	4053      	eors	r3, r2
            LSHIFT( K, K );
 8007496:	466a      	mov	r2, sp
 8007498:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 800749a:	2280      	movs	r2, #128	; 0x80
 800749c:	19a3      	adds	r3, r4, r6
 800749e:	33ff      	adds	r3, #255	; 0xff
 80074a0:	1c77      	adds	r7, r6, #1
 80074a2:	709a      	strb	r2, [r3, #2]
        while( ++ctx->M_n < 16 )
 80074a4:	0039      	movs	r1, r7
            ctx->M_last[ctx->M_n] = 0;
 80074a6:	2200      	movs	r2, #0
 80074a8:	1ca3      	adds	r3, r4, #2
 80074aa:	33ff      	adds	r3, #255	; 0xff
        while( ++ctx->M_n < 16 )
 80074ac:	290f      	cmp	r1, #15
 80074ae:	d923      	bls.n	80074f8 <AES_CMAC_Final+0x152>
 80074b0:	2200      	movs	r2, #0
 80074b2:	2f10      	cmp	r7, #16
 80074b4:	d801      	bhi.n	80074ba <AES_CMAC_Final+0x114>
 80074b6:	320f      	adds	r2, #15
 80074b8:	1b92      	subs	r2, r2, r6
 80074ba:	19d2      	adds	r2, r2, r7
 80074bc:	6182      	str	r2, [r0, #24]
 80074be:	0020      	movs	r0, r4
 80074c0:	466a      	mov	r2, sp
 80074c2:	3012      	adds	r0, #18
 80074c4:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 80074c6:	7819      	ldrb	r1, [r3, #0]
 80074c8:	7816      	ldrb	r6, [r2, #0]
 80074ca:	3201      	adds	r2, #1
 80074cc:	4071      	eors	r1, r6
 80074ce:	7019      	strb	r1, [r3, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	4298      	cmp	r0, r3
 80074d4:	d1f7      	bne.n	80074c6 <AES_CMAC_Final+0x120>
 80074d6:	e79d      	b.n	8007414 <AES_CMAC_Final+0x6e>
 80074d8:	466b      	mov	r3, sp
            LSHIFT( K, K );
 80074da:	2100      	movs	r1, #0
 80074dc:	781a      	ldrb	r2, [r3, #0]
 80074de:	785f      	ldrb	r7, [r3, #1]
 80074e0:	0052      	lsls	r2, r2, #1
 80074e2:	09ff      	lsrs	r7, r7, #7
 80074e4:	433a      	orrs	r2, r7
 80074e6:	3101      	adds	r1, #1
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	3301      	adds	r3, #1
 80074ec:	290f      	cmp	r1, #15
 80074ee:	d1f5      	bne.n	80074dc <AES_CMAC_Final+0x136>
 80074f0:	466b      	mov	r3, sp
 80074f2:	7bdb      	ldrb	r3, [r3, #15]
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	e7ce      	b.n	8007496 <AES_CMAC_Final+0xf0>
            ctx->M_last[ctx->M_n] = 0;
 80074f8:	545a      	strb	r2, [r3, r1]
 80074fa:	3101      	adds	r1, #1
 80074fc:	e7d6      	b.n	80074ac <AES_CMAC_Final+0x106>

080074fe <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80074fe:	780a      	ldrb	r2, [r1, #0]
 8007500:	7803      	ldrb	r3, [r0, #0]
 8007502:	4053      	eors	r3, r2
 8007504:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007506:	784a      	ldrb	r2, [r1, #1]
 8007508:	7843      	ldrb	r3, [r0, #1]
 800750a:	4053      	eors	r3, r2
 800750c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800750e:	788a      	ldrb	r2, [r1, #2]
 8007510:	7883      	ldrb	r3, [r0, #2]
 8007512:	4053      	eors	r3, r2
 8007514:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007516:	78ca      	ldrb	r2, [r1, #3]
 8007518:	78c3      	ldrb	r3, [r0, #3]
 800751a:	4053      	eors	r3, r2
 800751c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800751e:	790a      	ldrb	r2, [r1, #4]
 8007520:	7903      	ldrb	r3, [r0, #4]
 8007522:	4053      	eors	r3, r2
 8007524:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007526:	794a      	ldrb	r2, [r1, #5]
 8007528:	7943      	ldrb	r3, [r0, #5]
 800752a:	4053      	eors	r3, r2
 800752c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800752e:	798a      	ldrb	r2, [r1, #6]
 8007530:	7983      	ldrb	r3, [r0, #6]
 8007532:	4053      	eors	r3, r2
 8007534:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007536:	79ca      	ldrb	r2, [r1, #7]
 8007538:	79c3      	ldrb	r3, [r0, #7]
 800753a:	4053      	eors	r3, r2
 800753c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800753e:	7a0a      	ldrb	r2, [r1, #8]
 8007540:	7a03      	ldrb	r3, [r0, #8]
 8007542:	4053      	eors	r3, r2
 8007544:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007546:	7a4a      	ldrb	r2, [r1, #9]
 8007548:	7a43      	ldrb	r3, [r0, #9]
 800754a:	4053      	eors	r3, r2
 800754c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800754e:	7a8a      	ldrb	r2, [r1, #10]
 8007550:	7a83      	ldrb	r3, [r0, #10]
 8007552:	4053      	eors	r3, r2
 8007554:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007556:	7aca      	ldrb	r2, [r1, #11]
 8007558:	7ac3      	ldrb	r3, [r0, #11]
 800755a:	4053      	eors	r3, r2
 800755c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800755e:	7b0a      	ldrb	r2, [r1, #12]
 8007560:	7b03      	ldrb	r3, [r0, #12]
 8007562:	4053      	eors	r3, r2
 8007564:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007566:	7b4a      	ldrb	r2, [r1, #13]
 8007568:	7b43      	ldrb	r3, [r0, #13]
 800756a:	4053      	eors	r3, r2
 800756c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800756e:	7b8a      	ldrb	r2, [r1, #14]
 8007570:	7b83      	ldrb	r3, [r0, #14]
 8007572:	4053      	eors	r3, r2
 8007574:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007576:	7bca      	ldrb	r2, [r1, #15]
 8007578:	7bc3      	ldrb	r3, [r0, #15]
 800757a:	4053      	eors	r3, r2
 800757c:	73c3      	strb	r3, [r0, #15]
#endif
}
 800757e:	4770      	bx	lr

08007580 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8007580:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8007582:	780b      	ldrb	r3, [r1, #0]
 8007584:	7814      	ldrb	r4, [r2, #0]
 8007586:	4063      	eors	r3, r4
 8007588:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800758a:	7854      	ldrb	r4, [r2, #1]
 800758c:	784b      	ldrb	r3, [r1, #1]
 800758e:	4063      	eors	r3, r4
 8007590:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8007592:	7894      	ldrb	r4, [r2, #2]
 8007594:	788b      	ldrb	r3, [r1, #2]
 8007596:	4063      	eors	r3, r4
 8007598:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800759a:	78d4      	ldrb	r4, [r2, #3]
 800759c:	78cb      	ldrb	r3, [r1, #3]
 800759e:	4063      	eors	r3, r4
 80075a0:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80075a2:	7914      	ldrb	r4, [r2, #4]
 80075a4:	790b      	ldrb	r3, [r1, #4]
 80075a6:	4063      	eors	r3, r4
 80075a8:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80075aa:	7954      	ldrb	r4, [r2, #5]
 80075ac:	794b      	ldrb	r3, [r1, #5]
 80075ae:	4063      	eors	r3, r4
 80075b0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80075b2:	7994      	ldrb	r4, [r2, #6]
 80075b4:	798b      	ldrb	r3, [r1, #6]
 80075b6:	4063      	eors	r3, r4
 80075b8:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80075ba:	79d4      	ldrb	r4, [r2, #7]
 80075bc:	79cb      	ldrb	r3, [r1, #7]
 80075be:	4063      	eors	r3, r4
 80075c0:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80075c2:	7a14      	ldrb	r4, [r2, #8]
 80075c4:	7a0b      	ldrb	r3, [r1, #8]
 80075c6:	4063      	eors	r3, r4
 80075c8:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80075ca:	7a4b      	ldrb	r3, [r1, #9]
 80075cc:	7a54      	ldrb	r4, [r2, #9]
 80075ce:	4063      	eors	r3, r4
 80075d0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80075d2:	7a8b      	ldrb	r3, [r1, #10]
 80075d4:	7a94      	ldrb	r4, [r2, #10]
 80075d6:	4063      	eors	r3, r4
 80075d8:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80075da:	7ad4      	ldrb	r4, [r2, #11]
 80075dc:	7acb      	ldrb	r3, [r1, #11]
 80075de:	4063      	eors	r3, r4
 80075e0:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80075e2:	7b14      	ldrb	r4, [r2, #12]
 80075e4:	7b0b      	ldrb	r3, [r1, #12]
 80075e6:	4063      	eors	r3, r4
 80075e8:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80075ea:	7b54      	ldrb	r4, [r2, #13]
 80075ec:	7b4b      	ldrb	r3, [r1, #13]
 80075ee:	4063      	eors	r3, r4
 80075f0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80075f2:	7b94      	ldrb	r4, [r2, #14]
 80075f4:	7b8b      	ldrb	r3, [r1, #14]
 80075f6:	4063      	eors	r3, r4
 80075f8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80075fa:	7bcb      	ldrb	r3, [r1, #15]
 80075fc:	7bd2      	ldrb	r2, [r2, #15]
 80075fe:	4053      	eors	r3, r2
 8007600:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007602:	bd10      	pop	{r4, pc}

08007604 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8007604:	000b      	movs	r3, r1
{
 8007606:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007608:	3b10      	subs	r3, #16
 800760a:	b2db      	uxtb	r3, r3
 800760c:	000e      	movs	r6, r1
 800760e:	0014      	movs	r4, r2
 8007610:	b087      	sub	sp, #28
 8007612:	2b10      	cmp	r3, #16
 8007614:	d805      	bhi.n	8007622 <lorawan_aes_set_key+0x1e>
 8007616:	2201      	movs	r2, #1
 8007618:	409a      	lsls	r2, r3
 800761a:	0013      	movs	r3, r2
 800761c:	4a3a      	ldr	r2, [pc, #232]	; (8007708 <lorawan_aes_set_key+0x104>)
 800761e:	4213      	tst	r3, r2
 8007620:	d105      	bne.n	800762e <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8007622:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8007624:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 8007626:	34f0      	adds	r4, #240	; 0xf0
 8007628:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800762a:	b007      	add	sp, #28
 800762c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 800762e:	2300      	movs	r3, #0
 8007630:	429e      	cmp	r6, r3
 8007632:	d153      	bne.n	80076dc <lorawan_aes_set_key+0xd8>
    hi = (keylen + 28) << 2;
 8007634:	0033      	movs	r3, r6
    ctx->rnd = (hi >> 4) - 1;
 8007636:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 8007638:	331c      	adds	r3, #28
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	b2db      	uxtb	r3, r3
 800763e:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	3b01      	subs	r3, #1
 8007644:	32f0      	adds	r2, #240	; 0xf0
 8007646:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007648:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 800764a:	0035      	movs	r5, r6
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800764c:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 800764e:	1963      	adds	r3, r4, r5
 8007650:	1f1a      	subs	r2, r3, #4
 8007652:	7817      	ldrb	r7, [r2, #0]
        t1 = ctx->ksch[cc - 3];
 8007654:	1eda      	subs	r2, r3, #3
 8007656:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8007658:	0031      	movs	r1, r6
        t1 = ctx->ksch[cc - 3];
 800765a:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 800765c:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 800765e:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 8007660:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 8007662:	781b      	ldrb	r3, [r3, #0]
        if( cc % keylen == 0 )
 8007664:	0028      	movs	r0, r5
        t2 = ctx->ksch[cc - 2];
 8007666:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8007668:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 800766a:	f7f8 fe03 	bl	8000274 <__aeabi_uidivmod>
 800766e:	b2c9      	uxtb	r1, r1
 8007670:	2900      	cmp	r1, #0
 8007672:	d137      	bne.n	80076e4 <lorawan_aes_set_key+0xe0>
            t0 = s_box(t1) ^ rc;
 8007674:	4b25      	ldr	r3, [pc, #148]	; (800770c <lorawan_aes_set_key+0x108>)
 8007676:	9a01      	ldr	r2, [sp, #4]
            t1 = s_box(t2);
 8007678:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 800767a:	5c9a      	ldrb	r2, [r3, r2]
 800767c:	9b04      	ldr	r3, [sp, #16]
 800767e:	405a      	eors	r2, r3
            t1 = s_box(t2);
 8007680:	4b22      	ldr	r3, [pc, #136]	; (800770c <lorawan_aes_set_key+0x108>)
 8007682:	5c5b      	ldrb	r3, [r3, r1]
            t2 = s_box(t3);
 8007684:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 8007686:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8007688:	4b20      	ldr	r3, [pc, #128]	; (800770c <lorawan_aes_set_key+0x108>)
 800768a:	5c5b      	ldrb	r3, [r3, r1]
            rc = f2(rc);
 800768c:	211b      	movs	r1, #27
            t2 = s_box(t3);
 800768e:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 8007690:	4b1e      	ldr	r3, [pc, #120]	; (800770c <lorawan_aes_set_key+0x108>)
 8007692:	5ddb      	ldrb	r3, [r3, r7]
            t0 = s_box(t1) ^ rc;
 8007694:	0017      	movs	r7, r2
            t3 = s_box(tt);
 8007696:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 8007698:	9b04      	ldr	r3, [sp, #16]
 800769a:	09db      	lsrs	r3, r3, #7
 800769c:	434b      	muls	r3, r1
 800769e:	9904      	ldr	r1, [sp, #16]
 80076a0:	0049      	lsls	r1, r1, #1
 80076a2:	404b      	eors	r3, r1
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80076a8:	1bab      	subs	r3, r5, r6
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	5ce2      	ldrb	r2, [r4, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80076ae:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80076b0:	4057      	eors	r7, r2
 80076b2:	5567      	strb	r7, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80076b4:	785a      	ldrb	r2, [r3, #1]
 80076b6:	9801      	ldr	r0, [sp, #4]
 80076b8:	1961      	adds	r1, r4, r5
 80076ba:	4050      	eors	r0, r2
 80076bc:	7048      	strb	r0, [r1, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80076be:	789a      	ldrb	r2, [r3, #2]
 80076c0:	9802      	ldr	r0, [sp, #8]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80076c2:	3504      	adds	r5, #4
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80076c4:	4050      	eors	r0, r2
 80076c6:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80076c8:	78db      	ldrb	r3, [r3, #3]
 80076ca:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80076cc:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80076ce:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80076d0:	9b05      	ldr	r3, [sp, #20]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80076d2:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80076d4:	42ab      	cmp	r3, r5
 80076d6:	d8ba      	bhi.n	800764e <lorawan_aes_set_key+0x4a>
    return 0;
 80076d8:	2000      	movs	r0, #0
 80076da:	e7a6      	b.n	800762a <lorawan_aes_set_key+0x26>
        *d++ = *s++;
 80076dc:	5cc2      	ldrb	r2, [r0, r3]
 80076de:	54e2      	strb	r2, [r4, r3]
 80076e0:	3301      	adds	r3, #1
 80076e2:	e7a5      	b.n	8007630 <lorawan_aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 80076e4:	2e18      	cmp	r6, #24
 80076e6:	d9df      	bls.n	80076a8 <lorawan_aes_set_key+0xa4>
 80076e8:	2910      	cmp	r1, #16
 80076ea:	d1dd      	bne.n	80076a8 <lorawan_aes_set_key+0xa4>
            t1 = s_box(t1);
 80076ec:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 80076ee:	4b07      	ldr	r3, [pc, #28]	; (800770c <lorawan_aes_set_key+0x108>)
 80076f0:	5ddf      	ldrb	r7, [r3, r7]
            t1 = s_box(t1);
 80076f2:	5c9b      	ldrb	r3, [r3, r2]
            t2 = s_box(t2);
 80076f4:	9a02      	ldr	r2, [sp, #8]
            t1 = s_box(t1);
 80076f6:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 80076f8:	4b04      	ldr	r3, [pc, #16]	; (800770c <lorawan_aes_set_key+0x108>)
 80076fa:	5c9b      	ldrb	r3, [r3, r2]
            t3 = s_box(t3);
 80076fc:	9a03      	ldr	r2, [sp, #12]
            t2 = s_box(t2);
 80076fe:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 8007700:	4b02      	ldr	r3, [pc, #8]	; (800770c <lorawan_aes_set_key+0x108>)
 8007702:	5c9b      	ldrb	r3, [r3, r2]
 8007704:	9303      	str	r3, [sp, #12]
 8007706:	e7cf      	b.n	80076a8 <lorawan_aes_set_key+0xa4>
 8007708:	00010101 	.word	0x00010101
 800770c:	08012981 	.word	0x08012981

08007710 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8007710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007712:	b0a5      	sub	sp, #148	; 0x94
 8007714:	0016      	movs	r6, r2
 8007716:	911f      	str	r1, [sp, #124]	; 0x7c
    if( ctx->rnd )
 8007718:	32f0      	adds	r2, #240	; 0xf0
 800771a:	7812      	ldrb	r2, [r2, #0]
{
 800771c:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 800771e:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 8007720:	2a00      	cmp	r2, #0
 8007722:	d100      	bne.n	8007726 <lorawan_aes_encrypt+0x16>
 8007724:	e08a      	b.n	800783c <lorawan_aes_encrypt+0x12c>
        copy_and_key( s1, in, ctx->ksch );
 8007726:	0032      	movs	r2, r6
 8007728:	0019      	movs	r1, r3
 800772a:	a820      	add	r0, sp, #128	; 0x80
 800772c:	f7ff ff28 	bl	8007580 <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007730:	2501      	movs	r5, #1
 8007732:	012a      	lsls	r2, r5, #4
 8007734:	18b3      	adds	r3, r6, r2
 8007736:	469c      	mov	ip, r3
 8007738:	ab20      	add	r3, sp, #128	; 0x80
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	ab20      	add	r3, sp, #128	; 0x80
 8007740:	795b      	ldrb	r3, [r3, #5]
 8007742:	9302      	str	r3, [sp, #8]
 8007744:	ab20      	add	r3, sp, #128	; 0x80
 8007746:	7a9f      	ldrb	r7, [r3, #10]
 8007748:	4b91      	ldr	r3, [pc, #580]	; (8007990 <lorawan_aes_encrypt+0x280>)
 800774a:	5dda      	ldrb	r2, [r3, r7]
 800774c:	9203      	str	r2, [sp, #12]
 800774e:	aa20      	add	r2, sp, #128	; 0x80
 8007750:	7bd2      	ldrb	r2, [r2, #15]
 8007752:	9204      	str	r2, [sp, #16]
 8007754:	5c9a      	ldrb	r2, [r3, r2]
 8007756:	9205      	str	r2, [sp, #20]
 8007758:	9a01      	ldr	r2, [sp, #4]
 800775a:	5c98      	ldrb	r0, [r3, r2]
 800775c:	9a02      	ldr	r2, [sp, #8]
 800775e:	5c9a      	ldrb	r2, [r3, r2]
 8007760:	9206      	str	r2, [sp, #24]
 8007762:	aa20      	add	r2, sp, #128	; 0x80
 8007764:	7912      	ldrb	r2, [r2, #4]
 8007766:	9207      	str	r2, [sp, #28]
 8007768:	aa20      	add	r2, sp, #128	; 0x80
 800776a:	7a52      	ldrb	r2, [r2, #9]
 800776c:	9208      	str	r2, [sp, #32]
 800776e:	aa20      	add	r2, sp, #128	; 0x80
 8007770:	7b92      	ldrb	r2, [r2, #14]
 8007772:	9209      	str	r2, [sp, #36]	; 0x24
 8007774:	5c9a      	ldrb	r2, [r3, r2]
 8007776:	920a      	str	r2, [sp, #40]	; 0x28
 8007778:	aa20      	add	r2, sp, #128	; 0x80
 800777a:	78d2      	ldrb	r2, [r2, #3]
 800777c:	920b      	str	r2, [sp, #44]	; 0x2c
 800777e:	5c9a      	ldrb	r2, [r3, r2]
 8007780:	920c      	str	r2, [sp, #48]	; 0x30
 8007782:	9a07      	ldr	r2, [sp, #28]
 8007784:	5c9a      	ldrb	r2, [r3, r2]
 8007786:	920d      	str	r2, [sp, #52]	; 0x34
 8007788:	9a08      	ldr	r2, [sp, #32]
 800778a:	5c9a      	ldrb	r2, [r3, r2]
 800778c:	920e      	str	r2, [sp, #56]	; 0x38
 800778e:	aa20      	add	r2, sp, #128	; 0x80
 8007790:	7a12      	ldrb	r2, [r2, #8]
 8007792:	920f      	str	r2, [sp, #60]	; 0x3c
 8007794:	aa20      	add	r2, sp, #128	; 0x80
 8007796:	7b52      	ldrb	r2, [r2, #13]
 8007798:	9210      	str	r2, [sp, #64]	; 0x40
 800779a:	aa20      	add	r2, sp, #128	; 0x80
 800779c:	7892      	ldrb	r2, [r2, #2]
 800779e:	9211      	str	r2, [sp, #68]	; 0x44
 80077a0:	5c9a      	ldrb	r2, [r3, r2]
 80077a2:	9212      	str	r2, [sp, #72]	; 0x48
 80077a4:	aa20      	add	r2, sp, #128	; 0x80
 80077a6:	79d2      	ldrb	r2, [r2, #7]
 80077a8:	9213      	str	r2, [sp, #76]	; 0x4c
 80077aa:	5c9a      	ldrb	r2, [r3, r2]
 80077ac:	9214      	str	r2, [sp, #80]	; 0x50
 80077ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077b0:	5c9a      	ldrb	r2, [r3, r2]
 80077b2:	9215      	str	r2, [sp, #84]	; 0x54
 80077b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077b6:	5c9a      	ldrb	r2, [r3, r2]
 80077b8:	9216      	str	r2, [sp, #88]	; 0x58
 80077ba:	aa20      	add	r2, sp, #128	; 0x80
 80077bc:	7b12      	ldrb	r2, [r2, #12]
 80077be:	9217      	str	r2, [sp, #92]	; 0x5c
 80077c0:	aa20      	add	r2, sp, #128	; 0x80
 80077c2:	7852      	ldrb	r2, [r2, #1]
 80077c4:	9218      	str	r2, [sp, #96]	; 0x60
 80077c6:	aa20      	add	r2, sp, #128	; 0x80
 80077c8:	7992      	ldrb	r2, [r2, #6]
 80077ca:	9219      	str	r2, [sp, #100]	; 0x64
 80077cc:	5c9a      	ldrb	r2, [r3, r2]
 80077ce:	921a      	str	r2, [sp, #104]	; 0x68
 80077d0:	aa20      	add	r2, sp, #128	; 0x80
 80077d2:	7ad2      	ldrb	r2, [r2, #11]
 80077d4:	921b      	str	r2, [sp, #108]	; 0x6c
 80077d6:	5c9a      	ldrb	r2, [r3, r2]
 80077d8:	921c      	str	r2, [sp, #112]	; 0x70
 80077da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077dc:	5c9a      	ldrb	r2, [r3, r2]
 80077de:	921d      	str	r2, [sp, #116]	; 0x74
 80077e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077e2:	5c9b      	ldrb	r3, [r3, r2]
 80077e4:	931e      	str	r3, [sp, #120]	; 0x78
 80077e6:	0033      	movs	r3, r6
 80077e8:	33f0      	adds	r3, #240	; 0xf0
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	42ab      	cmp	r3, r5
 80077ee:	d827      	bhi.n	8007840 <lorawan_aes_encrypt+0x130>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80077f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077f2:	ab20      	add	r3, sp, #128	; 0x80
 80077f4:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80077f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80077f8:	7018      	strb	r0, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80077fa:	721a      	strb	r2, [r3, #8]
 80077fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80077fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007800:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007802:	9a06      	ldr	r2, [sp, #24]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007804:	0019      	movs	r1, r3
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007806:	705a      	strb	r2, [r3, #1]
 8007808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800780a:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800780c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800780e:	725a      	strb	r2, [r3, #9]
 8007810:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007812:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007814:	9a03      	ldr	r2, [sp, #12]
 8007816:	709a      	strb	r2, [r3, #2]
 8007818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800781a:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800781c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800781e:	719a      	strb	r2, [r3, #6]
 8007820:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007822:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007824:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007826:	73da      	strb	r2, [r3, #15]
 8007828:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800782a:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800782c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800782e:	71da      	strb	r2, [r3, #7]
 8007830:	9a05      	ldr	r2, [sp, #20]
 8007832:	70da      	strb	r2, [r3, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007834:	4662      	mov	r2, ip
 8007836:	f7ff fea3 	bl	8007580 <copy_and_key>
    return 0;
 800783a:	2000      	movs	r0, #0
}
 800783c:	b025      	add	sp, #148	; 0x94
 800783e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007840:	4b54      	ldr	r3, [pc, #336]	; (8007994 <lorawan_aes_encrypt+0x284>)
 8007842:	9c01      	ldr	r4, [sp, #4]
 8007844:	9905      	ldr	r1, [sp, #20]
 8007846:	9a03      	ldr	r2, [sp, #12]
 8007848:	5d1c      	ldrb	r4, [r3, r4]
 800784a:	404a      	eors	r2, r1
 800784c:	4054      	eors	r4, r2
 800784e:	9902      	ldr	r1, [sp, #8]
 8007850:	4a51      	ldr	r2, [pc, #324]	; (8007998 <lorawan_aes_encrypt+0x288>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007852:	3501      	adds	r5, #1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007854:	5c51      	ldrb	r1, [r2, r1]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007856:	b2ed      	uxtb	r5, r5
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007858:	404c      	eors	r4, r1
 800785a:	a920      	add	r1, sp, #128	; 0x80
 800785c:	700c      	strb	r4, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800785e:	9c02      	ldr	r4, [sp, #8]
 8007860:	9905      	ldr	r1, [sp, #20]
 8007862:	5d1c      	ldrb	r4, [r3, r4]
 8007864:	4041      	eors	r1, r0
 8007866:	4061      	eors	r1, r4
 8007868:	5dd4      	ldrb	r4, [r2, r7]
 800786a:	4061      	eors	r1, r4
 800786c:	ac20      	add	r4, sp, #128	; 0x80
 800786e:	7061      	strb	r1, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007870:	9906      	ldr	r1, [sp, #24]
 8007872:	4048      	eors	r0, r1
 8007874:	5dd9      	ldrb	r1, [r3, r7]
 8007876:	4048      	eors	r0, r1
 8007878:	9904      	ldr	r1, [sp, #16]
 800787a:	5c51      	ldrb	r1, [r2, r1]
 800787c:	4048      	eors	r0, r1
 800787e:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007880:	9903      	ldr	r1, [sp, #12]
 8007882:	9806      	ldr	r0, [sp, #24]
 8007884:	4041      	eors	r1, r0
 8007886:	9801      	ldr	r0, [sp, #4]
 8007888:	5c10      	ldrb	r0, [r2, r0]
 800788a:	4041      	eors	r1, r0
 800788c:	9804      	ldr	r0, [sp, #16]
 800788e:	5c18      	ldrb	r0, [r3, r0]
 8007890:	4041      	eors	r1, r0
 8007892:	70e1      	strb	r1, [r4, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007894:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007896:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007898:	4041      	eors	r1, r0
 800789a:	9807      	ldr	r0, [sp, #28]
 800789c:	5c18      	ldrb	r0, [r3, r0]
 800789e:	4041      	eors	r1, r0
 80078a0:	9808      	ldr	r0, [sp, #32]
 80078a2:	5c10      	ldrb	r0, [r2, r0]
 80078a4:	4041      	eors	r1, r0
 80078a6:	7121      	strb	r1, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80078a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80078aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078ac:	4041      	eors	r1, r0
 80078ae:	9808      	ldr	r0, [sp, #32]
 80078b0:	5c18      	ldrb	r0, [r3, r0]
 80078b2:	4041      	eors	r1, r0
 80078b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078b6:	5c10      	ldrb	r0, [r2, r0]
 80078b8:	4041      	eors	r1, r0
 80078ba:	7161      	strb	r1, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80078bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80078be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80078c0:	4041      	eors	r1, r0
 80078c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078c4:	5c18      	ldrb	r0, [r3, r0]
 80078c6:	4041      	eors	r1, r0
 80078c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80078ca:	5c10      	ldrb	r0, [r2, r0]
 80078cc:	4041      	eors	r1, r0
 80078ce:	71a1      	strb	r1, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80078d0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80078d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078d4:	4041      	eors	r1, r0
 80078d6:	9807      	ldr	r0, [sp, #28]
 80078d8:	5c10      	ldrb	r0, [r2, r0]
 80078da:	4041      	eors	r1, r0
 80078dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80078de:	5c18      	ldrb	r0, [r3, r0]
 80078e0:	4041      	eors	r1, r0
 80078e2:	71e1      	strb	r1, [r4, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80078e4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80078e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80078e8:	4041      	eors	r1, r0
 80078ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80078ec:	5c18      	ldrb	r0, [r3, r0]
 80078ee:	4041      	eors	r1, r0
 80078f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80078f2:	5c10      	ldrb	r0, [r2, r0]
 80078f4:	4041      	eors	r1, r0
 80078f6:	7221      	strb	r1, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80078f8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80078fa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80078fc:	4041      	eors	r1, r0
 80078fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007900:	5c18      	ldrb	r0, [r3, r0]
 8007902:	4041      	eors	r1, r0
 8007904:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007906:	5c10      	ldrb	r0, [r2, r0]
 8007908:	4041      	eors	r1, r0
 800790a:	7261      	strb	r1, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800790c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800790e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007910:	4041      	eors	r1, r0
 8007912:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007914:	5c18      	ldrb	r0, [r3, r0]
 8007916:	4041      	eors	r1, r0
 8007918:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800791a:	5c10      	ldrb	r0, [r2, r0]
 800791c:	4041      	eors	r1, r0
 800791e:	72a1      	strb	r1, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007920:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007922:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007924:	4041      	eors	r1, r0
 8007926:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007928:	5c10      	ldrb	r0, [r2, r0]
 800792a:	4041      	eors	r1, r0
 800792c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800792e:	5c18      	ldrb	r0, [r3, r0]
 8007930:	4041      	eors	r1, r0
 8007932:	72e1      	strb	r1, [r4, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007934:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007936:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007938:	4041      	eors	r1, r0
 800793a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800793c:	5c18      	ldrb	r0, [r3, r0]
 800793e:	4041      	eors	r1, r0
 8007940:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007942:	5c10      	ldrb	r0, [r2, r0]
 8007944:	4041      	eors	r1, r0
 8007946:	7321      	strb	r1, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8007948:	981d      	ldr	r0, [sp, #116]	; 0x74
 800794a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800794c:	4041      	eors	r1, r0
 800794e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007950:	5c18      	ldrb	r0, [r3, r0]
 8007952:	4041      	eors	r1, r0
 8007954:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007956:	5c10      	ldrb	r0, [r2, r0]
 8007958:	4041      	eors	r1, r0
 800795a:	7361      	strb	r1, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800795c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800795e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007960:	4041      	eors	r1, r0
 8007962:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007964:	5c18      	ldrb	r0, [r3, r0]
 8007966:	4041      	eors	r1, r0
 8007968:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800796a:	5c10      	ldrb	r0, [r2, r0]
 800796c:	4041      	eors	r1, r0
 800796e:	73a1      	strb	r1, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007970:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007972:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007974:	4041      	eors	r1, r0
 8007976:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007978:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 800797a:	0020      	movs	r0, r4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800797c:	404a      	eors	r2, r1
 800797e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007980:	5c5b      	ldrb	r3, [r3, r1]
    xor_block(d, k);
 8007982:	4661      	mov	r1, ip
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007984:	4053      	eors	r3, r2
 8007986:	73e3      	strb	r3, [r4, #15]
    xor_block(d, k);
 8007988:	f7ff fdb9 	bl	80074fe <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800798c:	e6d1      	b.n	8007732 <lorawan_aes_encrypt+0x22>
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	08012981 	.word	0x08012981
 8007994:	08012881 	.word	0x08012881
 8007998:	08012781 	.word	0x08012781

0800799c <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800799c:	4a09      	ldr	r2, [pc, #36]	; (80079c4 <GetKeyByID+0x28>)
{
 800799e:	b530      	push	{r4, r5, lr}
 80079a0:	2300      	movs	r3, #0
 80079a2:	0014      	movs	r4, r2
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 80079a4:	7c15      	ldrb	r5, [r2, #16]
 80079a6:	4285      	cmp	r5, r0
 80079a8:	d106      	bne.n	80079b8 <GetKeyByID+0x1c>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 80079aa:	2211      	movs	r2, #17
      return SECURE_ELEMENT_SUCCESS;
 80079ac:	2000      	movs	r0, #0
      *keyItem = &(SeNvmCtx.KeyList[i]);
 80079ae:	4353      	muls	r3, r2
 80079b0:	3310      	adds	r3, #16
 80079b2:	18e3      	adds	r3, r4, r3
 80079b4:	600b      	str	r3, [r1, #0]
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}
 80079b6:	bd30      	pop	{r4, r5, pc}
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80079b8:	3301      	adds	r3, #1
 80079ba:	3211      	adds	r2, #17
 80079bc:	2b0a      	cmp	r3, #10
 80079be:	d1f1      	bne.n	80079a4 <GetKeyByID+0x8>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80079c0:	2003      	movs	r0, #3
 80079c2:	e7f8      	b.n	80079b6 <GetKeyByID+0x1a>
 80079c4:	20000050 	.word	0x20000050

080079c8 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
  return;
}
 80079c8:	4770      	bx	lr

080079ca <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 80079ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079cc:	b0cf      	sub	sp, #316	; 0x13c
 80079ce:	0006      	movs	r6, r0
 80079d0:	000d      	movs	r5, r1
 80079d2:	0017      	movs	r7, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if ((buffer == NULL) || (cmac == NULL))
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80079d4:	2402      	movs	r4, #2
{
 80079d6:	9301      	str	r3, [sp, #4]
  if ((buffer == NULL) || (cmac == NULL))
 80079d8:	2900      	cmp	r1, #0
 80079da:	d023      	beq.n	8007a24 <ComputeCmac+0x5a>
 80079dc:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d020      	beq.n	8007a24 <ComputeCmac+0x5a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 80079e2:	a808      	add	r0, sp, #32
 80079e4:	f7ff fc58 	bl	8007298 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 80079e8:	9801      	ldr	r0, [sp, #4]
 80079ea:	a903      	add	r1, sp, #12
 80079ec:	f7ff ffd6 	bl	800799c <GetKeyByID>
 80079f0:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 80079f2:	d117      	bne.n	8007a24 <ComputeCmac+0x5a>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 80079f4:	9b03      	ldr	r3, [sp, #12]
 80079f6:	a808      	add	r0, sp, #32
 80079f8:	1c59      	adds	r1, r3, #1
 80079fa:	f7ff fc5d 	bl	80072b8 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 80079fe:	2e00      	cmp	r6, #0
 8007a00:	d004      	beq.n	8007a0c <ComputeCmac+0x42>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 8007a02:	2210      	movs	r2, #16
 8007a04:	0031      	movs	r1, r6
 8007a06:	a808      	add	r0, sp, #32
 8007a08:	f7ff fc5d 	bl	80072c6 <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 8007a0c:	003a      	movs	r2, r7
 8007a0e:	0029      	movs	r1, r5
 8007a10:	a808      	add	r0, sp, #32
 8007a12:	f7ff fc58 	bl	80072c6 <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 8007a16:	a908      	add	r1, sp, #32
 8007a18:	a804      	add	r0, sp, #16
 8007a1a:	f7ff fcc4 	bl	80073a6 <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 8007a1e:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8007a20:	9a04      	ldr	r2, [sp, #16]
 8007a22:	601a      	str	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 8007a24:	0020      	movs	r0, r4
 8007a26:	b04f      	add	sp, #316	; 0x13c
 8007a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007a2c <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 8007a2c:	b530      	push	{r4, r5, lr}
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8007a2e:	22aa      	movs	r2, #170	; 0xaa
{
 8007a30:	b093      	sub	sp, #76	; 0x4c
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8007a32:	4966      	ldr	r1, [pc, #408]	; (8007bcc <SecureElementInit+0x1a0>)
{
 8007a34:	0004      	movs	r4, r0
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8007a36:	4866      	ldr	r0, [pc, #408]	; (8007bd0 <SecureElementInit+0x1a4>)
 8007a38:	f005 fd42 	bl	800d4c0 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 8007a3c:	a911      	add	r1, sp, #68	; 0x44
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f7ff ffac 	bl	800799c <GetKeyByID>
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8007a44:	2200      	movs	r2, #0
  retval = GetKeyByID(APP_KEY, &keyItem);
 8007a46:	0005      	movs	r5, r0
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8007a48:	0011      	movs	r1, r2
 8007a4a:	2002      	movs	r0, #2
 8007a4c:	4b61      	ldr	r3, [pc, #388]	; (8007bd4 <SecureElementInit+0x1a8>)
 8007a4e:	f007 f8e7 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 8007a52:	2d00      	cmp	r5, #0
 8007a54:	d126      	bne.n	8007aa4 <SecureElementInit+0x78>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8007a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a58:	0029      	movs	r1, r5
 8007a5a:	7c1a      	ldrb	r2, [r3, #16]
 8007a5c:	2002      	movs	r0, #2
 8007a5e:	920f      	str	r2, [sp, #60]	; 0x3c
 8007a60:	7bda      	ldrb	r2, [r3, #15]
 8007a62:	920e      	str	r2, [sp, #56]	; 0x38
 8007a64:	7b9a      	ldrb	r2, [r3, #14]
 8007a66:	920d      	str	r2, [sp, #52]	; 0x34
 8007a68:	7b5a      	ldrb	r2, [r3, #13]
 8007a6a:	920c      	str	r2, [sp, #48]	; 0x30
 8007a6c:	7b1a      	ldrb	r2, [r3, #12]
 8007a6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a70:	7ada      	ldrb	r2, [r3, #11]
 8007a72:	920a      	str	r2, [sp, #40]	; 0x28
 8007a74:	7a9a      	ldrb	r2, [r3, #10]
 8007a76:	9209      	str	r2, [sp, #36]	; 0x24
 8007a78:	7a5a      	ldrb	r2, [r3, #9]
 8007a7a:	9208      	str	r2, [sp, #32]
 8007a7c:	7a1a      	ldrb	r2, [r3, #8]
 8007a7e:	9207      	str	r2, [sp, #28]
 8007a80:	79da      	ldrb	r2, [r3, #7]
 8007a82:	9206      	str	r2, [sp, #24]
 8007a84:	799a      	ldrb	r2, [r3, #6]
 8007a86:	9205      	str	r2, [sp, #20]
 8007a88:	795a      	ldrb	r2, [r3, #5]
 8007a8a:	9204      	str	r2, [sp, #16]
 8007a8c:	791a      	ldrb	r2, [r3, #4]
 8007a8e:	9203      	str	r2, [sp, #12]
 8007a90:	78da      	ldrb	r2, [r3, #3]
 8007a92:	9202      	str	r2, [sp, #8]
 8007a94:	789a      	ldrb	r2, [r3, #2]
 8007a96:	9201      	str	r2, [sp, #4]
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	002a      	movs	r2, r5
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	4b4e      	ldr	r3, [pc, #312]	; (8007bd8 <SecureElementInit+0x1ac>)
 8007aa0:	f007 f8be 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 8007aa4:	a911      	add	r1, sp, #68	; 0x44
 8007aa6:	2001      	movs	r0, #1
 8007aa8:	f7ff ff78 	bl	800799c <GetKeyByID>
 8007aac:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 8007aae:	d125      	bne.n	8007afc <SecureElementInit+0xd0>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8007ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ab2:	7c1a      	ldrb	r2, [r3, #16]
 8007ab4:	920f      	str	r2, [sp, #60]	; 0x3c
 8007ab6:	7bda      	ldrb	r2, [r3, #15]
 8007ab8:	920e      	str	r2, [sp, #56]	; 0x38
 8007aba:	7b9a      	ldrb	r2, [r3, #14]
 8007abc:	920d      	str	r2, [sp, #52]	; 0x34
 8007abe:	7b5a      	ldrb	r2, [r3, #13]
 8007ac0:	920c      	str	r2, [sp, #48]	; 0x30
 8007ac2:	7b1a      	ldrb	r2, [r3, #12]
 8007ac4:	920b      	str	r2, [sp, #44]	; 0x2c
 8007ac6:	7ada      	ldrb	r2, [r3, #11]
 8007ac8:	920a      	str	r2, [sp, #40]	; 0x28
 8007aca:	7a9a      	ldrb	r2, [r3, #10]
 8007acc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ace:	7a5a      	ldrb	r2, [r3, #9]
 8007ad0:	9208      	str	r2, [sp, #32]
 8007ad2:	7a1a      	ldrb	r2, [r3, #8]
 8007ad4:	9207      	str	r2, [sp, #28]
 8007ad6:	79da      	ldrb	r2, [r3, #7]
 8007ad8:	9206      	str	r2, [sp, #24]
 8007ada:	799a      	ldrb	r2, [r3, #6]
 8007adc:	9205      	str	r2, [sp, #20]
 8007ade:	795a      	ldrb	r2, [r3, #5]
 8007ae0:	9204      	str	r2, [sp, #16]
 8007ae2:	791a      	ldrb	r2, [r3, #4]
 8007ae4:	9203      	str	r2, [sp, #12]
 8007ae6:	78da      	ldrb	r2, [r3, #3]
 8007ae8:	9202      	str	r2, [sp, #8]
 8007aea:	789a      	ldrb	r2, [r3, #2]
 8007aec:	9201      	str	r2, [sp, #4]
 8007aee:	785b      	ldrb	r3, [r3, #1]
 8007af0:	0002      	movs	r2, r0
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2002      	movs	r0, #2
 8007af6:	4b39      	ldr	r3, [pc, #228]	; (8007bdc <SecureElementInit+0x1b0>)
 8007af8:	f007 f892 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8007afc:	2200      	movs	r2, #0
 8007afe:	4b38      	ldr	r3, [pc, #224]	; (8007be0 <SecureElementInit+0x1b4>)
 8007b00:	0011      	movs	r1, r2
 8007b02:	2002      	movs	r0, #2
 8007b04:	f007 f88c 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 8007b08:	a911      	add	r1, sp, #68	; 0x44
 8007b0a:	2003      	movs	r0, #3
 8007b0c:	f7ff ff46 	bl	800799c <GetKeyByID>
 8007b10:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 8007b12:	d125      	bne.n	8007b60 <SecureElementInit+0x134>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8007b14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b16:	7c1a      	ldrb	r2, [r3, #16]
 8007b18:	920f      	str	r2, [sp, #60]	; 0x3c
 8007b1a:	7bda      	ldrb	r2, [r3, #15]
 8007b1c:	920e      	str	r2, [sp, #56]	; 0x38
 8007b1e:	7b9a      	ldrb	r2, [r3, #14]
 8007b20:	920d      	str	r2, [sp, #52]	; 0x34
 8007b22:	7b5a      	ldrb	r2, [r3, #13]
 8007b24:	920c      	str	r2, [sp, #48]	; 0x30
 8007b26:	7b1a      	ldrb	r2, [r3, #12]
 8007b28:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b2a:	7ada      	ldrb	r2, [r3, #11]
 8007b2c:	920a      	str	r2, [sp, #40]	; 0x28
 8007b2e:	7a9a      	ldrb	r2, [r3, #10]
 8007b30:	9209      	str	r2, [sp, #36]	; 0x24
 8007b32:	7a5a      	ldrb	r2, [r3, #9]
 8007b34:	9208      	str	r2, [sp, #32]
 8007b36:	7a1a      	ldrb	r2, [r3, #8]
 8007b38:	9207      	str	r2, [sp, #28]
 8007b3a:	79da      	ldrb	r2, [r3, #7]
 8007b3c:	9206      	str	r2, [sp, #24]
 8007b3e:	799a      	ldrb	r2, [r3, #6]
 8007b40:	9205      	str	r2, [sp, #20]
 8007b42:	795a      	ldrb	r2, [r3, #5]
 8007b44:	9204      	str	r2, [sp, #16]
 8007b46:	791a      	ldrb	r2, [r3, #4]
 8007b48:	9203      	str	r2, [sp, #12]
 8007b4a:	78da      	ldrb	r2, [r3, #3]
 8007b4c:	9202      	str	r2, [sp, #8]
 8007b4e:	789a      	ldrb	r2, [r3, #2]
 8007b50:	9201      	str	r2, [sp, #4]
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	0002      	movs	r2, r0
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	2002      	movs	r0, #2
 8007b5a:	4b22      	ldr	r3, [pc, #136]	; (8007be4 <SecureElementInit+0x1b8>)
 8007b5c:	f007 f860 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 8007b60:	a911      	add	r1, sp, #68	; 0x44
 8007b62:	2002      	movs	r0, #2
 8007b64:	f7ff ff1a 	bl	800799c <GetKeyByID>
 8007b68:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 8007b6a:	d125      	bne.n	8007bb8 <SecureElementInit+0x18c>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8007b6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b6e:	7c1a      	ldrb	r2, [r3, #16]
 8007b70:	920f      	str	r2, [sp, #60]	; 0x3c
 8007b72:	7bda      	ldrb	r2, [r3, #15]
 8007b74:	920e      	str	r2, [sp, #56]	; 0x38
 8007b76:	7b9a      	ldrb	r2, [r3, #14]
 8007b78:	920d      	str	r2, [sp, #52]	; 0x34
 8007b7a:	7b5a      	ldrb	r2, [r3, #13]
 8007b7c:	920c      	str	r2, [sp, #48]	; 0x30
 8007b7e:	7b1a      	ldrb	r2, [r3, #12]
 8007b80:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b82:	7ada      	ldrb	r2, [r3, #11]
 8007b84:	920a      	str	r2, [sp, #40]	; 0x28
 8007b86:	7a9a      	ldrb	r2, [r3, #10]
 8007b88:	9209      	str	r2, [sp, #36]	; 0x24
 8007b8a:	7a5a      	ldrb	r2, [r3, #9]
 8007b8c:	9208      	str	r2, [sp, #32]
 8007b8e:	7a1a      	ldrb	r2, [r3, #8]
 8007b90:	9207      	str	r2, [sp, #28]
 8007b92:	79da      	ldrb	r2, [r3, #7]
 8007b94:	9206      	str	r2, [sp, #24]
 8007b96:	799a      	ldrb	r2, [r3, #6]
 8007b98:	9205      	str	r2, [sp, #20]
 8007b9a:	795a      	ldrb	r2, [r3, #5]
 8007b9c:	9204      	str	r2, [sp, #16]
 8007b9e:	791a      	ldrb	r2, [r3, #4]
 8007ba0:	9203      	str	r2, [sp, #12]
 8007ba2:	78da      	ldrb	r2, [r3, #3]
 8007ba4:	9202      	str	r2, [sp, #8]
 8007ba6:	789a      	ldrb	r2, [r3, #2]
 8007ba8:	9201      	str	r2, [sp, #4]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	0002      	movs	r2, r0
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	2002      	movs	r0, #2
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <SecureElementInit+0x1bc>)
 8007bb4:	f007 f834 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 8007bb8:	2c00      	cmp	r4, #0
 8007bba:	d100      	bne.n	8007bbe <SecureElementInit+0x192>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 8007bbc:	4c0b      	ldr	r4, [pc, #44]	; (8007bec <SecureElementInit+0x1c0>)
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <SecureElementInit+0x1c4>)
 8007bc0:	601c      	str	r4, [r3, #0]
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 8007bc2:	47a0      	blx	r4

  return SECURE_ELEMENT_SUCCESS;
}
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	b013      	add	sp, #76	; 0x4c
 8007bc8:	bd30      	pop	{r4, r5, pc}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	08012a81 	.word	0x08012a81
 8007bd0:	20000060 	.word	0x20000060
 8007bd4:	0801306b 	.word	0x0801306b
 8007bd8:	08013080 	.word	0x08013080
 8007bdc:	080130e2 	.word	0x080130e2
 8007be0:	08013144 	.word	0x08013144
 8007be4:	08013159 	.word	0x08013159
 8007be8:	080131bb 	.word	0x080131bb
 8007bec:	080079c9 	.word	0x080079c9
 8007bf0:	20000490 	.word	0x20000490

08007bf4 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 8007bf4:	0001      	movs	r1, r0
 8007bf6:	b510      	push	{r4, lr}
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
    return SECURE_ELEMENT_SUCCESS;
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007bf8:	2002      	movs	r0, #2
  if (seNvmCtx != 0)
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	d004      	beq.n	8007c08 <SecureElementRestoreNvmCtx+0x14>
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 8007bfe:	4803      	ldr	r0, [pc, #12]	; (8007c0c <SecureElementRestoreNvmCtx+0x18>)
 8007c00:	22ba      	movs	r2, #186	; 0xba
 8007c02:	f005 fc5d 	bl	800d4c0 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8007c06:	2000      	movs	r0, #0
  }
}
 8007c08:	bd10      	pop	{r4, pc}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	20000050 	.word	0x20000050

08007c10 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
  *seNvmCtxSize = sizeof(SeNvmCtx);
 8007c10:	23ba      	movs	r3, #186	; 0xba
 8007c12:	6003      	str	r3, [r0, #0]
  return &SeNvmCtx;
}
 8007c14:	4800      	ldr	r0, [pc, #0]	; (8007c18 <SecureElementGetNvmCtx+0x8>)
 8007c16:	4770      	bx	lr
 8007c18:	20000050 	.word	0x20000050

08007c1c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 8007c1c:	b513      	push	{r0, r1, r4, lr}
 8007c1e:	0004      	movs	r4, r0
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007c20:	2003      	movs	r0, #3
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 8007c22:	2b7e      	cmp	r3, #126	; 0x7e
 8007c24:	d804      	bhi.n	8007c30 <SecureElementComputeAesCmac+0x14>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 8007c26:	9804      	ldr	r0, [sp, #16]
 8007c28:	9000      	str	r0, [sp, #0]
 8007c2a:	0020      	movs	r0, r4
 8007c2c:	f7ff fecd 	bl	80079ca <ComputeCmac>
}
 8007c30:	bd16      	pop	{r1, r2, r4, pc}

08007c32 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 8007c32:	b530      	push	{r4, r5, lr}
 8007c34:	0004      	movs	r4, r0
 8007c36:	0015      	movs	r5, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007c38:	2002      	movs	r0, #2
{
 8007c3a:	b085      	sub	sp, #20
  if (buffer == NULL)
 8007c3c:	2c00      	cmp	r4, #0
 8007c3e:	d00e      	beq.n	8007c5e <SecureElementVerifyAesCmac+0x2c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 8007c40:	2000      	movs	r0, #0

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 8007c42:	aa03      	add	r2, sp, #12
 8007c44:	9200      	str	r2, [sp, #0]
 8007c46:	000a      	movs	r2, r1
 8007c48:	0021      	movs	r1, r4
  uint32_t compCmac = 0;
 8007c4a:	9003      	str	r0, [sp, #12]
  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 8007c4c:	f7ff febd 	bl	80079ca <ComputeCmac>
  if (retval != SECURE_ELEMENT_SUCCESS)
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d104      	bne.n	8007c5e <SecureElementVerifyAesCmac+0x2c>
  {
    return retval;
  }

  if (expectedCmac != compCmac)
 8007c54:	9b03      	ldr	r3, [sp, #12]
 8007c56:	1b58      	subs	r0, r3, r5
 8007c58:	1e42      	subs	r2, r0, #1
 8007c5a:	4190      	sbcs	r0, r2
    return SECURE_ELEMENT_ERROR_NPE;
 8007c5c:	b2c0      	uxtb	r0, r0
  }

#endif /* LORAWAN_KMS */

  return retval;
}
 8007c5e:	b005      	add	sp, #20
 8007c60:	bd30      	pop	{r4, r5, pc}

08007c62 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 8007c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c64:	b0c1      	sub	sp, #260	; 0x104
 8007c66:	000e      	movs	r6, r1
 8007c68:	0015      	movs	r5, r2
 8007c6a:	001f      	movs	r7, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL || encBuffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007c6c:	2402      	movs	r4, #2
{
 8007c6e:	9001      	str	r0, [sp, #4]
  if (buffer == NULL || encBuffer == NULL)
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d01b      	beq.n	8007cac <SecureElementAesEncrypt+0x4a>
 8007c74:	2f00      	cmp	r7, #0
 8007c76:	d019      	beq.n	8007cac <SecureElementAesEncrypt+0x4a>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 8007c78:	230f      	movs	r3, #15
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007c7a:	3403      	adds	r4, #3
  if ((size % 16) != 0)
 8007c7c:	4019      	ands	r1, r3
 8007c7e:	421e      	tst	r6, r3
 8007c80:	d114      	bne.n	8007cac <SecureElementAesEncrypt+0x4a>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 8007c82:	22f0      	movs	r2, #240	; 0xf0
 8007c84:	a803      	add	r0, sp, #12
 8007c86:	f005 fc31 	bl	800d4ec <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 8007c8a:	0028      	movs	r0, r5
 8007c8c:	a902      	add	r1, sp, #8
 8007c8e:	f7ff fe85 	bl	800799c <GetKeyByID>
 8007c92:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 8007c94:	d10a      	bne.n	8007cac <SecureElementAesEncrypt+0x4a>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8007c96:	9b02      	ldr	r3, [sp, #8]
 8007c98:	2110      	movs	r1, #16
 8007c9a:	1c58      	adds	r0, r3, #1
 8007c9c:	aa03      	add	r2, sp, #12
 8007c9e:	f7ff fcb1 	bl	8007604 <lorawan_aes_set_key>

    uint8_t block = 0;

    while (size != 0)
 8007ca2:	0035      	movs	r5, r6
 8007ca4:	1b70      	subs	r0, r6, r5
 8007ca6:	b2c0      	uxtb	r0, r0
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	d102      	bne.n	8007cb2 <SecureElementAesEncrypt+0x50>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 8007cac:	0020      	movs	r0, r4
 8007cae:	b041      	add	sp, #260	; 0x104
 8007cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8007cb2:	9b01      	ldr	r3, [sp, #4]
 8007cb4:	1839      	adds	r1, r7, r0
 8007cb6:	aa03      	add	r2, sp, #12
 8007cb8:	1818      	adds	r0, r3, r0
      size = size - 16;
 8007cba:	3d10      	subs	r5, #16
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8007cbc:	f7ff fd28 	bl	8007710 <lorawan_aes_encrypt>
      size = size - 16;
 8007cc0:	b2ad      	uxth	r5, r5
 8007cc2:	e7ef      	b.n	8007ca4 <SecureElementAesEncrypt+0x42>

08007cc4 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
 8007cc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007cc6:	4a19      	ldr	r2, [pc, #100]	; (8007d2c <SecureElementSetKey.part.0+0x68>)
 8007cc8:	000c      	movs	r4, r1
 8007cca:	2300      	movs	r3, #0
 8007ccc:	0015      	movs	r5, r2
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 8007cce:	7c11      	ldrb	r1, [r2, #16]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	4281      	cmp	r1, r0
 8007cd4:	d125      	bne.n	8007d22 <SecureElementSetKey.part.0+0x5e>
      if (keyID == MC_KEY_0)
 8007cd6:	2211      	movs	r2, #17
 8007cd8:	4353      	muls	r3, r2
 8007cda:	4e15      	ldr	r6, [pc, #84]	; (8007d30 <SecureElementSetKey.part.0+0x6c>)
 8007cdc:	18ed      	adds	r5, r5, r3
 8007cde:	2880      	cmp	r0, #128	; 0x80
 8007ce0:	d116      	bne.n	8007d10 <SecureElementSetKey.part.0+0x4c>
        uint8_t decryptedKey[16] = { 0 };
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	3a05      	subs	r2, #5
 8007ce6:	a801      	add	r0, sp, #4
 8007ce8:	9100      	str	r1, [sp, #0]
 8007cea:	f007 fcbf 	bl	800f66c <memset>
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 8007cee:	466b      	mov	r3, sp
 8007cf0:	227f      	movs	r2, #127	; 0x7f
 8007cf2:	2110      	movs	r1, #16
 8007cf4:	0020      	movs	r0, r4
 8007cf6:	f7ff ffb4 	bl	8007c62 <SecureElementAesEncrypt>
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 8007cfa:	2210      	movs	r2, #16
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 8007cfc:	0004      	movs	r4, r0
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 8007cfe:	4669      	mov	r1, sp
 8007d00:	0028      	movs	r0, r5
 8007d02:	f005 fbdd 	bl	800d4c0 <memcpy1>
        SeNvmCtxChanged();
 8007d06:	6833      	ldr	r3, [r6, #0]
 8007d08:	4798      	blx	r3
}
 8007d0a:	0020      	movs	r0, r4
 8007d0c:	b004      	add	sp, #16
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 8007d10:	0021      	movs	r1, r4
 8007d12:	2210      	movs	r2, #16
 8007d14:	0028      	movs	r0, r5
 8007d16:	f005 fbd3 	bl	800d4c0 <memcpy1>
        SeNvmCtxChanged();
 8007d1a:	6833      	ldr	r3, [r6, #0]
 8007d1c:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 8007d1e:	2400      	movs	r4, #0
 8007d20:	e7f3      	b.n	8007d0a <SecureElementSetKey.part.0+0x46>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8007d22:	3211      	adds	r2, #17
 8007d24:	2b0a      	cmp	r3, #10
 8007d26:	d1d2      	bne.n	8007cce <SecureElementSetKey.part.0+0xa>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007d28:	2403      	movs	r4, #3
 8007d2a:	e7ee      	b.n	8007d0a <SecureElementSetKey.part.0+0x46>
 8007d2c:	20000050 	.word	0x20000050
 8007d30:	20000490 	.word	0x20000490

08007d34 <SecureElementSetKey>:
{
 8007d34:	0003      	movs	r3, r0
 8007d36:	b510      	push	{r4, lr}
    return SECURE_ELEMENT_ERROR_NPE;
 8007d38:	2002      	movs	r0, #2
  if (key == NULL)
 8007d3a:	2900      	cmp	r1, #0
 8007d3c:	d002      	beq.n	8007d44 <SecureElementSetKey+0x10>
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f7ff ffc0 	bl	8007cc4 <SecureElementSetKey.part.0>
}
 8007d44:	bd10      	pop	{r4, pc}

08007d46 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 8007d46:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007d48:	000d      	movs	r5, r1
 8007d4a:	0016      	movs	r6, r2
 8007d4c:	001c      	movs	r4, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (input == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007d4e:	2002      	movs	r0, #2
  if (input == NULL)
 8007d50:	2900      	cmp	r1, #0
 8007d52:	d016      	beq.n	8007d82 <SecureElementDeriveAndStoreKey+0x3c>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 8007d54:	2b7f      	cmp	r3, #127	; 0x7f
 8007d56:	d102      	bne.n	8007d5e <SecureElementDeriveAndStoreKey+0x18>
  {
    if (rootKeyID != MC_ROOT_KEY)
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007d58:	3001      	adds	r0, #1
    if (rootKeyID != MC_ROOT_KEY)
 8007d5a:	2a04      	cmp	r2, #4
 8007d5c:	d111      	bne.n	8007d82 <SecureElementDeriveAndStoreKey+0x3c>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 8007d5e:	2100      	movs	r1, #0
 8007d60:	220c      	movs	r2, #12
 8007d62:	a801      	add	r0, sp, #4
 8007d64:	9100      	str	r1, [sp, #0]
 8007d66:	f007 fc81 	bl	800f66c <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 8007d6a:	466b      	mov	r3, sp
 8007d6c:	0032      	movs	r2, r6
 8007d6e:	2110      	movs	r1, #16
 8007d70:	0028      	movs	r0, r5
 8007d72:	f7ff ff76 	bl	8007c62 <SecureElementAesEncrypt>
  if (retval != SECURE_ELEMENT_SUCCESS)
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d103      	bne.n	8007d82 <SecureElementDeriveAndStoreKey+0x3c>
  if (key == NULL)
 8007d7a:	4669      	mov	r1, sp
 8007d7c:	0020      	movs	r0, r4
 8007d7e:	f7ff ffa1 	bl	8007cc4 <SecureElementSetKey.part.0>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 8007d82:	b004      	add	sp, #16
 8007d84:	bd70      	pop	{r4, r5, r6, pc}

08007d86 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 8007d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d88:	001d      	movs	r5, r3
 8007d8a:	ab06      	add	r3, sp, #24
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007d8c:	2002      	movs	r0, #2
{
 8007d8e:	781f      	ldrb	r7, [r3, #0]
 8007d90:	9e07      	ldr	r6, [sp, #28]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 8007d92:	2d00      	cmp	r5, #0
 8007d94:	d037      	beq.n	8007e06 <SecureElementProcessJoinAccept+0x80>
 8007d96:	2e00      	cmp	r6, #0
 8007d98:	d035      	beq.n	8007e06 <SecureElementProcessJoinAccept+0x80>
 8007d9a:	9b08      	ldr	r3, [sp, #32]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d032      	beq.n	8007e06 <SecureElementProcessJoinAccept+0x80>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007da0:	3003      	adds	r0, #3
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 8007da2:	2f21      	cmp	r7, #33	; 0x21
 8007da4:	d82f      	bhi.n	8007e06 <SecureElementProcessJoinAccept+0x80>
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 8007da6:	b2bc      	uxth	r4, r7
 8007da8:	0022      	movs	r2, r4
 8007daa:	0029      	movs	r1, r5
 8007dac:	0030      	movs	r0, r6
 8007dae:	f005 fb87 	bl	800d4c0 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8007db2:	1e61      	subs	r1, r4, #1
 8007db4:	1c73      	adds	r3, r6, #1
 8007db6:	2201      	movs	r2, #1
 8007db8:	b289      	uxth	r1, r1
 8007dba:	1c68      	adds	r0, r5, #1
 8007dbc:	f7ff ff51 	bl	8007c62 <SecureElementAesEncrypt>
 8007dc0:	0003      	movs	r3, r0
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 8007dc2:	2007      	movs	r0, #7
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d11e      	bne.n	8007e06 <SecureElementProcessJoinAccept+0x80>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 8007dc8:	7af3      	ldrb	r3, [r6, #11]
 8007dca:	9a08      	ldr	r2, [sp, #32]
 8007dcc:	40c3      	lsrs	r3, r0
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8007dce:	3803      	subs	r0, #3
  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 8007dd0:	7013      	strb	r3, [r2, #0]
  if (*versionMinor == 0)
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d117      	bne.n	8007e06 <SecureElementProcessJoinAccept+0x80>
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 8007dd6:	19f3      	adds	r3, r6, r7
 8007dd8:	1e9a      	subs	r2, r3, #2
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 8007dda:	1e59      	subs	r1, r3, #1
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 8007ddc:	7812      	ldrb	r2, [r2, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 8007dde:	7809      	ldrb	r1, [r1, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 8007de0:	0412      	lsls	r2, r2, #16
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 8007de2:	0609      	lsls	r1, r1, #24
 8007de4:	430a      	orrs	r2, r1
  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 8007de6:	1f19      	subs	r1, r3, #4
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 8007de8:	3b03      	subs	r3, #3
  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 8007dea:	7809      	ldrb	r1, [r1, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	021b      	lsls	r3, r3, #8
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 8007df2:	1f21      	subs	r1, r4, #4
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 8007df4:	431a      	orrs	r2, r3
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 8007df6:	0030      	movs	r0, r6
 8007df8:	2301      	movs	r3, #1
 8007dfa:	b289      	uxth	r1, r1
 8007dfc:	f7ff ff19 	bl	8007c32 <SecureElementVerifyAesCmac>
 8007e00:	1e43      	subs	r3, r0, #1
 8007e02:	4198      	sbcs	r0, r3
    return SECURE_ELEMENT_ERROR_NPE;
 8007e04:	b2c0      	uxtb	r0, r0
  }

  return SECURE_ELEMENT_SUCCESS;
}
 8007e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e08 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 8007e08:	b513      	push	{r0, r1, r4, lr}
 8007e0a:	0004      	movs	r4, r0
  if (randomNum == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007e0c:	2002      	movs	r0, #2
  if (randomNum == NULL)
 8007e0e:	2c00      	cmp	r4, #0
 8007e10:	d005      	beq.n	8007e1e <SecureElementRandomNumber+0x16>
  }
  *randomNum = Radio.Random( );
 8007e12:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <SecureElementRandomNumber+0x18>)
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	4798      	blx	r3
 8007e1a:	6020      	str	r0, [r4, #0]
  return SECURE_ELEMENT_SUCCESS;
 8007e1c:	2000      	movs	r0, #0
}
 8007e1e:	bd16      	pop	{r1, r2, r4, pc}
 8007e20:	08012ccc 	.word	0x08012ccc

08007e24 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 8007e24:	0001      	movs	r1, r0
 8007e26:	b510      	push	{r4, lr}
  if (devEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007e28:	2002      	movs	r0, #2
  if (devEui == NULL)
 8007e2a:	2900      	cmp	r1, #0
 8007e2c:	d007      	beq.n	8007e3e <SecureElementSetDevEui+0x1a>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 8007e2e:	4804      	ldr	r0, [pc, #16]	; (8007e40 <SecureElementSetDevEui+0x1c>)
 8007e30:	2208      	movs	r2, #8
 8007e32:	f005 fb45 	bl	800d4c0 <memcpy1>
  SeNvmCtxChanged();
 8007e36:	4b03      	ldr	r3, [pc, #12]	; (8007e44 <SecureElementSetDevEui+0x20>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 8007e3c:	2000      	movs	r0, #0
}
 8007e3e:	bd10      	pop	{r4, pc}
 8007e40:	20000050 	.word	0x20000050
 8007e44:	20000490 	.word	0x20000490

08007e48 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
  return SeNvmCtx.DevEui;
}
 8007e48:	4800      	ldr	r0, [pc, #0]	; (8007e4c <SecureElementGetDevEui+0x4>)
 8007e4a:	4770      	bx	lr
 8007e4c:	20000050 	.word	0x20000050

08007e50 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 8007e50:	0001      	movs	r1, r0
 8007e52:	b510      	push	{r4, lr}
  if (joinEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007e54:	2002      	movs	r0, #2
  if (joinEui == NULL)
 8007e56:	2900      	cmp	r1, #0
 8007e58:	d007      	beq.n	8007e6a <SecureElementSetJoinEui+0x1a>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 8007e5a:	4804      	ldr	r0, [pc, #16]	; (8007e6c <SecureElementSetJoinEui+0x1c>)
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	f005 fb2f 	bl	800d4c0 <memcpy1>
  SeNvmCtxChanged();
 8007e62:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <SecureElementSetJoinEui+0x20>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 8007e68:	2000      	movs	r0, #0
}
 8007e6a:	bd10      	pop	{r4, pc}
 8007e6c:	20000058 	.word	0x20000058
 8007e70:	20000490 	.word	0x20000490

08007e74 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
  return SeNvmCtx.JoinEui;
}
 8007e74:	4800      	ldr	r0, [pc, #0]	; (8007e78 <SecureElementGetJoinEui+0x4>)
 8007e76:	4770      	bx	lr
 8007e78:	20000058 	.word	0x20000058

08007e7c <MlmeIndication>:
  }
}

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
  RxParams.IsMcpsIndication = 0;
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4b02      	ldr	r3, [pc, #8]	; (8007e88 <MlmeIndication+0xc>)
 8007e80:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 8007e82:	7842      	ldrb	r2, [r0, #1]
 8007e84:	705a      	strb	r2, [r3, #1]
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
  }
}
 8007e86:	4770      	bx	lr
 8007e88:	2000010c 	.word	0x2000010c

08007e8c <LmHandlerDeviceTimeReq>:
{
 8007e8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  mlmeReq.Type = MLME_DEVICE_TIME;
 8007e8e:	230a      	movs	r3, #10
 8007e90:	a801      	add	r0, sp, #4
 8007e92:	7003      	strb	r3, [r0, #0]
  status = LoRaMacMlmeRequest(&mlmeReq);
 8007e94:	f002 fffa 	bl	800ae8c <LoRaMacMlmeRequest>
  if (status == LORAMAC_STATUS_OK)
 8007e98:	1e43      	subs	r3, r0, #1
 8007e9a:	4198      	sbcs	r0, r3
 8007e9c:	4240      	negs	r0, r0
}
 8007e9e:	b007      	add	sp, #28
 8007ea0:	bd00      	pop	{pc}
	...

08007ea4 <McpsConfirm>:
  TxParams.IsMcpsConfirm = 1;
 8007ea4:	2301      	movs	r3, #1
{
 8007ea6:	b570      	push	{r4, r5, r6, lr}
  TxParams.IsMcpsConfirm = 1;
 8007ea8:	4c10      	ldr	r4, [pc, #64]	; (8007eec <McpsConfirm+0x48>)
{
 8007eaa:	0005      	movs	r5, r0
  TxParams.IsMcpsConfirm = 1;
 8007eac:	7023      	strb	r3, [r4, #0]
  TxParams.Status = mcpsConfirm->Status;
 8007eae:	7843      	ldrb	r3, [r0, #1]
 8007eb0:	0026      	movs	r6, r4
 8007eb2:	7063      	strb	r3, [r4, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 8007eb4:	7883      	ldrb	r3, [r0, #2]
 8007eb6:	3638      	adds	r6, #56	; 0x38
 8007eb8:	7123      	strb	r3, [r4, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8007eba:	68c3      	ldr	r3, [r0, #12]
 8007ebc:	60a3      	str	r3, [r4, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 8007ebe:	78c3      	ldrb	r3, [r0, #3]
 8007ec0:	7523      	strb	r3, [r4, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 8007ec2:	6903      	ldr	r3, [r0, #16]
 8007ec4:	7563      	strb	r3, [r4, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 8007ec6:	7903      	ldrb	r3, [r0, #4]
  LmHandlerCallbacks.OnTxData(&TxParams);
 8007ec8:	0020      	movs	r0, r4
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 8007eca:	70e3      	strb	r3, [r4, #3]
  LmHandlerCallbacks.OnTxData(&TxParams);
 8007ecc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ece:	4798      	blx	r3
  }
}

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8007ed0:	344c      	adds	r4, #76	; 0x4c
  {
    if (LmHandlerPackages[i] != NULL)
 8007ed2:	6833      	ldr	r3, [r6, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <McpsConfirm+0x3e>
    {
      switch (notifyType)
      {
        case PACKAGE_MCPS_CONFIRM:
        {
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <McpsConfirm+0x3e>
          {
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 8007ede:	0028      	movs	r0, r5
 8007ee0:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8007ee2:	3604      	adds	r6, #4
 8007ee4:	42a6      	cmp	r6, r4
 8007ee6:	d1f4      	bne.n	8007ed2 <McpsConfirm+0x2e>
}
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	20000494 	.word	0x20000494

08007ef0 <LmHandlerConfigure>:
{
 8007ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007ef2:	4e4f      	ldr	r6, [pc, #316]	; (8008030 <LmHandlerConfigure+0x140>)
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8007ef4:	2701      	movs	r7, #1
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007ef6:	0034      	movs	r4, r6
 8007ef8:	344c      	adds	r4, #76	; 0x4c
{
 8007efa:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007efc:	2206      	movs	r2, #6
 8007efe:	0020      	movs	r0, r4
{
 8007f00:	b097      	sub	sp, #92	; 0x5c
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007f02:	f006 ffa7 	bl	800ee54 <UTIL_MEM_cpy_8>
  loraInfo = LoraInfo_GetPtr();
 8007f06:	f7fa ff39 	bl	8002d7c <LoraInfo_GetPtr>
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8007f0a:	003b      	movs	r3, r7
 8007f0c:	7822      	ldrb	r2, [r4, #0]
 8007f0e:	6841      	ldr	r1, [r0, #4]
 8007f10:	4093      	lsls	r3, r2
 8007f12:	0008      	movs	r0, r1
 8007f14:	4018      	ands	r0, r3
 8007f16:	4219      	tst	r1, r3
 8007f18:	d00b      	beq.n	8007f32 <LmHandlerConfigure+0x42>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8007f1a:	0031      	movs	r1, r6
 8007f1c:	0030      	movs	r0, r6
 8007f1e:	3154      	adds	r1, #84	; 0x54
 8007f20:	3064      	adds	r0, #100	; 0x64
 8007f22:	f002 fa03 	bl	800a32c <LoRaMacInitialization>
 8007f26:	9009      	str	r0, [sp, #36]	; 0x24
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d008      	beq.n	8007f3e <LmHandlerConfigure+0x4e>
      return LORAMAC_HANDLER_ERROR;
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	4240      	negs	r0, r0
 8007f30:	e063      	b.n	8007ffa <LmHandlerConfigure+0x10a>
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8007f32:	003a      	movs	r2, r7
 8007f34:	0001      	movs	r1, r0
 8007f36:	4b3f      	ldr	r3, [pc, #252]	; (8008034 <LmHandlerConfigure+0x144>)
 8007f38:	f006 fe72 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 8007f3c:	e7fe      	b.n	8007f3c <LmHandlerConfigure+0x4c>
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 8007f3e:	f000 fc72 	bl	8008826 <NvmCtxMgmtRestore>
 8007f42:	0033      	movs	r3, r6
 8007f44:	4d3c      	ldr	r5, [pc, #240]	; (8008038 <LmHandlerConfigure+0x148>)
 8007f46:	3374      	adds	r3, #116	; 0x74
 8007f48:	ac0d      	add	r4, sp, #52	; 0x34
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d157      	bne.n	8007ffe <LmHandlerConfigure+0x10e>
    CtxRestoreDone = true;
 8007f4e:	701f      	strb	r7, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 8007f50:	2200      	movs	r2, #0
 8007f52:	7deb      	ldrb	r3, [r5, #23]
 8007f54:	0011      	movs	r1, r2
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	7dab      	ldrb	r3, [r5, #22]
 8007f5a:	2002      	movs	r0, #2
 8007f5c:	9306      	str	r3, [sp, #24]
 8007f5e:	7d6b      	ldrb	r3, [r5, #21]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8007f60:	270f      	movs	r7, #15
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	7d2b      	ldrb	r3, [r5, #20]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007f66:	364c      	adds	r6, #76	; 0x4c
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 8007f68:	9304      	str	r3, [sp, #16]
 8007f6a:	7ceb      	ldrb	r3, [r5, #19]
 8007f6c:	9303      	str	r3, [sp, #12]
 8007f6e:	7cab      	ldrb	r3, [r5, #18]
 8007f70:	9302      	str	r3, [sp, #8]
 8007f72:	7c6b      	ldrb	r3, [r5, #17]
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	7c2b      	ldrb	r3, [r5, #16]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	4b30      	ldr	r3, [pc, #192]	; (800803c <LmHandlerConfigure+0x14c>)
 8007f7c:	f006 fe50 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 8007f80:	2200      	movs	r2, #0
 8007f82:	7feb      	ldrb	r3, [r5, #31]
 8007f84:	0011      	movs	r1, r2
 8007f86:	9307      	str	r3, [sp, #28]
 8007f88:	7fab      	ldrb	r3, [r5, #30]
 8007f8a:	2002      	movs	r0, #2
 8007f8c:	9306      	str	r3, [sp, #24]
 8007f8e:	7f6b      	ldrb	r3, [r5, #29]
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	7f2b      	ldrb	r3, [r5, #28]
 8007f94:	9304      	str	r3, [sp, #16]
 8007f96:	7eeb      	ldrb	r3, [r5, #27]
 8007f98:	9303      	str	r3, [sp, #12]
 8007f9a:	7eab      	ldrb	r3, [r5, #26]
 8007f9c:	9302      	str	r3, [sp, #8]
 8007f9e:	7e6b      	ldrb	r3, [r5, #25]
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	7e2b      	ldrb	r3, [r5, #24]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007fa4:	2500      	movs	r5, #0
  MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	4b25      	ldr	r3, [pc, #148]	; (8008040 <LmHandlerConfigure+0x150>)
 8007faa:	f006 fe39 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007fae:	2301      	movs	r3, #1
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007fb0:	0020      	movs	r0, r4
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007fb2:	7123      	strb	r3, [r4, #4]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8007fb4:	7027      	strb	r7, [r4, #0]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007fb6:	f002 fd3d 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_REPEATER_SUPPORT;
 8007fba:	2310      	movs	r3, #16
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007fbc:	0020      	movs	r0, r4
  mibReq.Type = MIB_REPEATER_SUPPORT;
 8007fbe:	7023      	strb	r3, [r4, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007fc0:	7125      	strb	r5, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007fc2:	f002 fd37 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 8007fc6:	2304      	movs	r3, #4
 8007fc8:	7023      	strb	r3, [r4, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007fca:	78b3      	ldrb	r3, [r6, #2]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007fcc:	0020      	movs	r0, r4
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007fce:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007fd0:	f002 fd30 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007fd4:	2322      	movs	r3, #34	; 0x22
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007fd6:	0020      	movs	r0, r4
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007fd8:	7023      	strb	r3, [r4, #0]
  mibReq.Param.SystemMaxRxError = 20;
 8007fda:	3b0e      	subs	r3, #14
 8007fdc:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007fde:	f002 fd29 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
  getPhy.Attribute = PHY_DUTY_CYCLE;
 8007fe2:	a90b      	add	r1, sp, #44	; 0x2c
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 8007fe4:	7830      	ldrb	r0, [r6, #0]
  getPhy.Attribute = PHY_DUTY_CYCLE;
 8007fe6:	700f      	strb	r7, [r1, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 8007fe8:	f004 f985 	bl	800c2f6 <RegionGetPhyParam>
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007fec:	1e43      	subs	r3, r0, #1
 8007fee:	4198      	sbcs	r0, r3
 8007ff0:	b2c0      	uxtb	r0, r0
 8007ff2:	7130      	strb	r0, [r6, #4]
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 8007ff4:	f003 fa1a 	bl	800b42c <LoRaMacTestSetDutyCycleOn>
  return LORAMAC_HANDLER_SUCCESS;
 8007ff8:	0028      	movs	r0, r5
}
 8007ffa:	b017      	add	sp, #92	; 0x5c
 8007ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CtxRestoreDone = false;
 8007ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    LoRaMacMibGetRequestConfirm(&mibReq);
 8008000:	0020      	movs	r0, r4
    CtxRestoreDone = false;
 8008002:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8008004:	2302      	movs	r3, #2
 8008006:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8008008:	f002 fbf6 	bl	800a7f8 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800800c:	0028      	movs	r0, r5
 800800e:	6861      	ldr	r1, [r4, #4]
 8008010:	2208      	movs	r2, #8
 8008012:	3010      	adds	r0, #16
 8008014:	f005 fa54 	bl	800d4c0 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8008018:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm(&mibReq);
 800801a:	0020      	movs	r0, r4
    mibReq.Type = MIB_JOIN_EUI;
 800801c:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800801e:	f002 fbeb 	bl	800a7f8 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 8008022:	0028      	movs	r0, r5
 8008024:	2208      	movs	r2, #8
 8008026:	6861      	ldr	r1, [r4, #4]
 8008028:	3018      	adds	r0, #24
 800802a:	f005 fa49 	bl	800d4c0 <memcpy1>
 800802e:	e78f      	b.n	8007f50 <LmHandlerConfigure+0x60>
 8008030:	20000494 	.word	0x20000494
 8008034:	0801321d 	.word	0x0801321d
 8008038:	2000010c 	.word	0x2000010c
 800803c:	08013266 	.word	0x08013266
 8008040:	080132a0 	.word	0x080132a0

08008044 <LmHandlerProcess>:
{
 8008044:	b570      	push	{r4, r5, r6, lr}
  LoRaMacProcess();
 8008046:	f001 fc71 	bl	800992c <LoRaMacProcess>
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800804a:	4d0c      	ldr	r5, [pc, #48]	; (800807c <LmHandlerProcess+0x38>)
 800804c:	002c      	movs	r4, r5
 800804e:	354c      	adds	r5, #76	; 0x4c
 8008050:	3438      	adds	r4, #56	; 0x38
    if ((LmHandlerPackages[i] != NULL) &&
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <LmHandlerProcess+0x2c>
 8008058:	691a      	ldr	r2, [r3, #16]
 800805a:	2a00      	cmp	r2, #0
 800805c:	d008      	beq.n	8008070 <LmHandlerProcess+0x2c>
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <LmHandlerProcess+0x2c>
    return LmHandlerPackages[id]->IsInitialized();
 8008064:	4798      	blx	r3
        (LmHandlerPackages[i]->Process != NULL) &&
 8008066:	2800      	cmp	r0, #0
 8008068:	d002      	beq.n	8008070 <LmHandlerProcess+0x2c>
      LmHandlerPackages[i]->Process();
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008070:	3404      	adds	r4, #4
 8008072:	42a5      	cmp	r5, r4
 8008074:	d1ed      	bne.n	8008052 <LmHandlerProcess+0xe>
  NvmCtxMgmtStore();
 8008076:	f000 fbd4 	bl	8008822 <NvmCtxMgmtStore>
}
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	20000494 	.word	0x20000494

08008080 <LmHandlerJoinStatus>:
{
 8008080:	b500      	push	{lr}
 8008082:	b08b      	sub	sp, #44	; 0x2c
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008084:	2301      	movs	r3, #1
 8008086:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 8008088:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800808a:	7113      	strb	r3, [r2, #4]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800808c:	f002 fbb4 	bl	800a7f8 <LoRaMacMibGetRequestConfirm>
    return LORAMAC_HANDLER_RESET;
 8008090:	2300      	movs	r3, #0
  if (status == LORAMAC_STATUS_OK)
 8008092:	4298      	cmp	r0, r3
 8008094:	d104      	bne.n	80080a0 <LmHandlerJoinStatus+0x20>
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 8008096:	466b      	mov	r3, sp
 8008098:	7a1b      	ldrb	r3, [r3, #8]
 800809a:	1e58      	subs	r0, r3, #1
 800809c:	4183      	sbcs	r3, r0
      return LORAMAC_HANDLER_RESET;
 800809e:	b2db      	uxtb	r3, r3
}
 80080a0:	0018      	movs	r0, r3
 80080a2:	b00b      	add	sp, #44	; 0x2c
 80080a4:	bd00      	pop	{pc}
	...

080080a8 <LmHandlerRequestClass>:
{
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	b08c      	sub	sp, #48	; 0x30
 80080ac:	0005      	movs	r5, r0
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80080ae:	f7ff ffe7 	bl	8008080 <LmHandlerJoinStatus>
 80080b2:	2801      	cmp	r0, #1
 80080b4:	d143      	bne.n	800813e <LmHandlerRequestClass+0x96>
  mibReq.Type = MIB_DEVICE_CLASS;
 80080b6:	2300      	movs	r3, #0
 80080b8:	ae03      	add	r6, sp, #12
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80080ba:	0030      	movs	r0, r6
  mibReq.Type = MIB_DEVICE_CLASS;
 80080bc:	7033      	strb	r3, [r6, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80080be:	f002 fb9b 	bl	800a7f8 <LoRaMacMibGetRequestConfirm>
 80080c2:	1e04      	subs	r4, r0, #0
 80080c4:	d001      	beq.n	80080ca <LmHandlerRequestClass+0x22>
    switch (newClass)
 80080c6:	2401      	movs	r4, #1
 80080c8:	e03a      	b.n	8008140 <LmHandlerRequestClass+0x98>
  currentClass = mibReq.Param.Class;
 80080ca:	7933      	ldrb	r3, [r6, #4]
  if (currentClass != newClass)
 80080cc:	42ab      	cmp	r3, r5
 80080ce:	d103      	bne.n	80080d8 <LmHandlerRequestClass+0x30>
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80080d0:	2400      	movs	r4, #0
}
 80080d2:	0020      	movs	r0, r4
 80080d4:	b00c      	add	sp, #48	; 0x30
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
    switch (newClass)
 80080d8:	2d01      	cmp	r5, #1
 80080da:	d0f4      	beq.n	80080c6 <LmHandlerRequestClass+0x1e>
 80080dc:	2d02      	cmp	r5, #2
 80080de:	d018      	beq.n	8008112 <LmHandlerRequestClass+0x6a>
 80080e0:	2d00      	cmp	r5, #0
 80080e2:	d1f6      	bne.n	80080d2 <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0f3      	beq.n	80080d0 <LmHandlerRequestClass+0x28>
          mibReq.Param.Class = CLASS_A;
 80080e8:	7130      	strb	r0, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 80080ea:	0030      	movs	r0, r6
 80080ec:	f002 fca2 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d1e8      	bne.n	80080c6 <LmHandlerRequestClass+0x1e>
  }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80080f4:	2341      	movs	r3, #65	; 0x41
 80080f6:	0022      	movs	r2, r4
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	0021      	movs	r1, r4
 80080fc:	4b11      	ldr	r3, [pc, #68]	; (8008144 <LmHandlerRequestClass+0x9c>)
 80080fe:	3002      	adds	r0, #2
 8008100:	f006 fd8e 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8008104:	4b10      	ldr	r3, [pc, #64]	; (8008148 <LmHandlerRequestClass+0xa0>)
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 8008106:	0020      	movs	r0, r4
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0e0      	beq.n	80080d0 <LmHandlerRequestClass+0x28>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800810e:	4798      	blx	r3
 8008110:	e7df      	b.n	80080d2 <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1d7      	bne.n	80080c6 <LmHandlerRequestClass+0x1e>
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 8008116:	0030      	movs	r0, r6
          mibReq.Param.Class = CLASS_C;
 8008118:	7135      	strb	r5, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800811a:	f002 fc8b 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
 800811e:	1e04      	subs	r4, r0, #0
 8008120:	d1d1      	bne.n	80080c6 <LmHandlerRequestClass+0x1e>
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8008122:	2343      	movs	r3, #67	; 0x43
 8008124:	0002      	movs	r2, r0
 8008126:	0001      	movs	r1, r0
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	0028      	movs	r0, r5
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <LmHandlerRequestClass+0x9c>)
 800812e:	f006 fd77 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <LmHandlerRequestClass+0xa0>)
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0ca      	beq.n	80080d0 <LmHandlerRequestClass+0x28>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800813a:	0028      	movs	r0, r5
 800813c:	e7e7      	b.n	800810e <LmHandlerRequestClass+0x66>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800813e:	2403      	movs	r4, #3
    switch (newClass)
 8008140:	4264      	negs	r4, r4
 8008142:	e7c6      	b.n	80080d2 <LmHandlerRequestClass+0x2a>
 8008144:	080132da 	.word	0x080132da
 8008148:	20000494 	.word	0x20000494

0800814c <LmHandlerJoin>:
{
 800814c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814e:	b08d      	sub	sp, #52	; 0x34
 8008150:	4d25      	ldr	r5, [pc, #148]	; (80081e8 <LmHandlerJoin+0x9c>)
 8008152:	4e26      	ldr	r6, [pc, #152]	; (80081ec <LmHandlerJoin+0xa0>)
 8008154:	ac03      	add	r4, sp, #12
  if (mode == ACTIVATION_TYPE_OTAA)
 8008156:	2802      	cmp	r0, #2
 8008158:	d10d      	bne.n	8008176 <LmHandlerJoin+0x2a>
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800815a:	3528      	adds	r5, #40	; 0x28
 800815c:	70a8      	strb	r0, [r5, #2]
    LoRaMacStart();
 800815e:	f002 fae7 	bl	800a730 <LoRaMacStart>
    mlmeReq.Type = MLME_JOIN;
 8008162:	2301      	movs	r3, #1
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008164:	364c      	adds	r6, #76	; 0x4c
    mlmeReq.Type = MLME_JOIN;
 8008166:	7023      	strb	r3, [r4, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008168:	78f3      	ldrb	r3, [r6, #3]
    LoRaMacMlmeRequest(&mlmeReq);
 800816a:	0020      	movs	r0, r4
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800816c:	7123      	strb	r3, [r4, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800816e:	f002 fe8d 	bl	800ae8c <LoRaMacMlmeRequest>
}
 8008172:	b00d      	add	sp, #52	; 0x34
 8008174:	bdf0      	pop	{r4, r5, r6, r7, pc}
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008176:	002b      	movs	r3, r5
 8008178:	2201      	movs	r2, #1
 800817a:	3328      	adds	r3, #40	; 0x28
 800817c:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800817e:	2200      	movs	r2, #0
 8008180:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 8008182:	0033      	movs	r3, r6
 8008184:	3374      	adds	r3, #116	; 0x74
 8008186:	781f      	ldrb	r7, [r3, #0]
 8008188:	4297      	cmp	r7, r2
 800818a:	d11c      	bne.n	80081c6 <LmHandlerJoin+0x7a>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800818c:	2327      	movs	r3, #39	; 0x27
 800818e:	7023      	strb	r3, [r4, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008190:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <LmHandlerJoin+0xa4>)
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008192:	0020      	movs	r0, r4
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008194:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008196:	f002 fc4d 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800819a:	2305      	movs	r3, #5
 800819c:	7023      	strb	r3, [r4, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800819e:	6a2b      	ldr	r3, [r5, #32]
      LoRaMacMibSetRequestConfirm(&mibReq);
 80081a0:	0020      	movs	r0, r4
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 80081a2:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 80081a4:	f002 fc46 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_DEV_ADDR;
 80081a8:	2306      	movs	r3, #6
 80081aa:	7023      	strb	r3, [r4, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 80081ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      LoRaMacMibSetRequestConfirm(&mibReq);
 80081ae:	0020      	movs	r0, r4
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 80081b0:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 80081b2:	f002 fc3f 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 80081b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081b8:	003a      	movs	r2, r7
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	0039      	movs	r1, r7
 80081be:	2002      	movs	r0, #2
 80081c0:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <LmHandlerJoin+0xa8>)
 80081c2:	f006 fd2d 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 80081c6:	f002 fab3 	bl	800a730 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80081ca:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 80081cc:	0020      	movs	r0, r4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80081ce:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80081d0:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80081d2:	f002 fc2f 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 80081d6:	0028      	movs	r0, r5
 80081d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081da:	3028      	adds	r0, #40	; 0x28
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80081dc:	364c      	adds	r6, #76	; 0x4c
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 80081de:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80081e0:	7870      	ldrb	r0, [r6, #1]
 80081e2:	f7ff ff61 	bl	80080a8 <LmHandlerRequestClass>
}
 80081e6:	e7c4      	b.n	8008172 <LmHandlerJoin+0x26>
 80081e8:	2000010c 	.word	0x2000010c
 80081ec:	20000494 	.word	0x20000494
 80081f0:	01000300 	.word	0x01000300
 80081f4:	080132f4 	.word	0x080132f4

080081f8 <LmHandlerSend>:
{
 80081f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081fa:	b089      	sub	sp, #36	; 0x24
 80081fc:	0005      	movs	r5, r0
 80081fe:	000f      	movs	r7, r1
 8008200:	9200      	str	r2, [sp, #0]
 8008202:	9301      	str	r3, [sp, #4]
  if (LoRaMacIsBusy() == true)
 8008204:	f001 fb80 	bl	8009908 <LoRaMacIsBusy>
 8008208:	2800      	cmp	r0, #0
 800820a:	d152      	bne.n	80082b2 <LmHandlerSend+0xba>
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800820c:	f7ff ff38 	bl	8008080 <LmHandlerJoinStatus>
 8008210:	2801      	cmp	r0, #1
 8008212:	d007      	beq.n	8008224 <LmHandlerSend+0x2c>
    LmHandlerJoin(JoinParams.Mode);
 8008214:	4b2a      	ldr	r3, [pc, #168]	; (80082c0 <LmHandlerSend+0xc8>)
 8008216:	3328      	adds	r3, #40	; 0x28
 8008218:	7898      	ldrb	r0, [r3, #2]
 800821a:	f7ff ff97 	bl	800814c <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800821e:	2003      	movs	r0, #3
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8008220:	4240      	negs	r0, r0
 8008222:	e034      	b.n	800828e <LmHandlerSend+0x96>
  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 8008224:	4e27      	ldr	r6, [pc, #156]	; (80082c4 <LmHandlerSend+0xcc>)
 8008226:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	4798      	blx	r3
 800822c:	2800      	cmp	r0, #0
 800822e:	d006      	beq.n	800823e <LmHandlerSend+0x46>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 8008230:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8008232:	782b      	ldrb	r3, [r5, #0]
 8008234:	7812      	ldrb	r2, [r2, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d001      	beq.n	800823e <LmHandlerSend+0x46>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d13b      	bne.n	80082b6 <LmHandlerSend+0xbe>
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800823e:	0033      	movs	r3, r6
 8008240:	334c      	adds	r3, #76	; 0x4c
 8008242:	78db      	ldrb	r3, [r3, #3]
 8008244:	ac03      	add	r4, sp, #12
 8008246:	73a3      	strb	r3, [r4, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 8008248:	7868      	ldrb	r0, [r5, #1]
 800824a:	a902      	add	r1, sp, #8
 800824c:	f002 fa78 	bl	800a740 <LoRaMacQueryTxPossible>
 8008250:	2800      	cmp	r0, #0
 8008252:	d01e      	beq.n	8008292 <LmHandlerSend+0x9a>
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8008254:	2300      	movs	r3, #0
 8008256:	70b3      	strb	r3, [r6, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 8008258:	7023      	strb	r3, [r4, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800825a:	60a3      	str	r3, [r4, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800825c:	81a3      	strh	r3, [r4, #12]
  TxParams.AppData = *appData;
 800825e:	0033      	movs	r3, r6
 8008260:	330c      	adds	r3, #12
 8008262:	cd06      	ldmia	r5!, {r1, r2}
 8008264:	c306      	stmia	r3!, {r1, r2}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008266:	0033      	movs	r3, r6
 8008268:	334c      	adds	r3, #76	; 0x4c
 800826a:	78db      	ldrb	r3, [r3, #3]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800826c:	0020      	movs	r0, r4
 800826e:	9901      	ldr	r1, [sp, #4]
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008270:	7133      	strb	r3, [r6, #4]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8008272:	f002 ff13 	bl	800b09c <LoRaMacMcpsRequest>
  if (nextTxIn != NULL)
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <LmHandlerSend+0x8e>
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800827c:	6923      	ldr	r3, [r4, #16]
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	9a01      	ldr	r2, [sp, #4]
 8008282:	9b00      	ldr	r3, [sp, #0]
 8008284:	601a      	str	r2, [r3, #0]
  switch(status)
 8008286:	2811      	cmp	r0, #17
 8008288:	d817      	bhi.n	80082ba <LmHandlerSend+0xc2>
 800828a:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <LmHandlerSend+0xd0>)
 800828c:	5618      	ldrsb	r0, [r3, r0]
}
 800828e:	b009      	add	sp, #36	; 0x24
 8008290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TxParams.MsgType = isTxConfirmed;
 8008292:	70b7      	strb	r7, [r6, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008294:	782b      	ldrb	r3, [r5, #0]
 8008296:	7123      	strb	r3, [r4, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008298:	786b      	ldrb	r3, [r5, #1]
 800829a:	81a3      	strh	r3, [r4, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800829c:	686b      	ldr	r3, [r5, #4]
 800829e:	60a3      	str	r3, [r4, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 80082a0:	2f00      	cmp	r7, #0
 80082a2:	d101      	bne.n	80082a8 <LmHandlerSend+0xb0>
      mcpsReq.Type = MCPS_UNCONFIRMED;
 80082a4:	7027      	strb	r7, [r4, #0]
 80082a6:	e7da      	b.n	800825e <LmHandlerSend+0x66>
      mcpsReq.Type = MCPS_CONFIRMED;
 80082a8:	2301      	movs	r3, #1
 80082aa:	7023      	strb	r3, [r4, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 80082ac:	3307      	adds	r3, #7
 80082ae:	73e3      	strb	r3, [r4, #15]
 80082b0:	e7d5      	b.n	800825e <LmHandlerSend+0x66>
    return LORAMAC_HANDLER_BUSY_ERROR;
 80082b2:	2002      	movs	r0, #2
 80082b4:	e7b4      	b.n	8008220 <LmHandlerSend+0x28>
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80082b6:	2004      	movs	r0, #4
 80082b8:	e7b2      	b.n	8008220 <LmHandlerSend+0x28>
 80082ba:	2001      	movs	r0, #1
 80082bc:	e7b0      	b.n	8008220 <LmHandlerSend+0x28>
 80082be:	46c0      	nop			; (mov r8, r8)
 80082c0:	2000010c 	.word	0x2000010c
 80082c4:	20000494 	.word	0x20000494
 80082c8:	08012b2b 	.word	0x08012b2b

080082cc <LmHandlerPackageRegister>:
{
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	0004      	movs	r4, r0
 80082d0:	000d      	movs	r5, r1
  switch (id)
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d002      	beq.n	80082dc <LmHandlerPackageRegister+0x10>
    return LORAMAC_HANDLER_ERROR;
 80082d6:	2001      	movs	r0, #1
 80082d8:	4240      	negs	r0, r0
}
 80082da:	bd70      	pop	{r4, r5, r6, pc}
      package = LmphCompliancePackageFactory();
 80082dc:	f000 fa9c 	bl	8008818 <LmphCompliancePackageFactory>
  if (package != NULL)
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d0f8      	beq.n	80082d6 <LmHandlerPackageRegister+0xa>
    LmHandlerPackages[id] = package;
 80082e4:	4b07      	ldr	r3, [pc, #28]	; (8008304 <LmHandlerPackageRegister+0x38>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 80082e6:	22f2      	movs	r2, #242	; 0xf2
    LmHandlerPackages[id] = package;
 80082e8:	6398      	str	r0, [r3, #56]	; 0x38
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80082ea:	4b07      	ldr	r3, [pc, #28]	; (8008308 <LmHandlerPackageRegister+0x3c>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 80082ec:	4907      	ldr	r1, [pc, #28]	; (800830c <LmHandlerPackageRegister+0x40>)
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80082ee:	6203      	str	r3, [r0, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 80082f0:	4b07      	ldr	r3, [pc, #28]	; (8008310 <LmHandlerPackageRegister+0x44>)
 80082f2:	6243      	str	r3, [r0, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80082f4:	4b07      	ldr	r3, [pc, #28]	; (8008314 <LmHandlerPackageRegister+0x48>)
 80082f6:	6283      	str	r3, [r0, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 80082f8:	6843      	ldr	r3, [r0, #4]
 80082fa:	0028      	movs	r0, r5
 80082fc:	4798      	blx	r3
    return LORAMAC_HANDLER_SUCCESS;
 80082fe:	0020      	movs	r0, r4
 8008300:	e7eb      	b.n	80082da <LmHandlerPackageRegister+0xe>
 8008302:	46c0      	nop			; (mov r8, r8)
 8008304:	20000494 	.word	0x20000494
 8008308:	0800814d 	.word	0x0800814d
 800830c:	20000509 	.word	0x20000509
 8008310:	080081f9 	.word	0x080081f9
 8008314:	08007e8d 	.word	0x08007e8d

08008318 <LmHandlerInit>:
{
 8008318:	b510      	push	{r4, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800831a:	4c10      	ldr	r4, [pc, #64]	; (800835c <LmHandlerInit+0x44>)
{
 800831c:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800831e:	0020      	movs	r0, r4
 8008320:	2220      	movs	r2, #32
 8008322:	3018      	adds	r0, #24
 8008324:	f006 fd96 	bl	800ee54 <UTIL_MEM_cpy_8>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008328:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <LmHandlerInit+0x48>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800832a:	490e      	ldr	r1, [pc, #56]	; (8008364 <LmHandlerInit+0x4c>)
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800832c:	6663      	str	r3, [r4, #100]	; 0x64
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800832e:	4b0e      	ldr	r3, [pc, #56]	; (8008368 <LmHandlerInit+0x50>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8008330:	312c      	adds	r1, #44	; 0x2c
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008332:	66a3      	str	r3, [r4, #104]	; 0x68
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008334:	4b0d      	ldr	r3, [pc, #52]	; (800836c <LmHandlerInit+0x54>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8008336:	2000      	movs	r0, #0
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008338:	66e3      	str	r3, [r4, #108]	; 0x6c
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800833a:	4b0d      	ldr	r3, [pc, #52]	; (8008370 <LmHandlerInit+0x58>)
 800833c:	6723      	str	r3, [r4, #112]	; 0x70
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800833e:	69a3      	ldr	r3, [r4, #24]
 8008340:	6563      	str	r3, [r4, #84]	; 0x54
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 8008342:	69e3      	ldr	r3, [r4, #28]
 8008344:	65a3      	str	r3, [r4, #88]	; 0x58
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 8008346:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <LmHandlerInit+0x5c>)
 8008348:	65e3      	str	r3, [r4, #92]	; 0x5c
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800834a:	6a23      	ldr	r3, [r4, #32]
 800834c:	6623      	str	r3, [r4, #96]	; 0x60
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800834e:	f7ff ffbd 	bl	80082cc <LmHandlerPackageRegister>
 8008352:	1e43      	subs	r3, r0, #1
 8008354:	4198      	sbcs	r0, r3
 8008356:	4240      	negs	r0, r0
}
 8008358:	bd10      	pop	{r4, pc}
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	20000494 	.word	0x20000494
 8008360:	08007ea5 	.word	0x08007ea5
 8008364:	2000010c 	.word	0x2000010c
 8008368:	080083a5 	.word	0x080083a5
 800836c:	08008499 	.word	0x08008499
 8008370:	08007e7d 	.word	0x08007e7d
 8008374:	08008821 	.word	0x08008821

08008378 <LmHandlerGetCurrentClass>:
{
 8008378:	b510      	push	{r4, lr}
 800837a:	0004      	movs	r4, r0
 800837c:	b08a      	sub	sp, #40	; 0x28
  if (deviceClass == NULL)
 800837e:	2800      	cmp	r0, #0
 8008380:	d103      	bne.n	800838a <LmHandlerGetCurrentClass+0x12>
    return LORAMAC_HANDLER_ERROR;
 8008382:	2001      	movs	r0, #1
 8008384:	4240      	negs	r0, r0
}
 8008386:	b00a      	add	sp, #40	; 0x28
 8008388:	bd10      	pop	{r4, pc}
  mibReq.Type = MIB_DEVICE_CLASS;
 800838a:	2300      	movs	r3, #0
 800838c:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800838e:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_DEVICE_CLASS;
 8008390:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008392:	f002 fa31 	bl	800a7f8 <LoRaMacMibGetRequestConfirm>
 8008396:	2800      	cmp	r0, #0
 8008398:	d1f3      	bne.n	8008382 <LmHandlerGetCurrentClass+0xa>
  *deviceClass = mibReq.Param.Class;
 800839a:	466b      	mov	r3, sp
 800839c:	7a1b      	ldrb	r3, [r3, #8]
 800839e:	7023      	strb	r3, [r4, #0]
  return LORAMAC_HANDLER_SUCCESS;
 80083a0:	e7f1      	b.n	8008386 <LmHandlerGetCurrentClass+0xe>
	...

080083a4 <McpsIndication>:
  RxParams.IsMcpsIndication = 1;
 80083a4:	2301      	movs	r3, #1
{
 80083a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  RxParams.IsMcpsIndication = 1;
 80083a8:	492b      	ldr	r1, [pc, #172]	; (8008458 <McpsIndication+0xb4>)
{
 80083aa:	0004      	movs	r4, r0
  RxParams.IsMcpsIndication = 1;
 80083ac:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mcpsIndication->Status;
 80083ae:	7843      	ldrb	r3, [r0, #1]
{
 80083b0:	b087      	sub	sp, #28
  RxParams.Status = mcpsIndication->Status;
 80083b2:	704b      	strb	r3, [r1, #1]
  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d145      	bne.n	8008444 <McpsIndication+0xa0>
  if (mcpsIndication->BufferSize > 0)
 80083b8:	7b03      	ldrb	r3, [r0, #12]
 80083ba:	4e28      	ldr	r6, [pc, #160]	; (800845c <McpsIndication+0xb8>)
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d012      	beq.n	80083e6 <McpsIndication+0x42>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80083c0:	7902      	ldrb	r2, [r0, #4]
 80083c2:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 80083c4:	89c2      	ldrh	r2, [r0, #14]
 80083c6:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = mcpsIndication->Snr;
 80083c8:	7c02      	ldrb	r2, [r0, #16]
 80083ca:	710a      	strb	r2, [r1, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80083cc:	6942      	ldr	r2, [r0, #20]
 80083ce:	608a      	str	r2, [r1, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 80083d0:	7c42      	ldrb	r2, [r0, #17]
 80083d2:	730a      	strb	r2, [r1, #12]
    appData.Port = mcpsIndication->Port;
 80083d4:	78c2      	ldrb	r2, [r0, #3]
 80083d6:	4668      	mov	r0, sp
    appData.BufferSize = mcpsIndication->BufferSize;
 80083d8:	7243      	strb	r3, [r0, #9]
    appData.Buffer = mcpsIndication->Buffer;
 80083da:	68a3      	ldr	r3, [r4, #8]
    appData.Port = mcpsIndication->Port;
 80083dc:	7202      	strb	r2, [r0, #8]
    appData.Buffer = mcpsIndication->Buffer;
 80083de:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 80083e0:	a802      	add	r0, sp, #8
 80083e2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80083e4:	4798      	blx	r3
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 80083e6:	7f23      	ldrb	r3, [r4, #28]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <McpsIndication+0x50>
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 80083ec:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d000      	beq.n	80083f4 <McpsIndication+0x50>
        LmHandlerCallbacks.OnSysTimeUpdate( );
 80083f2:	4798      	blx	r3
 80083f4:	0037      	movs	r7, r6
{
 80083f6:	2500      	movs	r5, #0
 80083f8:	3738      	adds	r7, #56	; 0x38
    if (LmHandlerPackages[i] != NULL)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <McpsIndication+0x72>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	2a00      	cmp	r2, #0
 8008404:	d007      	beq.n	8008416 <McpsIndication+0x72>
 8008406:	781a      	ldrb	r2, [r3, #0]
 8008408:	78e3      	ldrb	r3, [r4, #3]
 800840a:	429a      	cmp	r2, r3
 800840c:	d11c      	bne.n	8008448 <McpsIndication+0xa4>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	0020      	movs	r0, r4
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008416:	3501      	adds	r5, #1
 8008418:	b2eb      	uxtb	r3, r5
 800841a:	3704      	adds	r7, #4
 800841c:	b26d      	sxtb	r5, r5
 800841e:	2b05      	cmp	r3, #5
 8008420:	d1eb      	bne.n	80083fa <McpsIndication+0x56>
  LmHandlerGetCurrentClass(&deviceClass);
 8008422:	466b      	mov	r3, sp
 8008424:	1ddd      	adds	r5, r3, #7
 8008426:	0028      	movs	r0, r5
 8008428:	f7ff ffa6 	bl	8008378 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800842c:	7963      	ldrb	r3, [r4, #5]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d108      	bne.n	8008444 <McpsIndication+0xa0>
 8008432:	7829      	ldrb	r1, [r5, #0]
 8008434:	2900      	cmp	r1, #0
 8008436:	d105      	bne.n	8008444 <McpsIndication+0xa0>
    LmHandlerAppData_t appData =
 8008438:	a804      	add	r0, sp, #16
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800843a:	000a      	movs	r2, r1
    LmHandlerAppData_t appData =
 800843c:	8001      	strh	r1, [r0, #0]
 800843e:	6041      	str	r1, [r0, #4]
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8008440:	f7ff feda 	bl	80081f8 <LmHandlerSend>
}
 8008444:	b007      	add	sp, #28
 8008446:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 8008448:	2d00      	cmp	r5, #0
 800844a:	d1e4      	bne.n	8008416 <McpsIndication+0x72>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800844c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	4798      	blx	r3
 8008452:	2800      	cmp	r0, #0
 8008454:	d1db      	bne.n	800840e <McpsIndication+0x6a>
 8008456:	e7de      	b.n	8008416 <McpsIndication+0x72>
 8008458:	2000010c 	.word	0x2000010c
 800845c:	20000494 	.word	0x20000494

08008460 <LmHandlerGetTxDatarate>:
{
 8008460:	b510      	push	{r4, lr}
 8008462:	0004      	movs	r4, r0
 8008464:	b08a      	sub	sp, #40	; 0x28
  if (txDatarate == NULL)
 8008466:	2800      	cmp	r0, #0
 8008468:	d103      	bne.n	8008472 <LmHandlerGetTxDatarate+0x12>
    return LORAMAC_HANDLER_ERROR;
 800846a:	2001      	movs	r0, #1
 800846c:	4240      	negs	r0, r0
}
 800846e:	b00a      	add	sp, #40	; 0x28
 8008470:	bd10      	pop	{r4, pc}
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8008472:	231f      	movs	r3, #31
 8008474:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8008476:	a801      	add	r0, sp, #4
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8008478:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800847a:	f002 f9bd 	bl	800a7f8 <LoRaMacMibGetRequestConfirm>
 800847e:	2800      	cmp	r0, #0
 8008480:	d1f3      	bne.n	800846a <LmHandlerGetTxDatarate+0xa>
  *txDatarate = mibGet.Param.ChannelsDatarate;
 8008482:	466b      	mov	r3, sp
 8008484:	2208      	movs	r2, #8
 8008486:	569a      	ldrsb	r2, [r3, r2]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <LmHandlerGetTxDatarate+0x34>)
  *txDatarate = mibGet.Param.ChannelsDatarate;
 800848a:	7022      	strb	r2, [r4, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800848c:	334c      	adds	r3, #76	; 0x4c
 800848e:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 8008490:	e7ed      	b.n	800846e <LmHandlerGetTxDatarate+0xe>
 8008492:	46c0      	nop			; (mov r8, r8)
 8008494:	20000494 	.word	0x20000494

08008498 <MlmeConfirm>:
  TxParams.IsMcpsConfirm = 0;
 8008498:	2300      	movs	r3, #0
{
 800849a:	b5f0      	push	{r4, r5, r6, r7, lr}
  TxParams.IsMcpsConfirm = 0;
 800849c:	4c1b      	ldr	r4, [pc, #108]	; (800850c <MlmeConfirm+0x74>)
{
 800849e:	0005      	movs	r5, r0
 80084a0:	0026      	movs	r6, r4
 80084a2:	0027      	movs	r7, r4
  TxParams.IsMcpsConfirm = 0;
 80084a4:	7023      	strb	r3, [r4, #0]
  TxParams.Status = mlmeConfirm->Status;
 80084a6:	7843      	ldrb	r3, [r0, #1]
{
 80084a8:	b08b      	sub	sp, #44	; 0x2c
  TxParams.Status = mlmeConfirm->Status;
 80084aa:	7063      	strb	r3, [r4, #1]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 80084ac:	3638      	adds	r6, #56	; 0x38
 80084ae:	374c      	adds	r7, #76	; 0x4c
    if (LmHandlerPackages[i] != NULL)
 80084b0:	6833      	ldr	r3, [r6, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <MlmeConfirm+0x28>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <MlmeConfirm+0x28>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 80084bc:	0028      	movs	r0, r5
 80084be:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 80084c0:	3604      	adds	r6, #4
 80084c2:	42be      	cmp	r6, r7
 80084c4:	d1f4      	bne.n	80084b0 <MlmeConfirm+0x18>
  switch (mlmeConfirm->MlmeRequest)
 80084c6:	782b      	ldrb	r3, [r5, #0]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d11a      	bne.n	8008502 <MlmeConfirm+0x6a>
      mibReq.Type = MIB_DEV_ADDR;
 80084cc:	af01      	add	r7, sp, #4
 80084ce:	3305      	adds	r3, #5
      LoRaMacMibGetRequestConfirm(&mibReq);
 80084d0:	0038      	movs	r0, r7
      mibReq.Type = MIB_DEV_ADDR;
 80084d2:	703b      	strb	r3, [r7, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 80084d4:	f002 f990 	bl	800a7f8 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80084d8:	4e0d      	ldr	r6, [pc, #52]	; (8008510 <MlmeConfirm+0x78>)
 80084da:	687b      	ldr	r3, [r7, #4]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 80084dc:	0037      	movs	r7, r6
 80084de:	3728      	adds	r7, #40	; 0x28
 80084e0:	0038      	movs	r0, r7
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80084e2:	6273      	str	r3, [r6, #36]	; 0x24
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 80084e4:	f7ff ffbc 	bl	8008460 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 80084e8:	786b      	ldrb	r3, [r5, #1]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10b      	bne.n	8008506 <MlmeConfirm+0x6e>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80084ee:	707b      	strb	r3, [r7, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80084f0:	0023      	movs	r3, r4
 80084f2:	334c      	adds	r3, #76	; 0x4c
 80084f4:	7858      	ldrb	r0, [r3, #1]
 80084f6:	f7ff fdd7 	bl	80080a8 <LmHandlerRequestClass>
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 80084fa:	0030      	movs	r0, r6
 80084fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fe:	3028      	adds	r0, #40	; 0x28
 8008500:	4798      	blx	r3
}
 8008502:	b00b      	add	sp, #44	; 0x2c
 8008504:	bdf0      	pop	{r4, r5, r6, r7, pc}
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008506:	23ff      	movs	r3, #255	; 0xff
 8008508:	707b      	strb	r3, [r7, #1]
 800850a:	e7f6      	b.n	80084fa <MlmeConfirm+0x62>
 800850c:	20000494 	.word	0x20000494
 8008510:	2000010c 	.word	0x2000010c

08008514 <LmhpComplianceInit>:
}

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
  if ((params != NULL) && (dataBuffer != NULL))
 8008514:	4b06      	ldr	r3, [pc, #24]	; (8008530 <LmhpComplianceInit+0x1c>)
 8008516:	2800      	cmp	r0, #0
 8008518:	d007      	beq.n	800852a <LmhpComplianceInit+0x16>
 800851a:	2900      	cmp	r1, #0
 800851c:	d005      	beq.n	800852a <LmhpComplianceInit+0x16>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
    ComplianceTestState.DataBuffer = dataBuffer;
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800851e:	729a      	strb	r2, [r3, #10]
    ComplianceTestState.Initialized = true;
 8008520:	2201      	movs	r2, #1
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 8008522:	6018      	str	r0, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 8008524:	60d9      	str	r1, [r3, #12]
  }
  else
  {
    LmhpComplianceParams = NULL;
    ComplianceTestState.Initialized = false;
 8008526:	711a      	strb	r2, [r3, #4]
  }
}
 8008528:	4770      	bx	lr
    LmhpComplianceParams = NULL;
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	e7fa      	b.n	8008526 <LmhpComplianceInit+0x12>
 8008530:	200005fc 	.word	0x200005fc

08008534 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
  return ComplianceTestState.Initialized;
 8008534:	4b01      	ldr	r3, [pc, #4]	; (800853c <LmhpComplianceIsInitialized+0x8>)
 8008536:	7918      	ldrb	r0, [r3, #4]
}
 8008538:	4770      	bx	lr
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	200005fc 	.word	0x200005fc

08008540 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
  if (ComplianceTestState.Initialized == false)
 8008540:	4b02      	ldr	r3, [pc, #8]	; (800854c <LmhpComplianceIsRunning+0xc>)
 8008542:	7918      	ldrb	r0, [r3, #4]
 8008544:	2800      	cmp	r0, #0
 8008546:	d000      	beq.n	800854a <LmhpComplianceIsRunning+0xa>
  {
    return false;
  }

  return ComplianceTestState.IsRunning;
 8008548:	7958      	ldrb	r0, [r3, #5]
}
 800854a:	4770      	bx	lr
 800854c:	200005fc 	.word	0x200005fc

08008550 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess(void)
{
  /* Nothing to process */
}
 8008550:	4770      	bx	lr
	...

08008554 <LmhpComplianceTxProcess>:
{
 8008554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (ComplianceTestState.Initialized == false)
 8008556:	4c1c      	ldr	r4, [pc, #112]	; (80085c8 <LmhpComplianceTxProcess+0x74>)
 8008558:	7923      	ldrb	r3, [r4, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d031      	beq.n	80085c2 <LmhpComplianceTxProcess+0x6e>
  if (ComplianceTestState.LinkCheck == true)
 800855e:	7ca2      	ldrb	r2, [r4, #18]
 8008560:	68e3      	ldr	r3, [r4, #12]
 8008562:	2a00      	cmp	r2, #0
 8008564:	d020      	beq.n	80085a8 <LmhpComplianceTxProcess+0x54>
    ComplianceTestState.LinkCheck = false;
 8008566:	2200      	movs	r2, #0
 8008568:	74a2      	strb	r2, [r4, #18]
    ComplianceTestState.DataBufferSize = 3;
 800856a:	3203      	adds	r2, #3
 800856c:	72e2      	strb	r2, [r4, #11]
    ComplianceTestState.DataBuffer[0] = 5;
 800856e:	3202      	adds	r2, #2
 8008570:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8008572:	7ce2      	ldrb	r2, [r4, #19]
 8008574:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8008576:	7d22      	ldrb	r2, [r4, #20]
 8008578:	709a      	strb	r2, [r3, #2]
    ComplianceTestState.State = 1;
 800857a:	2201      	movs	r2, #1
 800857c:	71a2      	strb	r2, [r4, #6]
  LmHandlerAppData_t appData =
 800857e:	4669      	mov	r1, sp
 8008580:	22e0      	movs	r2, #224	; 0xe0
  TimerStart(&ComplianceTxNextPacketTimer);
 8008582:	0020      	movs	r0, r4
  LmHandlerAppData_t appData =
 8008584:	720a      	strb	r2, [r1, #8]
 8008586:	7ae2      	ldrb	r2, [r4, #11]
 8008588:	9303      	str	r3, [sp, #12]
  TimerTime_t nextTxIn = 0;
 800858a:	2300      	movs	r3, #0
  TimerStart(&ComplianceTxNextPacketTimer);
 800858c:	3018      	adds	r0, #24
  LmHandlerAppData_t appData =
 800858e:	724a      	strb	r2, [r1, #9]
  TimerTime_t nextTxIn = 0;
 8008590:	9301      	str	r3, [sp, #4]
  TimerStart(&ComplianceTxNextPacketTimer);
 8008592:	f006 fe6f 	bl	800f274 <UTIL_TIMER_Start>
  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 8008596:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <LmhpComplianceTxProcess+0x78>)
 8008598:	7a21      	ldrb	r1, [r4, #8]
 800859a:	aa01      	add	r2, sp, #4
 800859c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800859e:	a802      	add	r0, sp, #8
 80085a0:	2301      	movs	r3, #1
 80085a2:	47a0      	blx	r4
}
 80085a4:	b004      	add	sp, #16
 80085a6:	bd10      	pop	{r4, pc}
    switch (ComplianceTestState.State)
 80085a8:	79a2      	ldrb	r2, [r4, #6]
 80085aa:	2a01      	cmp	r2, #1
 80085ac:	d002      	beq.n	80085b4 <LmhpComplianceTxProcess+0x60>
 80085ae:	2a04      	cmp	r2, #4
 80085b0:	d1e5      	bne.n	800857e <LmhpComplianceTxProcess+0x2a>
 80085b2:	e7e2      	b.n	800857a <LmhpComplianceTxProcess+0x26>
        ComplianceTestState.DataBufferSize = 2;
 80085b4:	2202      	movs	r2, #2
 80085b6:	72e2      	strb	r2, [r4, #11]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80085b8:	8a22      	ldrh	r2, [r4, #16]
 80085ba:	0a11      	lsrs	r1, r2, #8
 80085bc:	7019      	strb	r1, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 80085be:	705a      	strb	r2, [r3, #1]
        break;
 80085c0:	e7dd      	b.n	800857e <LmhpComplianceTxProcess+0x2a>
    return LORAMAC_HANDLER_ERROR;
 80085c2:	2001      	movs	r0, #1
 80085c4:	4240      	negs	r0, r0
 80085c6:	e7ed      	b.n	80085a4 <LmhpComplianceTxProcess+0x50>
 80085c8:	200005fc 	.word	0x200005fc
 80085cc:	20000144 	.word	0x20000144

080085d0 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 80085d0:	b510      	push	{r4, lr}
  LmhpComplianceTxProcess();
 80085d2:	f7ff ffbf 	bl	8008554 <LmhpComplianceTxProcess>
}
 80085d6:	bd10      	pop	{r4, pc}

080085d8 <LmhpComplianceOnMcpsConfirm>:
  if (ComplianceTestState.Initialized == false)
 80085d8:	4b08      	ldr	r3, [pc, #32]	; (80085fc <LmhpComplianceOnMcpsConfirm+0x24>)
 80085da:	791a      	ldrb	r2, [r3, #4]
 80085dc:	2a00      	cmp	r2, #0
 80085de:	d00b      	beq.n	80085f8 <LmhpComplianceOnMcpsConfirm+0x20>
  if ((ComplianceTestState.IsRunning == true) &&
 80085e0:	795a      	ldrb	r2, [r3, #5]
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	d008      	beq.n	80085f8 <LmhpComplianceOnMcpsConfirm+0x20>
 80085e6:	7802      	ldrb	r2, [r0, #0]
 80085e8:	2a01      	cmp	r2, #1
 80085ea:	d105      	bne.n	80085f8 <LmhpComplianceOnMcpsConfirm+0x20>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80085ec:	7902      	ldrb	r2, [r0, #4]
 80085ee:	2a00      	cmp	r2, #0
 80085f0:	d002      	beq.n	80085f8 <LmhpComplianceOnMcpsConfirm+0x20>
    ComplianceTestState.DownLinkCounter++;
 80085f2:	8a1a      	ldrh	r2, [r3, #16]
 80085f4:	3201      	adds	r2, #1
 80085f6:	821a      	strh	r2, [r3, #16]
}
 80085f8:	4770      	bx	lr
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	200005fc 	.word	0x200005fc

08008600 <LmhpComplianceOnMlmeConfirm>:
  if (ComplianceTestState.Initialized == false)
 8008600:	4b06      	ldr	r3, [pc, #24]	; (800861c <LmhpComplianceOnMlmeConfirm+0x1c>)
 8008602:	791a      	ldrb	r2, [r3, #4]
 8008604:	2a00      	cmp	r2, #0
 8008606:	d008      	beq.n	800861a <LmhpComplianceOnMlmeConfirm+0x1a>
  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 8008608:	7802      	ldrb	r2, [r0, #0]
 800860a:	2a04      	cmp	r2, #4
 800860c:	d105      	bne.n	800861a <LmhpComplianceOnMlmeConfirm+0x1a>
    ComplianceTestState.LinkCheck = true;
 800860e:	3a03      	subs	r2, #3
 8008610:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8008612:	7a02      	ldrb	r2, [r0, #8]
 8008614:	74da      	strb	r2, [r3, #19]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8008616:	7a42      	ldrb	r2, [r0, #9]
 8008618:	751a      	strb	r2, [r3, #20]
}
 800861a:	4770      	bx	lr
 800861c:	200005fc 	.word	0x200005fc

08008620 <LmhpComplianceOnMcpsIndication>:
{
 8008620:	b530      	push	{r4, r5, lr}
  if (ComplianceTestState.Initialized == false)
 8008622:	4c78      	ldr	r4, [pc, #480]	; (8008804 <LmhpComplianceOnMcpsIndication+0x1e4>)
{
 8008624:	0002      	movs	r2, r0
  if (ComplianceTestState.Initialized == false)
 8008626:	7923      	ldrb	r3, [r4, #4]
{
 8008628:	b08d      	sub	sp, #52	; 0x34
  if (ComplianceTestState.Initialized == false)
 800862a:	2b00      	cmp	r3, #0
 800862c:	d045      	beq.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
  if (mcpsIndication->RxData == false)
 800862e:	7b43      	ldrb	r3, [r0, #13]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d042      	beq.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
  if ((ComplianceTestState.IsRunning == true) &&
 8008634:	7965      	ldrb	r5, [r4, #5]
 8008636:	2d00      	cmp	r5, #0
 8008638:	d005      	beq.n	8008646 <LmhpComplianceOnMcpsIndication+0x26>
 800863a:	7c83      	ldrb	r3, [r0, #18]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <LmhpComplianceOnMcpsIndication+0x26>
    ComplianceTestState.DownLinkCounter++;
 8008640:	8a23      	ldrh	r3, [r4, #16]
 8008642:	3301      	adds	r3, #1
 8008644:	8223      	strh	r3, [r4, #16]
  if (mcpsIndication->Port != COMPLIANCE_PORT)
 8008646:	78d3      	ldrb	r3, [r2, #3]
 8008648:	2be0      	cmp	r3, #224	; 0xe0
 800864a:	d136      	bne.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
  if (ComplianceTestState.IsRunning == false)
 800864c:	2d00      	cmp	r5, #0
 800864e:	d136      	bne.n	80086be <LmhpComplianceOnMcpsIndication+0x9e>
    if ((mcpsIndication->BufferSize == 4) &&
 8008650:	7b11      	ldrb	r1, [r2, #12]
 8008652:	2904      	cmp	r1, #4
 8008654:	d131      	bne.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[0] == 0x01) &&
 8008656:	6893      	ldr	r3, [r2, #8]
    if ((mcpsIndication->BufferSize == 4) &&
 8008658:	781a      	ldrb	r2, [r3, #0]
 800865a:	2a01      	cmp	r2, #1
 800865c:	d12d      	bne.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800865e:	785a      	ldrb	r2, [r3, #1]
 8008660:	2a01      	cmp	r2, #1
 8008662:	d12a      	bne.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[1] == 0x01) &&
 8008664:	789a      	ldrb	r2, [r3, #2]
 8008666:	2a01      	cmp	r2, #1
 8008668:	d127      	bne.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800866a:	78db      	ldrb	r3, [r3, #3]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d124      	bne.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
      ComplianceTestState.IsTxConfirmed = false;
 8008670:	4a65      	ldr	r2, [pc, #404]	; (8008808 <LmhpComplianceOnMcpsIndication+0x1e8>)
      ComplianceTestState.DownLinkCounter = 0;
 8008672:	6125      	str	r5, [r4, #16]
      ComplianceTestState.IsTxConfirmed = false;
 8008674:	8122      	strh	r2, [r4, #8]
      ComplianceTestState.DataBufferSize = 2;
 8008676:	2202      	movs	r2, #2
 8008678:	72e2      	strb	r2, [r4, #11]
      mibReq.Type = MIB_ADR;
 800867a:	466a      	mov	r2, sp
      LoRaMacMibSetRequestConfirm(&mibReq);
 800867c:	a803      	add	r0, sp, #12
      ComplianceTestState.IsRunning = true;
 800867e:	7163      	strb	r3, [r4, #5]
      ComplianceTestState.State = 1;
 8008680:	71a3      	strb	r3, [r4, #6]
      mibReq.Param.AdrEnable = true;
 8008682:	7413      	strb	r3, [r2, #16]
      mibReq.Type = MIB_ADR;
 8008684:	7311      	strb	r1, [r2, #12]
      ComplianceTestState.NbGateways = 0;
 8008686:	7525      	strb	r5, [r4, #20]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008688:	f002 f9d4 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
      LoRaMacTestSetDutyCycleOn(false);
 800868c:	0028      	movs	r0, r5
 800868e:	f002 fecd 	bl	800b42c <LoRaMacTestSetDutyCycleOn>
      if (LmhpComplianceParams->StopPeripherals != NULL)
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d000      	beq.n	800869c <LmhpComplianceOnMcpsIndication+0x7c>
        LmhpComplianceParams->StopPeripherals();
 800869a:	4798      	blx	r3
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800869c:	2200      	movs	r2, #0
 800869e:	2101      	movs	r1, #1
 80086a0:	3418      	adds	r4, #24
 80086a2:	4b5a      	ldr	r3, [pc, #360]	; (800880c <LmhpComplianceOnMcpsIndication+0x1ec>)
 80086a4:	9200      	str	r2, [sp, #0]
 80086a6:	4249      	negs	r1, r1
 80086a8:	0020      	movs	r0, r4
 80086aa:	f006 fd2f 	bl	800f10c <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 80086ae:	4958      	ldr	r1, [pc, #352]	; (8008810 <LmhpComplianceOnMcpsIndication+0x1f0>)
 80086b0:	0020      	movs	r0, r4
 80086b2:	f006 fe21 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
      LmhpComplianceTxProcess();
 80086b6:	f7ff ff4d 	bl	8008554 <LmhpComplianceTxProcess>
}
 80086ba:	b00d      	add	sp, #52	; 0x34
 80086bc:	bd30      	pop	{r4, r5, pc}
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 80086be:	6893      	ldr	r3, [r2, #8]
 80086c0:	7818      	ldrb	r0, [r3, #0]
 80086c2:	71a0      	strb	r0, [r4, #6]
    switch (ComplianceTestState.State)
 80086c4:	280a      	cmp	r0, #10
 80086c6:	d8f8      	bhi.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
 80086c8:	f7f7 fd30 	bl	800012c <__gnu_thumb1_case_uqi>
 80086cc:	27232006 	.word	0x27232006
 80086d0:	6446402b 	.word	0x6446402b
 80086d4:	8c89      	.short	0x8c89
 80086d6:	95          	.byte	0x95
 80086d7:	00          	.byte	0x00
        TimerStop(&ComplianceTxNextPacketTimer);
 80086d8:	0020      	movs	r0, r4
 80086da:	3018      	adds	r0, #24
 80086dc:	f006 fd76 	bl	800f1cc <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 80086e0:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 80086e2:	466a      	mov	r2, sp
        ComplianceTestState.DownLinkCounter = 0;
 80086e4:	8223      	strh	r3, [r4, #16]
        ComplianceTestState.IsRunning = false;
 80086e6:	7163      	strb	r3, [r4, #5]
        mibReq.Type = MIB_ADR;
 80086e8:	3304      	adds	r3, #4
 80086ea:	7313      	strb	r3, [r2, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80086ec:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80086ee:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	7413      	strb	r3, [r2, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80086f4:	f002 f99e 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	7858      	ldrb	r0, [r3, #1]
 80086fc:	f002 fe96 	bl	800b42c <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d0d8      	beq.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
          LmhpComplianceParams->StartPeripherals();
 8008708:	4798      	blx	r3
      break;
 800870a:	e7d6      	b.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
        ComplianceTestState.DataBufferSize = 2;
 800870c:	2302      	movs	r3, #2
 800870e:	72e3      	strb	r3, [r4, #11]
        break;
 8008710:	e7d3      	b.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
        ComplianceTestState.IsTxConfirmed = true;
 8008712:	2301      	movs	r3, #1
 8008714:	7223      	strb	r3, [r4, #8]
        ComplianceTestState.State = 1;
 8008716:	71a3      	strb	r3, [r4, #6]
        break;
 8008718:	e7cf      	b.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
        ComplianceTestState.IsTxConfirmed = false;
 800871a:	2300      	movs	r3, #0
 800871c:	7223      	strb	r3, [r4, #8]
        ComplianceTestState.State = 1;
 800871e:	3301      	adds	r3, #1
 8008720:	e7f9      	b.n	8008716 <LmhpComplianceOnMcpsIndication+0xf6>
        ComplianceTestState.DataBuffer[0] = 4;
 8008722:	2304      	movs	r3, #4
 8008724:	68e5      	ldr	r5, [r4, #12]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008726:	7b11      	ldrb	r1, [r2, #12]
        ComplianceTestState.DataBuffer[0] = 4;
 8008728:	702b      	strb	r3, [r5, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800872a:	7aa0      	ldrb	r0, [r4, #10]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800872c:	72e1      	strb	r1, [r4, #11]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800872e:	1c03      	adds	r3, r0, #0
 8008730:	4288      	cmp	r0, r1
 8008732:	d900      	bls.n	8008736 <LmhpComplianceOnMcpsIndication+0x116>
 8008734:	1c0b      	adds	r3, r1, #0
 8008736:	b2d9      	uxtb	r1, r3
 8008738:	2300      	movs	r3, #0
 800873a:	3301      	adds	r3, #1
 800873c:	b2d8      	uxtb	r0, r3
 800873e:	4281      	cmp	r1, r0
 8008740:	d9bb      	bls.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8008742:	6890      	ldr	r0, [r2, #8]
 8008744:	5cc0      	ldrb	r0, [r0, r3]
 8008746:	3001      	adds	r0, #1
 8008748:	54e8      	strb	r0, [r5, r3]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800874a:	e7f6      	b.n	800873a <LmhpComplianceOnMcpsIndication+0x11a>
        mlmeReq.Type = MLME_LINK_CHECK;
 800874c:	2304      	movs	r3, #4
 800874e:	a803      	add	r0, sp, #12
        mlmeReq.Type = MLME_DEVICE_TIME;
 8008750:	7003      	strb	r3, [r0, #0]
        LoRaMacMlmeRequest(&mlmeReq);
 8008752:	f002 fb9b 	bl	800ae8c <LoRaMacMlmeRequest>
      break;
 8008756:	e7b0      	b.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
        TimerStop(&ComplianceTxNextPacketTimer);
 8008758:	0020      	movs	r0, r4
 800875a:	3018      	adds	r0, #24
 800875c:	f006 fd36 	bl	800f1cc <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 8008760:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 8008762:	466a      	mov	r2, sp
        ComplianceTestState.DownLinkCounter = 0;
 8008764:	8223      	strh	r3, [r4, #16]
        ComplianceTestState.IsRunning = false;
 8008766:	7163      	strb	r3, [r4, #5]
        mibReq.Type = MIB_ADR;
 8008768:	3304      	adds	r3, #4
 800876a:	7313      	strb	r3, [r2, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800876c:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800876e:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	7413      	strb	r3, [r2, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008774:	f002 f95e 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	7858      	ldrb	r0, [r3, #1]
 800877c:	f002 fe56 	bl	800b42c <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d000      	beq.n	800878a <LmhpComplianceOnMcpsIndication+0x16a>
          LmhpComplianceParams->StartPeripherals();
 8008788:	4798      	blx	r3
        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800878a:	4b22      	ldr	r3, [pc, #136]	; (8008814 <LmhpComplianceOnMcpsIndication+0x1f4>)
 800878c:	2002      	movs	r0, #2
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	4798      	blx	r3
      break;
 8008792:	e792      	b.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
        if (mcpsIndication->BufferSize == 3)
 8008794:	7b12      	ldrb	r2, [r2, #12]
 8008796:	a803      	add	r0, sp, #12
 8008798:	2a03      	cmp	r2, #3
 800879a:	d10a      	bne.n	80087b2 <LmhpComplianceOnMcpsIndication+0x192>
          mlmeReq.Type = MLME_TXCW;
 800879c:	3202      	adds	r2, #2
 800879e:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 80087a0:	785a      	ldrb	r2, [r3, #1]
 80087a2:	789b      	ldrb	r3, [r3, #2]
 80087a4:	0212      	lsls	r2, r2, #8
 80087a6:	4313      	orrs	r3, r2
 80087a8:	8083      	strh	r3, [r0, #4]
        LoRaMacMlmeRequest(&mlmeReq);
 80087aa:	f002 fb6f 	bl	800ae8c <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e7b1      	b.n	8008716 <LmhpComplianceOnMcpsIndication+0xf6>
        else if (mcpsIndication->BufferSize == 7)
 80087b2:	2a07      	cmp	r2, #7
 80087b4:	d1f9      	bne.n	80087aa <LmhpComplianceOnMcpsIndication+0x18a>
          mlmeReq.Type = MLME_TXCW_1;
 80087b6:	3a01      	subs	r2, #1
 80087b8:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 80087ba:	7859      	ldrb	r1, [r3, #1]
 80087bc:	789a      	ldrb	r2, [r3, #2]
 80087be:	0209      	lsls	r1, r1, #8
 80087c0:	430a      	orrs	r2, r1
 80087c2:	8082      	strh	r2, [r0, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 80087c4:	78da      	ldrb	r2, [r3, #3]
 80087c6:	7919      	ldrb	r1, [r3, #4]
 80087c8:	0412      	lsls	r2, r2, #16
 80087ca:	0209      	lsls	r1, r1, #8
 80087cc:	430a      	orrs	r2, r1
 80087ce:	7959      	ldrb	r1, [r3, #5]
 80087d0:	430a      	orrs	r2, r1
 80087d2:	2164      	movs	r1, #100	; 0x64
 80087d4:	434a      	muls	r2, r1
 80087d6:	6082      	str	r2, [r0, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80087d8:	799b      	ldrb	r3, [r3, #6]
 80087da:	7303      	strb	r3, [r0, #12]
 80087dc:	e7e5      	b.n	80087aa <LmhpComplianceOnMcpsIndication+0x18a>
        mlmeReq.Type = MLME_DEVICE_TIME;
 80087de:	230a      	movs	r3, #10
 80087e0:	a803      	add	r0, sp, #12
 80087e2:	e7b5      	b.n	8008750 <LmhpComplianceOnMcpsIndication+0x130>
        mibReq.Type = MIB_DEVICE_CLASS;
 80087e4:	4669      	mov	r1, sp
 80087e6:	2200      	movs	r2, #0
 80087e8:	730a      	strb	r2, [r1, #12]
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 80087ea:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80087ec:	a803      	add	r0, sp, #12
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 80087ee:	740b      	strb	r3, [r1, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80087f0:	f002 f920 	bl	800aa34 <LoRaMacMibSetRequestConfirm>
      break;
 80087f4:	e761      	b.n	80086ba <LmhpComplianceOnMcpsIndication+0x9a>
        mlmeReq.Type = MLME_PING_SLOT_INFO;
 80087f6:	4669      	mov	r1, sp
 80087f8:	220d      	movs	r2, #13
 80087fa:	730a      	strb	r2, [r1, #12]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80087fc:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMlmeRequest(&mlmeReq);
 80087fe:	a803      	add	r0, sp, #12
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008800:	740b      	strb	r3, [r1, #16]
        LoRaMacMlmeRequest(&mlmeReq);
 8008802:	e7a6      	b.n	8008752 <LmhpComplianceOnMcpsIndication+0x132>
 8008804:	200005fc 	.word	0x200005fc
 8008808:	ffffe000 	.word	0xffffe000
 800880c:	080085d1 	.word	0x080085d1
 8008810:	00001388 	.word	0x00001388
 8008814:	20000144 	.word	0x20000144

08008818 <LmphCompliancePackageFactory>:
}
 8008818:	4800      	ldr	r0, [pc, #0]	; (800881c <LmphCompliancePackageFactory+0x4>)
 800881a:	4770      	bx	lr
 800881c:	20000144 	.word	0x20000144

08008820 <NvmCtxMgmtEvent>:
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8008820:	4770      	bx	lr

08008822 <NvmCtxMgmtStore>:

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8008822:	2001      	movs	r0, #1
 8008824:	4770      	bx	lr

08008826 <NvmCtxMgmtRestore>:
 8008826:	2001      	movs	r0, #1
 8008828:	4770      	bx	lr
	...

0800882c <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 800882c:	2302      	movs	r3, #2
 800882e:	4a08      	ldr	r2, [pc, #32]	; (8008850 <OnRadioRxError+0x24>)
{
 8008830:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008832:	7811      	ldrb	r1, [r2, #0]
 8008834:	430b      	orrs	r3, r1
 8008836:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008838:	23d2      	movs	r3, #210	; 0xd2
 800883a:	4a06      	ldr	r2, [pc, #24]	; (8008854 <OnRadioRxError+0x28>)
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	58d3      	ldr	r3, [r2, r3]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <OnRadioRxError+0x20>
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d000      	beq.n	800884c <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800884a:	4798      	blx	r3
    }
}
 800884c:	bd10      	pop	{r4, pc}
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	2000062c 	.word	0x2000062c
 8008854:	200007d4 	.word	0x200007d4

08008858 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008858:	4a05      	ldr	r2, [pc, #20]	; (8008870 <UpdateRxSlotIdleState+0x18>)
 800885a:	4b06      	ldr	r3, [pc, #24]	; (8008874 <UpdateRxSlotIdleState+0x1c>)
 800885c:	58d3      	ldr	r3, [r2, r3]
 800885e:	337c      	adds	r3, #124	; 0x7c
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b02      	cmp	r3, #2
 8008864:	d000      	beq.n	8008868 <UpdateRxSlotIdleState+0x10>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8008866:	2306      	movs	r3, #6
 8008868:	2190      	movs	r1, #144	; 0x90
 800886a:	00c9      	lsls	r1, r1, #3
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800886c:	5453      	strb	r3, [r2, r1]
 800886e:	4770      	bx	lr
 8008870:	200007d4 	.word	0x200007d4
 8008874:	00000484 	.word	0x00000484

08008878 <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008878:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <StopRetransmission+0x48>)
 800887a:	4a12      	ldr	r2, [pc, #72]	; (80088c4 <StopRetransmission+0x4c>)
 800887c:	5c9a      	ldrb	r2, [r3, r2]
 800887e:	0792      	lsls	r2, r2, #30
 8008880:	d503      	bpl.n	800888a <StopRetransmission+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8008882:	4a11      	ldr	r2, [pc, #68]	; (80088c8 <StopRetransmission+0x50>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008884:	5c9a      	ldrb	r2, [r3, r2]
 8008886:	2a01      	cmp	r2, #1
 8008888:	d90a      	bls.n	80088a0 <StopRetransmission+0x28>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800888a:	4a10      	ldr	r2, [pc, #64]	; (80088cc <StopRetransmission+0x54>)
 800888c:	589a      	ldr	r2, [r3, r2]
 800888e:	0011      	movs	r1, r2
 8008890:	317e      	adds	r1, #126	; 0x7e
 8008892:	7809      	ldrb	r1, [r1, #0]
 8008894:	2900      	cmp	r1, #0
 8008896:	d003      	beq.n	80088a0 <StopRetransmission+0x28>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8008898:	3204      	adds	r2, #4
 800889a:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 800889c:	3101      	adds	r1, #1
 800889e:	67d1      	str	r1, [r2, #124]	; 0x7c
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80088a0:	2182      	movs	r1, #130	; 0x82
 80088a2:	2200      	movs	r2, #0
 80088a4:	00c9      	lsls	r1, r1, #3
 80088a6:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 80088a8:	4909      	ldr	r1, [pc, #36]	; (80088d0 <StopRetransmission+0x58>)
 80088aa:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 80088ac:	4909      	ldr	r1, [pc, #36]	; (80088d4 <StopRetransmission+0x5c>)
 80088ae:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80088b0:	39d3      	subs	r1, #211	; 0xd3
 80088b2:	5858      	ldr	r0, [r3, r1]
 80088b4:	3202      	adds	r2, #2
 80088b6:	4390      	bics	r0, r2
 80088b8:	5058      	str	r0, [r3, r1]

    return true;
}
 80088ba:	2001      	movs	r0, #1
 80088bc:	4770      	bx	lr
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	200007d4 	.word	0x200007d4
 80088c4:	00000481 	.word	0x00000481
 80088c8:	0000042d 	.word	0x0000042d
 80088cc:	00000484 	.word	0x00000484
 80088d0:	00000414 	.word	0x00000414
 80088d4:	00000413 	.word	0x00000413

080088d8 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80088d8:	23d2      	movs	r3, #210	; 0xd2
 80088da:	4a05      	ldr	r2, [pc, #20]	; (80088f0 <CallNvmCtxCallback+0x18>)
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	58d3      	ldr	r3, [r2, r3]
{
 80088e0:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <CallNvmCtxCallback+0x16>
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d000      	beq.n	80088ee <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 80088ec:	4798      	blx	r3
    }
}
 80088ee:	bd10      	pop	{r4, pc}
 80088f0:	200007d4 	.word	0x200007d4

080088f4 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 80088f4:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 80088f6:	2000      	movs	r0, #0
 80088f8:	f7ff ffee 	bl	80088d8 <CallNvmCtxCallback>
}
 80088fc:	bd10      	pop	{r4, pc}

080088fe <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 80088fe:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8008900:	2001      	movs	r0, #1
 8008902:	f7ff ffe9 	bl	80088d8 <CallNvmCtxCallback>
}
 8008906:	bd10      	pop	{r4, pc}

08008908 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8008908:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800890a:	2002      	movs	r0, #2
 800890c:	f7ff ffe4 	bl	80088d8 <CallNvmCtxCallback>
}
 8008910:	bd10      	pop	{r4, pc}

08008912 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8008912:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8008914:	2003      	movs	r0, #3
 8008916:	f7ff ffdf 	bl	80088d8 <CallNvmCtxCallback>
}
 800891a:	bd10      	pop	{r4, pc}

0800891c <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 800891c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800891e:	2004      	movs	r0, #4
 8008920:	f7ff ffda 	bl	80088d8 <CallNvmCtxCallback>
}
 8008924:	bd10      	pop	{r4, pc}

08008926 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8008926:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8008928:	2005      	movs	r0, #5
 800892a:	f7ff ffd5 	bl	80088d8 <CallNvmCtxCallback>
}
 800892e:	bd10      	pop	{r4, pc}

08008930 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8008930:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8008932:	2006      	movs	r0, #6
 8008934:	f7ff ffd0 	bl	80088d8 <CallNvmCtxCallback>
}
 8008938:	bd10      	pop	{r4, pc}
	...

0800893c <GetMaxAppPayloadWithoutFOptsLength>:
{
 800893c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800893e:	4a0c      	ldr	r2, [pc, #48]	; (8008970 <GetMaxAppPayloadWithoutFOptsLength+0x34>)
 8008940:	4b0c      	ldr	r3, [pc, #48]	; (8008974 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8008942:	a902      	add	r1, sp, #8
 8008944:	58d3      	ldr	r3, [r2, r3]
 8008946:	001a      	movs	r2, r3
 8008948:	32b8      	adds	r2, #184	; 0xb8
 800894a:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 800894c:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800894e:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008950:	220d      	movs	r2, #13
 8008952:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8008954:	001a      	movs	r2, r3
 8008956:	32ca      	adds	r2, #202	; 0xca
 8008958:	7812      	ldrb	r2, [r2, #0]
 800895a:	2a00      	cmp	r2, #0
 800895c:	d001      	beq.n	8008962 <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800895e:	220e      	movs	r2, #14
 8008960:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008962:	7818      	ldrb	r0, [r3, #0]
 8008964:	f003 fcc7 	bl	800c2f6 <RegionGetPhyParam>
    return phyParam.Value;
 8008968:	b2c0      	uxtb	r0, r0
}
 800896a:	b005      	add	sp, #20
 800896c:	bd00      	pop	{pc}
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	200007d4 	.word	0x200007d4
 8008974:	00000484 	.word	0x00000484

08008978 <OnAckTimeoutTimerEvent>:
{
 8008978:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800897a:	4810      	ldr	r0, [pc, #64]	; (80089bc <OnAckTimeoutTimerEvent+0x44>)
 800897c:	f006 fc26 	bl	800f1cc <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8008980:	4b0f      	ldr	r3, [pc, #60]	; (80089c0 <OnAckTimeoutTimerEvent+0x48>)
 8008982:	4a10      	ldr	r2, [pc, #64]	; (80089c4 <OnAckTimeoutTimerEvent+0x4c>)
 8008984:	5c9a      	ldrb	r2, [r3, r2]
 8008986:	2a00      	cmp	r2, #0
 8008988:	d002      	beq.n	8008990 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800898a:	2101      	movs	r1, #1
 800898c:	4a0e      	ldr	r2, [pc, #56]	; (80089c8 <OnAckTimeoutTimerEvent+0x50>)
 800898e:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8008990:	4a0e      	ldr	r2, [pc, #56]	; (80089cc <OnAckTimeoutTimerEvent+0x54>)
 8008992:	589a      	ldr	r2, [r3, r2]
 8008994:	327c      	adds	r2, #124	; 0x7c
 8008996:	7812      	ldrb	r2, [r2, #0]
 8008998:	2a02      	cmp	r2, #2
 800899a:	d104      	bne.n	80089a6 <OnAckTimeoutTimerEvent+0x2e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800899c:	490c      	ldr	r1, [pc, #48]	; (80089d0 <OnAckTimeoutTimerEvent+0x58>)
 800899e:	321e      	adds	r2, #30
 80089a0:	5c58      	ldrb	r0, [r3, r1]
 80089a2:	4302      	orrs	r2, r0
 80089a4:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80089a6:	22d2      	movs	r2, #210	; 0xd2
 80089a8:	0092      	lsls	r2, r2, #2
 80089aa:	589b      	ldr	r3, [r3, r2]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <OnAckTimeoutTimerEvent+0x40>
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d000      	beq.n	80089b8 <OnAckTimeoutTimerEvent+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80089b6:	4798      	blx	r3
}
 80089b8:	bd10      	pop	{r4, pc}
 80089ba:	46c0      	nop			; (mov r8, r8)
 80089bc:	20000bcc 	.word	0x20000bcc
 80089c0:	200007d4 	.word	0x200007d4
 80089c4:	00000414 	.word	0x00000414
 80089c8:	00000413 	.word	0x00000413
 80089cc:	00000484 	.word	0x00000484
 80089d0:	00000481 	.word	0x00000481

080089d4 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80089d4:	22d0      	movs	r2, #208	; 0xd0
 80089d6:	2380      	movs	r3, #128	; 0x80
{
 80089d8:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80089da:	4c0a      	ldr	r4, [pc, #40]	; (8008a04 <PrepareRxDoneAbort+0x30>)
 80089dc:	0092      	lsls	r2, r2, #2
 80089de:	58a1      	ldr	r1, [r4, r2]
 80089e0:	430b      	orrs	r3, r1
 80089e2:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 80089e4:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <PrepareRxDoneAbort+0x34>)
 80089e6:	5ce3      	ldrb	r3, [r4, r3]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 80089ec:	2000      	movs	r0, #0
 80089ee:	f7ff ffc3 	bl	8008978 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80089f2:	2322      	movs	r3, #34	; 0x22
 80089f4:	4905      	ldr	r1, [pc, #20]	; (8008a0c <PrepareRxDoneAbort+0x38>)
 80089f6:	5c62      	ldrb	r2, [r4, r1]
 80089f8:	439a      	bics	r2, r3
 80089fa:	4313      	orrs	r3, r2
 80089fc:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 80089fe:	f7ff ff2b 	bl	8008858 <UpdateRxSlotIdleState>
}
 8008a02:	bd10      	pop	{r4, pc}
 8008a04:	200007d4 	.word	0x200007d4
 8008a08:	00000414 	.word	0x00000414
 8008a0c:	00000481 	.word	0x00000481

08008a10 <HandleRadioRxErrorTimeout>:
{
 8008a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008a12:	4c33      	ldr	r4, [pc, #204]	; (8008ae0 <HandleRadioRxErrorTimeout+0xd0>)
 8008a14:	4d33      	ldr	r5, [pc, #204]	; (8008ae4 <HandleRadioRxErrorTimeout+0xd4>)
{
 8008a16:	9000      	str	r0, [sp, #0]
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008a18:	5963      	ldr	r3, [r4, r5]
{
 8008a1a:	000f      	movs	r7, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008a1c:	337c      	adds	r3, #124	; 0x7c
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d003      	beq.n	8008a2c <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 8008a24:	4b30      	ldr	r3, [pc, #192]	; (8008ae8 <HandleRadioRxErrorTimeout+0xd8>)
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008a2c:	f002 fd8e 	bl	800b54c <LoRaMacClassBIsBeaconExpected>
 8008a30:	1e06      	subs	r6, r0, #0
 8008a32:	d005      	beq.n	8008a40 <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008a34:	2002      	movs	r0, #2
 8008a36:	f002 fd7f 	bl	800b538 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	f002 fd81 	bl	800b542 <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8008a40:	5963      	ldr	r3, [r4, r5]
 8008a42:	337c      	adds	r3, #124	; 0x7c
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d118      	bne.n	8008a7c <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008a4a:	f002 fd81 	bl	800b550 <LoRaMacClassBIsPingExpected>
 8008a4e:	9001      	str	r0, [sp, #4]
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d006      	beq.n	8008a62 <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008a54:	2000      	movs	r0, #0
 8008a56:	f002 fd70 	bl	800b53a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	f002 fd72 	bl	800b544 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008a60:	9e01      	ldr	r6, [sp, #4]
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008a62:	f002 fd77 	bl	800b554 <LoRaMacClassBIsMulticastExpected>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d008      	beq.n	8008a7c <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	f002 fd66 	bl	800b53c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008a70:	2000      	movs	r0, #0
 8008a72:	f002 fd68 	bl	800b546 <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 8008a76:	f7ff feef 	bl	8008858 <UpdateRxSlotIdleState>
}
 8008a7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 8008a7c:	2e00      	cmp	r6, #0
 8008a7e:	d1fa      	bne.n	8008a76 <HandleRadioRxErrorTimeout+0x66>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008a80:	2290      	movs	r2, #144	; 0x90
 8008a82:	00d2      	lsls	r2, r2, #3
 8008a84:	4b19      	ldr	r3, [pc, #100]	; (8008aec <HandleRadioRxErrorTimeout+0xdc>)
 8008a86:	5ca2      	ldrb	r2, [r4, r2]
 8008a88:	5ce3      	ldrb	r3, [r4, r3]
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	d11a      	bne.n	8008ac4 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <HandleRadioRxErrorTimeout+0x88>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008a92:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <HandleRadioRxErrorTimeout+0xe0>)
 8008a94:	9a00      	ldr	r2, [sp, #0]
 8008a96:	54e2      	strb	r2, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008a98:	9800      	ldr	r0, [sp, #0]
 8008a9a:	f002 ff4d 	bl	800b938 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8008a9e:	5963      	ldr	r3, [r4, r5]
 8008aa0:	33fc      	adds	r3, #252	; 0xfc
 8008aa2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008aa4:	f006 fb58 	bl	800f158 <UTIL_TIMER_GetElapsedTime>
 8008aa8:	23ed      	movs	r3, #237	; 0xed
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	58e3      	ldr	r3, [r4, r3]
 8008aae:	4298      	cmp	r0, r3
 8008ab0:	d3e1      	bcc.n	8008a76 <HandleRadioRxErrorTimeout+0x66>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008ab2:	4810      	ldr	r0, [pc, #64]	; (8008af4 <HandleRadioRxErrorTimeout+0xe4>)
 8008ab4:	f006 fb8a 	bl	800f1cc <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008ab8:	2320      	movs	r3, #32
 8008aba:	4a0f      	ldr	r2, [pc, #60]	; (8008af8 <HandleRadioRxErrorTimeout+0xe8>)
 8008abc:	5ca1      	ldrb	r1, [r4, r2]
 8008abe:	430b      	orrs	r3, r1
 8008ac0:	54a3      	strb	r3, [r4, r2]
 8008ac2:	e7d8      	b.n	8008a76 <HandleRadioRxErrorTimeout+0x66>
            if( MacCtx.NodeAckRequested == true )
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <HandleRadioRxErrorTimeout+0xbc>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008ac8:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <HandleRadioRxErrorTimeout+0xe0>)
 8008aca:	54e7      	strb	r7, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008acc:	0038      	movs	r0, r7
 8008ace:	f002 ff33 	bl	800b938 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008ad2:	5963      	ldr	r3, [r4, r5]
 8008ad4:	337c      	adds	r3, #124	; 0x7c
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d1ed      	bne.n	8008ab8 <HandleRadioRxErrorTimeout+0xa8>
 8008adc:	e7cb      	b.n	8008a76 <HandleRadioRxErrorTimeout+0x66>
 8008ade:	46c0      	nop			; (mov r8, r8)
 8008ae0:	200007d4 	.word	0x200007d4
 8008ae4:	00000484 	.word	0x00000484
 8008ae8:	08012ccc 	.word	0x08012ccc
 8008aec:	00000414 	.word	0x00000414
 8008af0:	0000043d 	.word	0x0000043d
 8008af4:	20000b6c 	.word	0x20000b6c
 8008af8:	00000481 	.word	0x00000481

08008afc <ResetMacParameters>:
{
 8008afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8008afe:	22b2      	movs	r2, #178	; 0xb2
 8008b00:	2500      	movs	r5, #0
 8008b02:	4c2e      	ldr	r4, [pc, #184]	; (8008bbc <ResetMacParameters+0xc0>)
 8008b04:	4e2e      	ldr	r6, [pc, #184]	; (8008bc0 <ResetMacParameters+0xc4>)
 8008b06:	0052      	lsls	r2, r2, #1
 8008b08:	59a3      	ldr	r3, [r4, r6]
    MacCtx.ChannelsNbTransCounter = 0;
 8008b0a:	492e      	ldr	r1, [pc, #184]	; (8008bc4 <ResetMacParameters+0xc8>)
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8008b0c:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8008b0e:	1d1a      	adds	r2, r3, #4
 8008b10:	67d5      	str	r5, [r2, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 8008b12:	2282      	movs	r2, #130	; 0x82
 8008b14:	00d2      	lsls	r2, r2, #3
 8008b16:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 8008b18:	001a      	movs	r2, r3
 8008b1a:	32c8      	adds	r2, #200	; 0xc8
 8008b1c:	7015      	strb	r5, [r2, #0]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8008b1e:	2201      	movs	r2, #1
 8008b20:	4694      	mov	ip, r2
 8008b22:	4661      	mov	r1, ip
 8008b24:	324c      	adds	r2, #76	; 0x4c
 8008b26:	32ff      	adds	r2, #255	; 0xff
 8008b28:	5299      	strh	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8008b2a:	001a      	movs	r2, r3
 8008b2c:	8899      	ldrh	r1, [r3, #4]
 8008b2e:	3284      	adds	r2, #132	; 0x84
 8008b30:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8008b32:	1d99      	adds	r1, r3, #6
 8008b34:	7fc9      	ldrb	r1, [r1, #31]
 8008b36:	3221      	adds	r2, #33	; 0x21
 8008b38:	7011      	strb	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8008b3a:	0019      	movs	r1, r3
 8008b3c:	3a7d      	subs	r2, #125	; 0x7d
 8008b3e:	31a8      	adds	r1, #168	; 0xa8
 8008b40:	ca81      	ldmia	r2!, {r0, r7}
 8008b42:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8008b44:	ca81      	ldmia	r2!, {r0, r7}
 8008b46:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8008b48:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8008b4a:	3280      	adds	r2, #128	; 0x80
 8008b4c:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8008b4e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    params.NvmCtx = NULL;
 8008b50:	9500      	str	r5, [sp, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8008b52:	6051      	str	r1, [r2, #4]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8008b54:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008b56:	6091      	str	r1, [r2, #8]
    MacCtx.NodeAckRequested = false;
 8008b58:	4a1b      	ldr	r2, [pc, #108]	; (8008bc8 <ResetMacParameters+0xcc>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8008b5a:	4661      	mov	r1, ip
    MacCtx.NodeAckRequested = false;
 8008b5c:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8008b5e:	224c      	movs	r2, #76	; 0x4c
 8008b60:	32ff      	adds	r2, #255	; 0xff
 8008b62:	549d      	strb	r5, [r3, r2]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8008b64:	466a      	mov	r2, sp
 8008b66:	7111      	strb	r1, [r2, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8008b68:	7818      	ldrb	r0, [r3, #0]
 8008b6a:	4669      	mov	r1, sp
 8008b6c:	f003 fbd6 	bl	800c31c <RegionInitDefaults>
    MacCtx.Channel = 0;
 8008b70:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <ResetMacParameters+0xd0>)
 8008b72:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008b74:	3b49      	subs	r3, #73	; 0x49
 8008b76:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8008b78:	59a3      	ldr	r3, [r4, r6]
 8008b7a:	001a      	movs	r2, r3
 8008b7c:	32a8      	adds	r2, #168	; 0xa8
 8008b7e:	6811      	ldr	r1, [r2, #0]
 8008b80:	22f4      	movs	r2, #244	; 0xf4
 8008b82:	0092      	lsls	r2, r2, #2
 8008b84:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8008b86:	001a      	movs	r2, r3
 8008b88:	32b9      	adds	r2, #185	; 0xb9
 8008b8a:	7811      	ldrb	r1, [r2, #0]
 8008b8c:	22f7      	movs	r2, #247	; 0xf7
 8008b8e:	0092      	lsls	r2, r2, #2
 8008b90:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8008b92:	33ca      	adds	r3, #202	; 0xca
 8008b94:	781a      	ldrb	r2, [r3, #0]
 8008b96:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <ResetMacParameters+0xd4>)
 8008b98:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008b9a:	2280      	movs	r2, #128	; 0x80
 8008b9c:	4b0d      	ldr	r3, [pc, #52]	; (8008bd4 <ResetMacParameters+0xd8>)
 8008b9e:	0052      	lsls	r2, r2, #1
 8008ba0:	52e2      	strh	r2, [r4, r3]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008ba2:	22f3      	movs	r2, #243	; 0xf3
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	0092      	lsls	r2, r2, #2
 8008ba8:	18e3      	adds	r3, r4, r3
 8008baa:	18a2      	adds	r2, r4, r2
 8008bac:	ca23      	ldmia	r2!, {r0, r1, r5}
 8008bae:	c323      	stmia	r3!, {r0, r1, r5}
 8008bb0:	ca03      	ldmia	r2!, {r0, r1}
 8008bb2:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008bb4:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <ResetMacParameters+0xdc>)
 8008bb6:	4a09      	ldr	r2, [pc, #36]	; (8008bdc <ResetMacParameters+0xe0>)
 8008bb8:	52e2      	strh	r2, [r4, r3]
}
 8008bba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008bbc:	200007d4 	.word	0x200007d4
 8008bc0:	00000484 	.word	0x00000484
 8008bc4:	00010100 	.word	0x00010100
 8008bc8:	00000414 	.word	0x00000414
 8008bcc:	00000415 	.word	0x00000415
 8008bd0:	000003dd 	.word	0x000003dd
 8008bd4:	000003de 	.word	0x000003de
 8008bd8:	000003f2 	.word	0x000003f2
 8008bdc:	00000201 	.word	0x00000201

08008be0 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008be0:	2301      	movs	r3, #1
 8008be2:	4a0b      	ldr	r2, [pc, #44]	; (8008c10 <OnRadioRxTimeout+0x30>)
{
 8008be4:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008be6:	7811      	ldrb	r1, [r2, #0]
 8008be8:	430b      	orrs	r3, r1
 8008bea:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008bec:	23d2      	movs	r3, #210	; 0xd2
 8008bee:	4a09      	ldr	r2, [pc, #36]	; (8008c14 <OnRadioRxTimeout+0x34>)
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	58d3      	ldr	r3, [r2, r3]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <OnRadioRxTimeout+0x20>
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d000      	beq.n	8008c00 <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008bfe:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8008c00:	2201      	movs	r2, #1
 8008c02:	2100      	movs	r1, #0
 8008c04:	2002      	movs	r0, #2
 8008c06:	4b04      	ldr	r3, [pc, #16]	; (8008c18 <OnRadioRxTimeout+0x38>)
 8008c08:	f006 f80a 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8008c0c:	bd10      	pop	{r4, pc}
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	2000062c 	.word	0x2000062c
 8008c14:	200007d4 	.word	0x200007d4
 8008c18:	0801330d 	.word	0x0801330d

08008c1c <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	4a0b      	ldr	r2, [pc, #44]	; (8008c4c <OnRadioTxTimeout+0x30>)
{
 8008c20:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008c22:	7811      	ldrb	r1, [r2, #0]
 8008c24:	430b      	orrs	r3, r1
 8008c26:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008c28:	23d2      	movs	r3, #210	; 0xd2
 8008c2a:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <OnRadioTxTimeout+0x34>)
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	58d3      	ldr	r3, [r2, r3]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d003      	beq.n	8008c3c <OnRadioTxTimeout+0x20>
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d000      	beq.n	8008c3c <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008c3a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	2100      	movs	r1, #0
 8008c40:	2002      	movs	r0, #2
 8008c42:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <OnRadioTxTimeout+0x38>)
 8008c44:	f005 ffec 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8008c48:	bd10      	pop	{r4, pc}
 8008c4a:	46c0      	nop			; (mov r8, r8)
 8008c4c:	2000062c 	.word	0x2000062c
 8008c50:	200007d4 	.word	0x200007d4
 8008c54:	0801331d 	.word	0x0801331d

08008c58 <OnRadioRxDone>:
{
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	000e      	movs	r6, r1
 8008c5c:	0015      	movs	r5, r2
 8008c5e:	001c      	movs	r4, r3
 8008c60:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8008c62:	f006 fa6f 	bl	800f144 <UTIL_TIMER_GetCurrentTime>
 8008c66:	4b0e      	ldr	r3, [pc, #56]	; (8008ca0 <OnRadioRxDone+0x48>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8008c68:	4a0e      	ldr	r2, [pc, #56]	; (8008ca4 <OnRadioRxDone+0x4c>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8008c6a:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 8008c6c:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 8008c6e:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 8008c70:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 8008c72:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8008c74:	2308      	movs	r3, #8
 8008c76:	7811      	ldrb	r1, [r2, #0]
 8008c78:	430b      	orrs	r3, r1
 8008c7a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008c7c:	23d2      	movs	r3, #210	; 0xd2
 8008c7e:	4a0a      	ldr	r2, [pc, #40]	; (8008ca8 <OnRadioRxDone+0x50>)
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	58d3      	ldr	r3, [r2, r3]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <OnRadioRxDone+0x38>
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d000      	beq.n	8008c90 <OnRadioRxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008c8e:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8008c90:	2201      	movs	r2, #1
 8008c92:	2100      	movs	r1, #0
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <OnRadioRxDone+0x54>)
 8008c96:	2002      	movs	r0, #2
 8008c98:	f005 ffc2 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8008c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c9e:	46c0      	nop			; (mov r8, r8)
 8008ca0:	20001604 	.word	0x20001604
 8008ca4:	2000062c 	.word	0x2000062c
 8008ca8:	200007d4 	.word	0x200007d4
 8008cac:	0801332d 	.word	0x0801332d

08008cb0 <OnRadioTxDone>:
{
 8008cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008cb2:	f006 fa47 	bl	800f144 <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008cb6:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008cb8:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008cba:	4d10      	ldr	r5, [pc, #64]	; (8008cfc <OnRadioTxDone+0x4c>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008cbc:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008cbe:	0020      	movs	r0, r4
 8008cc0:	f006 f9da 	bl	800f078 <SysTimeGet>
 8008cc4:	23ce      	movs	r3, #206	; 0xce
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	18eb      	adds	r3, r5, r3
 8008cca:	cc06      	ldmia	r4!, {r1, r2}
 8008ccc:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8008cce:	2310      	movs	r3, #16
 8008cd0:	4a0b      	ldr	r2, [pc, #44]	; (8008d00 <OnRadioTxDone+0x50>)
 8008cd2:	7811      	ldrb	r1, [r2, #0]
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008cd8:	23d2      	movs	r3, #210	; 0xd2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	58eb      	ldr	r3, [r5, r3]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <OnRadioTxDone+0x3a>
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d000      	beq.n	8008cea <OnRadioTxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008ce8:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8008cea:	2201      	movs	r2, #1
 8008cec:	2100      	movs	r1, #0
 8008cee:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <OnRadioTxDone+0x54>)
 8008cf0:	2002      	movs	r0, #2
 8008cf2:	f005 ff95 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 8008cf6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8008cf8:	20001600 	.word	0x20001600
 8008cfc:	200007d4 	.word	0x200007d4
 8008d00:	2000062c 	.word	0x2000062c
 8008d04:	0801333a 	.word	0x0801333a

08008d08 <ScheduleTx>:
{
 8008d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d0a:	b095      	sub	sp, #84	; 0x54
 8008d0c:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008d0e:	f002 fc1d 	bl	800b54c <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008d12:	250e      	movs	r5, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d11b      	bne.n	8008d50 <ScheduleTx+0x48>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8008d18:	4ccf      	ldr	r4, [pc, #828]	; (8009058 <ScheduleTx+0x350>)
 8008d1a:	4ed0      	ldr	r6, [pc, #832]	; (800905c <ScheduleTx+0x354>)
 8008d1c:	59a3      	ldr	r3, [r4, r6]
 8008d1e:	337c      	adds	r3, #124	; 0x7c
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d00f      	beq.n	8008d46 <ScheduleTx+0x3e>
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8008d26:	59a3      	ldr	r3, [r4, r6]
 8008d28:	0019      	movs	r1, r3
 8008d2a:	31fc      	adds	r1, #252	; 0xfc
 8008d2c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008d2e:	2a00      	cmp	r2, #0
 8008d30:	d016      	beq.n	8008d60 <ScheduleTx+0x58>
    switch( MacCtx.TxMsg.Type )
 8008d32:	0025      	movs	r5, r4
 8008d34:	35ff      	adds	r5, #255	; 0xff
 8008d36:	796b      	ldrb	r3, [r5, #5]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01b      	beq.n	8008d74 <ScheduleTx+0x6c>
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d100      	bne.n	8008d42 <ScheduleTx+0x3a>
 8008d40:	e079      	b.n	8008e36 <ScheduleTx+0x12e>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8008d42:	2503      	movs	r5, #3
 8008d44:	e004      	b.n	8008d50 <ScheduleTx+0x48>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008d46:	f002 fc03 	bl	800b550 <LoRaMacClassBIsPingExpected>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d003      	beq.n	8008d56 <ScheduleTx+0x4e>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008d4e:	250f      	movs	r5, #15
}
 8008d50:	0028      	movs	r0, r5
 8008d52:	b015      	add	sp, #84	; 0x54
 8008d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008d56:	f002 fbfd 	bl	800b554 <LoRaMacClassBIsMulticastExpected>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d0e3      	beq.n	8008d26 <ScheduleTx+0x1e>
 8008d5e:	e7f6      	b.n	8008d4e <ScheduleTx+0x46>
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008d60:	22a6      	movs	r2, #166	; 0xa6
 8008d62:	0052      	lsls	r2, r2, #1
 8008d64:	5a9a      	ldrh	r2, [r3, r2]
 8008d66:	2383      	movs	r3, #131	; 0x83
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	58e3      	ldr	r3, [r4, r3]
 8008d6c:	3a01      	subs	r2, #1
 8008d6e:	4353      	muls	r3, r2
 8008d70:	658b      	str	r3, [r1, #88]	; 0x58
 8008d72:	e7de      	b.n	8008d32 <ScheduleTx+0x2a>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008d74:	48ba      	ldr	r0, [pc, #744]	; (8009060 <ScheduleTx+0x358>)
 8008d76:	f003 fa16 	bl	800c1a6 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d000      	beq.n	8008d80 <ScheduleTx+0x78>
 8008d7e:	e166      	b.n	800904e <ScheduleTx+0x346>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008d80:	7b6b      	ldrb	r3, [r5, #13]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8008d82:	ad0e      	add	r5, sp, #56	; 0x38
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008d84:	8023      	strh	r3, [r4, #0]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8008d86:	59a3      	ldr	r3, [r4, r6]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8008d88:	a808      	add	r0, sp, #32
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8008d8a:	001a      	movs	r2, r3
 8008d8c:	32fc      	adds	r2, #252	; 0xfc
 8008d8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8008d90:	af04      	add	r7, sp, #16
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8008d92:	920e      	str	r2, [sp, #56]	; 0x38
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008d94:	001a      	movs	r2, r3
 8008d96:	3285      	adds	r2, #133	; 0x85
 8008d98:	7812      	ldrb	r2, [r2, #0]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008d9a:	33c9      	adds	r3, #201	; 0xc9
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008d9c:	722a      	strb	r2, [r5, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	72ab      	strb	r3, [r5, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8008da2:	f006 f995 	bl	800f0d0 <SysTimeGetMcuTime>
 8008da6:	59a3      	ldr	r3, [r4, r6]
 8008da8:	9908      	ldr	r1, [sp, #32]
 8008daa:	001a      	movs	r2, r3
 8008dac:	325d      	adds	r2, #93	; 0x5d
 8008dae:	32ff      	adds	r2, #255	; 0xff
 8008db0:	6812      	ldr	r2, [r2, #0]
 8008db2:	0038      	movs	r0, r7
 8008db4:	9200      	str	r2, [sp, #0]
 8008db6:	22ac      	movs	r2, #172	; 0xac
 8008db8:	0052      	lsls	r2, r2, #1
 8008dba:	589b      	ldr	r3, [r3, r2]
 8008dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dbe:	f006 f91d 	bl	800effc <SysTimeSub>
 8008dc2:	ab11      	add	r3, sp, #68	; 0x44
 8008dc4:	cf06      	ldmia	r7!, {r1, r2}
 8008dc6:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8008dc8:	59a3      	ldr	r3, [r4, r6]
    nextChan.Joined = true;
 8008dca:	2101      	movs	r1, #1
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8008dcc:	001a      	movs	r2, r3
 8008dce:	32fc      	adds	r2, #252	; 0xfc
 8008dd0:	6d52      	ldr	r2, [r2, #84]	; 0x54
    nextChan.Joined = true;
 8008dd2:	7269      	strb	r1, [r5, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8008dd4:	606a      	str	r2, [r5, #4]
    nextChan.LastTxIsJoinRequest = false;
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	752a      	strb	r2, [r5, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8008dda:	8822      	ldrh	r2, [r4, #0]
 8008ddc:	82ea      	strh	r2, [r5, #22]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008dde:	22b2      	movs	r2, #178	; 0xb2
 8008de0:	0052      	lsls	r2, r2, #1
 8008de2:	5c9a      	ldrb	r2, [r3, r2]
 8008de4:	2a00      	cmp	r2, #0
 8008de6:	d101      	bne.n	8008dec <ScheduleTx+0xe4>
        nextChan.LastTxIsJoinRequest = true;
 8008de8:	7529      	strb	r1, [r5, #20]
        nextChan.Joined = false;
 8008dea:	726a      	strb	r2, [r5, #9]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8008dec:	7818      	ldrb	r0, [r3, #0]
 8008dee:	3355      	adds	r3, #85	; 0x55
 8008df0:	33ff      	adds	r3, #255	; 0xff
 8008df2:	0029      	movs	r1, r5
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	4a9b      	ldr	r2, [pc, #620]	; (8009064 <ScheduleTx+0x35c>)
 8008df8:	4b9b      	ldr	r3, [pc, #620]	; (8009068 <ScheduleTx+0x360>)
 8008dfa:	f003 fb25 	bl	800c448 <RegionNextChannel>
 8008dfe:	1e05      	subs	r5, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8008e00:	d01d      	beq.n	8008e3e <ScheduleTx+0x136>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8008e02:	280b      	cmp	r0, #11
 8008e04:	d1a4      	bne.n	8008d50 <ScheduleTx+0x48>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0a1      	beq.n	8008d50 <ScheduleTx+0x48>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8008e0c:	2291      	movs	r2, #145	; 0x91
            return LORAMAC_STATUS_OK;
 8008e0e:	2500      	movs	r5, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 8008e10:	4b91      	ldr	r3, [pc, #580]	; (8009058 <ScheduleTx+0x350>)
 8008e12:	00d2      	lsls	r2, r2, #3
 8008e14:	5899      	ldr	r1, [r3, r2]
 8008e16:	42a9      	cmp	r1, r5
 8008e18:	d09a      	beq.n	8008d50 <ScheduleTx+0x48>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008e1a:	20d0      	movs	r0, #208	; 0xd0
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	0080      	lsls	r0, r0, #2
 8008e20:	581c      	ldr	r4, [r3, r0]
 8008e22:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8008e24:	4c91      	ldr	r4, [pc, #580]	; (800906c <ScheduleTx+0x364>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008e26:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8008e28:	0020      	movs	r0, r4
 8008e2a:	f006 fa65 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8008e2e:	0020      	movs	r0, r4
 8008e30:	f006 fa20 	bl	800f274 <UTIL_TIMER_Start>
 8008e34:	e78c      	b.n	8008d50 <ScheduleTx+0x48>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8008e36:	488a      	ldr	r0, [pc, #552]	; (8009060 <ScheduleTx+0x358>)
 8008e38:	f003 f9ea 	bl	800c210 <LoRaMacSerializerData>
 8008e3c:	e79d      	b.n	8008d7a <ScheduleTx+0x72>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008e3e:	59a1      	ldr	r1, [r4, r6]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8008e40:	000b      	movs	r3, r1
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8008e42:	000a      	movs	r2, r1
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8008e44:	33a5      	adds	r3, #165	; 0xa5
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8008e46:	3285      	adds	r2, #133	; 0x85
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008e48:	780f      	ldrb	r7, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	7812      	ldrb	r2, [r2, #0]
 8008e4e:	31b9      	adds	r1, #185	; 0xb9
 8008e50:	0038      	movs	r0, r7
 8008e52:	7809      	ldrb	r1, [r1, #0]
 8008e54:	b25b      	sxtb	r3, r3
 8008e56:	b252      	sxtb	r2, r2
 8008e58:	f003 fb0b 	bl	800c472 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008e5c:	2288      	movs	r2, #136	; 0x88
 8008e5e:	4694      	mov	ip, r2
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8008e60:	59a3      	ldr	r3, [r4, r6]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008e62:	b241      	sxtb	r1, r0
 8008e64:	449c      	add	ip, r3
 8008e66:	338c      	adds	r3, #140	; 0x8c
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	4b81      	ldr	r3, [pc, #516]	; (8009070 <ScheduleTx+0x368>)
 8008e6c:	0038      	movs	r0, r7
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	4663      	mov	r3, ip
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 fa80 	bl	800c378 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008e78:	59a3      	ldr	r3, [r4, r6]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8008e7a:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008e7c:	001a      	movs	r2, r3
 8008e7e:	001f      	movs	r7, r3
 8008e80:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8008e82:	31ac      	adds	r1, #172	; 0xac
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008e84:	4b7b      	ldr	r3, [pc, #492]	; (8009074 <ScheduleTx+0x36c>)
 8008e86:	7809      	ldrb	r1, [r1, #0]
 8008e88:	328c      	adds	r2, #140	; 0x8c
 8008e8a:	7812      	ldrb	r2, [r2, #0]
 8008e8c:	3788      	adds	r7, #136	; 0x88
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	b249      	sxtb	r1, r1
 8008e94:	f003 fa70 	bl	800c378 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008e98:	22f1      	movs	r2, #241	; 0xf1
 8008e9a:	0092      	lsls	r2, r2, #2
 8008e9c:	59a3      	ldr	r3, [r4, r6]
 8008e9e:	58a2      	ldr	r2, [r4, r2]
 8008ea0:	27ec      	movs	r7, #236	; 0xec
 8008ea2:	4694      	mov	ip, r2
 8008ea4:	001a      	movs	r2, r3
 8008ea6:	3294      	adds	r2, #148	; 0x94
 8008ea8:	6812      	ldr	r2, [r2, #0]
 8008eaa:	00bf      	lsls	r7, r7, #2
 8008eac:	4462      	add	r2, ip
 8008eae:	51e2      	str	r2, [r4, r7]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008eb0:	22f6      	movs	r2, #246	; 0xf6
 8008eb2:	0092      	lsls	r2, r2, #2
 8008eb4:	58a0      	ldr	r0, [r4, r2]
 8008eb6:	001a      	movs	r2, r3
 8008eb8:	21ed      	movs	r1, #237	; 0xed
 8008eba:	3298      	adds	r2, #152	; 0x98
 8008ebc:	6812      	ldr	r2, [r2, #0]
 8008ebe:	0089      	lsls	r1, r1, #2
 8008ec0:	1812      	adds	r2, r2, r0
 8008ec2:	5062      	str	r2, [r4, r1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008ec4:	22b2      	movs	r2, #178	; 0xb2
 8008ec6:	0052      	lsls	r2, r2, #1
 8008ec8:	5c9a      	ldrb	r2, [r3, r2]
 8008eca:	9203      	str	r2, [sp, #12]
 8008ecc:	2a00      	cmp	r2, #0
 8008ece:	d108      	bne.n	8008ee2 <ScheduleTx+0x1da>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008ed0:	001a      	movs	r2, r3
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008ed2:	33a0      	adds	r3, #160	; 0xa0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008ed4:	329c      	adds	r2, #156	; 0x9c
 8008ed6:	6812      	ldr	r2, [r2, #0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008ed8:	681b      	ldr	r3, [r3, #0]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008eda:	4462      	add	r2, ip
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008edc:	1818      	adds	r0, r3, r0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008ede:	51e2      	str	r2, [r4, r7]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008ee0:	5060      	str	r0, [r4, r1]
    size_t macCmdsSize = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d012      	beq.n	8008f12 <ScheduleTx+0x20a>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008eec:	a80a      	add	r0, sp, #40	; 0x28
 8008eee:	f002 fc1f 	bl	800b730 <LoRaMacCommandsGetSizeSerializedCmds>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d155      	bne.n	8008fa2 <ScheduleTx+0x29a>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008ef6:	2085      	movs	r0, #133	; 0x85
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8008ef8:	4b57      	ldr	r3, [pc, #348]	; (8009058 <ScheduleTx+0x350>)
 8008efa:	4a5f      	ldr	r2, [pc, #380]	; (8009078 <ScheduleTx+0x370>)
 8008efc:	5c9c      	ldrb	r4, [r3, r2]
 8008efe:	599b      	ldr	r3, [r3, r6]
 8008f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008f02:	5618      	ldrsb	r0, [r3, r0]
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8008f04:	b2d7      	uxtb	r7, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008f06:	f7ff fd19 	bl	800893c <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008f0a:	19e4      	adds	r4, r4, r7
 8008f0c:	b280      	uxth	r0, r0
 8008f0e:	42a0      	cmp	r0, r4
 8008f10:	d345      	bcc.n	8008f9e <ScheduleTx+0x296>
    return SendFrameOnChannel( MacCtx.Channel );
 8008f12:	4c51      	ldr	r4, [pc, #324]	; (8009058 <ScheduleTx+0x350>)
 8008f14:	4b59      	ldr	r3, [pc, #356]	; (800907c <ScheduleTx+0x374>)
    int8_t txPower = 0;
 8008f16:	aa02      	add	r2, sp, #8
    return SendFrameOnChannel( MacCtx.Channel );
 8008f18:	5ce7      	ldrb	r7, [r4, r3]
    int8_t txPower = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	74d3      	strb	r3, [r2, #19]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008f1e:	59a3      	ldr	r3, [r4, r6]
    txConfig.Channel = channel;
 8008f20:	a90a      	add	r1, sp, #40	; 0x28
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008f22:	001a      	movs	r2, r3
    txConfig.Channel = channel;
 8008f24:	700f      	strb	r7, [r1, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008f26:	3285      	adds	r2, #133	; 0x85
 8008f28:	7812      	ldrb	r2, [r2, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008f2a:	a802      	add	r0, sp, #8
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008f2c:	704a      	strb	r2, [r1, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8008f2e:	001a      	movs	r2, r3
 8008f30:	3284      	adds	r2, #132	; 0x84
 8008f32:	7812      	ldrb	r2, [r2, #0]
 8008f34:	708a      	strb	r2, [r1, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8008f36:	001a      	movs	r2, r3
 8008f38:	32bc      	adds	r2, #188	; 0xbc
 8008f3a:	6812      	ldr	r2, [r2, #0]
 8008f3c:	604a      	str	r2, [r1, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8008f3e:	001a      	movs	r2, r3
 8008f40:	32c0      	adds	r2, #192	; 0xc0
 8008f42:	6812      	ldr	r2, [r2, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008f44:	781b      	ldrb	r3, [r3, #0]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8008f46:	608a      	str	r2, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008f48:	8822      	ldrh	r2, [r4, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008f4a:	469c      	mov	ip, r3
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008f4c:	818a      	strh	r2, [r1, #12]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008f4e:	2213      	movs	r2, #19
 8008f50:	4b4b      	ldr	r3, [pc, #300]	; (8009080 <ScheduleTx+0x378>)
 8008f52:	1812      	adds	r2, r2, r0
 8008f54:	4660      	mov	r0, ip
 8008f56:	f003 fa26 	bl	800c3a6 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4b49      	ldr	r3, [pc, #292]	; (8009084 <ScheduleTx+0x37c>)
 8008f5e:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008f60:	59a3      	ldr	r3, [r4, r6]
 8008f62:	3385      	adds	r3, #133	; 0x85
 8008f64:	781a      	ldrb	r2, [r3, #0]
 8008f66:	4b48      	ldr	r3, [pc, #288]	; (8009088 <ScheduleTx+0x380>)
 8008f68:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8008f6a:	ab02      	add	r3, sp, #8
 8008f6c:	7cda      	ldrb	r2, [r3, #19]
 8008f6e:	4b47      	ldr	r3, [pc, #284]	; (800908c <ScheduleTx+0x384>)
 8008f70:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8008f72:	4b47      	ldr	r3, [pc, #284]	; (8009090 <ScheduleTx+0x388>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008f74:	4a47      	ldr	r2, [pc, #284]	; (8009094 <ScheduleTx+0x38c>)
    MacCtx.McpsConfirm.Channel = channel;
 8008f76:	50e7      	str	r7, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008f78:	2783      	movs	r7, #131	; 0x83
 8008f7a:	00ff      	lsls	r7, r7, #3
 8008f7c:	59e3      	ldr	r3, [r4, r7]
 8008f7e:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008f80:	4a45      	ldr	r2, [pc, #276]	; (8009098 <ScheduleTx+0x390>)
 8008f82:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8008f84:	f002 fae8 	bl	800b558 <LoRaMacClassBIsBeaconModeActive>
 8008f88:	4b3c      	ldr	r3, [pc, #240]	; (800907c <ScheduleTx+0x374>)
 8008f8a:	9303      	str	r3, [sp, #12]
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d00a      	beq.n	8008fa6 <ScheduleTx+0x29e>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8008f90:	59e0      	ldr	r0, [r4, r7]
 8008f92:	f002 faf3 	bl	800b57c <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d005      	beq.n	8008fa6 <ScheduleTx+0x29e>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8008f9a:	2510      	movs	r5, #16
    return SendFrameOnChannel( MacCtx.Channel );
 8008f9c:	e6d8      	b.n	8008d50 <ScheduleTx+0x48>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008f9e:	2508      	movs	r5, #8
 8008fa0:	e6d6      	b.n	8008d50 <ScheduleTx+0x48>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008fa2:	2513      	movs	r5, #19
 8008fa4:	e6d4      	b.n	8008d50 <ScheduleTx+0x48>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8008fa6:	59a3      	ldr	r3, [r4, r6]
 8008fa8:	337c      	adds	r3, #124	; 0x7c
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d101      	bne.n	8008fb4 <ScheduleTx+0x2ac>
        LoRaMacClassBStopRxSlots( );
 8008fb0:	f002 fae6 	bl	800b580 <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
 8008fb4:	f002 fad3 	bl	800b55e <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008fb8:	59a3      	ldr	r3, [r4, r6]
    switch( MacCtx.TxMsg.Type )
 8008fba:	0026      	movs	r6, r4
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008fbc:	3385      	adds	r3, #133	; 0x85
 8008fbe:	781b      	ldrb	r3, [r3, #0]
    switch( MacCtx.TxMsg.Type )
 8008fc0:	36ff      	adds	r6, #255	; 0xff
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008fc2:	b25b      	sxtb	r3, r3
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	4b2d      	ldr	r3, [pc, #180]	; (800907c <ScheduleTx+0x374>)
 8008fc8:	5ce7      	ldrb	r7, [r4, r3]
    uint32_t fCntUp = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	9307      	str	r3, [sp, #28]
    switch( MacCtx.TxMsg.Type )
 8008fce:	7973      	ldrb	r3, [r6, #5]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d020      	beq.n	8009016 <ScheduleTx+0x30e>
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	d000      	beq.n	8008fda <ScheduleTx+0x2d2>
 8008fd8:	e6b3      	b.n	8008d42 <ScheduleTx+0x3a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008fda:	a807      	add	r0, sp, #28
 8008fdc:	f002 fe56 	bl	800bc8c <LoRaMacCryptoGetFCntUp>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d136      	bne.n	8009052 <ScheduleTx+0x34a>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008fe4:	2382      	movs	r3, #130	; 0x82
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	5ce3      	ldrb	r3, [r4, r3]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d103      	bne.n	8008ff6 <ScheduleTx+0x2ee>
 8008fee:	4b2b      	ldr	r3, [pc, #172]	; (800909c <ScheduleTx+0x394>)
 8008ff0:	5ce3      	ldrb	r3, [r4, r3]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d902      	bls.n	8008ffc <ScheduleTx+0x2f4>
                fCntUp -= 1;
 8008ff6:	9b07      	ldr	r3, [sp, #28]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8008ffc:	466b      	mov	r3, sp
 8008ffe:	003a      	movs	r2, r7
 8009000:	7b19      	ldrb	r1, [r3, #12]
 8009002:	9807      	ldr	r0, [sp, #28]
 8009004:	4b16      	ldr	r3, [pc, #88]	; (8009060 <ScheduleTx+0x358>)
 8009006:	f002 fec9 	bl	800bd9c <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800900a:	2800      	cmp	r0, #0
 800900c:	d11f      	bne.n	800904e <ScheduleTx+0x346>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800900e:	0023      	movs	r3, r4
 8009010:	33ff      	adds	r3, #255	; 0xff
 8009012:	7b5b      	ldrb	r3, [r3, #13]
 8009014:	e005      	b.n	8009022 <ScheduleTx+0x31a>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009016:	4812      	ldr	r0, [pc, #72]	; (8009060 <ScheduleTx+0x358>)
 8009018:	f002 fe90 	bl	800bd3c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800901c:	2800      	cmp	r0, #0
 800901e:	d116      	bne.n	800904e <ScheduleTx+0x346>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009020:	7b73      	ldrb	r3, [r6, #13]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009022:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009024:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009026:	2302      	movs	r3, #2
 8009028:	0092      	lsls	r2, r2, #2
 800902a:	58a1      	ldr	r1, [r4, r2]
 800902c:	430b      	orrs	r3, r1
 800902e:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == false )
 8009030:	4b1b      	ldr	r3, [pc, #108]	; (80090a0 <ScheduleTx+0x398>)
 8009032:	5ce3      	ldrb	r3, [r4, r3]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d103      	bne.n	8009040 <ScheduleTx+0x338>
        MacCtx.ChannelsNbTransCounter++;
 8009038:	32d0      	adds	r2, #208	; 0xd0
 800903a:	5ca3      	ldrb	r3, [r4, r2]
 800903c:	3301      	adds	r3, #1
 800903e:	54a3      	strb	r3, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8009040:	4b18      	ldr	r3, [pc, #96]	; (80090a4 <ScheduleTx+0x39c>)
 8009042:	7821      	ldrb	r1, [r4, #0]
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	4818      	ldr	r0, [pc, #96]	; (80090a8 <ScheduleTx+0x3a0>)
 8009048:	9303      	str	r3, [sp, #12]
 800904a:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800904c:	e680      	b.n	8008d50 <ScheduleTx+0x48>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800904e:	2511      	movs	r5, #17
 8009050:	e67e      	b.n	8008d50 <ScheduleTx+0x48>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009052:	2512      	movs	r5, #18
 8009054:	e67c      	b.n	8008d50 <ScheduleTx+0x48>
 8009056:	46c0      	nop			; (mov r8, r8)
 8009058:	200007d4 	.word	0x200007d4
 800905c:	00000484 	.word	0x00000484
 8009060:	200008dc 	.word	0x200008dc
 8009064:	20000be9 	.word	0x20000be9
 8009068:	20000c5c 	.word	0x20000c5c
 800906c:	20000b3c 	.word	0x20000b3c
 8009070:	20000b8c 	.word	0x20000b8c
 8009074:	20000ba0 	.word	0x20000ba0
 8009078:	00000237 	.word	0x00000237
 800907c:	00000415 	.word	0x00000415
 8009080:	20000bec 	.word	0x20000bec
 8009084:	0000043d 	.word	0x0000043d
 8009088:	0000043e 	.word	0x0000043e
 800908c:	0000043f 	.word	0x0000043f
 8009090:	0000044c 	.word	0x0000044c
 8009094:	00000444 	.word	0x00000444
 8009098:	00000454 	.word	0x00000454
 800909c:	00000412 	.word	0x00000412
 80090a0:	00000414 	.word	0x00000414
 80090a4:	08012ccc 	.word	0x08012ccc
 80090a8:	200007d6 	.word	0x200007d6

080090ac <OnTxDelayedTimerEvent>:
{
 80090ac:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80090ae:	4811      	ldr	r0, [pc, #68]	; (80090f4 <OnTxDelayedTimerEvent+0x48>)
 80090b0:	f006 f88c 	bl	800f1cc <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80090b4:	22d0      	movs	r2, #208	; 0xd0
 80090b6:	2320      	movs	r3, #32
 80090b8:	4c0f      	ldr	r4, [pc, #60]	; (80090f8 <OnTxDelayedTimerEvent+0x4c>)
 80090ba:	0092      	lsls	r2, r2, #2
 80090bc:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 80090be:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80090c0:	4399      	bics	r1, r3
 80090c2:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 80090c4:	f7ff fe20 	bl	8008d08 <ScheduleTx>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d012      	beq.n	80090f2 <OnTxDelayedTimerEvent+0x46>
 80090cc:	280b      	cmp	r0, #11
 80090ce:	d010      	beq.n	80090f2 <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80090d0:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80090d2:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <OnTxDelayedTimerEvent+0x50>)
 80090d4:	58e3      	ldr	r3, [r4, r3]
 80090d6:	3385      	adds	r3, #133	; 0x85
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <OnTxDelayedTimerEvent+0x54>)
 80090dc:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80090de:	4b09      	ldr	r3, [pc, #36]	; (8009104 <OnTxDelayedTimerEvent+0x58>)
 80090e0:	5ce2      	ldrb	r2, [r4, r3]
 80090e2:	4b09      	ldr	r3, [pc, #36]	; (8009108 <OnTxDelayedTimerEvent+0x5c>)
 80090e4:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80090e6:	4b09      	ldr	r3, [pc, #36]	; (800910c <OnTxDelayedTimerEvent+0x60>)
 80090e8:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80090ea:	f002 fc25 	bl	800b938 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80090ee:	f7ff fbc3 	bl	8008878 <StopRetransmission>
}
 80090f2:	bd10      	pop	{r4, pc}
 80090f4:	20000b3c 	.word	0x20000b3c
 80090f8:	200007d4 	.word	0x200007d4
 80090fc:	00000484 	.word	0x00000484
 8009100:	0000043e 	.word	0x0000043e
 8009104:	00000412 	.word	0x00000412
 8009108:	00000441 	.word	0x00000441
 800910c:	0000043d 	.word	0x0000043d

08009110 <OpenContinuousRxCWindow>:
{
 8009110:	b5f0      	push	{r4, r5, r6, r7, lr}
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009112:	4c14      	ldr	r4, [pc, #80]	; (8009164 <OpenContinuousRxCWindow+0x54>)
 8009114:	4e14      	ldr	r6, [pc, #80]	; (8009168 <OpenContinuousRxCWindow+0x58>)
 8009116:	4d15      	ldr	r5, [pc, #84]	; (800916c <OpenContinuousRxCWindow+0x5c>)
 8009118:	59a3      	ldr	r3, [r4, r6]
{
 800911a:	b085      	sub	sp, #20
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800911c:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800911e:	001a      	movs	r2, r3
 8009120:	001f      	movs	r7, r3
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8009122:	31b4      	adds	r1, #180	; 0xb4
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009124:	7809      	ldrb	r1, [r1, #0]
 8009126:	328c      	adds	r2, #140	; 0x8c
 8009128:	7818      	ldrb	r0, [r3, #0]
 800912a:	7812      	ldrb	r2, [r2, #0]
 800912c:	3788      	adds	r7, #136	; 0x88
 800912e:	9500      	str	r5, [sp, #0]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	b249      	sxtb	r1, r1
 8009134:	f003 f920 	bl	800c378 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009138:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <OpenContinuousRxCWindow+0x60>)
 800913a:	4a0e      	ldr	r2, [pc, #56]	; (8009174 <OpenContinuousRxCWindow+0x64>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800913c:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800913e:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009140:	59a3      	ldr	r3, [r4, r6]
 8009142:	4a0d      	ldr	r2, [pc, #52]	; (8009178 <OpenContinuousRxCWindow+0x68>)
 8009144:	7818      	ldrb	r0, [r3, #0]
 8009146:	f003 f922 	bl	800c38e <RegionRxConfig>
 800914a:	2800      	cmp	r0, #0
 800914c:	d008      	beq.n	8009160 <OpenContinuousRxCWindow+0x50>
        Radio.Rx( 0 ); // Continuous mode
 800914e:	4b0b      	ldr	r3, [pc, #44]	; (800917c <OpenContinuousRxCWindow+0x6c>)
 8009150:	2000      	movs	r0, #0
 8009152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009154:	9303      	str	r3, [sp, #12]
 8009156:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009158:	4b09      	ldr	r3, [pc, #36]	; (8009180 <OpenContinuousRxCWindow+0x70>)
 800915a:	5ce2      	ldrb	r2, [r4, r3]
 800915c:	338d      	adds	r3, #141	; 0x8d
 800915e:	54e2      	strb	r2, [r4, r3]
}
 8009160:	b005      	add	sp, #20
 8009162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009164:	200007d4 	.word	0x200007d4
 8009168:	00000484 	.word	0x00000484
 800916c:	20000bb4 	.word	0x20000bb4
 8009170:	000003f2 	.word	0x000003f2
 8009174:	00000201 	.word	0x00000201
 8009178:	20000bf4 	.word	0x20000bf4
 800917c:	08012ccc 	.word	0x08012ccc
 8009180:	000003f3 	.word	0x000003f3

08009184 <SwitchClass>:
{
 8009184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 8009186:	4e34      	ldr	r6, [pc, #208]	; (8009258 <SwitchClass+0xd4>)
 8009188:	4f34      	ldr	r7, [pc, #208]	; (800925c <SwitchClass+0xd8>)
{
 800918a:	0005      	movs	r5, r0
    switch( MacCtx.NvmCtx->DeviceClass )
 800918c:	59f3      	ldr	r3, [r6, r7]
 800918e:	001a      	movs	r2, r3
 8009190:	327c      	adds	r2, #124	; 0x7c
 8009192:	7814      	ldrb	r4, [r2, #0]
 8009194:	469c      	mov	ip, r3
 8009196:	2c01      	cmp	r4, #1
 8009198:	d04a      	beq.n	8009230 <SwitchClass+0xac>
 800919a:	2c02      	cmp	r4, #2
 800919c:	d051      	beq.n	8009242 <SwitchClass+0xbe>
 800919e:	2c00      	cmp	r4, #0
 80091a0:	d10c      	bne.n	80091bc <SwitchClass+0x38>
            if( deviceClass == CLASS_A )
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d106      	bne.n	80091b4 <SwitchClass+0x30>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80091a6:	3234      	adds	r2, #52	; 0x34
 80091a8:	33a8      	adds	r3, #168	; 0xa8
 80091aa:	cb03      	ldmia	r3!, {r0, r1}
 80091ac:	c203      	stmia	r2!, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80091ae:	3403      	adds	r4, #3
}
 80091b0:	0020      	movs	r0, r4
 80091b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
 80091b4:	2801      	cmp	r0, #1
 80091b6:	d03b      	beq.n	8009230 <SwitchClass+0xac>
            if( deviceClass == CLASS_C )
 80091b8:	2802      	cmp	r0, #2
 80091ba:	d001      	beq.n	80091c0 <SwitchClass+0x3c>
    switch( MacCtx.NvmCtx->DeviceClass )
 80091bc:	2403      	movs	r4, #3
 80091be:	e7f7      	b.n	80091b0 <SwitchClass+0x2c>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80091c0:	7010      	strb	r0, [r2, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80091c2:	21f3      	movs	r1, #243	; 0xf3
 80091c4:	22f8      	movs	r2, #248	; 0xf8
 80091c6:	0089      	lsls	r1, r1, #2
 80091c8:	0092      	lsls	r2, r2, #2
 80091ca:	18b2      	adds	r2, r6, r2
 80091cc:	1871      	adds	r1, r6, r1
 80091ce:	c989      	ldmia	r1!, {r0, r3, r7}
 80091d0:	c289      	stmia	r2!, {r0, r3, r7}
 80091d2:	c909      	ldmia	r1!, {r0, r3}
 80091d4:	c209      	stmia	r2!, {r0, r3}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80091d6:	4a22      	ldr	r2, [pc, #136]	; (8009260 <SwitchClass+0xdc>)
 80091d8:	54b5      	strb	r5, [r6, r2]
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80091da:	4662      	mov	r2, ip
 80091dc:	3252      	adds	r2, #82	; 0x52
 80091de:	7812      	ldrb	r2, [r2, #0]
 80091e0:	2a00      	cmp	r2, #0
 80091e2:	d01b      	beq.n	800921c <SwitchClass+0x98>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80091e4:	4663      	mov	r3, ip
 80091e6:	4661      	mov	r1, ip
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80091e8:	4660      	mov	r0, ip
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80091ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80091ec:	31b0      	adds	r1, #176	; 0xb0
 80091ee:	600a      	str	r2, [r1, #0]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80091f0:	306c      	adds	r0, #108	; 0x6c
 80091f2:	7800      	ldrb	r0, [r0, #0]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80091f4:	33ca      	adds	r3, #202	; 0xca
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80091f6:	7108      	strb	r0, [r1, #4]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80091f8:	491a      	ldr	r1, [pc, #104]	; (8009264 <SwitchClass+0xe0>)
 80091fa:	5c70      	ldrb	r0, [r6, r1]
 80091fc:	3935      	subs	r1, #53	; 0x35
 80091fe:	5470      	strb	r0, [r6, r1]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8009200:	3104      	adds	r1, #4
 8009202:	5072      	str	r2, [r6, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009204:	4662      	mov	r2, ip
 8009206:	32b9      	adds	r2, #185	; 0xb9
 8009208:	7811      	ldrb	r1, [r2, #0]
 800920a:	22fc      	movs	r2, #252	; 0xfc
 800920c:	0092      	lsls	r2, r2, #2
 800920e:	54b1      	strb	r1, [r6, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	4b15      	ldr	r3, [pc, #84]	; (8009268 <SwitchClass+0xe4>)
 8009214:	54f2      	strb	r2, [r6, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009216:	4b15      	ldr	r3, [pc, #84]	; (800926c <SwitchClass+0xe8>)
 8009218:	4a15      	ldr	r2, [pc, #84]	; (8009270 <SwitchClass+0xec>)
 800921a:	52f2      	strh	r2, [r6, r3]
                MacCtx.NodeAckRequested = false;
 800921c:	2200      	movs	r2, #0
 800921e:	4b15      	ldr	r3, [pc, #84]	; (8009274 <SwitchClass+0xf0>)
 8009220:	54f2      	strb	r2, [r6, r3]
                Radio.Sleep( );
 8009222:	4b15      	ldr	r3, [pc, #84]	; (8009278 <SwitchClass+0xf4>)
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800922a:	f7ff ff71 	bl	8009110 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800922e:	e7bf      	b.n	80091b0 <SwitchClass+0x2c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009230:	0028      	movs	r0, r5
 8009232:	f002 f996 	bl	800b562 <LoRaMacClassBSwitchClass>
 8009236:	1e04      	subs	r4, r0, #0
            if( status == LORAMAC_STATUS_OK )
 8009238:	d1ba      	bne.n	80091b0 <SwitchClass+0x2c>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800923a:	59f3      	ldr	r3, [r6, r7]
 800923c:	337c      	adds	r3, #124	; 0x7c
 800923e:	701d      	strb	r5, [r3, #0]
 8009240:	e7b6      	b.n	80091b0 <SwitchClass+0x2c>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009242:	2403      	movs	r4, #3
            if( deviceClass == CLASS_A )
 8009244:	2800      	cmp	r0, #0
 8009246:	d1b3      	bne.n	80091b0 <SwitchClass+0x2c>
                Radio.Sleep( );
 8009248:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <SwitchClass+0xf4>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800924a:	7010      	strb	r0, [r2, #0]
                Radio.Sleep( );
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                status = LORAMAC_STATUS_OK;
 800924e:	002c      	movs	r4, r5
                Radio.Sleep( );
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009254:	e7ac      	b.n	80091b0 <SwitchClass+0x2c>
 8009256:	46c0      	nop			; (mov r8, r8)
 8009258:	200007d4 	.word	0x200007d4
 800925c:	00000484 	.word	0x00000484
 8009260:	000003f3 	.word	0x000003f3
 8009264:	00000415 	.word	0x00000415
 8009268:	000003f1 	.word	0x000003f1
 800926c:	000003f2 	.word	0x000003f2
 8009270:	00000301 	.word	0x00000301
 8009274:	00000414 	.word	0x00000414
 8009278:	08012ccc 	.word	0x08012ccc

0800927c <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 800927c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800927e:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 8009280:	f005 ffa4 	bl	800f1cc <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009284:	4e0c      	ldr	r6, [pc, #48]	; (80092b8 <RxWindowSetup.constprop.0+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009286:	4f0d      	ldr	r7, [pc, #52]	; (80092bc <RxWindowSetup.constprop.0+0x40>)
    Radio.Standby( );
 8009288:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800928e:	4d0c      	ldr	r5, [pc, #48]	; (80092c0 <RxWindowSetup.constprop.0+0x44>)
 8009290:	0021      	movs	r1, r4
 8009292:	59eb      	ldr	r3, [r5, r7]
 8009294:	4a0b      	ldr	r2, [pc, #44]	; (80092c4 <RxWindowSetup.constprop.0+0x48>)
 8009296:	7818      	ldrb	r0, [r3, #0]
 8009298:	f003 f879 	bl	800c38e <RegionRxConfig>
 800929c:	2800      	cmp	r0, #0
 800929e:	d009      	beq.n	80092b4 <RxWindowSetup.constprop.0+0x38>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 80092a0:	59eb      	ldr	r3, [r5, r7]
 80092a2:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80092a4:	3390      	adds	r3, #144	; 0x90
 80092a6:	6818      	ldr	r0, [r3, #0]
 80092a8:	9201      	str	r2, [sp, #4]
 80092aa:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 80092ac:	2390      	movs	r3, #144	; 0x90
 80092ae:	7ce2      	ldrb	r2, [r4, #19]
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	54ea      	strb	r2, [r5, r3]
}
 80092b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	08012ccc 	.word	0x08012ccc
 80092bc:	00000484 	.word	0x00000484
 80092c0:	200007d4 	.word	0x200007d4
 80092c4:	20000bf4 	.word	0x20000bf4

080092c8 <OnRxWindow1TimerEvent>:
{
 80092c8:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80092ca:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <OnRxWindow1TimerEvent+0x40>)
 80092cc:	4a0f      	ldr	r2, [pc, #60]	; (800930c <OnRxWindow1TimerEvent+0x44>)
 80092ce:	5c99      	ldrb	r1, [r3, r2]
 80092d0:	3a5d      	subs	r2, #93	; 0x5d
 80092d2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80092d4:	4a0e      	ldr	r2, [pc, #56]	; (8009310 <OnRxWindow1TimerEvent+0x48>)
 80092d6:	589a      	ldr	r2, [r3, r2]
 80092d8:	0011      	movs	r1, r2
 80092da:	31a5      	adds	r1, #165	; 0xa5
 80092dc:	7808      	ldrb	r0, [r1, #0]
 80092de:	490d      	ldr	r1, [pc, #52]	; (8009314 <OnRxWindow1TimerEvent+0x4c>)
 80092e0:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80092e2:	0011      	movs	r1, r2
 80092e4:	31b9      	adds	r1, #185	; 0xb9
 80092e6:	7808      	ldrb	r0, [r1, #0]
 80092e8:	21f2      	movs	r1, #242	; 0xf2
 80092ea:	0089      	lsls	r1, r1, #2
 80092ec:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80092ee:	32ca      	adds	r2, #202	; 0xca
 80092f0:	7811      	ldrb	r1, [r2, #0]
 80092f2:	4a09      	ldr	r2, [pc, #36]	; (8009318 <OnRxWindow1TimerEvent+0x50>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80092f4:	4809      	ldr	r0, [pc, #36]	; (800931c <OnRxWindow1TimerEvent+0x54>)
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80092f6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 80092f8:	2100      	movs	r1, #0
 80092fa:	4a09      	ldr	r2, [pc, #36]	; (8009320 <OnRxWindow1TimerEvent+0x58>)
 80092fc:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80092fe:	4909      	ldr	r1, [pc, #36]	; (8009324 <OnRxWindow1TimerEvent+0x5c>)
 8009300:	f7ff ffbc 	bl	800927c <RxWindowSetup.constprop.0>
}
 8009304:	bd10      	pop	{r4, pc}
 8009306:	46c0      	nop			; (mov r8, r8)
 8009308:	200007d4 	.word	0x200007d4
 800930c:	00000415 	.word	0x00000415
 8009310:	00000484 	.word	0x00000484
 8009314:	000003bb 	.word	0x000003bb
 8009318:	000003c9 	.word	0x000003c9
 800931c:	20000b54 	.word	0x20000b54
 8009320:	000003ca 	.word	0x000003ca
 8009324:	20000b8c 	.word	0x20000b8c

08009328 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009328:	2290      	movs	r2, #144	; 0x90
{
 800932a:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800932c:	4b11      	ldr	r3, [pc, #68]	; (8009374 <OnRxWindow2TimerEvent+0x4c>)
 800932e:	00d2      	lsls	r2, r2, #3
 8009330:	5c9a      	ldrb	r2, [r3, r2]
 8009332:	2a00      	cmp	r2, #0
 8009334:	d01d      	beq.n	8009372 <OnRxWindow2TimerEvent+0x4a>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009336:	4a10      	ldr	r2, [pc, #64]	; (8009378 <OnRxWindow2TimerEvent+0x50>)
 8009338:	5c99      	ldrb	r1, [r3, r2]
 800933a:	3a49      	subs	r2, #73	; 0x49
 800933c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800933e:	4a0f      	ldr	r2, [pc, #60]	; (800937c <OnRxWindow2TimerEvent+0x54>)
 8009340:	589a      	ldr	r2, [r3, r2]
 8009342:	0011      	movs	r1, r2
 8009344:	31a8      	adds	r1, #168	; 0xa8
 8009346:	6808      	ldr	r0, [r1, #0]
 8009348:	21f4      	movs	r1, #244	; 0xf4
 800934a:	0089      	lsls	r1, r1, #2
 800934c:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800934e:	0011      	movs	r1, r2
 8009350:	31b9      	adds	r1, #185	; 0xb9
 8009352:	7808      	ldrb	r0, [r1, #0]
 8009354:	21f7      	movs	r1, #247	; 0xf7
 8009356:	0089      	lsls	r1, r1, #2
 8009358:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800935a:	32ca      	adds	r2, #202	; 0xca
 800935c:	7811      	ldrb	r1, [r2, #0]
 800935e:	4a08      	ldr	r2, [pc, #32]	; (8009380 <OnRxWindow2TimerEvent+0x58>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009360:	4808      	ldr	r0, [pc, #32]	; (8009384 <OnRxWindow2TimerEvent+0x5c>)
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009362:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009364:	2180      	movs	r1, #128	; 0x80
 8009366:	4a08      	ldr	r2, [pc, #32]	; (8009388 <OnRxWindow2TimerEvent+0x60>)
 8009368:	0049      	lsls	r1, r1, #1
 800936a:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800936c:	4907      	ldr	r1, [pc, #28]	; (800938c <OnRxWindow2TimerEvent+0x64>)
 800936e:	f7ff ff85 	bl	800927c <RxWindowSetup.constprop.0>
}
 8009372:	bd10      	pop	{r4, pc}
 8009374:	200007d4 	.word	0x200007d4
 8009378:	00000415 	.word	0x00000415
 800937c:	00000484 	.word	0x00000484
 8009380:	000003dd 	.word	0x000003dd
 8009384:	20000b6c 	.word	0x20000b6c
 8009388:	000003de 	.word	0x000003de
 800938c:	20000ba0 	.word	0x20000ba0

08009390 <ProcessMacCommands.isra.0.constprop.0>:
    uint8_t status = 0;
 8009390:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009394:	b097      	sub	sp, #92	; 0x5c
 8009396:	9208      	str	r2, [sp, #32]
    uint8_t status = 0;
 8009398:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800939a:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 800939c:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800939e:	9105      	str	r1, [sp, #20]
    uint8_t status = 0;
 80093a0:	a908      	add	r1, sp, #32
 80093a2:	1852      	adds	r2, r2, r1
 80093a4:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80093a6:	aa0c      	add	r2, sp, #48	; 0x30
 80093a8:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 80093aa:	9303      	str	r3, [sp, #12]
    while( macIndex < commandsSize )
 80093ac:	9b05      	ldr	r3, [sp, #20]
 80093ae:	429c      	cmp	r4, r3
 80093b0:	d301      	bcc.n	80093b6 <ProcessMacCommands.isra.0.constprop.0+0x26>
}
 80093b2:	b017      	add	sp, #92	; 0x5c
 80093b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80093b6:	5d38      	ldrb	r0, [r7, r4]
 80093b8:	f002 fa0e 	bl	800b7d8 <LoRaMacCommandsGetCmdSize>
 80093bc:	9b05      	ldr	r3, [sp, #20]
 80093be:	1900      	adds	r0, r0, r4
 80093c0:	193e      	adds	r6, r7, r4
 80093c2:	4298      	cmp	r0, r3
 80093c4:	dcf5      	bgt.n	80093b2 <ProcessMacCommands.isra.0.constprop.0+0x22>
        switch( payload[macIndex++] )
 80093c6:	7830      	ldrb	r0, [r6, #0]
 80093c8:	1c65      	adds	r5, r4, #1
 80093ca:	3802      	subs	r0, #2
 80093cc:	b2ed      	uxtb	r5, r5
 80093ce:	2811      	cmp	r0, #17
 80093d0:	d8ef      	bhi.n	80093b2 <ProcessMacCommands.isra.0.constprop.0+0x22>
 80093d2:	f7f6 feb5 	bl	8000140 <__gnu_thumb1_case_shi>
 80093d6:	0012      	.short	0x0012
 80093d8:	00900029 	.word	0x00900029
 80093dc:	00ee00a8 	.word	0x00ee00a8
 80093e0:	01340106 	.word	0x01340106
 80093e4:	01ac0158 	.word	0x01ac0158
 80093e8:	ffeeffee 	.word	0xffeeffee
 80093ec:	ffee01e3 	.word	0xffee01e3
 80093f0:	0233ffee 	.word	0x0233ffee
 80093f4:	02630248 	.word	0x02630248
 80093f8:	027d      	.short	0x027d
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80093fa:	2004      	movs	r0, #4
 80093fc:	f002 fab8 	bl	800b970 <LoRaMacConfirmQueueIsCmdActive>
 8009400:	2800      	cmp	r0, #0
 8009402:	d00f      	beq.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009404:	2104      	movs	r1, #4
 8009406:	2000      	movs	r0, #0
 8009408:	f002 fa70 	bl	800b8ec <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800940c:	228b      	movs	r2, #139	; 0x8b
 800940e:	5d79      	ldrb	r1, [r7, r5]
 8009410:	4bdd      	ldr	r3, [pc, #884]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009412:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009414:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009416:	3402      	adds	r4, #2
 8009418:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800941a:	b2e4      	uxtb	r4, r4
 800941c:	5d39      	ldrb	r1, [r7, r4]
 800941e:	4adb      	ldr	r2, [pc, #876]	; (800978c <ProcessMacCommands.isra.0.constprop.0+0x3fc>)
 8009420:	b2ed      	uxtb	r5, r5
 8009422:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 8009424:	002c      	movs	r4, r5
 8009426:	e7c1      	b.n	80093ac <ProcessMacCommands.isra.0.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 8009428:	2300      	movs	r3, #0
 800942a:	aa08      	add	r2, sp, #32
 800942c:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 800942e:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8009430:	ae0d      	add	r6, sp, #52	; 0x34
                uint8_t linkAdrNbBytesParsed = 0;
 8009432:	aa0e      	add	r2, sp, #56	; 0x38
                uint8_t linkAdrNbRep = 0;
 8009434:	7033      	strb	r3, [r6, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8009436:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8009438:	9b03      	ldr	r3, [sp, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d158      	bne.n	80094f0 <ProcessMacCommands.isra.0.constprop.0+0x160>
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800943e:	9b05      	ldr	r3, [sp, #20]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8009440:	3d01      	subs	r5, #1
 8009442:	a912      	add	r1, sp, #72	; 0x48
 8009444:	197d      	adds	r5, r7, r5
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009446:	1b1b      	subs	r3, r3, r4
 8009448:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800944a:	604d      	str	r5, [r1, #4]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800944c:	4bce      	ldr	r3, [pc, #824]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800944e:	4dd0      	ldr	r5, [pc, #832]	; (8009790 <ProcessMacCommands.isra.0.constprop.0+0x400>)
 8009450:	595b      	ldr	r3, [r3, r5]
 8009452:	0018      	movs	r0, r3
 8009454:	307e      	adds	r0, #126	; 0x7e
 8009456:	7800      	ldrb	r0, [r0, #0]
 8009458:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800945a:	0018      	movs	r0, r3
 800945c:	30b8      	adds	r0, #184	; 0xb8
 800945e:	7800      	ldrb	r0, [r0, #0]
 8009460:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009462:	0018      	movs	r0, r3
 8009464:	3085      	adds	r0, #133	; 0x85
 8009466:	7800      	ldrb	r0, [r0, #0]
 8009468:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800946a:	0018      	movs	r0, r3
 800946c:	3084      	adds	r0, #132	; 0x84
 800946e:	7800      	ldrb	r0, [r0, #0]
 8009470:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8009472:	0018      	movs	r0, r3
 8009474:	30a4      	adds	r0, #164	; 0xa4
 8009476:	7800      	ldrb	r0, [r0, #0]
 8009478:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800947a:	0018      	movs	r0, r3
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800947c:	781b      	ldrb	r3, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800947e:	30fc      	adds	r0, #252	; 0xfc
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009480:	469c      	mov	ip, r3
 8009482:	230f      	movs	r3, #15
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009484:	6e40      	ldr	r0, [r0, #100]	; 0x64
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009486:	9201      	str	r2, [sp, #4]
 8009488:	aa08      	add	r2, sp, #32
 800948a:	189b      	adds	r3, r3, r2
 800948c:	220e      	movs	r2, #14
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800948e:	9012      	str	r0, [sp, #72]	; 0x48
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009490:	a808      	add	r0, sp, #32
 8009492:	1812      	adds	r2, r2, r0
 8009494:	9600      	str	r6, [sp, #0]
 8009496:	4660      	mov	r0, ip
 8009498:	f002 ff92 	bl	800c3c0 <RegionLinkAdrReq>
 800949c:	ab08      	add	r3, sp, #32
 800949e:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 80094a0:	43c0      	mvns	r0, r0
 80094a2:	0743      	lsls	r3, r0, #29
 80094a4:	d10d      	bne.n	80094c2 <ProcessMacCommands.isra.0.constprop.0+0x132>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 80094a6:	4bb8      	ldr	r3, [pc, #736]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 80094a8:	a908      	add	r1, sp, #32
 80094aa:	595b      	ldr	r3, [r3, r5]
 80094ac:	7b89      	ldrb	r1, [r1, #14]
 80094ae:	001a      	movs	r2, r3
 80094b0:	3285      	adds	r2, #133	; 0x85
 80094b2:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 80094b4:	a908      	add	r1, sp, #32
 80094b6:	7bc9      	ldrb	r1, [r1, #15]
 80094b8:	3a01      	subs	r2, #1
 80094ba:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80094bc:	7832      	ldrb	r2, [r6, #0]
 80094be:	33a4      	adds	r3, #164	; 0xa4
 80094c0:	701a      	strb	r2, [r3, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80094c2:	2600      	movs	r6, #0
 80094c4:	e009      	b.n	80094da <ProcessMacCommands.isra.0.constprop.0+0x14a>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80094c6:	230d      	movs	r3, #13
 80094c8:	a908      	add	r1, sp, #32
 80094ca:	185b      	adds	r3, r3, r1
 80094cc:	2201      	movs	r2, #1
 80094ce:	0019      	movs	r1, r3
 80094d0:	2003      	movs	r0, #3
 80094d2:	f002 f887 	bl	800b5e4 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80094d6:	3601      	adds	r6, #1
 80094d8:	b2f6      	uxtb	r6, r6
 80094da:	ab0e      	add	r3, sp, #56	; 0x38
 80094dc:	781d      	ldrb	r5, [r3, #0]
 80094de:	2105      	movs	r1, #5
 80094e0:	0028      	movs	r0, r5
 80094e2:	f7f6 fe41 	bl	8000168 <__udivsi3>
 80094e6:	b2c0      	uxtb	r0, r0
 80094e8:	4286      	cmp	r6, r0
 80094ea:	d3ec      	bcc.n	80094c6 <ProcessMacCommands.isra.0.constprop.0+0x136>
                    macIndex += linkAdrNbBytesParsed - 1;
 80094ec:	1965      	adds	r5, r4, r5
 80094ee:	b2ed      	uxtb	r5, r5
                break;
 80094f0:	2301      	movs	r3, #1
 80094f2:	9303      	str	r3, [sp, #12]
 80094f4:	e796      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80094f6:	4aa4      	ldr	r2, [pc, #656]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 80094f8:	4ba5      	ldr	r3, [pc, #660]	; (8009790 <ProcessMacCommands.isra.0.constprop.0+0x400>)
 80094fa:	3402      	adds	r4, #2
 80094fc:	58d1      	ldr	r1, [r2, r3]
 80094fe:	220f      	movs	r2, #15
 8009500:	5d7b      	ldrb	r3, [r7, r5]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009502:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8009504:	4013      	ands	r3, r2
 8009506:	000a      	movs	r2, r1
 8009508:	32c8      	adds	r2, #200	; 0xc8
 800950a:	7013      	strb	r3, [r2, #0]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800950c:	2201      	movs	r2, #1
 800950e:	409a      	lsls	r2, r3
 8009510:	0013      	movs	r3, r2
 8009512:	22a6      	movs	r2, #166	; 0xa6
 8009514:	0052      	lsls	r2, r2, #1
 8009516:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009518:	2200      	movs	r2, #0
 800951a:	a90c      	add	r1, sp, #48	; 0x30
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800951c:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800951e:	f002 f861 	bl	800b5e4 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009522:	0025      	movs	r5, r4
}
 8009524:	e77e      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                status = 0x07;
 8009526:	2107      	movs	r1, #7
 8009528:	ab08      	add	r3, sp, #32
 800952a:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800952c:	5d7b      	ldrb	r3, [r7, r5]
 800952e:	ae12      	add	r6, sp, #72	; 0x48
 8009530:	091a      	lsrs	r2, r3, #4
 8009532:	400a      	ands	r2, r1
 8009534:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8009536:	220f      	movs	r2, #15
 8009538:	4013      	ands	r3, r2
 800953a:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800953c:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800953e:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009540:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009542:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009544:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009546:	5cba      	ldrb	r2, [r7, r2]
 8009548:	1d65      	adds	r5, r4, #5
                macIndex++;
 800954a:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800954c:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800954e:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009550:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009552:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009554:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009556:	4c8e      	ldr	r4, [pc, #568]	; (8009790 <ProcessMacCommands.isra.0.constprop.0+0x400>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009558:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 800955a:	2264      	movs	r2, #100	; 0x64
 800955c:	4353      	muls	r3, r2
 800955e:	9313      	str	r3, [sp, #76]	; 0x4c
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009560:	4b89      	ldr	r3, [pc, #548]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009562:	0031      	movs	r1, r6
 8009564:	591b      	ldr	r3, [r3, r4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009566:	b2ed      	uxtb	r5, r5
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009568:	7818      	ldrb	r0, [r3, #0]
 800956a:	9304      	str	r3, [sp, #16]
 800956c:	f002 ff38 	bl	800c3e0 <RegionRxParamSetupReq>
 8009570:	ab08      	add	r3, sp, #32
 8009572:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8009574:	2307      	movs	r3, #7
 8009576:	4003      	ands	r3, r0
 8009578:	2b07      	cmp	r3, #7
 800957a:	d10d      	bne.n	8009598 <ProcessMacCommands.isra.0.constprop.0+0x208>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800957c:	4b82      	ldr	r3, [pc, #520]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800957e:	7832      	ldrb	r2, [r6, #0]
 8009580:	591b      	ldr	r3, [r3, r4]
 8009582:	0019      	movs	r1, r3
 8009584:	31ac      	adds	r1, #172	; 0xac
 8009586:	700a      	strb	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8009588:	720a      	strb	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800958a:	6872      	ldr	r2, [r6, #4]
 800958c:	3904      	subs	r1, #4
 800958e:	600a      	str	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009590:	608a      	str	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8009592:	7872      	ldrb	r2, [r6, #1]
 8009594:	33a5      	adds	r3, #165	; 0xa5
 8009596:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8009598:	a90c      	add	r1, sp, #48	; 0x30
 800959a:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800959c:	2201      	movs	r2, #1
 800959e:	2005      	movs	r0, #5
 80095a0:	f002 f820 	bl	800b5e4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80095a4:	2310      	movs	r3, #16
 80095a6:	4978      	ldr	r1, [pc, #480]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 80095a8:	4a7a      	ldr	r2, [pc, #488]	; (8009794 <ProcessMacCommands.isra.0.constprop.0+0x404>)
 80095aa:	5c88      	ldrb	r0, [r1, r2]
 80095ac:	4303      	orrs	r3, r0
 80095ae:	548b      	strb	r3, [r1, r2]
                break;
 80095b0:	e738      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80095b2:	23d2      	movs	r3, #210	; 0xd2
 80095b4:	4a74      	ldr	r2, [pc, #464]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80095ba:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <ProcessMacCommands.isra.0.constprop.0+0x238>
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d000      	beq.n	80095c8 <ProcessMacCommands.isra.0.constprop.0+0x238>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80095c6:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80095c8:	ab08      	add	r3, sp, #32
 80095ca:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80095cc:	233f      	movs	r3, #63	; 0x3f
 80095ce:	9a08      	ldr	r2, [sp, #32]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80095d0:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80095d2:	4013      	ands	r3, r2
 80095d4:	aa08      	add	r2, sp, #32
 80095d6:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80095d8:	2202      	movs	r2, #2
 80095da:	a90c      	add	r1, sp, #48	; 0x30
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80095dc:	f002 f802 	bl	800b5e4 <LoRaMacCommandsAddCmd>
                break;
 80095e0:	e720      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                status = 0x03;
 80095e2:	260d      	movs	r6, #13
 80095e4:	ab08      	add	r3, sp, #32
 80095e6:	18f6      	adds	r6, r6, r3
 80095e8:	2303      	movs	r3, #3
 80095ea:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 80095ec:	5d7b      	ldrb	r3, [r7, r5]
 80095ee:	a90e      	add	r1, sp, #56	; 0x38
 80095f0:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80095f2:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	5cf8      	ldrb	r0, [r7, r3]
 80095f8:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	5cfb      	ldrb	r3, [r7, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80095fe:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009600:	041b      	lsls	r3, r3, #16
 8009602:	4303      	orrs	r3, r0
                newChannelReq.ChannelId = payload[macIndex++];
 8009604:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009606:	b2c0      	uxtb	r0, r0
 8009608:	5c38      	ldrb	r0, [r7, r0]
                chParam.DrRange.Value = payload[macIndex++];
 800960a:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800960c:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 800960e:	2064      	movs	r0, #100	; 0x64
 8009610:	4343      	muls	r3, r0
 8009612:	9312      	str	r3, [sp, #72]	; 0x48
                chParam.Rx1Frequency = 0;
 8009614:	2300      	movs	r3, #0
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009616:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 8009618:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 800961a:	9313      	str	r3, [sp, #76]	; 0x4c
                chParam.DrRange.Value = payload[macIndex++];
 800961c:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 800961e:	aa12      	add	r2, sp, #72	; 0x48
                chParam.DrRange.Value = payload[macIndex++];
 8009620:	7213      	strb	r3, [r2, #8]
                newChannelReq.NewChannel = &chParam;
 8009622:	920e      	str	r2, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009624:	4b5a      	ldr	r3, [pc, #360]	; (8009790 <ProcessMacCommands.isra.0.constprop.0+0x400>)
 8009626:	4a58      	ldr	r2, [pc, #352]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
                chParam.DrRange.Value = payload[macIndex++];
 8009628:	b2ed      	uxtb	r5, r5
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800962a:	58d3      	ldr	r3, [r2, r3]
 800962c:	7818      	ldrb	r0, [r3, #0]
 800962e:	f002 fee1 	bl	800c3f4 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8009632:	a90c      	add	r1, sp, #48	; 0x30
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009634:	7030      	strb	r0, [r6, #0]
                macCmdPayload[0] = status;
 8009636:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009638:	2201      	movs	r2, #1
 800963a:	2007      	movs	r0, #7
 800963c:	e7ce      	b.n	80095dc <ProcessMacCommands.isra.0.constprop.0+0x24c>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800963e:	230f      	movs	r3, #15
 8009640:	5d79      	ldrb	r1, [r7, r5]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009642:	4a51      	ldr	r2, [pc, #324]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009644:	4019      	ands	r1, r3
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009646:	4b52      	ldr	r3, [pc, #328]	; (8009790 <ProcessMacCommands.isra.0.constprop.0+0x400>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009648:	3402      	adds	r4, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800964a:	58d2      	ldr	r2, [r2, r3]
                uint8_t delay = payload[macIndex++] & 0x0F;
 800964c:	b2e4      	uxtb	r4, r4
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800964e:	1c0b      	adds	r3, r1, #0
 8009650:	2900      	cmp	r1, #0
 8009652:	d100      	bne.n	8009656 <ProcessMacCommands.isra.0.constprop.0+0x2c6>
 8009654:	2301      	movs	r3, #1
 8009656:	b2d9      	uxtb	r1, r3
 8009658:	23fa      	movs	r3, #250	; 0xfa
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	434b      	muls	r3, r1
 800965e:	0011      	movs	r1, r2
 8009660:	3194      	adds	r1, #148	; 0x94
 8009662:	600b      	str	r3, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009664:	21fa      	movs	r1, #250	; 0xfa
 8009666:	0089      	lsls	r1, r1, #2
 8009668:	185b      	adds	r3, r3, r1
 800966a:	3298      	adds	r2, #152	; 0x98
 800966c:	6013      	str	r3, [r2, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800966e:	a90c      	add	r1, sp, #48	; 0x30
 8009670:	2200      	movs	r2, #0
 8009672:	2008      	movs	r0, #8
 8009674:	f001 ffb6 	bl	800b5e4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009678:	2310      	movs	r3, #16
 800967a:	4943      	ldr	r1, [pc, #268]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800967c:	4a45      	ldr	r2, [pc, #276]	; (8009794 <ProcessMacCommands.isra.0.constprop.0+0x404>)
 800967e:	5c88      	ldrb	r0, [r1, r2]
 8009680:	4303      	orrs	r3, r0
 8009682:	548b      	strb	r3, [r1, r2]
 8009684:	e74d      	b.n	8009522 <ProcessMacCommands.isra.0.constprop.0+0x192>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009686:	3402      	adds	r4, #2
 8009688:	b2e3      	uxtb	r3, r4
 800968a:	9306      	str	r3, [sp, #24]
 800968c:	5d7b      	ldrb	r3, [r7, r5]
                txParamSetupReq.UplinkDwellTime = 0;
 800968e:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009690:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 8009692:	ac0d      	add	r4, sp, #52	; 0x34
 8009694:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009696:	3220      	adds	r2, #32
 8009698:	4011      	ands	r1, r2
 800969a:	4213      	tst	r3, r2
 800969c:	d144      	bne.n	8009728 <ProcessMacCommands.isra.0.constprop.0+0x398>
                txParamSetupReq.DownlinkDwellTime = 0;
 800969e:	7061      	strb	r1, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80096a0:	06da      	lsls	r2, r3, #27
 80096a2:	d501      	bpl.n	80096a8 <ProcessMacCommands.isra.0.constprop.0+0x318>
                    txParamSetupReq.UplinkDwellTime = 1;
 80096a4:	2201      	movs	r2, #1
 80096a6:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80096a8:	220f      	movs	r2, #15
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80096aa:	4d37      	ldr	r5, [pc, #220]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 80096ac:	4e38      	ldr	r6, [pc, #224]	; (8009790 <ProcessMacCommands.isra.0.constprop.0+0x400>)
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80096ae:	4013      	ands	r3, r2
 80096b0:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80096b2:	59ab      	ldr	r3, [r5, r6]
 80096b4:	0021      	movs	r1, r4
 80096b6:	7818      	ldrb	r0, [r3, #0]
 80096b8:	f002 fea6 	bl	800c408 <RegionTxParamSetupReq>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d031      	beq.n	8009724 <ProcessMacCommands.isra.0.constprop.0+0x394>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80096c0:	59ab      	ldr	r3, [r5, r6]
 80096c2:	8822      	ldrh	r2, [r4, #0]
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	7823      	ldrb	r3, [r4, #0]
 80096c8:	9307      	str	r3, [sp, #28]
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	33b8      	adds	r3, #184	; 0xb8
 80096ce:	801a      	strh	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80096d0:	9b04      	ldr	r3, [sp, #16]
 80096d2:	4a31      	ldr	r2, [pc, #196]	; (8009798 <ProcessMacCommands.isra.0.constprop.0+0x408>)
 80096d4:	33bc      	adds	r3, #188	; 0xbc
 80096d6:	9309      	str	r3, [sp, #36]	; 0x24
 80096d8:	78a3      	ldrb	r3, [r4, #2]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80096da:	2400      	movs	r4, #0
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80096dc:	5cd0      	ldrb	r0, [r2, r3]
 80096de:	f7f7 f9f1 	bl	8000ac4 <__aeabi_ui2f>
 80096e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80096e4:	2128      	movs	r1, #40	; 0x28
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80096e6:	6018      	str	r0, [r3, #0]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80096e8:	2302      	movs	r3, #2
 80096ea:	aa08      	add	r2, sp, #32
 80096ec:	1852      	adds	r2, r2, r1
 80096ee:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80096f0:	222a      	movs	r2, #42	; 0x2a
 80096f2:	ab08      	add	r3, sp, #32
 80096f4:	189b      	adds	r3, r3, r2
 80096f6:	9a07      	ldr	r2, [sp, #28]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80096f8:	a912      	add	r1, sp, #72	; 0x48
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80096fa:	701a      	strb	r2, [r3, #0]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80096fc:	9b04      	ldr	r3, [sp, #16]
 80096fe:	7818      	ldrb	r0, [r3, #0]
 8009700:	f002 fdf9 	bl	800c2f6 <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009704:	59ab      	ldr	r3, [r5, r6]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009706:	900e      	str	r0, [sp, #56]	; 0x38
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009708:	3385      	adds	r3, #133	; 0x85
 800970a:	571c      	ldrsb	r4, [r3, r4]
 800970c:	1c02      	adds	r2, r0, #0
 800970e:	b240      	sxtb	r0, r0
 8009710:	7819      	ldrb	r1, [r3, #0]
 8009712:	42a0      	cmp	r0, r4
 8009714:	da00      	bge.n	8009718 <ProcessMacCommands.isra.0.constprop.0+0x388>
 8009716:	1c0a      	adds	r2, r1, #0
 8009718:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800971a:	2009      	movs	r0, #9
 800971c:	2200      	movs	r2, #0
 800971e:	a90c      	add	r1, sp, #48	; 0x30
 8009720:	f001 ff60 	bl	800b5e4 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009724:	9d06      	ldr	r5, [sp, #24]
 8009726:	e67d      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009728:	2201      	movs	r2, #1
 800972a:	7062      	strb	r2, [r4, #1]
 800972c:	e7b8      	b.n	80096a0 <ProcessMacCommands.isra.0.constprop.0+0x310>
                status = 0x03;
 800972e:	260d      	movs	r6, #13
 8009730:	ab08      	add	r3, sp, #32
 8009732:	18f6      	adds	r6, r6, r3
 8009734:	2303      	movs	r3, #3
 8009736:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8009738:	5d7b      	ldrb	r3, [r7, r5]
 800973a:	a912      	add	r1, sp, #72	; 0x48
 800973c:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800973e:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009740:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009742:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009744:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009746:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009748:	5cba      	ldrb	r2, [r7, r2]
 800974a:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 800974c:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800974e:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009750:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009752:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009754:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009756:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009758:	4c0b      	ldr	r4, [pc, #44]	; (8009788 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800975a:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 800975c:	2264      	movs	r2, #100	; 0x64
 800975e:	4353      	muls	r3, r2
 8009760:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009762:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <ProcessMacCommands.isra.0.constprop.0+0x400>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009764:	b2ed      	uxtb	r5, r5
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009766:	58e3      	ldr	r3, [r4, r3]
 8009768:	7818      	ldrb	r0, [r3, #0]
 800976a:	f002 fe57 	bl	800c41c <RegionDlChannelReq>
                macCmdPayload[0] = status;
 800976e:	a90c      	add	r1, sp, #48	; 0x30
 8009770:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009772:	2201      	movs	r2, #1
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009774:	7030      	strb	r0, [r6, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009776:	200a      	movs	r0, #10
 8009778:	f001 ff34 	bl	800b5e4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800977c:	2310      	movs	r3, #16
 800977e:	4a05      	ldr	r2, [pc, #20]	; (8009794 <ProcessMacCommands.isra.0.constprop.0+0x404>)
 8009780:	5ca1      	ldrb	r1, [r4, r2]
 8009782:	430b      	orrs	r3, r1
 8009784:	54a3      	strb	r3, [r4, r2]
                break;
 8009786:	e64d      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
 8009788:	200007d4 	.word	0x200007d4
 800978c:	00000459 	.word	0x00000459
 8009790:	00000484 	.word	0x00000484
 8009794:	00000481 	.word	0x00000481
 8009798:	08012b3d 	.word	0x08012b3d
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800979c:	200a      	movs	r0, #10
 800979e:	f002 f8e7 	bl	800b970 <LoRaMacConfirmQueueIsCmdActive>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d100      	bne.n	80097a8 <ProcessMacCommands.isra.0.constprop.0+0x418>
 80097a6:	e63d      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80097a8:	210a      	movs	r1, #10
 80097aa:	2000      	movs	r0, #0
 80097ac:	f002 f89e 	bl	800b8ec <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 80097b0:	231e      	movs	r3, #30
 80097b2:	aa08      	add	r2, sp, #32
 80097b4:	189b      	adds	r3, r3, r2
 80097b6:	2200      	movs	r2, #0
 80097b8:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80097ba:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	5cfe      	ldrb	r6, [r7, r3]
 80097c0:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80097c6:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80097c8:	0409      	lsls	r1, r1, #16
 80097ca:	430e      	orrs	r6, r1
 80097cc:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80097ce:	5d79      	ldrb	r1, [r7, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80097d0:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80097d2:	430e      	orrs	r6, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80097d4:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80097d6:	23fa      	movs	r3, #250	; 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80097d8:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80097da:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80097dc:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80097de:	5d3a      	ldrb	r2, [r7, r4]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4353      	muls	r3, r2
 80097e4:	aa08      	add	r2, sp, #32
 80097e6:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80097e8:	0609      	lsls	r1, r1, #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80097ea:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 80097ec:	a812      	add	r0, sp, #72	; 0x48
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80097ee:	430e      	orrs	r6, r1
                    sysTimeCurrent = SysTimeGet( );
 80097f0:	f005 fc42 	bl	800f078 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80097f4:	4b41      	ldr	r3, [pc, #260]	; (80098fc <ProcessMacCommands.isra.0.constprop.0+0x56c>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80097f6:	4c42      	ldr	r4, [pc, #264]	; (8009900 <ProcessMacCommands.isra.0.constprop.0+0x570>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80097f8:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80097fa:	23cf      	movs	r3, #207	; 0xcf
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	18e3      	adds	r3, r4, r3
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	23ce      	movs	r3, #206	; 0xce
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	58e3      	ldr	r3, [r4, r3]
 800980c:	a810      	add	r0, sp, #64	; 0x40
 800980e:	910e      	str	r1, [sp, #56]	; 0x38
 8009810:	f005 fbf4 	bl	800effc <SysTimeSub>
 8009814:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009816:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009818:	9912      	ldr	r1, [sp, #72]	; 0x48
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	a80e      	add	r0, sp, #56	; 0x38
 800981e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009820:	f005 fbd2 	bl	800efc8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8009824:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009826:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009828:	f005 fbfe 	bl	800f028 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800982c:	f001 fea3 	bl	800b576 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009830:	2387      	movs	r3, #135	; 0x87
 8009832:	2201      	movs	r2, #1
 8009834:	00db      	lsls	r3, r3, #3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009836:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009838:	54e2      	strb	r2, [r4, r3]
 800983a:	e5f3      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800983c:	200d      	movs	r0, #13
 800983e:	f002 f897 	bl	800b970 <LoRaMacConfirmQueueIsCmdActive>
 8009842:	2800      	cmp	r0, #0
 8009844:	d100      	bne.n	8009848 <ProcessMacCommands.isra.0.constprop.0+0x4b8>
 8009846:	e5ed      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8009848:	210d      	movs	r1, #13
 800984a:	2000      	movs	r0, #0
 800984c:	f002 f84e 	bl	800b8ec <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8009850:	2390      	movs	r3, #144	; 0x90
 8009852:	4a2b      	ldr	r2, [pc, #172]	; (8009900 <ProcessMacCommands.isra.0.constprop.0+0x570>)
 8009854:	00db      	lsls	r3, r3, #3
 8009856:	5cd3      	ldrb	r3, [r2, r3]
 8009858:	3b04      	subs	r3, #4
 800985a:	2b01      	cmp	r3, #1
 800985c:	d800      	bhi.n	8009860 <ProcessMacCommands.isra.0.constprop.0+0x4d0>
 800985e:	e5e1      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                        LoRaMacClassBPingSlotInfoAns( );
 8009860:	f001 fe85 	bl	800b56e <LoRaMacClassBPingSlotInfoAns>
 8009864:	e5de      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                frequency = ( uint32_t )payload[macIndex++];
 8009866:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009868:	b2db      	uxtb	r3, r3
 800986a:	5cf9      	ldrb	r1, [r7, r3]
 800986c:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800986e:	b2db      	uxtb	r3, r3
 8009870:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009872:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009874:	041b      	lsls	r3, r3, #16
 8009876:	4319      	orrs	r1, r3
                frequency *= 100;
 8009878:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 800987a:	5d7a      	ldrb	r2, [r7, r5]
                datarate = payload[macIndex++] & 0x0F;
 800987c:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800987e:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8009880:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009882:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 8009884:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 8009886:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8009888:	3b55      	subs	r3, #85	; 0x55
 800988a:	4018      	ands	r0, r3
 800988c:	f001 fe70 	bl	800b570 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8009890:	a90c      	add	r1, sp, #48	; 0x30
 8009892:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8009894:	2201      	movs	r2, #1
 8009896:	2011      	movs	r0, #17
                datarate = payload[macIndex++] & 0x0F;
 8009898:	b2ed      	uxtb	r5, r5
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800989a:	e69f      	b.n	80095dc <ProcessMacCommands.isra.0.constprop.0+0x24c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800989c:	200e      	movs	r0, #14
 800989e:	f002 f867 	bl	800b970 <LoRaMacConfirmQueueIsCmdActive>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d100      	bne.n	80098a8 <ProcessMacCommands.isra.0.constprop.0+0x518>
 80098a6:	e5bd      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80098a8:	210e      	movs	r1, #14
 80098aa:	2000      	movs	r0, #0
 80098ac:	f002 f81e 	bl	800b8ec <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80098b0:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	5cf8      	ldrb	r0, [r7, r3]
 80098b6:	5d7b      	ldrb	r3, [r7, r5]
 80098b8:	0200      	lsls	r0, r0, #8
 80098ba:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 80098bc:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80098be:	4b11      	ldr	r3, [pc, #68]	; (8009904 <ProcessMacCommands.isra.0.constprop.0+0x574>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80098c0:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 80098c2:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80098c4:	5d39      	ldrb	r1, [r7, r4]
 80098c6:	681a      	ldr	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 80098c8:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80098ca:	f001 fe53 	bl	800b574 <LoRaMacClassBBeaconTimingAns>
 80098ce:	e5a9      	b.n	8009424 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    frequency = ( uint32_t )payload[macIndex++];
 80098d0:	5d7a      	ldrb	r2, [r7, r5]
 80098d2:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80098d4:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80098d6:	3403      	adds	r4, #3
 80098d8:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80098da:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80098dc:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80098de:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80098e0:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80098e2:	041b      	lsls	r3, r3, #16
 80098e4:	4318      	orrs	r0, r3
                    frequency *= 100;
 80098e6:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80098e8:	4310      	orrs	r0, r2
                    frequency *= 100;
 80098ea:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80098ec:	f001 fe44 	bl	800b578 <LoRaMacClassBBeaconFreqReq>
 80098f0:	a90c      	add	r1, sp, #48	; 0x30
 80098f2:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80098f4:	2201      	movs	r2, #1
 80098f6:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80098f8:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80098fa:	e66f      	b.n	80095dc <ProcessMacCommands.isra.0.constprop.0+0x24c>
 80098fc:	12d53d80 	.word	0x12d53d80
 8009900:	200007d4 	.word	0x200007d4
 8009904:	20001604 	.word	0x20001604

08009908 <LoRaMacIsBusy>:
}

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009908:	22d0      	movs	r2, #208	; 0xd0
 800990a:	4b06      	ldr	r3, [pc, #24]	; (8009924 <LoRaMacIsBusy+0x1c>)
 800990c:	0092      	lsls	r2, r2, #2
 800990e:	589a      	ldr	r2, [r3, r2]
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
    {
        return false;
    }
    return true;
 8009910:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009912:	2a00      	cmp	r2, #0
 8009914:	d105      	bne.n	8009922 <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009916:	4a04      	ldr	r2, [pc, #16]	; (8009928 <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009918:	5c98      	ldrb	r0, [r3, r2]
 800991a:	3801      	subs	r0, #1
 800991c:	1e43      	subs	r3, r0, #1
 800991e:	4198      	sbcs	r0, r3
 8009920:	b2c0      	uxtb	r0, r0
}
 8009922:	4770      	bx	lr
 8009924:	200007d4 	.word	0x200007d4
 8009928:	00000482 	.word	0x00000482

0800992c <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 800992c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992e:	b0ab      	sub	sp, #172	; 0xac
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009930:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009934:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 8009936:	2000      	movs	r0, #0
    events = LoRaMacRadioEvents;
 8009938:	4acc      	ldr	r2, [pc, #816]	; (8009c6c <LoRaMacProcess+0x340>)
 800993a:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800993c:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800993e:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8009942:	4fcb      	ldr	r7, [pc, #812]	; (8009c70 <LoRaMacProcess+0x344>)
 8009944:	4283      	cmp	r3, r0
 8009946:	d100      	bne.n	800994a <LoRaMacProcess+0x1e>
 8009948:	e0ec      	b.n	8009b24 <LoRaMacProcess+0x1f8>
        if( events.Events.TxDone == 1 )
 800994a:	b2da      	uxtb	r2, r3
 800994c:	9206      	str	r2, [sp, #24]
 800994e:	06db      	lsls	r3, r3, #27
 8009950:	d571      	bpl.n	8009a36 <LoRaMacProcess+0x10a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009952:	4cc8      	ldr	r4, [pc, #800]	; (8009c74 <LoRaMacProcess+0x348>)
 8009954:	4dc8      	ldr	r5, [pc, #800]	; (8009c78 <LoRaMacProcess+0x34c>)
 8009956:	5963      	ldr	r3, [r4, r5]
 8009958:	337c      	adds	r3, #124	; 0x7c
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	2b02      	cmp	r3, #2
 800995e:	d003      	beq.n	8009968 <LoRaMacProcess+0x3c>
        Radio.Sleep( );
 8009960:	4bc6      	ldr	r3, [pc, #792]	; (8009c7c <LoRaMacProcess+0x350>)
 8009962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009964:	9303      	str	r3, [sp, #12]
 8009966:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009968:	23ec      	movs	r3, #236	; 0xec
 800996a:	4ec5      	ldr	r6, [pc, #788]	; (8009c80 <LoRaMacProcess+0x354>)
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	58e1      	ldr	r1, [r4, r3]
 8009970:	0030      	movs	r0, r6
 8009972:	f005 fcc1 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009976:	0030      	movs	r0, r6
 8009978:	f005 fc7c 	bl	800f274 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800997c:	23ed      	movs	r3, #237	; 0xed
 800997e:	4ec1      	ldr	r6, [pc, #772]	; (8009c84 <LoRaMacProcess+0x358>)
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	58e1      	ldr	r1, [r4, r3]
 8009984:	0030      	movs	r0, r6
 8009986:	f005 fcb7 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800998a:	0030      	movs	r0, r6
 800998c:	f005 fc72 	bl	800f274 <UTIL_TIMER_Start>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8009990:	5963      	ldr	r3, [r4, r5]
 8009992:	001a      	movs	r2, r3
 8009994:	327c      	adds	r2, #124	; 0x7c
 8009996:	7812      	ldrb	r2, [r2, #0]
 8009998:	2a02      	cmp	r2, #2
 800999a:	d003      	beq.n	80099a4 <LoRaMacProcess+0x78>
 800999c:	4aba      	ldr	r2, [pc, #744]	; (8009c88 <LoRaMacProcess+0x35c>)
 800999e:	5ca2      	ldrb	r2, [r4, r2]
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	d011      	beq.n	80099c8 <LoRaMacProcess+0x9c>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80099a4:	2216      	movs	r2, #22
 80099a6:	a914      	add	r1, sp, #80	; 0x50
 80099a8:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80099aa:	7818      	ldrb	r0, [r3, #0]
 80099ac:	f002 fca3 	bl	800c2f6 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80099b0:	23ed      	movs	r3, #237	; 0xed
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4eb5      	ldr	r6, [pc, #724]	; (8009c8c <LoRaMacProcess+0x360>)
 80099b6:	58e1      	ldr	r1, [r4, r3]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80099b8:	9012      	str	r0, [sp, #72]	; 0x48
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80099ba:	1809      	adds	r1, r1, r0
 80099bc:	0030      	movs	r0, r6
 80099be:	f005 fc9b 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 80099c2:	0030      	movs	r0, r6
 80099c4:	f005 fc56 	bl	800f274 <UTIL_TIMER_Start>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 80099c8:	4bb1      	ldr	r3, [pc, #708]	; (8009c90 <LoRaMacProcess+0x364>)
    txDone.Channel = MacCtx.Channel;
 80099ca:	ae1e      	add	r6, sp, #120	; 0x78
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	5963      	ldr	r3, [r4, r5]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 80099d0:	a810      	add	r0, sp, #64	; 0x40
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 80099d2:	33fc      	adds	r3, #252	; 0xfc
 80099d4:	655a      	str	r2, [r3, #84]	; 0x54
    txDone.Channel = MacCtx.Channel;
 80099d6:	4baf      	ldr	r3, [pc, #700]	; (8009c94 <LoRaMacProcess+0x368>)
 80099d8:	5ce3      	ldrb	r3, [r4, r3]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80099da:	6072      	str	r2, [r6, #4]
    txDone.Channel = MacCtx.Channel;
 80099dc:	7033      	strb	r3, [r6, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 80099de:	f005 fb77 	bl	800f0d0 <SysTimeGetMcuTime>
 80099e2:	5963      	ldr	r3, [r4, r5]
 80099e4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80099e6:	001a      	movs	r2, r3
 80099e8:	325d      	adds	r2, #93	; 0x5d
 80099ea:	32ff      	adds	r2, #255	; 0xff
 80099ec:	6812      	ldr	r2, [r2, #0]
 80099ee:	a80a      	add	r0, sp, #40	; 0x28
 80099f0:	9200      	str	r2, [sp, #0]
 80099f2:	22ac      	movs	r2, #172	; 0xac
 80099f4:	0052      	lsls	r2, r2, #1
 80099f6:	589b      	ldr	r3, [r3, r2]
 80099f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80099fa:	f005 faff 	bl	800effc <SysTimeSub>
 80099fe:	ab21      	add	r3, sp, #132	; 0x84
 8009a00:	aa0a      	add	r2, sp, #40	; 0x28
 8009a02:	ca03      	ldmia	r2!, {r0, r1}
 8009a04:	c303      	stmia	r3!, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009a06:	2383      	movs	r3, #131	; 0x83
 8009a08:	00db      	lsls	r3, r3, #3
 8009a0a:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009a0c:	22b2      	movs	r2, #178	; 0xb2
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009a0e:	60b3      	str	r3, [r6, #8]
    txDone.Joined  = true;
 8009a10:	2301      	movs	r3, #1
 8009a12:	7073      	strb	r3, [r6, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009a14:	5963      	ldr	r3, [r4, r5]
 8009a16:	0052      	lsls	r2, r2, #1
 8009a18:	5c9a      	ldrb	r2, [r3, r2]
 8009a1a:	2a00      	cmp	r2, #0
 8009a1c:	d100      	bne.n	8009a20 <LoRaMacProcess+0xf4>
        txDone.Joined  = false;
 8009a1e:	7072      	strb	r2, [r6, #1]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8009a20:	7818      	ldrb	r0, [r3, #0]
 8009a22:	0031      	movs	r1, r6
 8009a24:	f002 fc73 	bl	800c30e <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8009a28:	4b92      	ldr	r3, [pc, #584]	; (8009c74 <LoRaMacProcess+0x348>)
 8009a2a:	4a97      	ldr	r2, [pc, #604]	; (8009c88 <LoRaMacProcess+0x35c>)
 8009a2c:	5c9a      	ldrb	r2, [r3, r2]
 8009a2e:	2a00      	cmp	r2, #0
 8009a30:	d101      	bne.n	8009a36 <LoRaMacProcess+0x10a>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009a32:	4999      	ldr	r1, [pc, #612]	; (8009c98 <LoRaMacProcess+0x36c>)
 8009a34:	545a      	strb	r2, [r3, r1]
        if( events.Events.RxDone == 1 )
 8009a36:	9b06      	ldr	r3, [sp, #24]
 8009a38:	071b      	lsls	r3, r3, #28
 8009a3a:	d545      	bpl.n	8009ac8 <LoRaMacProcess+0x19c>
    uint8_t *payload = RxDoneParams.Payload;
 8009a3c:	4b97      	ldr	r3, [pc, #604]	; (8009c9c <LoRaMacProcess+0x370>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009a3e:	4c8d      	ldr	r4, [pc, #564]	; (8009c74 <LoRaMacProcess+0x348>)
    uint8_t *payload = RxDoneParams.Payload;
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	9203      	str	r2, [sp, #12]
    int16_t rssi = RxDoneParams.Rssi;
 8009a44:	210a      	movs	r1, #10
 8009a46:	5e5a      	ldrsh	r2, [r3, r1]
    uint16_t size = RxDoneParams.Size;
 8009a48:	891e      	ldrh	r6, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8009a4a:	9205      	str	r2, [sp, #20]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009a4c:	4a8a      	ldr	r2, [pc, #552]	; (8009c78 <LoRaMacProcess+0x34c>)
    int8_t snr = RxDoneParams.Snr;
 8009a4e:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009a50:	58a2      	ldr	r2, [r4, r2]
    int8_t snr = RxDoneParams.Snr;
 8009a52:	b25b      	sxtb	r3, r3
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009a54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    int8_t snr = RxDoneParams.Snr;
 8009a56:	9304      	str	r3, [sp, #16]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009a58:	9208      	str	r2, [sp, #32]
    MacCtx.McpsConfirm.AckReceived = false;
 8009a5a:	2288      	movs	r2, #136	; 0x88
    uint32_t downLinkCounter = 0;
 8009a5c:	2300      	movs	r3, #0
    MacCtx.McpsConfirm.AckReceived = false;
 8009a5e:	00d2      	lsls	r2, r2, #3
 8009a60:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Rssi = rssi;
 8009a62:	9905      	ldr	r1, [sp, #20]
 8009a64:	4a8e      	ldr	r2, [pc, #568]	; (8009ca0 <LoRaMacProcess+0x374>)
    uint32_t downLinkCounter = 0;
 8009a66:	930d      	str	r3, [sp, #52]	; 0x34
    MacCtx.McpsIndication.Rssi = rssi;
 8009a68:	52a1      	strh	r1, [r4, r2]
    MacCtx.McpsIndication.Snr = snr;
 8009a6a:	9904      	ldr	r1, [sp, #16]
 8009a6c:	4a8d      	ldr	r2, [pc, #564]	; (8009ca4 <LoRaMacProcess+0x378>)
 8009a6e:	54a1      	strb	r1, [r4, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8009a70:	3254      	adds	r2, #84	; 0x54
 8009a72:	5ca2      	ldrb	r2, [r4, r2]
 8009a74:	498c      	ldr	r1, [pc, #560]	; (8009ca8 <LoRaMacProcess+0x37c>)
 8009a76:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 8009a78:	4a8c      	ldr	r2, [pc, #560]	; (8009cac <LoRaMacProcess+0x380>)
 8009a7a:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8009a7c:	4a8c      	ldr	r2, [pc, #560]	; (8009cb0 <LoRaMacProcess+0x384>)
 8009a7e:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 8009a80:	4a8c      	ldr	r2, [pc, #560]	; (8009cb4 <LoRaMacProcess+0x388>)
 8009a82:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 8009a84:	3204      	adds	r2, #4
 8009a86:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 8009a88:	4a8b      	ldr	r2, [pc, #556]	; (8009cb8 <LoRaMacProcess+0x38c>)
 8009a8a:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009a8c:	3202      	adds	r2, #2
 8009a8e:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009a90:	4a8a      	ldr	r2, [pc, #552]	; (8009cbc <LoRaMacProcess+0x390>)
 8009a92:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 8009a94:	4a8a      	ldr	r2, [pc, #552]	; (8009cc0 <LoRaMacProcess+0x394>)
 8009a96:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009a98:	3204      	adds	r2, #4
 8009a9a:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 8009a9c:	4b77      	ldr	r3, [pc, #476]	; (8009c7c <LoRaMacProcess+0x350>)
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	9307      	str	r3, [sp, #28]
 8009aa2:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8009aa4:	4877      	ldr	r0, [pc, #476]	; (8009c84 <LoRaMacProcess+0x358>)
 8009aa6:	f005 fb91 	bl	800f1cc <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009aaa:	0031      	movs	r1, r6
 8009aac:	9803      	ldr	r0, [sp, #12]
 8009aae:	f001 fd4b 	bl	800b548 <LoRaMacClassBRxBeacon>
 8009ab2:	4b83      	ldr	r3, [pc, #524]	; (8009cc0 <LoRaMacProcess+0x394>)
 8009ab4:	1e05      	subs	r5, r0, #0
 8009ab6:	9307      	str	r3, [sp, #28]
 8009ab8:	d100      	bne.n	8009abc <LoRaMacProcess+0x190>
 8009aba:	e111      	b.n	8009ce0 <LoRaMacProcess+0x3b4>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009abc:	4b81      	ldr	r3, [pc, #516]	; (8009cc4 <LoRaMacProcess+0x398>)
 8009abe:	9a05      	ldr	r2, [sp, #20]
 8009ac0:	52e2      	strh	r2, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009ac2:	9a04      	ldr	r2, [sp, #16]
 8009ac4:	3302      	adds	r3, #2
 8009ac6:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 8009ac8:	9b06      	ldr	r3, [sp, #24]
 8009aca:	075b      	lsls	r3, r3, #29
 8009acc:	d51c      	bpl.n	8009b08 <LoRaMacProcess+0x1dc>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009ace:	4c69      	ldr	r4, [pc, #420]	; (8009c74 <LoRaMacProcess+0x348>)
 8009ad0:	4b69      	ldr	r3, [pc, #420]	; (8009c78 <LoRaMacProcess+0x34c>)
 8009ad2:	58e3      	ldr	r3, [r4, r3]
 8009ad4:	337c      	adds	r3, #124	; 0x7c
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d003      	beq.n	8009ae4 <LoRaMacProcess+0x1b8>
        Radio.Sleep( );
 8009adc:	4b67      	ldr	r3, [pc, #412]	; (8009c7c <LoRaMacProcess+0x350>)
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	9303      	str	r3, [sp, #12]
 8009ae2:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009ae4:	f7fe feb8 	bl	8008858 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009ae8:	2002      	movs	r0, #2
 8009aea:	4b6b      	ldr	r3, [pc, #428]	; (8009c98 <LoRaMacProcess+0x36c>)
 8009aec:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009aee:	f001 ff23 	bl	800b938 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009af2:	4b65      	ldr	r3, [pc, #404]	; (8009c88 <LoRaMacProcess+0x35c>)
 8009af4:	5ce3      	ldrb	r3, [r4, r3]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <LoRaMacProcess+0x1d4>
        MacCtx.AckTimeoutRetry = true;
 8009afa:	2201      	movs	r2, #1
 8009afc:	4b72      	ldr	r3, [pc, #456]	; (8009cc8 <LoRaMacProcess+0x39c>)
 8009afe:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009b00:	2320      	movs	r3, #32
 8009b02:	5de2      	ldrb	r2, [r4, r7]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	55e3      	strb	r3, [r4, r7]
        if( events.Events.RxError == 1 )
 8009b08:	9b06      	ldr	r3, [sp, #24]
 8009b0a:	079b      	lsls	r3, r3, #30
 8009b0c:	d503      	bpl.n	8009b16 <LoRaMacProcess+0x1ea>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009b0e:	2106      	movs	r1, #6
 8009b10:	2005      	movs	r0, #5
 8009b12:	f7fe ff7d 	bl	8008a10 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8009b16:	9b06      	ldr	r3, [sp, #24]
 8009b18:	07db      	lsls	r3, r3, #31
 8009b1a:	d503      	bpl.n	8009b24 <LoRaMacProcess+0x1f8>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009b1c:	2104      	movs	r1, #4
 8009b1e:	2003      	movs	r0, #3
 8009b20:	f7fe ff76 	bl	8008a10 <HandleRadioRxErrorTimeout>
    uint8_t noTx = 0x00;

    LoRaMacHandleIrqEvents( );
    LoRaMacClassBProcess( );
 8009b24:	f001 fd2d 	bl	800b582 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009b28:	4c52      	ldr	r4, [pc, #328]	; (8009c74 <LoRaMacProcess+0x348>)
 8009b2a:	5de2      	ldrb	r2, [r4, r7]
 8009b2c:	0693      	lsls	r3, r2, #26
 8009b2e:	d56c      	bpl.n	8009c0a <LoRaMacProcess+0x2de>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009b30:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 8009b32:	2300      	movs	r3, #0
 8009b34:	4865      	ldr	r0, [pc, #404]	; (8009ccc <LoRaMacProcess+0x3a0>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009b36:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 8009b38:	5423      	strb	r3, [r4, r0]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009b3a:	5863      	ldr	r3, [r4, r1]
 8009b3c:	9003      	str	r0, [sp, #12]
 8009b3e:	0618      	lsls	r0, r3, #24
 8009b40:	d502      	bpl.n	8009b48 <LoRaMacProcess+0x21c>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009b42:	2082      	movs	r0, #130	; 0x82
 8009b44:	4383      	bics	r3, r0
 8009b46:	5063      	str	r3, [r4, r1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8009b48:	2305      	movs	r3, #5
 8009b4a:	421a      	tst	r2, r3
 8009b4c:	d100      	bne.n	8009b50 <LoRaMacProcess+0x224>
 8009b4e:	e31f      	b.n	800a190 <LoRaMacProcess+0x864>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009b50:	200c      	movs	r0, #12
 8009b52:	f001 ff0d 	bl	800b970 <LoRaMacConfirmQueueIsCmdActive>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	d100      	bne.n	8009b5c <LoRaMacProcess+0x230>
 8009b5a:	e319      	b.n	800a190 <LoRaMacProcess+0x864>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009b5c:	5de3      	ldrb	r3, [r4, r7]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009b5e:	07da      	lsls	r2, r3, #31
 8009b60:	d500      	bpl.n	8009b64 <LoRaMacProcess+0x238>
 8009b62:	e315      	b.n	800a190 <LoRaMacProcess+0x864>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009b64:	075b      	lsls	r3, r3, #29
 8009b66:	d400      	bmi.n	8009b6a <LoRaMacProcess+0x23e>
 8009b68:	e328      	b.n	800a1bc <LoRaMacProcess+0x890>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009b6a:	22d0      	movs	r2, #208	; 0xd0
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	0092      	lsls	r2, r2, #2
 8009b70:	58a1      	ldr	r1, [r4, r2]
 8009b72:	4399      	bics	r1, r3
 8009b74:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009b76:	23d0      	movs	r3, #208	; 0xd0
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	58e3      	ldr	r3, [r4, r3]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d141      	bne.n	8009c04 <LoRaMacProcess+0x2d8>
 8009b80:	5de6      	ldrb	r6, [r4, r7]
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009b82:	3301      	adds	r3, #1
 8009b84:	0031      	movs	r1, r6
 8009b86:	4019      	ands	r1, r3
 8009b88:	421e      	tst	r6, r3
 8009b8a:	d002      	beq.n	8009b92 <LoRaMacProcess+0x266>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009b8c:	0032      	movs	r2, r6
 8009b8e:	439a      	bics	r2, r3
 8009b90:	55e2      	strb	r2, [r4, r7]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009b92:	2204      	movs	r2, #4
 8009b94:	5de3      	ldrb	r3, [r4, r7]
 8009b96:	4213      	tst	r3, r2
 8009b98:	d001      	beq.n	8009b9e <LoRaMacProcess+0x272>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009b9a:	4393      	bics	r3, r2
 8009b9c:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	9a03      	ldr	r2, [sp, #12]
 8009ba2:	54a3      	strb	r3, [r4, r2]
        if( reqEvents.Bits.McpsReq == 1 )
 8009ba4:	2900      	cmp	r1, #0
 8009ba6:	d005      	beq.n	8009bb4 <LoRaMacProcess+0x288>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009ba8:	23d1      	movs	r3, #209	; 0xd1
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	58e3      	ldr	r3, [r4, r3]
 8009bae:	4848      	ldr	r0, [pc, #288]	; (8009cd0 <LoRaMacProcess+0x3a4>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8009bb4:	2504      	movs	r5, #4
 8009bb6:	422e      	tst	r6, r5
 8009bb8:	d009      	beq.n	8009bce <LoRaMacProcess+0x2a2>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009bba:	4846      	ldr	r0, [pc, #280]	; (8009cd4 <LoRaMacProcess+0x3a8>)
 8009bbc:	f001 fee4 	bl	800b988 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009bc0:	f001 ff0e 	bl	800b9e0 <LoRaMacConfirmQueueGetCnt>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d002      	beq.n	8009bce <LoRaMacProcess+0x2a2>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009bc8:	5de3      	ldrb	r3, [r4, r7]
 8009bca:	431d      	orrs	r5, r3
 8009bcc:	55e5      	strb	r5, [r4, r7]
        LoRaMacClassBResumeBeaconing( );
 8009bce:	f001 fcc7 	bl	800b560 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	5de3      	ldrb	r3, [r4, r7]
 8009bd6:	4393      	bics	r3, r2
 8009bd8:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009bda:	23d0      	movs	r3, #208	; 0xd0
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	58e3      	ldr	r3, [r4, r3]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10f      	bne.n	8009c04 <LoRaMacProcess+0x2d8>
        bool isStickyMacCommandPending = false;
 8009be4:	2558      	movs	r5, #88	; 0x58
 8009be6:	aa08      	add	r2, sp, #32
 8009be8:	1952      	adds	r2, r2, r5
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8009bea:	a81e      	add	r0, sp, #120	; 0x78
        bool isStickyMacCommandPending = false;
 8009bec:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8009bee:	f001 fddd 	bl	800b7ac <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8009bf2:	ab08      	add	r3, sp, #32
 8009bf4:	195b      	adds	r3, r3, r5
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d003      	beq.n	8009c04 <LoRaMacProcess+0x2d8>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	5de2      	ldrb	r2, [r4, r7]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 8009c04:	2301      	movs	r3, #1
 8009c06:	9a03      	ldr	r2, [sp, #12]
 8009c08:	54a3      	strb	r3, [r4, r2]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8009c0a:	2208      	movs	r2, #8
 8009c0c:	5de3      	ldrb	r3, [r4, r7]
 8009c0e:	4213      	tst	r3, r2
 8009c10:	d007      	beq.n	8009c22 <LoRaMacProcess+0x2f6>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8009c12:	4393      	bics	r3, r2
 8009c14:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8009c16:	23d1      	movs	r3, #209	; 0xd1
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	58e3      	ldr	r3, [r4, r3]
 8009c1c:	482e      	ldr	r0, [pc, #184]	; (8009cd8 <LoRaMacProcess+0x3ac>)
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8009c22:	2510      	movs	r5, #16
 8009c24:	5de3      	ldrb	r3, [r4, r7]
 8009c26:	422b      	tst	r3, r5
 8009c28:	d00a      	beq.n	8009c40 <LoRaMacProcess+0x314>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8009c2a:	2307      	movs	r3, #7
 8009c2c:	a81e      	add	r0, sp, #120	; 0x78
 8009c2e:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8009c30:	23d1      	movs	r3, #209	; 0xd1
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	58e3      	ldr	r3, [r4, r3]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8009c3a:	5de3      	ldrb	r3, [r4, r7]
 8009c3c:	43ab      	bics	r3, r5
 8009c3e:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009c40:	2202      	movs	r2, #2
 8009c42:	5de3      	ldrb	r3, [r4, r7]
 8009c44:	4213      	tst	r3, r2
 8009c46:	d007      	beq.n	8009c58 <LoRaMacProcess+0x32c>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8009c48:	4393      	bics	r3, r2
 8009c4a:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8009c4c:	23d1      	movs	r3, #209	; 0xd1
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	58e3      	ldr	r3, [r4, r3]
 8009c52:	4822      	ldr	r0, [pc, #136]	; (8009cdc <LoRaMacProcess+0x3b0>)
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	4798      	blx	r3
        LoRaMacHandleRequestEvents( );
        LoRaMacHandleScheduleUplinkEvent( );
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    }
    LoRaMacHandleIndicationEvents( );
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009c58:	2390      	movs	r3, #144	; 0x90
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	5ce3      	ldrb	r3, [r4, r3]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d101      	bne.n	8009c66 <LoRaMacProcess+0x33a>
    {
        OpenContinuousRxCWindow( );
 8009c62:	f7ff fa55 	bl	8009110 <OpenContinuousRxCWindow>
    }
}
 8009c66:	b02b      	add	sp, #172	; 0xac
 8009c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	2000062c 	.word	0x2000062c
 8009c70:	00000481 	.word	0x00000481
 8009c74:	200007d4 	.word	0x200007d4
 8009c78:	00000484 	.word	0x00000484
 8009c7c:	08012ccc 	.word	0x08012ccc
 8009c80:	20000b54 	.word	0x20000b54
 8009c84:	20000b6c 	.word	0x20000b6c
 8009c88:	00000414 	.word	0x00000414
 8009c8c:	20000bcc 	.word	0x20000bcc
 8009c90:	20001600 	.word	0x20001600
 8009c94:	00000415 	.word	0x00000415
 8009c98:	0000043d 	.word	0x0000043d
 8009c9c:	20001604 	.word	0x20001604
 8009ca0:	0000042a 	.word	0x0000042a
 8009ca4:	0000042c 	.word	0x0000042c
 8009ca8:	0000042d 	.word	0x0000042d
 8009cac:	0000041e 	.word	0x0000041e
 8009cb0:	00000421 	.word	0x00000421
 8009cb4:	00000424 	.word	0x00000424
 8009cb8:	0000042e 	.word	0x0000042e
 8009cbc:	0000041c 	.word	0x0000041c
 8009cc0:	00000434 	.word	0x00000434
 8009cc4:	00000476 	.word	0x00000476
 8009cc8:	00000413 	.word	0x00000413
 8009ccc:	00000482 	.word	0x00000482
 8009cd0:	20000c10 	.word	0x20000c10
 8009cd4:	20000c24 	.word	0x20000c24
 8009cd8:	20000c38 	.word	0x20000c38
 8009cdc:	20000bf0 	.word	0x20000bf0
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009ce0:	4bcb      	ldr	r3, [pc, #812]	; (800a010 <LoRaMacProcess+0x6e4>)
 8009ce2:	58e3      	ldr	r3, [r4, r3]
 8009ce4:	9305      	str	r3, [sp, #20]
 8009ce6:	337c      	adds	r3, #124	; 0x7c
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d10d      	bne.n	8009d0a <LoRaMacProcess+0x3de>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009cee:	f001 fc2f 	bl	800b550 <LoRaMacClassBIsPingExpected>
 8009cf2:	9005      	str	r0, [sp, #20]
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d019      	beq.n	8009d2c <LoRaMacProcess+0x400>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009cf8:	0028      	movs	r0, r5
 8009cfa:	f001 fc1e 	bl	800b53a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009cfe:	0028      	movs	r0, r5
 8009d00:	f001 fc20 	bl	800b544 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009d04:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009d06:	4ac3      	ldr	r2, [pc, #780]	; (800a014 <LoRaMacProcess+0x6e8>)
 8009d08:	54a3      	strb	r3, [r4, r2]
    macHdr.Value = payload[pktHeaderLen++];
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	0958      	lsrs	r0, r3, #5
 8009d10:	3801      	subs	r0, #1
 8009d12:	9307      	str	r3, [sp, #28]
    switch( macHdr.Bits.MType )
 8009d14:	2806      	cmp	r0, #6
 8009d16:	d900      	bls.n	8009d1a <LoRaMacProcess+0x3ee>
 8009d18:	e22c      	b.n	800a174 <LoRaMacProcess+0x848>
 8009d1a:	f7f6 fa1b 	bl	8000154 <__gnu_thumb1_case_uhi>
 8009d1e:	0013      	.short	0x0013
 8009d20:	009a022b 	.word	0x009a022b
 8009d24:	0097022b 	.word	0x0097022b
 8009d28:	021b022b 	.word	0x021b022b
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009d2c:	f001 fc12 	bl	800b554 <LoRaMacClassBIsMulticastExpected>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d0ea      	beq.n	8009d0a <LoRaMacProcess+0x3de>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009d34:	9805      	ldr	r0, [sp, #20]
 8009d36:	f001 fc01 	bl	800b53c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009d3a:	9805      	ldr	r0, [sp, #20]
 8009d3c:	f001 fc03 	bl	800b546 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009d40:	2305      	movs	r3, #5
 8009d42:	e7e0      	b.n	8009d06 <LoRaMacProcess+0x3da>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8009d44:	2e10      	cmp	r6, #16
 8009d46:	d806      	bhi.n	8009d56 <LoRaMacProcess+0x42a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009d48:	2101      	movs	r1, #1
 8009d4a:	4ab3      	ldr	r2, [pc, #716]	; (800a018 <LoRaMacProcess+0x6ec>)
 8009d4c:	4bb3      	ldr	r3, [pc, #716]	; (800a01c <LoRaMacProcess+0x6f0>)
 8009d4e:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8009d50:	f7fe fe40 	bl	80089d4 <PrepareRxDoneAbort>
                return;
 8009d54:	e6b8      	b.n	8009ac8 <LoRaMacProcess+0x19c>
            macMsgJoinAccept.Buffer = payload;
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	ad14      	add	r5, sp, #80	; 0x50
 8009d5a:	9314      	str	r3, [sp, #80]	; 0x50
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009d5c:	4bac      	ldr	r3, [pc, #688]	; (800a010 <LoRaMacProcess+0x6e4>)
            macMsgJoinAccept.BufSize = size;
 8009d5e:	b2f6      	uxtb	r6, r6
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009d60:	58e3      	ldr	r3, [r4, r3]
            macMsgJoinAccept.BufSize = size;
 8009d62:	712e      	strb	r6, [r5, #4]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009d64:	9303      	str	r3, [sp, #12]
 8009d66:	23b2      	movs	r3, #178	; 0xb2
 8009d68:	9a03      	ldr	r2, [sp, #12]
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	5cd3      	ldrb	r3, [r2, r3]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1ea      	bne.n	8009d48 <LoRaMacProcess+0x41c>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8009d72:	f7fe f87f 	bl	8007e74 <SecureElementGetJoinEui>
 8009d76:	002a      	movs	r2, r5
 8009d78:	0001      	movs	r1, r0
 8009d7a:	20ff      	movs	r0, #255	; 0xff
 8009d7c:	f002 f90e 	bl	800bf9c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d15b      	bne.n	8009e3c <LoRaMacProcess+0x510>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009d84:	7aaa      	ldrb	r2, [r5, #10]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009d86:	7ae9      	ldrb	r1, [r5, #11]
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009d88:	4ba1      	ldr	r3, [pc, #644]	; (800a010 <LoRaMacProcess+0x6e4>)
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009d8a:	0409      	lsls	r1, r1, #16
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009d8c:	0212      	lsls	r2, r2, #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009d8e:	58e3      	ldr	r3, [r4, r3]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009d90:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009d92:	7a69      	ldrb	r1, [r5, #9]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009d94:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009d96:	0019      	movs	r1, r3
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009d98:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8009d9a:	68ea      	ldr	r2, [r5, #12]
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009d9c:	31a5      	adds	r1, #165	; 0xa5
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8009d9e:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009da0:	7c2a      	ldrb	r2, [r5, #16]
 8009da2:	0652      	lsls	r2, r2, #25
 8009da4:	0f52      	lsrs	r2, r2, #29
 8009da6:	700a      	strb	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009da8:	7c2a      	ldrb	r2, [r5, #16]
 8009daa:	0712      	lsls	r2, r2, #28
 8009dac:	0f12      	lsrs	r2, r2, #28
 8009dae:	71ca      	strb	r2, [r1, #7]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009db0:	73ca      	strb	r2, [r1, #15]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8009db2:	7c6a      	ldrb	r2, [r5, #17]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8009db4:	3911      	subs	r1, #17
 8009db6:	2a00      	cmp	r2, #0
 8009db8:	d03e      	beq.n	8009e38 <LoRaMacProcess+0x50c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8009dba:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8009dbc:	22fa      	movs	r2, #250	; 0xfa
 8009dbe:	6808      	ldr	r0, [r1, #0]
 8009dc0:	0092      	lsls	r2, r2, #2
 8009dc2:	4342      	muls	r2, r0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009dc4:	20fa      	movs	r0, #250	; 0xfa
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8009dc6:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009dc8:	0019      	movs	r1, r3
 8009dca:	0080      	lsls	r0, r0, #2
 8009dcc:	1812      	adds	r2, r2, r0
 8009dce:	3198      	adds	r1, #152	; 0x98
 8009dd0:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8009dd2:	22b1      	movs	r2, #177	; 0xb1
 8009dd4:	2500      	movs	r5, #0
 8009dd6:	0052      	lsls	r2, r2, #1
 8009dd8:	549d      	strb	r5, [r3, r2]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009dda:	a912      	add	r1, sp, #72	; 0x48
 8009ddc:	3a21      	subs	r2, #33	; 0x21
                applyCFList.Size = size - 17;
 8009dde:	3e11      	subs	r6, #17
 8009de0:	710e      	strb	r6, [r1, #4]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009de2:	a808      	add	r0, sp, #32
 8009de4:	3aff      	subs	r2, #255	; 0xff
 8009de6:	1812      	adds	r2, r2, r0
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8009de8:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009dea:	9212      	str	r2, [sp, #72]	; 0x48
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8009dec:	f002 fab3 	bl	800c356 <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009df0:	4b87      	ldr	r3, [pc, #540]	; (800a010 <LoRaMacProcess+0x6e4>)
 8009df2:	2102      	movs	r1, #2
 8009df4:	58e2      	ldr	r2, [r4, r3]
 8009df6:	23b2      	movs	r3, #178	; 0xb2
 8009df8:	005b      	lsls	r3, r3, #1
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009dfa:	2001      	movs	r0, #1
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009dfc:	54d1      	strb	r1, [r2, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009dfe:	f001 fdb7 	bl	800b970 <LoRaMacConfirmQueueIsCmdActive>
 8009e02:	42a8      	cmp	r0, r5
 8009e04:	d003      	beq.n	8009e0e <LoRaMacProcess+0x4e2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8009e06:	2101      	movs	r1, #1
 8009e08:	0028      	movs	r0, r5
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009e0a:	f001 fd6f 	bl	800b8ec <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 8009e0e:	4c82      	ldr	r4, [pc, #520]	; (800a018 <LoRaMacProcess+0x6ec>)
 8009e10:	4b83      	ldr	r3, [pc, #524]	; (800a020 <LoRaMacProcess+0x6f4>)
 8009e12:	5ce3      	ldrb	r3, [r4, r3]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d100      	bne.n	8009e1a <LoRaMacProcess+0x4ee>
 8009e18:	e1b2      	b.n	800a180 <LoRaMacProcess+0x854>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009e1a:	2388      	movs	r3, #136	; 0x88
 8009e1c:	00db      	lsls	r3, r3, #3
 8009e1e:	5ce3      	ldrb	r3, [r4, r3]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <LoRaMacProcess+0x4fe>
            OnAckTimeoutTimerEvent( NULL );
 8009e24:	2000      	movs	r0, #0
 8009e26:	f7fe fda7 	bl	8008978 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009e2a:	2320      	movs	r3, #32
 8009e2c:	5de2      	ldrb	r2, [r4, r7]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	55e3      	strb	r3, [r4, r7]
    UpdateRxSlotIdleState( );
 8009e32:	f7fe fd11 	bl	8008858 <UpdateRxSlotIdleState>
 8009e36:	e647      	b.n	8009ac8 <LoRaMacProcess+0x19c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8009e38:	2201      	movs	r2, #1
 8009e3a:	e7be      	b.n	8009dba <LoRaMacProcess+0x48e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009e3c:	2001      	movs	r0, #1
 8009e3e:	f001 fd97 	bl	800b970 <LoRaMacConfirmQueueIsCmdActive>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d0e3      	beq.n	8009e0e <LoRaMacProcess+0x4e2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009e46:	2101      	movs	r1, #1
 8009e48:	2007      	movs	r0, #7
 8009e4a:	e7de      	b.n	8009e0a <LoRaMacProcess+0x4de>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	4a75      	ldr	r2, [pc, #468]	; (800a024 <LoRaMacProcess+0x6f8>)
 8009e50:	54a3      	strb	r3, [r4, r2]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009e52:	4c71      	ldr	r4, [pc, #452]	; (800a018 <LoRaMacProcess+0x6ec>)
 8009e54:	4b6e      	ldr	r3, [pc, #440]	; (800a010 <LoRaMacProcess+0x6e4>)
 8009e56:	a90e      	add	r1, sp, #56	; 0x38
 8009e58:	58e3      	ldr	r3, [r4, r3]
 8009e5a:	001a      	movs	r2, r3
 8009e5c:	32b9      	adds	r2, #185	; 0xb9
 8009e5e:	7812      	ldrb	r2, [r2, #0]
 8009e60:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009e62:	2284      	movs	r2, #132	; 0x84
 8009e64:	00d2      	lsls	r2, r2, #3
 8009e66:	5ca2      	ldrb	r2, [r4, r2]
 8009e68:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009e6a:	220d      	movs	r2, #13
 8009e6c:	700a      	strb	r2, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009e6e:	001a      	movs	r2, r3
 8009e70:	32ca      	adds	r2, #202	; 0xca
 8009e72:	7812      	ldrb	r2, [r2, #0]
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	d001      	beq.n	8009e7c <LoRaMacProcess+0x550>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009e78:	220e      	movs	r2, #14
 8009e7a:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e7c:	7818      	ldrb	r0, [r3, #0]
 8009e7e:	f002 fa3a 	bl	800c2f6 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009e82:	0032      	movs	r2, r6
 8009e84:	3a0d      	subs	r2, #13
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e86:	900c      	str	r0, [sp, #48]	; 0x30
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009e88:	1c13      	adds	r3, r2, #0
 8009e8a:	0412      	lsls	r2, r2, #16
 8009e8c:	d500      	bpl.n	8009e90 <LoRaMacProcess+0x564>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e92:	b21b      	sxth	r3, r3
 8009e94:	b212      	sxth	r2, r2
 8009e96:	4293      	cmp	r3, r2
 8009e98:	dd00      	ble.n	8009e9c <LoRaMacProcess+0x570>
 8009e9a:	e755      	b.n	8009d48 <LoRaMacProcess+0x41c>
 8009e9c:	2e0b      	cmp	r6, #11
 8009e9e:	d800      	bhi.n	8009ea2 <LoRaMacProcess+0x576>
 8009ea0:	e752      	b.n	8009d48 <LoRaMacProcess+0x41c>
            macMsgData.BufSize = size;
 8009ea2:	225c      	movs	r2, #92	; 0x5c
            macMsgData.Buffer = payload;
 8009ea4:	9b03      	ldr	r3, [sp, #12]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009ea6:	a81e      	add	r0, sp, #120	; 0x78
            macMsgData.Buffer = payload;
 8009ea8:	931e      	str	r3, [sp, #120]	; 0x78
            macMsgData.BufSize = size;
 8009eaa:	ab08      	add	r3, sp, #32
 8009eac:	189b      	adds	r3, r3, r2
 8009eae:	701e      	strb	r6, [r3, #0]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8009eb0:	4b5d      	ldr	r3, [pc, #372]	; (800a028 <LoRaMacProcess+0x6fc>)
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009eb2:	32a3      	adds	r2, #163	; 0xa3
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8009eb4:	9327      	str	r3, [sp, #156]	; 0x9c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009eb6:	ab28      	add	r3, sp, #160	; 0xa0
 8009eb8:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009eba:	f002 f919 	bl	800c0f0 <LoRaMacParserData>
 8009ebe:	9005      	str	r0, [sp, #20]
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d000      	beq.n	8009ec6 <LoRaMacProcess+0x59a>
 8009ec4:	e740      	b.n	8009d48 <LoRaMacProcess+0x41c>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009ec6:	2264      	movs	r2, #100	; 0x64
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009ec8:	4b58      	ldr	r3, [pc, #352]	; (800a02c <LoRaMacProcess+0x700>)
 8009eca:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009ecc:	50e1      	str	r1, [r4, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009ece:	ab08      	add	r3, sp, #32
 8009ed0:	189b      	adds	r3, r3, r2
 8009ed2:	781a      	ldrb	r2, [r3, #0]
 8009ed4:	230f      	movs	r3, #15
 8009ed6:	0010      	movs	r0, r2
 8009ed8:	4018      	ands	r0, r3
 8009eda:	421a      	tst	r2, r3
 8009edc:	d005      	beq.n	8009eea <LoRaMacProcess+0x5be>
 8009ede:	334a      	adds	r3, #74	; 0x4a
 8009ee0:	ac08      	add	r4, sp, #32
 8009ee2:	191b      	adds	r3, r3, r4
 8009ee4:	7fdb      	ldrb	r3, [r3, #31]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d151      	bne.n	8009f8e <LoRaMacProcess+0x662>
    else if( macMsg->FRMPayloadSize == 0 )
 8009eea:	ab28      	add	r3, sp, #160	; 0xa0
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d04f      	beq.n	8009f92 <LoRaMacProcess+0x666>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d000      	beq.n	8009ef8 <LoRaMacProcess+0x5cc>
 8009ef6:	e727      	b.n	8009d48 <LoRaMacProcess+0x41c>
 8009ef8:	2359      	movs	r3, #89	; 0x59
 8009efa:	a808      	add	r0, sp, #32
 8009efc:	181b      	adds	r3, r3, r0
 8009efe:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_D;
 8009f00:	1e58      	subs	r0, r3, #1
 8009f02:	4183      	sbcs	r3, r0
 8009f04:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_B;
 8009f06:	9303      	str	r3, [sp, #12]
            downLinkCounter = 0;
 8009f08:	2300      	movs	r3, #0
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009f0a:	4c43      	ldr	r4, [pc, #268]	; (800a018 <LoRaMacProcess+0x6ec>)
            downLinkCounter = 0;
 8009f0c:	930d      	str	r3, [sp, #52]	; 0x34
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009f0e:	4b40      	ldr	r3, [pc, #256]	; (800a010 <LoRaMacProcess+0x6e4>)
 8009f10:	58e3      	ldr	r3, [r4, r3]
 8009f12:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009f14:	4281      	cmp	r1, r0
 8009f16:	d13e      	bne.n	8009f96 <LoRaMacProcess+0x66a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8009f18:	0019      	movs	r1, r3
 8009f1a:	3152      	adds	r1, #82	; 0x52
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009f1c:	7809      	ldrb	r1, [r1, #0]
 8009f1e:	2501      	movs	r5, #1
 8009f20:	2900      	cmp	r1, #0
 8009f22:	d018      	beq.n	8009f56 <LoRaMacProcess+0x62a>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 8009f24:	0019      	movs	r1, r3
 8009f26:	3153      	adds	r1, #83	; 0x53
 8009f28:	780d      	ldrb	r5, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 8009f2a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f2c:	6809      	ldr	r1, [r1, #0]
 8009f2e:	910d      	str	r1, [sp, #52]	; 0x34
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009f30:	0019      	movs	r1, r3
 8009f32:	317c      	adds	r1, #124	; 0x7c
 8009f34:	7809      	ldrb	r1, [r1, #0]
 8009f36:	2902      	cmp	r1, #2
 8009f38:	d102      	bne.n	8009f40 <LoRaMacProcess+0x614>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009f3a:	4e36      	ldr	r6, [pc, #216]	; (800a014 <LoRaMacProcess+0x6e8>)
 8009f3c:	3101      	adds	r1, #1
 8009f3e:	55a1      	strb	r1, [r4, r6]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009f40:	9903      	ldr	r1, [sp, #12]
 8009f42:	2903      	cmp	r1, #3
 8009f44:	d000      	beq.n	8009f48 <LoRaMacProcess+0x61c>
 8009f46:	e6ff      	b.n	8009d48 <LoRaMacProcess+0x41c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009f48:	2160      	movs	r1, #96	; 0x60
 8009f4a:	420a      	tst	r2, r1
 8009f4c:	d000      	beq.n	8009f50 <LoRaMacProcess+0x624>
 8009f4e:	e6fb      	b.n	8009d48 <LoRaMacProcess+0x41c>
 8009f50:	2201      	movs	r2, #1
 8009f52:	9008      	str	r0, [sp, #32]
 8009f54:	9205      	str	r2, [sp, #20]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8009f56:	2215      	movs	r2, #21
 8009f58:	a90e      	add	r1, sp, #56	; 0x38
 8009f5a:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009f5c:	7818      	ldrb	r0, [r3, #0]
 8009f5e:	f002 f9ca 	bl	800c2f6 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8009f62:	4a2b      	ldr	r2, [pc, #172]	; (800a010 <LoRaMacProcess+0x6e4>)
 8009f64:	4b2c      	ldr	r3, [pc, #176]	; (800a018 <LoRaMacProcess+0x6ec>)
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009f66:	900c      	str	r0, [sp, #48]	; 0x30
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8009f68:	589b      	ldr	r3, [r3, r2]
 8009f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f6c:	23b1      	movs	r3, #177	; 0xb1
 8009f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f70:	005b      	lsls	r3, r3, #1
 8009f72:	5cd4      	ldrb	r4, [r2, r3]
    switch( addrID )
 8009f74:	2d00      	cmp	r5, #0
 8009f76:	d010      	beq.n	8009f9a <LoRaMacProcess+0x66e>
 8009f78:	2d01      	cmp	r5, #1
 8009f7a:	d145      	bne.n	800a008 <LoRaMacProcess+0x6dc>
            if( lrWanVersion.Fields.Minor == 1 )
 8009f7c:	2c01      	cmp	r4, #1
 8009f7e:	d13a      	bne.n	8009ff6 <LoRaMacProcess+0x6ca>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009f80:	9b03      	ldr	r3, [sp, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <LoRaMacProcess+0x65e>
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d108      	bne.n	8009f9c <LoRaMacProcess+0x670>
                    *fCntID = A_FCNT_DOWN;
 8009f8a:	2402      	movs	r4, #2
 8009f8c:	e006      	b.n	8009f9c <LoRaMacProcess+0x670>
        *fType = FRAME_TYPE_A;
 8009f8e:	9b05      	ldr	r3, [sp, #20]
 8009f90:	e7b9      	b.n	8009f06 <LoRaMacProcess+0x5da>
        *fType = FRAME_TYPE_B;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e7b7      	b.n	8009f06 <LoRaMacProcess+0x5da>
 8009f96:	2501      	movs	r5, #1
 8009f98:	e7dd      	b.n	8009f56 <LoRaMacProcess+0x62a>
    switch( addrID )
 8009f9a:	2404      	movs	r4, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8009f9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f9e:	ae1e      	add	r6, sp, #120	; 0x78
 8009fa0:	b299      	uxth	r1, r3
 8009fa2:	0020      	movs	r0, r4
 8009fa4:	89f2      	ldrh	r2, [r6, #14]
 8009fa6:	ab0d      	add	r3, sp, #52	; 0x34
 8009fa8:	f001 fe7e 	bl	800bca8 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d03f      	beq.n	800a030 <LoRaMacProcess+0x704>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8009fb0:	2807      	cmp	r0, #7
 8009fb2:	d122      	bne.n	8009ffa <LoRaMacProcess+0x6ce>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009fb4:	2308      	movs	r3, #8
 8009fb6:	4a18      	ldr	r2, [pc, #96]	; (800a018 <LoRaMacProcess+0x6ec>)
 8009fb8:	4918      	ldr	r1, [pc, #96]	; (800a01c <LoRaMacProcess+0x6f0>)
 8009fba:	5453      	strb	r3, [r2, r1]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 8009fbc:	0013      	movs	r3, r2
 8009fbe:	4a14      	ldr	r2, [pc, #80]	; (800a010 <LoRaMacProcess+0x6e4>)
 8009fc0:	589b      	ldr	r3, [r3, r2]
 8009fc2:	22b1      	movs	r2, #177	; 0xb1
 8009fc4:	0052      	lsls	r2, r2, #1
 8009fc6:	5c9a      	ldrb	r2, [r3, r2]
 8009fc8:	2a00      	cmp	r2, #0
 8009fca:	d10e      	bne.n	8009fea <LoRaMacProcess+0x6be>
 8009fcc:	9907      	ldr	r1, [sp, #28]
 8009fce:	321f      	adds	r2, #31
 8009fd0:	4391      	bics	r1, r2
 8009fd2:	29a0      	cmp	r1, #160	; 0xa0
 8009fd4:	d109      	bne.n	8009fea <LoRaMacProcess+0x6be>
 8009fd6:	001a      	movs	r2, r3
 8009fd8:	32fc      	adds	r2, #252	; 0xfc
 8009fda:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 8009fdc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8009fde:	4291      	cmp	r1, r2
 8009fe0:	d103      	bne.n	8009fea <LoRaMacProcess+0x6be>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 8009fe2:	224c      	movs	r2, #76	; 0x4c
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	32ff      	adds	r2, #255	; 0xff
 8009fe8:	5499      	strb	r1, [r3, r2]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009fea:	2386      	movs	r3, #134	; 0x86
 8009fec:	4a0a      	ldr	r2, [pc, #40]	; (800a018 <LoRaMacProcess+0x6ec>)
 8009fee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8009ff4:	e6ac      	b.n	8009d50 <LoRaMacProcess+0x424>
                *fCntID = FCNT_DOWN;
 8009ff6:	2403      	movs	r4, #3
 8009ff8:	e7d0      	b.n	8009f9c <LoRaMacProcess+0x670>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8009ffa:	2808      	cmp	r0, #8
 8009ffc:	d104      	bne.n	800a008 <LoRaMacProcess+0x6dc>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8009ffe:	220a      	movs	r2, #10
 800a000:	4b05      	ldr	r3, [pc, #20]	; (800a018 <LoRaMacProcess+0x6ec>)
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a002:	4906      	ldr	r1, [pc, #24]	; (800a01c <LoRaMacProcess+0x6f0>)
 800a004:	545a      	strb	r2, [r3, r1]
 800a006:	e7f0      	b.n	8009fea <LoRaMacProcess+0x6be>
 800a008:	2201      	movs	r2, #1
 800a00a:	4b03      	ldr	r3, [pc, #12]	; (800a018 <LoRaMacProcess+0x6ec>)
 800a00c:	e7f9      	b.n	800a002 <LoRaMacProcess+0x6d6>
 800a00e:	46c0      	nop			; (mov r8, r8)
 800a010:	00000484 	.word	0x00000484
 800a014:	0000042d 	.word	0x0000042d
 800a018:	200007d4 	.word	0x200007d4
 800a01c:	0000041d 	.word	0x0000041d
 800a020:	00000414 	.word	0x00000414
 800a024:	0000041c 	.word	0x0000041c
 800a028:	20000a0c 	.word	0x20000a0c
 800a02c:	00000434 	.word	0x00000434
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a032:	0022      	movs	r2, r4
 800a034:	0028      	movs	r0, r5
 800a036:	9908      	ldr	r1, [sp, #32]
 800a038:	9600      	str	r6, [sp, #0]
 800a03a:	f001 ff0f 	bl	800be5c <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a03e:	4ba6      	ldr	r3, [pc, #664]	; (800a2d8 <LoRaMacProcess+0x9ac>)
 800a040:	2800      	cmp	r0, #0
 800a042:	d006      	beq.n	800a052 <LoRaMacProcess+0x726>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a044:	3802      	subs	r0, #2
 800a046:	1e42      	subs	r2, r0, #1
 800a048:	4190      	sbcs	r0, r2
 800a04a:	4aa4      	ldr	r2, [pc, #656]	; (800a2dc <LoRaMacProcess+0x9b0>)
 800a04c:	300b      	adds	r0, #11
 800a04e:	5498      	strb	r0, [r3, r2]
 800a050:	e67e      	b.n	8009d50 <LoRaMacProcess+0x424>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a052:	4aa2      	ldr	r2, [pc, #648]	; (800a2dc <LoRaMacProcess+0x9b0>)
            MacCtx.McpsIndication.Multicast = multicast;
 800a054:	9905      	ldr	r1, [sp, #20]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a056:	5498      	strb	r0, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800a058:	4aa1      	ldr	r2, [pc, #644]	; (800a2e0 <LoRaMacProcess+0x9b4>)
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a05a:	4ca2      	ldr	r4, [pc, #648]	; (800a2e4 <LoRaMacProcess+0x9b8>)
            MacCtx.McpsIndication.Multicast = multicast;
 800a05c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a05e:	7b32      	ldrb	r2, [r6, #12]
 800a060:	06d1      	lsls	r1, r2, #27
 800a062:	0fc9      	lsrs	r1, r1, #31
 800a064:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 800a066:	49a0      	ldr	r1, [pc, #640]	; (800a2e8 <LoRaMacProcess+0x9bc>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a068:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            MacCtx.McpsIndication.Buffer = NULL;
 800a06a:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 800a06c:	3104      	adds	r1, #4
 800a06e:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a070:	3108      	adds	r1, #8
 800a072:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a074:	0692      	lsls	r2, r2, #26
 800a076:	499d      	ldr	r1, [pc, #628]	; (800a2ec <LoRaMacProcess+0x9c0>)
 800a078:	0fd2      	lsrs	r2, r2, #31
 800a07a:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a07c:	499c      	ldr	r1, [pc, #624]	; (800a2f0 <LoRaMacProcess+0x9c4>)
 800a07e:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a080:	3103      	adds	r1, #3
 800a082:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800a084:	4a9b      	ldr	r2, [pc, #620]	; (800a2f4 <LoRaMacProcess+0x9c8>)
 800a086:	5c9a      	ldrb	r2, [r3, r2]
 800a088:	2a01      	cmp	r2, #1
 800a08a:	d803      	bhi.n	800a094 <LoRaMacProcess+0x768>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800a08c:	499a      	ldr	r1, [pc, #616]	; (800a2f8 <LoRaMacProcess+0x9cc>)
 800a08e:	585b      	ldr	r3, [r3, r1]
 800a090:	3304      	adds	r3, #4
 800a092:	67d8      	str	r0, [r3, #124]	; 0x7c
            if( multicast == 1 )
 800a094:	9b05      	ldr	r3, [sp, #20]
 800a096:	4c90      	ldr	r4, [pc, #576]	; (800a2d8 <LoRaMacProcess+0x9ac>)
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d130      	bne.n	800a0fe <LoRaMacProcess+0x7d2>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a09c:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a09e:	4997      	ldr	r1, [pc, #604]	; (800a2fc <LoRaMacProcess+0x9d0>)
 800a0a0:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a0a2:	4b97      	ldr	r3, [pc, #604]	; (800a300 <LoRaMacProcess+0x9d4>)
 800a0a4:	ad1e      	add	r5, sp, #120	; 0x78
 800a0a6:	5ce1      	ldrb	r1, [r4, r3]
 800a0a8:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800a0aa:	2a01      	cmp	r2, #1
 800a0ac:	d805      	bhi.n	800a0ba <LoRaMacProcess+0x78e>
        if( request == MCPS_CONFIRMED )
 800a0ae:	2901      	cmp	r1, #1
 800a0b0:	d101      	bne.n	800a0b6 <LoRaMacProcess+0x78a>
            if( fCtrl.Bits.Ack == 1 )
 800a0b2:	069b      	lsls	r3, r3, #26
 800a0b4:	d501      	bpl.n	800a0ba <LoRaMacProcess+0x78e>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800a0b6:	f001 fb23 	bl	800b700 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	4e91      	ldr	r6, [pc, #580]	; (800a304 <LoRaMacProcess+0x9d8>)
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d038      	beq.n	800a134 <LoRaMacProcess+0x808>
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d008      	beq.n	800a0d8 <LoRaMacProcess+0x7ac>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a0c6:	7b29      	ldrb	r1, [r5, #12]
 800a0c8:	9a04      	ldr	r2, [sp, #16]
 800a0ca:	0709      	lsls	r1, r1, #28
 800a0cc:	0f09      	lsrs	r1, r1, #28
 800a0ce:	a822      	add	r0, sp, #136	; 0x88
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d033      	beq.n	800a13c <LoRaMacProcess+0x810>
 800a0d4:	f7ff f95c 	bl	8009390 <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a0d8:	2278      	movs	r2, #120	; 0x78
 800a0da:	ab08      	add	r3, sp, #32
 800a0dc:	189b      	adds	r3, r3, r2
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a0e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0e4:	9303      	str	r3, [sp, #12]
 800a0e6:	9a03      	ldr	r2, [sp, #12]
 800a0e8:	4b7f      	ldr	r3, [pc, #508]	; (800a2e8 <LoRaMacProcess+0x9bc>)
 800a0ea:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a0ec:	ab28      	add	r3, sp, #160	; 0xa0
 800a0ee:	781a      	ldrb	r2, [r3, #0]
 800a0f0:	2385      	movs	r3, #133	; 0x85
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	4b83      	ldr	r3, [pc, #524]	; (800a308 <LoRaMacProcess+0x9dc>)
 800a0fa:	54e2      	strb	r2, [r4, r3]
                    break;
 800a0fc:	e025      	b.n	800a14a <LoRaMacProcess+0x81e>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a0fe:	211f      	movs	r1, #31
 800a100:	9807      	ldr	r0, [sp, #28]
 800a102:	4b7d      	ldr	r3, [pc, #500]	; (800a2f8 <LoRaMacProcess+0x9cc>)
 800a104:	4388      	bics	r0, r1
 800a106:	0001      	movs	r1, r0
 800a108:	204c      	movs	r0, #76	; 0x4c
 800a10a:	58e3      	ldr	r3, [r4, r3]
 800a10c:	30ff      	adds	r0, #255	; 0xff
 800a10e:	29a0      	cmp	r1, #160	; 0xa0
 800a110:	d10b      	bne.n	800a12a <LoRaMacProcess+0x7fe>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800a112:	399f      	subs	r1, #159	; 0x9f
 800a114:	5419      	strb	r1, [r3, r0]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a116:	3162      	adds	r1, #98	; 0x62
 800a118:	31ff      	adds	r1, #255	; 0xff
 800a11a:	5c59      	ldrb	r1, [r3, r1]
 800a11c:	2900      	cmp	r1, #0
 800a11e:	d102      	bne.n	800a126 <LoRaMacProcess+0x7fa>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800a120:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800a122:	33fc      	adds	r3, #252	; 0xfc
 800a124:	66d9      	str	r1, [r3, #108]	; 0x6c
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a126:	2301      	movs	r3, #1
 800a128:	e7b9      	b.n	800a09e <LoRaMacProcess+0x772>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800a12a:	2100      	movs	r1, #0
 800a12c:	5419      	strb	r1, [r3, r0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a12e:	4b73      	ldr	r3, [pc, #460]	; (800a2fc <LoRaMacProcess+0x9d0>)
 800a130:	54e1      	strb	r1, [r4, r3]
 800a132:	e7b6      	b.n	800a0a2 <LoRaMacProcess+0x776>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800a134:	ab28      	add	r3, sp, #160	; 0xa0
 800a136:	7819      	ldrb	r1, [r3, #0]
 800a138:	9a04      	ldr	r2, [sp, #16]
 800a13a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a13c:	f7ff f928 	bl	8009390 <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a140:	2278      	movs	r2, #120	; 0x78
 800a142:	ab08      	add	r3, sp, #32
 800a144:	189b      	adds	r3, r3, r2
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a14a:	2302      	movs	r3, #2
 800a14c:	5de2      	ldrb	r2, [r4, r7]
 800a14e:	4313      	orrs	r3, r2
 800a150:	55e3      	strb	r3, [r4, r7]
            break;
 800a152:	e65c      	b.n	8009e0e <LoRaMacProcess+0x4e2>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a154:	1e75      	subs	r5, r6, #1
 800a156:	9903      	ldr	r1, [sp, #12]
 800a158:	4e6c      	ldr	r6, [pc, #432]	; (800a30c <LoRaMacProcess+0x9e0>)
 800a15a:	b2aa      	uxth	r2, r5
 800a15c:	0030      	movs	r0, r6
 800a15e:	3101      	adds	r1, #1
 800a160:	f003 f9ae 	bl	800d4c0 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a164:	2303      	movs	r3, #3
 800a166:	4a65      	ldr	r2, [pc, #404]	; (800a2fc <LoRaMacProcess+0x9d0>)
 800a168:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a16a:	4b5f      	ldr	r3, [pc, #380]	; (800a2e8 <LoRaMacProcess+0x9bc>)
 800a16c:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a16e:	3304      	adds	r3, #4
 800a170:	54e5      	strb	r5, [r4, r3]
 800a172:	e7ea      	b.n	800a14a <LoRaMacProcess+0x81e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a174:	2201      	movs	r2, #1
 800a176:	4b59      	ldr	r3, [pc, #356]	; (800a2dc <LoRaMacProcess+0x9b0>)
 800a178:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 800a17a:	f7fe fc2b 	bl	80089d4 <PrepareRxDoneAbort>
            break;
 800a17e:	e646      	b.n	8009e0e <LoRaMacProcess+0x4e2>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a180:	4b5d      	ldr	r3, [pc, #372]	; (800a2f8 <LoRaMacProcess+0x9cc>)
 800a182:	58e3      	ldr	r3, [r4, r3]
 800a184:	337c      	adds	r3, #124	; 0x7c
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d000      	beq.n	800a18e <LoRaMacProcess+0x862>
 800a18c:	e64d      	b.n	8009e2a <LoRaMacProcess+0x4fe>
 800a18e:	e649      	b.n	8009e24 <LoRaMacProcess+0x4f8>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a190:	5de3      	ldrb	r3, [r4, r7]
 800a192:	075b      	lsls	r3, r3, #29
 800a194:	d512      	bpl.n	800a1bc <LoRaMacProcess+0x890>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a196:	2001      	movs	r0, #1
 800a198:	25d0      	movs	r5, #208	; 0xd0
 800a19a:	f001 fbe9 	bl	800b970 <LoRaMacConfirmQueueIsCmdActive>
 800a19e:	00ad      	lsls	r5, r5, #2
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d035      	beq.n	800a210 <LoRaMacProcess+0x8e4>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a1a4:	2001      	movs	r0, #1
 800a1a6:	f001 fbb5 	bl	800b914 <LoRaMacConfirmQueueGetStatus>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	d102      	bne.n	800a1b4 <LoRaMacProcess+0x888>
                MacCtx.ChannelsNbTransCounter = 0;
 800a1ae:	2382      	movs	r3, #130	; 0x82
 800a1b0:	00db      	lsls	r3, r3, #3
 800a1b2:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	5962      	ldr	r2, [r4, r5]
 800a1b8:	439a      	bics	r2, r3
 800a1ba:	5162      	str	r2, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a1bc:	5de1      	ldrb	r1, [r4, r7]
 800a1be:	07cb      	lsls	r3, r1, #31
 800a1c0:	d400      	bmi.n	800a1c4 <LoRaMacProcess+0x898>
 800a1c2:	e4d8      	b.n	8009b76 <LoRaMacProcess+0x24a>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a1c4:	4b4e      	ldr	r3, [pc, #312]	; (800a300 <LoRaMacProcess+0x9d4>)
 800a1c6:	5ce3      	ldrb	r3, [r4, r3]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <LoRaMacProcess+0x8a4>
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d12a      	bne.n	800a226 <LoRaMacProcess+0x8fa>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a1d0:	4b49      	ldr	r3, [pc, #292]	; (800a2f8 <LoRaMacProcess+0x9cc>)
    if( MacCtx.ChannelsNbTransCounter >=
 800a1d2:	2082      	movs	r0, #130	; 0x82
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a1d4:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 800a1d6:	00c0      	lsls	r0, r0, #3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a1d8:	001a      	movs	r2, r3
 800a1da:	32a4      	adds	r2, #164	; 0xa4
    if( MacCtx.ChannelsNbTransCounter >=
 800a1dc:	5c20      	ldrb	r0, [r4, r0]
 800a1de:	7812      	ldrb	r2, [r2, #0]
 800a1e0:	4290      	cmp	r0, r2
 800a1e2:	d209      	bcs.n	800a1f8 <LoRaMacProcess+0x8cc>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a1e4:	078a      	lsls	r2, r1, #30
 800a1e6:	d554      	bpl.n	800a292 <LoRaMacProcess+0x966>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800a1e8:	337c      	adds	r3, #124	; 0x7c
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <LoRaMacProcess+0x8cc>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 800a1f0:	4b40      	ldr	r3, [pc, #256]	; (800a2f4 <LoRaMacProcess+0x9c8>)
 800a1f2:	5ce3      	ldrb	r3, [r4, r3]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d14c      	bne.n	800a292 <LoRaMacProcess+0x966>
            TimerStop( &MacCtx.TxDelayedTimer );
 800a1f8:	4845      	ldr	r0, [pc, #276]	; (800a310 <LoRaMacProcess+0x9e4>)
 800a1fa:	f004 ffe7 	bl	800f1cc <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a1fe:	22d0      	movs	r2, #208	; 0xd0
 800a200:	2320      	movs	r3, #32
 800a202:	0092      	lsls	r2, r2, #2
 800a204:	58a1      	ldr	r1, [r4, r2]
 800a206:	4399      	bics	r1, r3
 800a208:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 800a20a:	f7fe fb35 	bl	8008878 <StopRetransmission>
 800a20e:	e4b2      	b.n	8009b76 <LoRaMacProcess+0x24a>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a210:	2005      	movs	r0, #5
 800a212:	f001 fbad 	bl	800b970 <LoRaMacConfirmQueueIsCmdActive>
 800a216:	2800      	cmp	r0, #0
 800a218:	d1cc      	bne.n	800a1b4 <LoRaMacProcess+0x888>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800a21a:	2006      	movs	r0, #6
 800a21c:	f001 fba8 	bl	800b970 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a220:	2800      	cmp	r0, #0
 800a222:	d1c7      	bne.n	800a1b4 <LoRaMacProcess+0x888>
 800a224:	e7ca      	b.n	800a1bc <LoRaMacProcess+0x890>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a226:	2b01      	cmp	r3, #1
 800a228:	d133      	bne.n	800a292 <LoRaMacProcess+0x966>
            if( MacCtx.AckTimeoutRetry == true )
 800a22a:	4b3a      	ldr	r3, [pc, #232]	; (800a314 <LoRaMacProcess+0x9e8>)
 800a22c:	5ce2      	ldrb	r2, [r4, r3]
 800a22e:	2a00      	cmp	r2, #0
 800a230:	d100      	bne.n	800a234 <LoRaMacProcess+0x908>
 800a232:	e4a0      	b.n	8009b76 <LoRaMacProcess+0x24a>
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a234:	4d38      	ldr	r5, [pc, #224]	; (800a318 <LoRaMacProcess+0x9ec>)
        MacCtx.AckTimeoutRetries )
 800a236:	4839      	ldr	r0, [pc, #228]	; (800a31c <LoRaMacProcess+0x9f0>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a238:	5d63      	ldrb	r3, [r4, r5]
        MacCtx.AckTimeoutRetries )
 800a23a:	5c20      	ldrb	r0, [r4, r0]
 800a23c:	4684      	mov	ip, r0
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a23e:	4283      	cmp	r3, r0
 800a240:	d205      	bcs.n	800a24e <LoRaMacProcess+0x922>
    return false;
 800a242:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a244:	0789      	lsls	r1, r1, #30
 800a246:	d502      	bpl.n	800a24e <LoRaMacProcess+0x922>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a248:	2288      	movs	r2, #136	; 0x88
 800a24a:	00d2      	lsls	r2, r2, #3
 800a24c:	5ca2      	ldrb	r2, [r4, r2]
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a24e:	21b1      	movs	r1, #177	; 0xb1
 800a250:	4e29      	ldr	r6, [pc, #164]	; (800a2f8 <LoRaMacProcess+0x9cc>)
 800a252:	0049      	lsls	r1, r1, #1
 800a254:	59a0      	ldr	r0, [r4, r6]
 800a256:	5c41      	ldrb	r1, [r0, r1]
 800a258:	2900      	cmp	r1, #0
 800a25a:	d13a      	bne.n	800a2d2 <LoRaMacProcess+0x9a6>
                    if( stopRetransmission == false )
 800a25c:	2a00      	cmp	r2, #0
 800a25e:	d122      	bne.n	800a2a6 <LoRaMacProcess+0x97a>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800a260:	4563      	cmp	r3, ip
 800a262:	d216      	bcs.n	800a292 <LoRaMacProcess+0x966>
        MacCtx.AckTimeoutRetriesCounter++;
 800a264:	3301      	adds	r3, #1
 800a266:	b2db      	uxtb	r3, r3
 800a268:	5563      	strb	r3, [r4, r5]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800a26a:	07db      	lsls	r3, r3, #31
 800a26c:	d511      	bpl.n	800a292 <LoRaMacProcess+0x966>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a26e:	2322      	movs	r3, #34	; 0x22
 800a270:	a91e      	add	r1, sp, #120	; 0x78
 800a272:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a274:	0003      	movs	r3, r0
 800a276:	33b8      	adds	r3, #184	; 0xb8
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a27c:	0003      	movs	r3, r0
 800a27e:	3385      	adds	r3, #133	; 0x85
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a284:	7800      	ldrb	r0, [r0, #0]
 800a286:	f002 f836 	bl	800c2f6 <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800a28a:	59a3      	ldr	r3, [r4, r6]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a28c:	9014      	str	r0, [sp, #80]	; 0x50
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800a28e:	3385      	adds	r3, #133	; 0x85
 800a290:	7018      	strb	r0, [r3, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a292:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 800a294:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a296:	5de3      	ldrb	r3, [r4, r7]
 800a298:	4393      	bics	r3, r2
 800a29a:	55e3      	strb	r3, [r4, r7]
            MacCtx.AckTimeoutRetry = false;
 800a29c:	4b1d      	ldr	r3, [pc, #116]	; (800a314 <LoRaMacProcess+0x9e8>)
 800a29e:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 800a2a0:	f7fe ff04 	bl	80090ac <OnTxDelayedTimerEvent>
 800a2a4:	e467      	b.n	8009b76 <LoRaMacProcess+0x24a>
    if( MacCtx.McpsConfirm.AckReceived == false )
 800a2a6:	2388      	movs	r3, #136	; 0x88
 800a2a8:	00db      	lsls	r3, r3, #3
 800a2aa:	5ce6      	ldrb	r6, [r4, r3]
 800a2ac:	2e00      	cmp	r6, #0
 800a2ae:	d10c      	bne.n	800a2ca <LoRaMacProcess+0x99e>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	a91e      	add	r1, sp, #120	; 0x78
 800a2b4:	710b      	strb	r3, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800a2b6:	4b1a      	ldr	r3, [pc, #104]	; (800a320 <LoRaMacProcess+0x9f4>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a2b8:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	931e      	str	r3, [sp, #120]	; 0x78
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a2be:	f002 f82d 	bl	800c31c <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800a2c2:	4b18      	ldr	r3, [pc, #96]	; (800a324 <LoRaMacProcess+0x9f8>)
 800a2c4:	54e6      	strb	r6, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 800a2c6:	332c      	adds	r3, #44	; 0x2c
 800a2c8:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a2ca:	5d62      	ldrb	r2, [r4, r5]
 800a2cc:	4b16      	ldr	r3, [pc, #88]	; (800a328 <LoRaMacProcess+0x9fc>)
 800a2ce:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 800a2d0:	e792      	b.n	800a1f8 <LoRaMacProcess+0x8cc>
 800a2d2:	2a00      	cmp	r2, #0
 800a2d4:	d0dd      	beq.n	800a292 <LoRaMacProcess+0x966>
 800a2d6:	e78f      	b.n	800a1f8 <LoRaMacProcess+0x8cc>
 800a2d8:	200007d4 	.word	0x200007d4
 800a2dc:	0000041d 	.word	0x0000041d
 800a2e0:	0000041e 	.word	0x0000041e
 800a2e4:	00000421 	.word	0x00000421
 800a2e8:	00000424 	.word	0x00000424
 800a2ec:	0000042e 	.word	0x0000042e
 800a2f0:	0000043d 	.word	0x0000043d
 800a2f4:	0000042d 	.word	0x0000042d
 800a2f8:	00000484 	.word	0x00000484
 800a2fc:	0000041c 	.word	0x0000041c
 800a300:	0000043c 	.word	0x0000043c
 800a304:	0000041f 	.word	0x0000041f
 800a308:	00000429 	.word	0x00000429
 800a30c:	20000a0c 	.word	0x20000a0c
 800a310:	20000b3c 	.word	0x20000b3c
 800a314:	00000413 	.word	0x00000413
 800a318:	00000412 	.word	0x00000412
 800a31c:	00000411 	.word	0x00000411
 800a320:	2000062c 	.word	0x2000062c
 800a324:	00000414 	.word	0x00000414
 800a328:	00000441 	.word	0x00000441

0800a32c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32e:	b097      	sub	sp, #92	; 0x5c
 800a330:	0007      	movs	r7, r0
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a332:	2503      	movs	r5, #3
{
 800a334:	9102      	str	r1, [sp, #8]
 800a336:	9203      	str	r2, [sp, #12]
    if( ( primitives == NULL ) ||
 800a338:	2800      	cmp	r0, #0
 800a33a:	d100      	bne.n	800a33e <LoRaMacInitialization+0x12>
 800a33c:	e170      	b.n	800a620 <LoRaMacInitialization+0x2f4>
 800a33e:	2900      	cmp	r1, #0
 800a340:	d100      	bne.n	800a344 <LoRaMacInitialization+0x18>
 800a342:	e16d      	b.n	800a620 <LoRaMacInitialization+0x2f4>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a344:	6803      	ldr	r3, [r0, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d100      	bne.n	800a34c <LoRaMacInitialization+0x20>
 800a34a:	e169      	b.n	800a620 <LoRaMacInitialization+0x2f4>
 800a34c:	6843      	ldr	r3, [r0, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d100      	bne.n	800a354 <LoRaMacInitialization+0x28>
 800a352:	e165      	b.n	800a620 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a354:	6883      	ldr	r3, [r0, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d100      	bne.n	800a35c <LoRaMacInitialization+0x30>
 800a35a:	e161      	b.n	800a620 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a35c:	68c3      	ldr	r3, [r0, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d100      	bne.n	800a364 <LoRaMacInitialization+0x38>
 800a362:	e15d      	b.n	800a620 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a364:	0010      	movs	r0, r2
 800a366:	f001 ffc2 	bl	800c2ee <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a36a:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d100      	bne.n	800a372 <LoRaMacInitialization+0x46>
 800a370:	e156      	b.n	800a620 <LoRaMacInitialization+0x2f4>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800a372:	0038      	movs	r0, r7
 800a374:	49cc      	ldr	r1, [pc, #816]	; (800a6a8 <LoRaMacInitialization+0x37c>)
 800a376:	f001 fa57 	bl	800b828 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800a37a:	22b6      	movs	r2, #182	; 0xb6
 800a37c:	4dcb      	ldr	r5, [pc, #812]	; (800a6ac <LoRaMacInitialization+0x380>)
 800a37e:	2100      	movs	r1, #0
 800a380:	0028      	movs	r0, r5
 800a382:	0052      	lsls	r2, r2, #1
 800a384:	f003 f8b2 	bl	800d4ec <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a388:	4cc9      	ldr	r4, [pc, #804]	; (800a6b0 <LoRaMacInitialization+0x384>)
 800a38a:	2100      	movs	r1, #0
 800a38c:	0020      	movs	r0, r4
 800a38e:	4ac9      	ldr	r2, [pc, #804]	; (800a6b4 <LoRaMacInitialization+0x388>)
 800a390:	f003 f8ac 	bl	800d4ec <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a394:	2101      	movs	r1, #1
 800a396:	4bc8      	ldr	r3, [pc, #800]	; (800a6b8 <LoRaMacInitialization+0x38c>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800a398:	2200      	movs	r2, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a39a:	54e1      	strb	r1, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 800a39c:	4bc7      	ldr	r3, [pc, #796]	; (800a6bc <LoRaMacInitialization+0x390>)
    MacCtx.NvmCtx = &NvmMacCtx;
 800a39e:	4ec8      	ldr	r6, [pc, #800]	; (800a6c0 <LoRaMacInitialization+0x394>)
    MacCtx.AckTimeoutRetries = 1;
 800a3a0:	54e1      	strb	r1, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 800a3a2:	9b03      	ldr	r3, [sp, #12]
    MacCtx.NvmCtx = &NvmMacCtx;
 800a3a4:	51a5      	str	r5, [r4, r6]
    MacCtx.NvmCtx->Region = region;
 800a3a6:	702b      	strb	r3, [r5, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800a3a8:	002b      	movs	r3, r5
 800a3aa:	337c      	adds	r3, #124	; 0x7c
 800a3ac:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800a3ae:	002b      	movs	r3, r5
 800a3b0:	33ca      	adds	r3, #202	; 0xca
 800a3b2:	701a      	strb	r2, [r3, #0]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 800a3b4:	4bc3      	ldr	r3, [pc, #780]	; (800a6c4 <LoRaMacInitialization+0x398>)
 800a3b6:	35fc      	adds	r5, #252	; 0xfc
 800a3b8:	666b      	str	r3, [r5, #100]	; 0x64

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a3ba:	230f      	movs	r3, #15
 800a3bc:	ad08      	add	r5, sp, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a3be:	0029      	movs	r1, r5
 800a3c0:	9803      	ldr	r0, [sp, #12]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a3c2:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a3c4:	f001 ff97 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800a3c8:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a3ca:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800a3cc:	1e42      	subs	r2, r0, #1
 800a3ce:	4190      	sbcs	r0, r2
 800a3d0:	001a      	movs	r2, r3
 800a3d2:	32c9      	adds	r2, #201	; 0xc9
 800a3d4:	7010      	strb	r0, [r2, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a3d6:	200a      	movs	r0, #10
 800a3d8:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a3da:	0029      	movs	r1, r5
 800a3dc:	7818      	ldrb	r0, [r3, #0]
 800a3de:	f001 ff8a 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a3e2:	2206      	movs	r2, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800a3e4:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_TX_DR;
 800a3e6:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a3e8:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800a3ea:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a3ec:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a3ee:	7818      	ldrb	r0, [r3, #0]
 800a3f0:	f001 ff81 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a3f4:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800a3f6:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a3f8:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a3fa:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800a3fc:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a3fe:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a400:	7818      	ldrb	r0, [r3, #0]
 800a402:	f001 ff78 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a406:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a408:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a40a:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a40c:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a40e:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a410:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a412:	7818      	ldrb	r0, [r3, #0]
 800a414:	f001 ff6f 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a418:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a41a:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a41c:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a41e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a420:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a422:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a424:	7818      	ldrb	r0, [r3, #0]
 800a426:	f001 ff66 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a42a:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a42c:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a42e:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a430:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a432:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a434:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a436:	7818      	ldrb	r0, [r3, #0]
 800a438:	f001 ff5d 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a43c:	2214      	movs	r2, #20
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a43e:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a440:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a442:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a444:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a446:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a448:	7818      	ldrb	r0, [r3, #0]
 800a44a:	f001 ff54 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a44e:	2217      	movs	r2, #23
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a450:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a452:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a454:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a456:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a458:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a45a:	7818      	ldrb	r0, [r3, #0]
 800a45c:	f001 ff4b 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a460:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a462:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a464:	1d9a      	adds	r2, r3, #6
 800a466:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a468:	2218      	movs	r2, #24
 800a46a:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a46c:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a46e:	7818      	ldrb	r0, [r3, #0]
 800a470:	f001 ff41 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a474:	2219      	movs	r2, #25
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a476:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a478:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a47a:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a47c:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a47e:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a480:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a482:	7818      	ldrb	r0, [r3, #0]
 800a484:	f001 ff37 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a488:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a48a:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a48c:	001a      	movs	r2, r3
 800a48e:	b2c0      	uxtb	r0, r0
 800a490:	322c      	adds	r2, #44	; 0x2c
 800a492:	7010      	strb	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a494:	7210      	strb	r0, [r2, #8]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a496:	221e      	movs	r2, #30
 800a498:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a49a:	0029      	movs	r1, r5
 800a49c:	7818      	ldrb	r0, [r3, #0]
 800a49e:	f001 ff2a 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a4a2:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4a4:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a4a6:	001a      	movs	r2, r3
 800a4a8:	3238      	adds	r2, #56	; 0x38
 800a4aa:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a4ac:	221f      	movs	r2, #31
 800a4ae:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4b0:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4b2:	7818      	ldrb	r0, [r3, #0]
 800a4b4:	f001 ff1f 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a4b8:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4ba:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a4bc:	001a      	movs	r2, r3
 800a4be:	3239      	adds	r2, #57	; 0x39
 800a4c0:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4c6:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4c8:	7818      	ldrb	r0, [r3, #0]
 800a4ca:	f001 ff14 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a4ce:	2221      	movs	r2, #33	; 0x21
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a4d0:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a4d2:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4d4:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a4d6:	63d8      	str	r0, [r3, #60]	; 0x3c
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4d8:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4da:	7818      	ldrb	r0, [r3, #0]
 800a4dc:	f001 ff0b 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a4e0:	220b      	movs	r2, #11
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a4e2:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a4e4:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4e6:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a4e8:	6418      	str	r0, [r3, #64]	; 0x40
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4ea:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4ec:	7818      	ldrb	r0, [r3, #0]
 800a4ee:	f001 ff02 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 800a4f2:	23fd      	movs	r3, #253	; 0xfd
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a4f8:	230c      	movs	r3, #12
 800a4fa:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a4fc:	59a3      	ldr	r3, [r4, r6]
 800a4fe:	0029      	movs	r1, r5
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a500:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a502:	7818      	ldrb	r0, [r3, #0]
 800a504:	f001 fef7 	bl	800c2f6 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800a508:	2101      	movs	r1, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 800a50a:	4b6f      	ldr	r3, [pc, #444]	; (800a6c8 <LoRaMacInitialization+0x39c>)
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800a50c:	2506      	movs	r5, #6
    MacCtx.AdrAckDelay = phyParam.Value;
 800a50e:	52e0      	strh	r0, [r4, r3]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800a510:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a512:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800a514:	1d5a      	adds	r2, r3, #5
 800a516:	77d1      	strb	r1, [r2, #31]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800a518:	001a      	movs	r2, r3
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800a51a:	200a      	movs	r0, #10
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800a51c:	3288      	adds	r2, #136	; 0x88
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800a51e:	6098      	str	r0, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800a520:	731d      	strb	r5, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800a522:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800a524:	0018      	movs	r0, r3
 800a526:	308c      	adds	r0, #140	; 0x8c
 800a528:	7005      	strb	r5, [r0, #0]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800a52a:	0018      	movs	r0, r3
 800a52c:	3090      	adds	r0, #144	; 0x90
 800a52e:	0002      	movs	r2, r0
 800a530:	6918      	ldr	r0, [r3, #16]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a532:	2500      	movs	r5, #0
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800a534:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800a536:	0018      	movs	r0, r3
 800a538:	3094      	adds	r0, #148	; 0x94
 800a53a:	0002      	movs	r2, r0
 800a53c:	6958      	ldr	r0, [r3, #20]
    params.NvmCtx = NULL;
 800a53e:	950c      	str	r5, [sp, #48]	; 0x30
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800a540:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800a542:	0018      	movs	r0, r3
 800a544:	3098      	adds	r0, #152	; 0x98
 800a546:	0002      	movs	r2, r0
 800a548:	6998      	ldr	r0, [r3, #24]
 800a54a:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800a54c:	0018      	movs	r0, r3
 800a54e:	309c      	adds	r0, #156	; 0x9c
 800a550:	0002      	movs	r2, r0
 800a552:	69d8      	ldr	r0, [r3, #28]
 800a554:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800a556:	0018      	movs	r0, r3
 800a558:	30a0      	adds	r0, #160	; 0xa0
 800a55a:	0002      	movs	r2, r0
 800a55c:	6a18      	ldr	r0, [r3, #32]
 800a55e:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800a560:	0018      	movs	r0, r3
 800a562:	30a4      	adds	r0, #164	; 0xa4
 800a564:	7001      	strb	r1, [r0, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 800a566:	a90c      	add	r1, sp, #48	; 0x30
 800a568:	710d      	strb	r5, [r1, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a56a:	7818      	ldrb	r0, [r3, #0]
 800a56c:	f001 fed6 	bl	800c31c <RegionInitDefaults>

    ResetMacParameters( );
 800a570:	f7fe fac4 	bl	8008afc <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800a574:	59a3      	ldr	r3, [r4, r6]
 800a576:	2101      	movs	r1, #1
 800a578:	001a      	movs	r2, r3
 800a57a:	327d      	adds	r2, #125	; 0x7d
 800a57c:	7011      	strb	r1, [r2, #0]

    MacCtx.MacPrimitives = primitives;
 800a57e:	22d1      	movs	r2, #209	; 0xd1
    MacCtx.MacCallbacks = callbacks;
 800a580:	9802      	ldr	r0, [sp, #8]
    MacCtx.MacPrimitives = primitives;
 800a582:	0092      	lsls	r2, r2, #2
 800a584:	50a7      	str	r7, [r4, r2]
    MacCtx.MacCallbacks = callbacks;
 800a586:	3204      	adds	r2, #4
 800a588:	50a0      	str	r0, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 800a58a:	4a50      	ldr	r2, [pc, #320]	; (800a6cc <LoRaMacInitialization+0x3a0>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800a58c:	33fc      	adds	r3, #252	; 0xfc
    MacCtx.MacFlags.Value = 0;
 800a58e:	54a5      	strb	r5, [r4, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800a590:	3a42      	subs	r2, #66	; 0x42
 800a592:	3aff      	subs	r2, #255	; 0xff
 800a594:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a596:	484e      	ldr	r0, [pc, #312]	; (800a6d0 <LoRaMacInitialization+0x3a4>)
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800a598:	655d      	str	r5, [r3, #84]	; 0x54
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800a59a:	659d      	str	r5, [r3, #88]	; 0x58
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a59c:	002a      	movs	r2, r5
 800a59e:	4b4d      	ldr	r3, [pc, #308]	; (800a6d4 <LoRaMacInitialization+0x3a8>)
 800a5a0:	9500      	str	r5, [sp, #0]
 800a5a2:	3902      	subs	r1, #2
 800a5a4:	f004 fdb2 	bl	800f10c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	002a      	movs	r2, r5
 800a5ac:	4b4a      	ldr	r3, [pc, #296]	; (800a6d8 <LoRaMacInitialization+0x3ac>)
 800a5ae:	9500      	str	r5, [sp, #0]
 800a5b0:	4249      	negs	r1, r1
 800a5b2:	484a      	ldr	r0, [pc, #296]	; (800a6dc <LoRaMacInitialization+0x3b0>)
 800a5b4:	f004 fdaa 	bl	800f10c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	002a      	movs	r2, r5
 800a5bc:	4b48      	ldr	r3, [pc, #288]	; (800a6e0 <LoRaMacInitialization+0x3b4>)
 800a5be:	9500      	str	r5, [sp, #0]
 800a5c0:	4249      	negs	r1, r1
 800a5c2:	4848      	ldr	r0, [pc, #288]	; (800a6e4 <LoRaMacInitialization+0x3b8>)
 800a5c4:	f004 fda2 	bl	800f10c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	002a      	movs	r2, r5
 800a5cc:	4b46      	ldr	r3, [pc, #280]	; (800a6e8 <LoRaMacInitialization+0x3bc>)
 800a5ce:	4249      	negs	r1, r1
 800a5d0:	9500      	str	r5, [sp, #0]
 800a5d2:	4846      	ldr	r0, [pc, #280]	; (800a6ec <LoRaMacInitialization+0x3c0>)
 800a5d4:	f004 fd9a 	bl	800f10c <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 800a5d8:	59a5      	ldr	r5, [r4, r6]
 800a5da:	af04      	add	r7, sp, #16
 800a5dc:	3559      	adds	r5, #89	; 0x59
 800a5de:	0038      	movs	r0, r7
 800a5e0:	35ff      	adds	r5, #255	; 0xff
 800a5e2:	f004 fd75 	bl	800f0d0 <SysTimeGetMcuTime>
 800a5e6:	cf0c      	ldmia	r7!, {r2, r3}
 800a5e8:	c50c      	stmia	r5!, {r2, r3}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a5ea:	23d3      	movs	r3, #211	; 0xd3
 800a5ec:	4a40      	ldr	r2, [pc, #256]	; (800a6f0 <LoRaMacInitialization+0x3c4>)
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a5f2:	4a40      	ldr	r2, [pc, #256]	; (800a6f4 <LoRaMacInitialization+0x3c8>)
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a5f8:	4a3f      	ldr	r2, [pc, #252]	; (800a6f8 <LoRaMacInitialization+0x3cc>)
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a5fe:	4a3f      	ldr	r2, [pc, #252]	; (800a6fc <LoRaMacInitialization+0x3d0>)
 800a600:	3b0c      	subs	r3, #12
 800a602:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800a604:	4f3e      	ldr	r7, [pc, #248]	; (800a700 <LoRaMacInitialization+0x3d4>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a606:	4a3f      	ldr	r2, [pc, #252]	; (800a704 <LoRaMacInitialization+0x3d8>)
 800a608:	3308      	adds	r3, #8
 800a60a:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	483e      	ldr	r0, [pc, #248]	; (800a708 <LoRaMacInitialization+0x3dc>)
 800a610:	9303      	str	r3, [sp, #12]
 800a612:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800a614:	483d      	ldr	r0, [pc, #244]	; (800a70c <LoRaMacInitialization+0x3e0>)
 800a616:	f7fd fa09 	bl	8007a2c <SecureElementInit>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d003      	beq.n	800a626 <LoRaMacInitialization+0x2fa>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a61e:	2511      	movs	r5, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800a620:	0028      	movs	r0, r5
 800a622:	b017      	add	sp, #92	; 0x5c
 800a624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800a626:	483a      	ldr	r0, [pc, #232]	; (800a710 <LoRaMacInitialization+0x3e4>)
 800a628:	f001 faea 	bl	800bc00 <LoRaMacCryptoInit>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d1f6      	bne.n	800a61e <LoRaMacInitialization+0x2f2>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800a630:	4838      	ldr	r0, [pc, #224]	; (800a714 <LoRaMacInitialization+0x3e8>)
 800a632:	f000 ffb1 	bl	800b598 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a636:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800a638:	2800      	cmp	r0, #0
 800a63a:	d1f1      	bne.n	800a620 <LoRaMacInitialization+0x2f4>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a63c:	59a0      	ldr	r0, [r4, r6]
 800a63e:	3050      	adds	r0, #80	; 0x50
 800a640:	f001 fb70 	bl	800bd24 <LoRaMacCryptoSetMulticastReference>
 800a644:	1e05      	subs	r5, r0, #0
 800a646:	d1ea      	bne.n	800a61e <LoRaMacInitialization+0x2f2>
    srand1( Radio.Random( ) );
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	9303      	str	r3, [sp, #12]
 800a64c:	4798      	blx	r3
 800a64e:	f002 ff15 	bl	800d47c <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800a652:	59a3      	ldr	r3, [r4, r6]
 800a654:	337d      	adds	r3, #125	; 0x7d
 800a656:	7818      	ldrb	r0, [r3, #0]
 800a658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a65a:	9303      	str	r3, [sp, #12]
 800a65c:	4798      	blx	r3
    Radio.Sleep( );
 800a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a660:	9303      	str	r3, [sp, #12]
 800a662:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800a664:	9b02      	ldr	r3, [sp, #8]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800a666:	a90a      	add	r1, sp, #40	; 0x28
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800a668:	685b      	ldr	r3, [r3, #4]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800a66a:	a80e      	add	r0, sp, #56	; 0x38
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800a66c:	9303      	str	r3, [sp, #12]
 800a66e:	930a      	str	r3, [sp, #40]	; 0x28
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800a670:	9b02      	ldr	r3, [sp, #8]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	9302      	str	r3, [sp, #8]
 800a676:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800a678:	4b27      	ldr	r3, [pc, #156]	; (800a718 <LoRaMacInitialization+0x3ec>)
 800a67a:	930e      	str	r3, [sp, #56]	; 0x38
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800a67c:	4b27      	ldr	r3, [pc, #156]	; (800a71c <LoRaMacInitialization+0x3f0>)
 800a67e:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800a680:	4b27      	ldr	r3, [pc, #156]	; (800a720 <LoRaMacInitialization+0x3f4>)
 800a682:	9310      	str	r3, [sp, #64]	; 0x40
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800a684:	4b27      	ldr	r3, [pc, #156]	; (800a724 <LoRaMacInitialization+0x3f8>)
 800a686:	9311      	str	r3, [sp, #68]	; 0x44
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800a688:	59a3      	ldr	r3, [r4, r6]
 800a68a:	001a      	movs	r2, r3
 800a68c:	324c      	adds	r2, #76	; 0x4c
 800a68e:	9212      	str	r2, [sp, #72]	; 0x48
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800a690:	3238      	adds	r2, #56	; 0x38
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800a692:	9313      	str	r3, [sp, #76]	; 0x4c
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800a694:	9214      	str	r2, [sp, #80]	; 0x50
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800a696:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800a698:	4a23      	ldr	r2, [pc, #140]	; (800a728 <LoRaMacInitialization+0x3fc>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800a69a:	9315      	str	r3, [sp, #84]	; 0x54
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800a69c:	f000 ff45 	bl	800b52a <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	4b22      	ldr	r3, [pc, #136]	; (800a72c <LoRaMacInitialization+0x400>)
 800a6a4:	54e2      	strb	r2, [r4, r3]
    return LORAMAC_STATUS_OK;
 800a6a6:	e7bb      	b.n	800a620 <LoRaMacInitialization+0x2f4>
 800a6a8:	08008931 	.word	0x08008931
 800a6ac:	20000668 	.word	0x20000668
 800a6b0:	200007d4 	.word	0x200007d4
 800a6b4:	0000048c 	.word	0x0000048c
 800a6b8:	00000412 	.word	0x00000412
 800a6bc:	00000411 	.word	0x00000411
 800a6c0:	00000484 	.word	0x00000484
 800a6c4:	01000300 	.word	0x01000300
 800a6c8:	000003f6 	.word	0x000003f6
 800a6cc:	00000481 	.word	0x00000481
 800a6d0:	20000b3c 	.word	0x20000b3c
 800a6d4:	080090ad 	.word	0x080090ad
 800a6d8:	080092c9 	.word	0x080092c9
 800a6dc:	20000b54 	.word	0x20000b54
 800a6e0:	08009329 	.word	0x08009329
 800a6e4:	20000b6c 	.word	0x20000b6c
 800a6e8:	08008979 	.word	0x08008979
 800a6ec:	20000bcc 	.word	0x20000bcc
 800a6f0:	08008cb1 	.word	0x08008cb1
 800a6f4:	08008c59 	.word	0x08008c59
 800a6f8:	0800882d 	.word	0x0800882d
 800a6fc:	08008c1d 	.word	0x08008c1d
 800a700:	08012ccc 	.word	0x08012ccc
 800a704:	08008be1 	.word	0x08008be1
 800a708:	20000b20 	.word	0x20000b20
 800a70c:	08008913 	.word	0x08008913
 800a710:	08008909 	.word	0x08008909
 800a714:	0800891d 	.word	0x0800891d
 800a718:	20000c38 	.word	0x20000c38
 800a71c:	20000bf0 	.word	0x20000bf0
 800a720:	20000c24 	.word	0x20000c24
 800a724:	20000c55 	.word	0x20000c55
 800a728:	08008927 	.word	0x08008927
 800a72c:	00000482 	.word	0x00000482

0800a730 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800a730:	23d0      	movs	r3, #208	; 0xd0
 800a732:	2000      	movs	r0, #0
 800a734:	4a01      	ldr	r2, [pc, #4]	; (800a73c <LoRaMacStart+0xc>)
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 800a73a:	4770      	bx	lr
 800a73c:	200007d4 	.word	0x200007d4

0800a740 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a742:	b089      	sub	sp, #36	; 0x24
 800a744:	0005      	movs	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800a746:	4668      	mov	r0, sp
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a748:	4a29      	ldr	r2, [pc, #164]	; (800a7f0 <LoRaMacQueryTxPossible+0xb0>)
 800a74a:	4b2a      	ldr	r3, [pc, #168]	; (800a7f4 <LoRaMacQueryTxPossible+0xb4>)
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    size_t macCmdsSize = 0;
 800a74c:	2700      	movs	r7, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a74e:	58d3      	ldr	r3, [r2, r3]
{
 800a750:	000c      	movs	r4, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a752:	1d1a      	adds	r2, r3, #4
 800a754:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
 800a756:	9601      	str	r6, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800a758:	795a      	ldrb	r2, [r3, #5]
 800a75a:	7082      	strb	r2, [r0, #2]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800a75c:	466a      	mov	r2, sp
 800a75e:	7918      	ldrb	r0, [r3, #4]
 800a760:	3203      	adds	r2, #3
 800a762:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 800a764:	9702      	str	r7, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a766:	2003      	movs	r0, #3
    if( txInfo == NULL )
 800a768:	42b9      	cmp	r1, r7
 800a76a:	d038      	beq.n	800a7de <LoRaMacQueryTxPossible+0x9e>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800a76c:	21fc      	movs	r1, #252	; 0xfc
 800a76e:	468c      	mov	ip, r1
 800a770:	449c      	add	ip, r3
 800a772:	4661      	mov	r1, ip
 800a774:	a803      	add	r0, sp, #12
    adrNext.UpdateChanMask = false;
 800a776:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a778:	001f      	movs	r7, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 800a77a:	6e49      	ldr	r1, [r1, #100]	; 0x64
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a77c:	377e      	adds	r7, #126	; 0x7e
    adrNext.Version = MacCtx.NvmCtx->Version;
 800a77e:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a780:	783f      	ldrb	r7, [r7, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a782:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a784:	26fd      	movs	r6, #253	; 0xfd
 800a786:	491a      	ldr	r1, [pc, #104]	; (800a7f0 <LoRaMacQueryTxPossible+0xb0>)
 800a788:	00b6      	lsls	r6, r6, #2
 800a78a:	5989      	ldr	r1, [r1, r6]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a78c:	7147      	strb	r7, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a78e:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a790:	0019      	movs	r1, r3
 800a792:	3184      	adds	r1, #132	; 0x84
 800a794:	8809      	ldrh	r1, [r1, #0]
 800a796:	ba49      	rev16	r1, r1
 800a798:	8201      	strh	r1, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a79a:	0019      	movs	r1, r3
 800a79c:	31b8      	adds	r1, #184	; 0xb8
 800a79e:	7809      	ldrb	r1, [r1, #0]
 800a7a0:	7481      	strb	r1, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a7a2:	4669      	mov	r1, sp
    adrNext.Region = MacCtx.NvmCtx->Region;
 800a7a4:	781b      	ldrb	r3, [r3, #0]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a7a6:	3102      	adds	r1, #2
    adrNext.Region = MacCtx.NvmCtx->Region;
 800a7a8:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a7aa:	ab01      	add	r3, sp, #4
 800a7ac:	f000 fe54 	bl	800b458 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a7b0:	466b      	mov	r3, sp
 800a7b2:	2002      	movs	r0, #2
 800a7b4:	5618      	ldrsb	r0, [r3, r0]
 800a7b6:	f7fe f8c1 	bl	800893c <GetMaxAppPayloadWithoutFOptsLength>
 800a7ba:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a7bc:	a802      	add	r0, sp, #8
 800a7be:	f000 ffb7 	bl	800b730 <LoRaMacCommandsGetSizeSerializedCmds>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d111      	bne.n	800a7ea <LoRaMacQueryTxPossible+0xaa>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a7c6:	9b02      	ldr	r3, [sp, #8]
 800a7c8:	2b0f      	cmp	r3, #15
 800a7ca:	d80a      	bhi.n	800a7e2 <LoRaMacQueryTxPossible+0xa2>
 800a7cc:	7862      	ldrb	r2, [r4, #1]
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d807      	bhi.n	800a7e2 <LoRaMacQueryTxPossible+0xa2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a7d2:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a7d4:	18ed      	adds	r5, r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a7d6:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a7d8:	42aa      	cmp	r2, r5
 800a7da:	d200      	bcs.n	800a7de <LoRaMacQueryTxPossible+0x9e>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a7dc:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a7de:	b009      	add	sp, #36	; 0x24
 800a7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a7e2:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a7e4:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a7e6:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a7e8:	e7f9      	b.n	800a7de <LoRaMacQueryTxPossible+0x9e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a7ea:	2013      	movs	r0, #19
 800a7ec:	e7f7      	b.n	800a7de <LoRaMacQueryTxPossible+0x9e>
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	200007d4 	.word	0x200007d4
 800a7f4:	00000484 	.word	0x00000484

0800a7f8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800a7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7fa:	0004      	movs	r4, r0
 800a7fc:	b085      	sub	sp, #20
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a7fe:	2003      	movs	r0, #3
    if( mibGet == NULL )
 800a800:	2c00      	cmp	r4, #0
 800a802:	d034      	beq.n	800a86e <LoRaMacMibGetRequestConfirm+0x76>
    }

    switch( mibGet->Type )
 800a804:	7820      	ldrb	r0, [r4, #0]
 800a806:	2828      	cmp	r0, #40	; 0x28
 800a808:	d900      	bls.n	800a80c <LoRaMacMibGetRequestConfirm+0x14>
 800a80a:	e107      	b.n	800aa1c <LoRaMacMibGetRequestConfirm+0x224>
 800a80c:	f7f5 fca2 	bl	8000154 <__gnu_thumb1_case_uhi>
 800a810:	00310029 	.word	0x00310029
 800a814:	003e0039 	.word	0x003e0039
 800a818:	00470041 	.word	0x00470041
 800a81c:	0106004d 	.word	0x0106004d
 800a820:	01060106 	.word	0x01060106
 800a824:	01060106 	.word	0x01060106
 800a828:	01060106 	.word	0x01060106
 800a82c:	00520106 	.word	0x00520106
 800a830:	005c0057 	.word	0x005c0057
 800a834:	006c0066 	.word	0x006c0066
 800a838:	00790074 	.word	0x00790074
 800a83c:	007f0082 	.word	0x007f0082
 800a840:	008a0085 	.word	0x008a0085
 800a844:	00950090 	.word	0x00950090
 800a848:	009f009a 	.word	0x009f009a
 800a84c:	00a900a4 	.word	0x00a900a4
 800a850:	00ae00b3 	.word	0x00ae00b3
 800a854:	00bd00b8 	.word	0x00bd00b8
 800a858:	00f700c2 	.word	0x00f700c2
 800a85c:	010600c9 	.word	0x010600c9
 800a860:	00fc      	.short	0x00fc
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800a862:	4a70      	ldr	r2, [pc, #448]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a864:	4b70      	ldr	r3, [pc, #448]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a866:	58d3      	ldr	r3, [r2, r3]
 800a868:	337c      	adds	r3, #124	; 0x7c
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a86e:	b005      	add	sp, #20
 800a870:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800a872:	4b6d      	ldr	r3, [pc, #436]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a874:	4a6b      	ldr	r2, [pc, #428]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a876:	58d2      	ldr	r2, [r2, r3]
 800a878:	23b2      	movs	r3, #178	; 0xb2
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	5cd3      	ldrb	r3, [r2, r3]
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800a87e:	7123      	strb	r3, [r4, #4]
            break;
 800a880:	e002      	b.n	800a888 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a882:	f7fd fae1 	bl	8007e48 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a886:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a888:	2000      	movs	r0, #0
            break;
 800a88a:	e7f0      	b.n	800a86e <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a88c:	f7fd faf2 	bl	8007e74 <SecureElementGetJoinEui>
 800a890:	e7f9      	b.n	800a886 <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800a892:	4a64      	ldr	r2, [pc, #400]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a894:	4b64      	ldr	r3, [pc, #400]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a896:	58d3      	ldr	r3, [r2, r3]
 800a898:	337e      	adds	r3, #126	; 0x7e
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	e7ef      	b.n	800a87e <LoRaMacMibGetRequestConfirm+0x86>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800a89e:	4a61      	ldr	r2, [pc, #388]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a8a0:	4b61      	ldr	r3, [pc, #388]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a8a2:	58d3      	ldr	r3, [r2, r3]
 800a8a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800a8a6:	6063      	str	r3, [r4, #4]
 800a8a8:	e7ee      	b.n	800a888 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800a8aa:	4a5e      	ldr	r2, [pc, #376]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a8ac:	4b5e      	ldr	r3, [pc, #376]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a8ae:	58d3      	ldr	r3, [r2, r3]
 800a8b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b2:	e7f8      	b.n	800a8a6 <LoRaMacMibGetRequestConfirm+0xae>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800a8b4:	4a5b      	ldr	r2, [pc, #364]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a8b6:	4b5c      	ldr	r3, [pc, #368]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a8b8:	58d3      	ldr	r3, [r2, r3]
 800a8ba:	337d      	adds	r3, #125	; 0x7d
 800a8bc:	e7ed      	b.n	800a89a <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800a8be:	4a59      	ldr	r2, [pc, #356]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a8c0:	4b59      	ldr	r3, [pc, #356]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a8c2:	58d3      	ldr	r3, [r2, r3]
 800a8c4:	33ca      	adds	r3, #202	; 0xca
 800a8c6:	e7e8      	b.n	800a89a <LoRaMacMibGetRequestConfirm+0xa2>
            getPhy.Attribute = PHY_CHANNELS;
 800a8c8:	231d      	movs	r3, #29
 800a8ca:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a8cc:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8ce:	4a55      	ldr	r2, [pc, #340]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a8d0:	4b55      	ldr	r3, [pc, #340]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a8d2:	58d3      	ldr	r3, [r2, r3]
 800a8d4:	7818      	ldrb	r0, [r3, #0]
 800a8d6:	f001 fd0e 	bl	800c2f6 <RegionGetPhyParam>
 800a8da:	e7d4      	b.n	800a886 <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800a8dc:	4a51      	ldr	r2, [pc, #324]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a8de:	4b52      	ldr	r3, [pc, #328]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a8e0:	58d3      	ldr	r3, [r2, r3]
 800a8e2:	33a8      	adds	r3, #168	; 0xa8
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800a8e4:	3404      	adds	r4, #4
 800a8e6:	e004      	b.n	800a8f2 <LoRaMacMibGetRequestConfirm+0xfa>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800a8e8:	4a4e      	ldr	r2, [pc, #312]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a8ea:	4b4f      	ldr	r3, [pc, #316]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a8ec:	3404      	adds	r4, #4
 800a8ee:	58d3      	ldr	r3, [r2, r3]
 800a8f0:	3328      	adds	r3, #40	; 0x28
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800a8f2:	cb06      	ldmia	r3!, {r1, r2}
 800a8f4:	c406      	stmia	r4!, {r1, r2}
            break;
 800a8f6:	e7c7      	b.n	800a888 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800a8f8:	4a4a      	ldr	r2, [pc, #296]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a8fa:	4b4b      	ldr	r3, [pc, #300]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a8fc:	58d3      	ldr	r3, [r2, r3]
 800a8fe:	33b0      	adds	r3, #176	; 0xb0
 800a900:	e7f0      	b.n	800a8e4 <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800a902:	4a48      	ldr	r2, [pc, #288]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a904:	4b48      	ldr	r3, [pc, #288]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a906:	3404      	adds	r4, #4
 800a908:	58d3      	ldr	r3, [r2, r3]
 800a90a:	3330      	adds	r3, #48	; 0x30
 800a90c:	e7f1      	b.n	800a8f2 <LoRaMacMibGetRequestConfirm+0xfa>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a90e:	231b      	movs	r3, #27
 800a910:	a902      	add	r1, sp, #8
 800a912:	e7db      	b.n	800a8cc <LoRaMacMibGetRequestConfirm+0xd4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a914:	231a      	movs	r3, #26
 800a916:	a902      	add	r1, sp, #8
 800a918:	e7d8      	b.n	800a8cc <LoRaMacMibGetRequestConfirm+0xd4>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800a91a:	4a42      	ldr	r2, [pc, #264]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a91c:	4b42      	ldr	r3, [pc, #264]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a91e:	58d3      	ldr	r3, [r2, r3]
 800a920:	33a4      	adds	r3, #164	; 0xa4
 800a922:	e7ba      	b.n	800a89a <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800a924:	4a3f      	ldr	r2, [pc, #252]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a926:	4b40      	ldr	r3, [pc, #256]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a928:	58d3      	ldr	r3, [r2, r3]
 800a92a:	3390      	adds	r3, #144	; 0x90
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	e7ba      	b.n	800a8a6 <LoRaMacMibGetRequestConfirm+0xae>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800a930:	4a3c      	ldr	r2, [pc, #240]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a932:	4b3d      	ldr	r3, [pc, #244]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a934:	58d3      	ldr	r3, [r2, r3]
 800a936:	3394      	adds	r3, #148	; 0x94
 800a938:	e7f8      	b.n	800a92c <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800a93a:	4a3a      	ldr	r2, [pc, #232]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a93c:	4b3a      	ldr	r3, [pc, #232]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a93e:	58d3      	ldr	r3, [r2, r3]
 800a940:	3398      	adds	r3, #152	; 0x98
 800a942:	e7f3      	b.n	800a92c <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800a944:	4a37      	ldr	r2, [pc, #220]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a946:	4b38      	ldr	r3, [pc, #224]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a948:	58d3      	ldr	r3, [r2, r3]
 800a94a:	339c      	adds	r3, #156	; 0x9c
 800a94c:	e7ee      	b.n	800a92c <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800a94e:	4a35      	ldr	r2, [pc, #212]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a950:	4b35      	ldr	r3, [pc, #212]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a952:	58d3      	ldr	r3, [r2, r3]
 800a954:	33a0      	adds	r3, #160	; 0xa0
 800a956:	e7e9      	b.n	800a92c <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800a958:	4a32      	ldr	r2, [pc, #200]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a95a:	4b33      	ldr	r3, [pc, #204]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a95c:	58d3      	ldr	r3, [r2, r3]
 800a95e:	795b      	ldrb	r3, [r3, #5]
 800a960:	e78d      	b.n	800a87e <LoRaMacMibGetRequestConfirm+0x86>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a962:	4a30      	ldr	r2, [pc, #192]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a964:	4b30      	ldr	r3, [pc, #192]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a966:	58d3      	ldr	r3, [r2, r3]
 800a968:	3385      	adds	r3, #133	; 0x85
 800a96a:	e796      	b.n	800a89a <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800a96c:	4a2d      	ldr	r2, [pc, #180]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a96e:	4b2e      	ldr	r3, [pc, #184]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a970:	58d3      	ldr	r3, [r2, r3]
 800a972:	791b      	ldrb	r3, [r3, #4]
 800a974:	e783      	b.n	800a87e <LoRaMacMibGetRequestConfirm+0x86>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800a976:	4a2b      	ldr	r2, [pc, #172]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a978:	4b2b      	ldr	r3, [pc, #172]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a97a:	58d3      	ldr	r3, [r2, r3]
 800a97c:	3384      	adds	r3, #132	; 0x84
 800a97e:	e78c      	b.n	800a89a <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800a980:	4a28      	ldr	r2, [pc, #160]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a982:	4b29      	ldr	r3, [pc, #164]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a984:	58d3      	ldr	r3, [r2, r3]
 800a986:	3388      	adds	r3, #136	; 0x88
 800a988:	e7d0      	b.n	800a92c <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800a98a:	4a26      	ldr	r2, [pc, #152]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a98c:	4b26      	ldr	r3, [pc, #152]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a98e:	58d3      	ldr	r3, [r2, r3]
 800a990:	338c      	adds	r3, #140	; 0x8c
 800a992:	e782      	b.n	800a89a <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800a994:	4a23      	ldr	r2, [pc, #140]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a996:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a998:	58d3      	ldr	r3, [r2, r3]
 800a99a:	33c0      	adds	r3, #192	; 0xc0
 800a99c:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800a99e:	6063      	str	r3, [r4, #4]
 800a9a0:	e772      	b.n	800a888 <LoRaMacMibGetRequestConfirm+0x90>
    Contexts.MacNvmCtx = &NvmMacCtx;
 800a9a2:	4e22      	ldr	r6, [pc, #136]	; (800aa2c <LoRaMacMibGetRequestConfirm+0x234>)
 800a9a4:	4b22      	ldr	r3, [pc, #136]	; (800aa30 <LoRaMacMibGetRequestConfirm+0x238>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800a9a6:	0030      	movs	r0, r6
    Contexts.MacNvmCtx = &NvmMacCtx;
 800a9a8:	6073      	str	r3, [r6, #4]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800a9aa:	23b6      	movs	r3, #182	; 0xb6
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800a9ac:	3018      	adds	r0, #24
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	60b3      	str	r3, [r6, #8]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800a9b2:	f001 f963 	bl	800bc7c <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 800a9b6:	2500      	movs	r5, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800a9b8:	4a1a      	ldr	r2, [pc, #104]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a9ba:	4b1b      	ldr	r3, [pc, #108]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800a9bc:	a902      	add	r1, sp, #8
 800a9be:	58d3      	ldr	r3, [r2, r3]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800a9c0:	6170      	str	r0, [r6, #20]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800a9c2:	7818      	ldrb	r0, [r3, #0]
    GetNvmCtxParams_t params ={ 0 };
 800a9c4:	9502      	str	r5, [sp, #8]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800a9c6:	f001 fcb0 	bl	800c32a <RegionGetNvmCtx>
 800a9ca:	60f0      	str	r0, [r6, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800a9cc:	0030      	movs	r0, r6
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800a9ce:	9b02      	ldr	r3, [sp, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800a9d0:	3020      	adds	r0, #32
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800a9d2:	6133      	str	r3, [r6, #16]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800a9d4:	f7fd f91c 	bl	8007c10 <SecureElementGetNvmCtx>
 800a9d8:	61f0      	str	r0, [r6, #28]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800a9da:	0030      	movs	r0, r6
 800a9dc:	3028      	adds	r0, #40	; 0x28
 800a9de:	f000 fdfb 	bl	800b5d8 <LoRaMacCommandsGetNvmCtx>
 800a9e2:	6270      	str	r0, [r6, #36]	; 0x24
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800a9e4:	0030      	movs	r0, r6
 800a9e6:	3030      	adds	r0, #48	; 0x30
 800a9e8:	f000 fda2 	bl	800b530 <LoRaMacClassBGetNvmCtx>
 800a9ec:	62f0      	str	r0, [r6, #44]	; 0x2c
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800a9ee:	0030      	movs	r0, r6
 800a9f0:	3038      	adds	r0, #56	; 0x38
 800a9f2:	f000 ff3f 	bl	800b874 <LoRaMacConfirmQueueGetNvmCtx>
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800a9f6:	1d37      	adds	r7, r6, #4
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800a9f8:	6370      	str	r0, [r6, #52]	; 0x34
            mibGet->Param.Contexts = GetCtxs( );
 800a9fa:	6067      	str	r7, [r4, #4]
            break;
 800a9fc:	e744      	b.n	800a888 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800a9fe:	4a09      	ldr	r2, [pc, #36]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800aa00:	4b09      	ldr	r3, [pc, #36]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800aa02:	58d3      	ldr	r3, [r2, r3]
 800aa04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa06:	e7ca      	b.n	800a99e <LoRaMacMibGetRequestConfirm+0x1a6>
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 800aa08:	4a06      	ldr	r2, [pc, #24]	; (800aa24 <LoRaMacMibGetRequestConfirm+0x22c>)
 800aa0a:	4b07      	ldr	r3, [pc, #28]	; (800aa28 <LoRaMacMibGetRequestConfirm+0x230>)
 800aa0c:	58d3      	ldr	r3, [r2, r3]
 800aa0e:	33fc      	adds	r3, #252	; 0xfc
 800aa10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa12:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800aa14:	f001 fd3a 	bl	800c48c <RegionGetVersion>
 800aa18:	60a0      	str	r0, [r4, #8]
            break;
 800aa1a:	e735      	b.n	800a888 <LoRaMacMibGetRequestConfirm+0x90>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800aa1c:	0020      	movs	r0, r4
 800aa1e:	f000 fda2 	bl	800b566 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800aa22:	e724      	b.n	800a86e <LoRaMacMibGetRequestConfirm+0x76>
 800aa24:	200007d4 	.word	0x200007d4
 800aa28:	00000484 	.word	0x00000484
 800aa2c:	2000062c 	.word	0x2000062c
 800aa30:	20000668 	.word	0x20000668

0800aa34 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	0004      	movs	r4, r0
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aa38:	2603      	movs	r6, #3
{
 800aa3a:	b086      	sub	sp, #24
    if( mibSet == NULL )
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d06b      	beq.n	800ab18 <LoRaMacMibSetRequestConfirm+0xe4>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800aa40:	23d0      	movs	r3, #208	; 0xd0
 800aa42:	4db9      	ldr	r5, [pc, #740]	; (800ad28 <LoRaMacMibSetRequestConfirm+0x2f4>)
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 800aa48:	3e02      	subs	r6, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800aa4a:	079a      	lsls	r2, r3, #30
 800aa4c:	d464      	bmi.n	800ab18 <LoRaMacMibSetRequestConfirm+0xe4>
    }

    switch( mibSet->Type )
 800aa4e:	7800      	ldrb	r0, [r0, #0]
 800aa50:	2827      	cmp	r0, #39	; 0x27
 800aa52:	d900      	bls.n	800aa56 <LoRaMacMibSetRequestConfirm+0x22>
 800aa54:	e20a      	b.n	800ae6c <LoRaMacMibSetRequestConfirm+0x438>
 800aa56:	f7f5 fb7d 	bl	8000154 <__gnu_thumb1_case_uhi>
 800aa5a:	0028      	.short	0x0028
 800aa5c:	0037002d 	.word	0x0037002d
 800aa60:	00460042 	.word	0x00460042
 800aa64:	0051004c 	.word	0x0051004c
 800aa68:	00620056 	.word	0x00620056
 800aa6c:	006c0067 	.word	0x006c0067
 800aa70:	00760071 	.word	0x00760071
 800aa74:	0080007b 	.word	0x0080007b
 800aa78:	00920085 	.word	0x00920085
 800aa7c:	00960209 	.word	0x00960209
 800aa80:	00ce00b9 	.word	0x00ce00b9
 800aa84:	011b00f8 	.word	0x011b00f8
 800aa88:	0120010d 	.word	0x0120010d
 800aa8c:	012f0129 	.word	0x012f0129
 800aa90:	01370133 	.word	0x01370133
 800aa94:	013f013b 	.word	0x013f013b
 800aa98:	017f0151 	.word	0x017f0151
 800aa9c:	0191016d 	.word	0x0191016d
 800aaa0:	019d0197 	.word	0x019d0197
 800aaa4:	01a801a3 	.word	0x01a801a3
 800aaa8:	01fc      	.short	0x01fc
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800aaaa:	7920      	ldrb	r0, [r4, #4]
 800aaac:	f7fe fb6a 	bl	8009184 <SwitchClass>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800aab0:	0006      	movs	r6, r0
            break;
 800aab2:	e00f      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800aab4:	7923      	ldrb	r3, [r4, #4]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d00b      	beq.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800aaba:	4a9c      	ldr	r2, [pc, #624]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800aabc:	58a9      	ldr	r1, [r5, r2]
 800aabe:	22b2      	movs	r2, #178	; 0xb2
 800aac0:	0052      	lsls	r2, r2, #1
 800aac2:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aac4:	2600      	movs	r6, #0
            break;
 800aac6:	e005      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0xa0>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800aac8:	6860      	ldr	r0, [r4, #4]
 800aaca:	f7fd f9ab 	bl	8007e24 <SecureElementSetDevEui>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d0f8      	beq.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aad2:	2603      	movs	r6, #3
        }
    }
    EventRegionNvmCtxChanged( );
 800aad4:	f7fd ff13 	bl	80088fe <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800aad8:	f7fd ff0c 	bl	80088f4 <EventMacNvmCtxChanged>
    return status;
 800aadc:	e01c      	b.n	800ab18 <LoRaMacMibSetRequestConfirm+0xe4>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800aade:	6860      	ldr	r0, [r4, #4]
 800aae0:	f7fd f9b6 	bl	8007e50 <SecureElementSetJoinEui>
 800aae4:	e7f3      	b.n	800aace <LoRaMacMibSetRequestConfirm+0x9a>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800aae6:	4b91      	ldr	r3, [pc, #580]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800aae8:	58eb      	ldr	r3, [r5, r3]
 800aaea:	337e      	adds	r3, #126	; 0x7e
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800aaec:	7922      	ldrb	r2, [r4, #4]
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	e7e8      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800aaf2:	4b8e      	ldr	r3, [pc, #568]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800aaf4:	6862      	ldr	r2, [r4, #4]
 800aaf6:	58eb      	ldr	r3, [r5, r3]
 800aaf8:	649a      	str	r2, [r3, #72]	; 0x48
 800aafa:	e7e3      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800aafc:	4b8b      	ldr	r3, [pc, #556]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800aafe:	6862      	ldr	r2, [r4, #4]
 800ab00:	58eb      	ldr	r3, [r5, r3]
 800ab02:	64da      	str	r2, [r3, #76]	; 0x4c
 800ab04:	e7de      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            if( mibSet->Param.AppKey != NULL )
 800ab06:	6861      	ldr	r1, [r4, #4]
 800ab08:	2900      	cmp	r1, #0
 800ab0a:	d0e2      	beq.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	f001 fa31 	bl	800bf74 <LoRaMacCryptoSetKey>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ab12:	2611      	movs	r6, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d0d5      	beq.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
}
 800ab18:	0030      	movs	r0, r6
 800ab1a:	b006      	add	sp, #24
 800ab1c:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.NwkKey != NULL )
 800ab1e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800ab20:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 800ab22:	2900      	cmp	r1, #0
 800ab24:	d1f3      	bne.n	800ab0e <LoRaMacMibSetRequestConfirm+0xda>
 800ab26:	e7d4      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.NwkSKey != NULL )
 800ab28:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800ab2a:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d1ee      	bne.n	800ab0e <LoRaMacMibSetRequestConfirm+0xda>
 800ab30:	e7cf      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.AppSKey != NULL )
 800ab32:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ab34:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 800ab36:	2900      	cmp	r1, #0
 800ab38:	d1e9      	bne.n	800ab0e <LoRaMacMibSetRequestConfirm+0xda>
 800ab3a:	e7ca      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McKEKey != NULL )
 800ab3c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ab3e:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 800ab40:	2900      	cmp	r1, #0
 800ab42:	d1e4      	bne.n	800ab0e <LoRaMacMibSetRequestConfirm+0xda>
 800ab44:	e7c5      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McKey0 != NULL )
 800ab46:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ab48:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 800ab4a:	2900      	cmp	r1, #0
 800ab4c:	d1df      	bne.n	800ab0e <LoRaMacMibSetRequestConfirm+0xda>
 800ab4e:	e7c0      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McAppSKey0 != NULL )
 800ab50:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ab52:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d1da      	bne.n	800ab0e <LoRaMacMibSetRequestConfirm+0xda>
 800ab58:	e7bb      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ab5a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ab5c:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	d1d5      	bne.n	800ab0e <LoRaMacMibSetRequestConfirm+0xda>
 800ab62:	e7b6      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ab64:	4b71      	ldr	r3, [pc, #452]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800ab66:	7920      	ldrb	r0, [r4, #4]
 800ab68:	58eb      	ldr	r3, [r5, r3]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800ab6a:	4c71      	ldr	r4, [pc, #452]	; (800ad30 <LoRaMacMibSetRequestConfirm+0x2fc>)
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ab6c:	337d      	adds	r3, #125	; 0x7d
 800ab6e:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800ab70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	4798      	blx	r3
            Radio.Sleep( );
 800ab76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab78:	9301      	str	r3, [sp, #4]
 800ab7a:	4798      	blx	r3
            break;
 800ab7c:	e7a2      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ab7e:	4b6b      	ldr	r3, [pc, #428]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800ab80:	58eb      	ldr	r3, [r5, r3]
 800ab82:	33ca      	adds	r3, #202	; 0xca
 800ab84:	e7b2      	b.n	800aaec <LoRaMacMibSetRequestConfirm+0xb8>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ab86:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ab88:	4e68      	ldr	r6, [pc, #416]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ab8a:	aa02      	add	r2, sp, #8
 800ab8c:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ab8e:	59ab      	ldr	r3, [r5, r6]
 800ab90:	a902      	add	r1, sp, #8
 800ab92:	001a      	movs	r2, r3
 800ab94:	32b9      	adds	r2, #185	; 0xb9
 800ab96:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800ab98:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ab9a:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800ab9c:	2207      	movs	r2, #7
 800ab9e:	a903      	add	r1, sp, #12
 800aba0:	f001 fbcd 	bl	800c33e <RegionVerify>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d100      	bne.n	800abaa <LoRaMacMibSetRequestConfirm+0x176>
 800aba8:	e793      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800abaa:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800abac:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800abae:	9303      	str	r3, [sp, #12]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800abb0:	59ab      	ldr	r3, [r5, r6]
 800abb2:	a903      	add	r1, sp, #12
 800abb4:	7818      	ldrb	r0, [r3, #0]
 800abb6:	f001 fbc2 	bl	800c33e <RegionVerify>
 800abba:	2800      	cmp	r0, #0
 800abbc:	d100      	bne.n	800abc0 <LoRaMacMibSetRequestConfirm+0x18c>
 800abbe:	e788      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800abc0:	59ab      	ldr	r3, [r5, r6]
 800abc2:	33a8      	adds	r3, #168	; 0xa8
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800abc4:	3404      	adds	r4, #4
 800abc6:	cc06      	ldmia	r4!, {r1, r2}
 800abc8:	c306      	stmia	r3!, {r1, r2}
 800abca:	e77b      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800abcc:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800abce:	4e57      	ldr	r6, [pc, #348]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800abd0:	aa02      	add	r2, sp, #8
 800abd2:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800abd4:	59ab      	ldr	r3, [r5, r6]
 800abd6:	a902      	add	r1, sp, #8
 800abd8:	001a      	movs	r2, r3
 800abda:	32b9      	adds	r2, #185	; 0xb9
 800abdc:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800abde:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800abe0:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800abe2:	2207      	movs	r2, #7
 800abe4:	a903      	add	r1, sp, #12
 800abe6:	f001 fbaa 	bl	800c33e <RegionVerify>
 800abea:	2800      	cmp	r0, #0
 800abec:	d100      	bne.n	800abf0 <LoRaMacMibSetRequestConfirm+0x1bc>
 800abee:	e770      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800abf0:	59ab      	ldr	r3, [r5, r6]
 800abf2:	3328      	adds	r3, #40	; 0x28
 800abf4:	e7e6      	b.n	800abc4 <LoRaMacMibSetRequestConfirm+0x190>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800abf6:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800abf8:	4e4c      	ldr	r6, [pc, #304]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800abfa:	aa02      	add	r2, sp, #8
 800abfc:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800abfe:	59ab      	ldr	r3, [r5, r6]
 800ac00:	a902      	add	r1, sp, #8
 800ac02:	001a      	movs	r2, r3
 800ac04:	32b9      	adds	r2, #185	; 0xb9
 800ac06:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800ac08:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ac0a:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800ac0c:	2207      	movs	r2, #7
 800ac0e:	a903      	add	r1, sp, #12
 800ac10:	f001 fb95 	bl	800c33e <RegionVerify>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d100      	bne.n	800ac1a <LoRaMacMibSetRequestConfirm+0x1e6>
 800ac18:	e75b      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800ac1a:	59ab      	ldr	r3, [r5, r6]
 800ac1c:	3404      	adds	r4, #4
 800ac1e:	001a      	movs	r2, r3
 800ac20:	32b0      	adds	r2, #176	; 0xb0
 800ac22:	cc03      	ldmia	r4!, {r0, r1}
 800ac24:	c203      	stmia	r2!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ac26:	3a3c      	subs	r2, #60	; 0x3c
 800ac28:	7812      	ldrb	r2, [r2, #0]
 800ac2a:	2a02      	cmp	r2, #2
 800ac2c:	d000      	beq.n	800ac30 <LoRaMacMibSetRequestConfirm+0x1fc>
 800ac2e:	e749      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
 800ac30:	3263      	adds	r2, #99	; 0x63
 800ac32:	32ff      	adds	r2, #255	; 0xff
 800ac34:	5c9b      	ldrb	r3, [r3, r2]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d100      	bne.n	800ac3c <LoRaMacMibSetRequestConfirm+0x208>
 800ac3a:	e743      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
                    Radio.Sleep( );
 800ac3c:	4b3c      	ldr	r3, [pc, #240]	; (800ad30 <LoRaMacMibSetRequestConfirm+0x2fc>)
 800ac3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac40:	9301      	str	r3, [sp, #4]
 800ac42:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800ac44:	f7fe fa64 	bl	8009110 <OpenContinuousRxCWindow>
 800ac48:	e73c      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ac4a:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ac4c:	4e37      	ldr	r6, [pc, #220]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ac4e:	aa02      	add	r2, sp, #8
 800ac50:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ac52:	59ab      	ldr	r3, [r5, r6]
 800ac54:	a902      	add	r1, sp, #8
 800ac56:	001a      	movs	r2, r3
 800ac58:	32b9      	adds	r2, #185	; 0xb9
 800ac5a:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800ac5c:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ac5e:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800ac60:	2207      	movs	r2, #7
 800ac62:	a903      	add	r1, sp, #12
 800ac64:	f001 fb6b 	bl	800c33e <RegionVerify>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d100      	bne.n	800ac6e <LoRaMacMibSetRequestConfirm+0x23a>
 800ac6c:	e731      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ac6e:	59ab      	ldr	r3, [r5, r6]
 800ac70:	3330      	adds	r3, #48	; 0x30
 800ac72:	e7a7      	b.n	800abc4 <LoRaMacMibSetRequestConfirm+0x190>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800ac74:	6863      	ldr	r3, [r4, #4]
 800ac76:	a904      	add	r1, sp, #16
 800ac78:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800ac7a:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ac7c:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800ac7e:	4b2b      	ldr	r3, [pc, #172]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800ac80:	58eb      	ldr	r3, [r5, r3]
 800ac82:	7818      	ldrb	r0, [r3, #0]
 800ac84:	f001 fb6e 	bl	800c364 <RegionChanMaskSet>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d000      	beq.n	800ac8e <LoRaMacMibSetRequestConfirm+0x25a>
 800ac8c:	e71a      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
 800ac8e:	e720      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ac90:	6863      	ldr	r3, [r4, #4]
 800ac92:	a904      	add	r1, sp, #16
 800ac94:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	e7f0      	b.n	800ac7c <LoRaMacMibSetRequestConfirm+0x248>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ac9a:	7922      	ldrb	r2, [r4, #4]
 800ac9c:	1e53      	subs	r3, r2, #1
 800ac9e:	2b0e      	cmp	r3, #14
 800aca0:	d900      	bls.n	800aca4 <LoRaMacMibSetRequestConfirm+0x270>
 800aca2:	e716      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800aca4:	4b21      	ldr	r3, [pc, #132]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800aca6:	58eb      	ldr	r3, [r5, r3]
 800aca8:	33a4      	adds	r3, #164	; 0xa4
 800acaa:	e720      	b.n	800aaee <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800acac:	4b1f      	ldr	r3, [pc, #124]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800acae:	58eb      	ldr	r3, [r5, r3]
 800acb0:	3390      	adds	r3, #144	; 0x90
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800acb2:	6862      	ldr	r2, [r4, #4]
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800acb4:	601a      	str	r2, [r3, #0]
 800acb6:	e705      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800acb8:	4b1c      	ldr	r3, [pc, #112]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800acba:	58eb      	ldr	r3, [r5, r3]
 800acbc:	3394      	adds	r3, #148	; 0x94
 800acbe:	e7f8      	b.n	800acb2 <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800acc0:	4b1a      	ldr	r3, [pc, #104]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800acc2:	58eb      	ldr	r3, [r5, r3]
 800acc4:	3398      	adds	r3, #152	; 0x98
 800acc6:	e7f4      	b.n	800acb2 <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800acc8:	4b18      	ldr	r3, [pc, #96]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800acca:	58eb      	ldr	r3, [r5, r3]
 800accc:	339c      	adds	r3, #156	; 0x9c
 800acce:	e7f0      	b.n	800acb2 <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800acd0:	4b16      	ldr	r3, [pc, #88]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
 800acd2:	58eb      	ldr	r3, [r5, r3]
 800acd4:	33a0      	adds	r3, #160	; 0xa0
 800acd6:	e7ec      	b.n	800acb2 <LoRaMacMibSetRequestConfirm+0x27e>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800acd8:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800acda:	4c14      	ldr	r4, [pc, #80]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800acdc:	aa02      	add	r2, sp, #8
 800acde:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800ace0:	592b      	ldr	r3, [r5, r4]
 800ace2:	2206      	movs	r2, #6
 800ace4:	7818      	ldrb	r0, [r3, #0]
 800ace6:	a903      	add	r1, sp, #12
 800ace8:	f001 fb29 	bl	800c33e <RegionVerify>
 800acec:	2800      	cmp	r0, #0
 800acee:	d100      	bne.n	800acf2 <LoRaMacMibSetRequestConfirm+0x2be>
 800acf0:	e6ef      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800acf2:	aa02      	add	r2, sp, #8
 800acf4:	592b      	ldr	r3, [r5, r4]
 800acf6:	7912      	ldrb	r2, [r2, #4]
 800acf8:	715a      	strb	r2, [r3, #5]
 800acfa:	e6e3      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800acfc:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800acfe:	4c0b      	ldr	r4, [pc, #44]	; (800ad2c <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ad00:	ae03      	add	r6, sp, #12
 800ad02:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ad04:	592b      	ldr	r3, [r5, r4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800ad06:	0031      	movs	r1, r6
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ad08:	001a      	movs	r2, r3
 800ad0a:	32b8      	adds	r2, #184	; 0xb8
 800ad0c:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800ad0e:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ad10:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800ad12:	2205      	movs	r2, #5
 800ad14:	f001 fb13 	bl	800c33e <RegionVerify>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d100      	bne.n	800ad1e <LoRaMacMibSetRequestConfirm+0x2ea>
 800ad1c:	e6d9      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ad1e:	592b      	ldr	r3, [r5, r4]
 800ad20:	7832      	ldrb	r2, [r6, #0]
 800ad22:	3385      	adds	r3, #133	; 0x85
 800ad24:	e6e3      	b.n	800aaee <LoRaMacMibSetRequestConfirm+0xba>
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	200007d4 	.word	0x200007d4
 800ad2c:	00000484 	.word	0x00000484
 800ad30:	08012ccc 	.word	0x08012ccc
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800ad34:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800ad36:	4c4f      	ldr	r4, [pc, #316]	; (800ae74 <LoRaMacMibSetRequestConfirm+0x440>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800ad38:	aa02      	add	r2, sp, #8
 800ad3a:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800ad3c:	592b      	ldr	r3, [r5, r4]
 800ad3e:	220a      	movs	r2, #10
 800ad40:	7818      	ldrb	r0, [r3, #0]
 800ad42:	a903      	add	r1, sp, #12
 800ad44:	f001 fafb 	bl	800c33e <RegionVerify>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d100      	bne.n	800ad4e <LoRaMacMibSetRequestConfirm+0x31a>
 800ad4c:	e6c1      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800ad4e:	aa02      	add	r2, sp, #8
 800ad50:	592b      	ldr	r3, [r5, r4]
 800ad52:	7912      	ldrb	r2, [r2, #4]
 800ad54:	711a      	strb	r2, [r3, #4]
 800ad56:	e6b5      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800ad58:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800ad5a:	4c46      	ldr	r4, [pc, #280]	; (800ae74 <LoRaMacMibSetRequestConfirm+0x440>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800ad5c:	aa02      	add	r2, sp, #8
 800ad5e:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800ad60:	592b      	ldr	r3, [r5, r4]
 800ad62:	2209      	movs	r2, #9
 800ad64:	7818      	ldrb	r0, [r3, #0]
 800ad66:	a903      	add	r1, sp, #12
 800ad68:	f001 fae9 	bl	800c33e <RegionVerify>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d100      	bne.n	800ad72 <LoRaMacMibSetRequestConfirm+0x33e>
 800ad70:	e6af      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800ad72:	592b      	ldr	r3, [r5, r4]
 800ad74:	aa02      	add	r2, sp, #8
 800ad76:	7912      	ldrb	r2, [r2, #4]
 800ad78:	3384      	adds	r3, #132	; 0x84
 800ad7a:	e6b8      	b.n	800aaee <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ad7c:	4b3d      	ldr	r3, [pc, #244]	; (800ae74 <LoRaMacMibSetRequestConfirm+0x440>)
 800ad7e:	6862      	ldr	r2, [r4, #4]
 800ad80:	58eb      	ldr	r3, [r5, r3]
 800ad82:	609a      	str	r2, [r3, #8]
 800ad84:	3388      	adds	r3, #136	; 0x88
 800ad86:	e795      	b.n	800acb4 <LoRaMacMibSetRequestConfirm+0x280>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800ad88:	4b3a      	ldr	r3, [pc, #232]	; (800ae74 <LoRaMacMibSetRequestConfirm+0x440>)
 800ad8a:	7922      	ldrb	r2, [r4, #4]
 800ad8c:	58eb      	ldr	r3, [r5, r3]
 800ad8e:	731a      	strb	r2, [r3, #12]
 800ad90:	338c      	adds	r3, #140	; 0x8c
 800ad92:	e6ac      	b.n	800aaee <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800ad94:	4b37      	ldr	r3, [pc, #220]	; (800ae74 <LoRaMacMibSetRequestConfirm+0x440>)
 800ad96:	6862      	ldr	r2, [r4, #4]
 800ad98:	58eb      	ldr	r3, [r5, r3]
 800ad9a:	33c0      	adds	r3, #192	; 0xc0
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	e691      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800ada0:	4b34      	ldr	r3, [pc, #208]	; (800ae74 <LoRaMacMibSetRequestConfirm+0x440>)
 800ada2:	6862      	ldr	r2, [r4, #4]
 800ada4:	58eb      	ldr	r3, [r5, r3]
 800ada6:	641a      	str	r2, [r3, #64]	; 0x40
 800ada8:	e68c      	b.n	800aac4 <LoRaMacMibSetRequestConfirm+0x90>
            if( mibSet->Param.Contexts != 0 )
 800adaa:	6864      	ldr	r4, [r4, #4]
 800adac:	2c00      	cmp	r4, #0
 800adae:	d100      	bne.n	800adb2 <LoRaMacMibSetRequestConfirm+0x37e>
 800adb0:	e68f      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
        return LORAMAC_STATUS_BUSY;
 800adb2:	2601      	movs	r6, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800adb4:	42b3      	cmp	r3, r6
 800adb6:	d000      	beq.n	800adba <LoRaMacMibSetRequestConfirm+0x386>
 800adb8:	e68c      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0xa0>
    if( contexts->MacNvmCtx != NULL )
 800adba:	6821      	ldr	r1, [r4, #0]
 800adbc:	2900      	cmp	r1, #0
 800adbe:	d004      	beq.n	800adca <LoRaMacMibSetRequestConfirm+0x396>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800adc0:	6863      	ldr	r3, [r4, #4]
 800adc2:	482d      	ldr	r0, [pc, #180]	; (800ae78 <LoRaMacMibSetRequestConfirm+0x444>)
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	f002 fb7b 	bl	800d4c0 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 800adca:	2303      	movs	r3, #3
 800adcc:	a904      	add	r1, sp, #16
 800adce:	710b      	strb	r3, [r1, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800add0:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800add2:	4e28      	ldr	r6, [pc, #160]	; (800ae74 <LoRaMacMibSetRequestConfirm+0x440>)
    params.NvmCtx = contexts->RegionNvmCtx;
 800add4:	9304      	str	r3, [sp, #16]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800add6:	59ab      	ldr	r3, [r5, r6]
 800add8:	7818      	ldrb	r0, [r3, #0]
 800adda:	f001 fa9f 	bl	800c31c <RegionInitDefaults>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800adde:	4b27      	ldr	r3, [pc, #156]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x448>)
 800ade0:	5cea      	ldrb	r2, [r5, r3]
 800ade2:	3b35      	subs	r3, #53	; 0x35
 800ade4:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800ade6:	59ab      	ldr	r3, [r5, r6]
 800ade8:	001a      	movs	r2, r3
 800adea:	32b0      	adds	r2, #176	; 0xb0
 800adec:	6811      	ldr	r1, [r2, #0]
 800adee:	22f9      	movs	r2, #249	; 0xf9
 800adf0:	0092      	lsls	r2, r2, #2
 800adf2:	50a9      	str	r1, [r5, r2]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800adf4:	001a      	movs	r2, r3
 800adf6:	32b9      	adds	r2, #185	; 0xb9
 800adf8:	7811      	ldrb	r1, [r2, #0]
 800adfa:	22fc      	movs	r2, #252	; 0xfc
 800adfc:	0092      	lsls	r2, r2, #2
 800adfe:	54a9      	strb	r1, [r5, r2]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800ae00:	33ca      	adds	r3, #202	; 0xca
 800ae02:	781a      	ldrb	r2, [r3, #0]
 800ae04:	4b1e      	ldr	r3, [pc, #120]	; (800ae80 <LoRaMacMibSetRequestConfirm+0x44c>)
 800ae06:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ae08:	4b1e      	ldr	r3, [pc, #120]	; (800ae84 <LoRaMacMibSetRequestConfirm+0x450>)
 800ae0a:	4a1f      	ldr	r2, [pc, #124]	; (800ae88 <LoRaMacMibSetRequestConfirm+0x454>)
 800ae0c:	52ea      	strh	r2, [r5, r3]
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800ae0e:	69a0      	ldr	r0, [r4, #24]
 800ae10:	f7fc fef0 	bl	8007bf4 <SecureElementRestoreNvmCtx>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d001      	beq.n	800ae1c <LoRaMacMibSetRequestConfirm+0x3e8>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ae18:	2611      	movs	r6, #17
 800ae1a:	e65b      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0xa0>
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800ae1c:	6920      	ldr	r0, [r4, #16]
 800ae1e:	f000 ff1f 	bl	800bc60 <LoRaMacCryptoRestoreNvmCtx>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d1f8      	bne.n	800ae18 <LoRaMacMibSetRequestConfirm+0x3e4>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800ae26:	6a20      	ldr	r0, [r4, #32]
 800ae28:	f000 fbc8 	bl	800b5bc <LoRaMacCommandsRestoreNvmCtx>
 800ae2c:	1e06      	subs	r6, r0, #0
 800ae2e:	d10c      	bne.n	800ae4a <LoRaMacMibSetRequestConfirm+0x416>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800ae30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ae32:	f000 fb7b 	bl	800b52c <LoRaMacClassBRestoreNvmCtx>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d009      	beq.n	800ae4e <LoRaMacMibSetRequestConfirm+0x41a>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800ae3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ae3c:	f000 fd0c 	bl	800b858 <LoRaMacConfirmQueueRestoreNvmCtx>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d000      	beq.n	800ae46 <LoRaMacMibSetRequestConfirm+0x412>
 800ae44:	e646      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800ae46:	3615      	adds	r6, #21
 800ae48:	e644      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae4a:	2613      	movs	r6, #19
 800ae4c:	e642      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800ae4e:	2614      	movs	r6, #20
 800ae50:	e640      	b.n	800aad4 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800ae52:	79a3      	ldrb	r3, [r4, #6]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d900      	bls.n	800ae5a <LoRaMacMibSetRequestConfirm+0x426>
 800ae58:	e63b      	b.n	800aad2 <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800ae5a:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <LoRaMacMibSetRequestConfirm+0x440>)
 800ae5c:	6862      	ldr	r2, [r4, #4]
 800ae5e:	58eb      	ldr	r3, [r5, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ae60:	6860      	ldr	r0, [r4, #4]
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800ae62:	33fc      	adds	r3, #252	; 0xfc
 800ae64:	665a      	str	r2, [r3, #100]	; 0x64
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ae66:	f000 fef3 	bl	800bc50 <LoRaMacCryptoSetLrWanVersion>
 800ae6a:	e652      	b.n	800ab12 <LoRaMacMibSetRequestConfirm+0xde>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800ae6c:	0020      	movs	r0, r4
 800ae6e:	f000 fb7c 	bl	800b56a <LoRaMacMibClassBSetRequestConfirm>
 800ae72:	e61d      	b.n	800aab0 <LoRaMacMibSetRequestConfirm+0x7c>
 800ae74:	00000484 	.word	0x00000484
 800ae78:	20000668 	.word	0x20000668
 800ae7c:	00000415 	.word	0x00000415
 800ae80:	000003f1 	.word	0x000003f1
 800ae84:	000003f2 	.word	0x000003f2
 800ae88:	00000201 	.word	0x00000201

0800ae8c <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ae8c:	2300      	movs	r3, #0
{
 800ae8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae90:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ae92:	aa02      	add	r2, sp, #8
{
 800ae94:	0005      	movs	r5, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ae96:	2603      	movs	r6, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ae98:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 800ae9a:	4298      	cmp	r0, r3
 800ae9c:	d004      	beq.n	800aea8 <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 800ae9e:	f7fe fd33 	bl	8009908 <LoRaMacIsBusy>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d003      	beq.n	800aeae <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800aea6:	2601      	movs	r6, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 800aea8:	0030      	movs	r0, r6
 800aeaa:	b009      	add	sp, #36	; 0x24
 800aeac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800aeae:	f000 fd9d 	bl	800b9ec <LoRaMacConfirmQueueIsFull>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d1f7      	bne.n	800aea6 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800aeb6:	f000 fd93 	bl	800b9e0 <LoRaMacConfirmQueueGetCnt>
 800aeba:	1e01      	subs	r1, r0, #0
 800aebc:	d103      	bne.n	800aec6 <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800aebe:	2214      	movs	r2, #20
 800aec0:	486b      	ldr	r0, [pc, #428]	; (800b070 <LoRaMacMlmeRequest+0x1e4>)
 800aec2:	f002 fb13 	bl	800d4ec <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	4c6a      	ldr	r4, [pc, #424]	; (800b074 <LoRaMacMlmeRequest+0x1e8>)
 800aeca:	4a6b      	ldr	r2, [pc, #428]	; (800b078 <LoRaMacMlmeRequest+0x1ec>)
    queueElement.RestrictCommonReadyToHandle = false;
 800aecc:	2600      	movs	r6, #0
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aece:	54a3      	strb	r3, [r4, r2]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800aed0:	2204      	movs	r2, #4
 800aed2:	496a      	ldr	r1, [pc, #424]	; (800b07c <LoRaMacMlmeRequest+0x1f0>)
 800aed4:	5c60      	ldrb	r0, [r4, r1]
 800aed6:	9100      	str	r1, [sp, #0]
 800aed8:	4302      	orrs	r2, r0
    queueElement.Request = mlmeRequest->Type;
 800aeda:	7828      	ldrb	r0, [r5, #0]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800aedc:	5462      	strb	r2, [r4, r1]
    queueElement.Request = mlmeRequest->Type;
 800aede:	aa03      	add	r2, sp, #12
 800aee0:	7010      	strb	r0, [r2, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aee2:	3801      	subs	r0, #1
 800aee4:	7053      	strb	r3, [r2, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800aee6:	70d6      	strb	r6, [r2, #3]
    switch( mlmeRequest->Type )
 800aee8:	280d      	cmp	r0, #13
 800aeea:	d900      	bls.n	800aeee <LoRaMacMlmeRequest+0x62>
 800aeec:	e0b8      	b.n	800b060 <LoRaMacMlmeRequest+0x1d4>
 800aeee:	f7f5 f91d 	bl	800012c <__gnu_thumb1_case_uqi>
 800aef2:	b707      	.short	0xb707
 800aef4:	88665cb7 	.word	0x88665cb7
 800aef8:	91b7b7b7 	.word	0x91b7b7b7
 800aefc:	a795abb7 	.word	0xa795abb7
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800af00:	23d0      	movs	r3, #208	; 0xd0
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	58e2      	ldr	r2, [r4, r3]
 800af06:	2320      	movs	r3, #32
 800af08:	0016      	movs	r6, r2
 800af0a:	401e      	ands	r6, r3
 800af0c:	421a      	tst	r2, r3
 800af0e:	d1ca      	bne.n	800aea6 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800af10:	f7fd fdf4 	bl	8008afc <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800af14:	2104      	movs	r1, #4
 800af16:	4b5a      	ldr	r3, [pc, #360]	; (800b080 <LoRaMacMlmeRequest+0x1f4>)
 800af18:	0032      	movs	r2, r6
 800af1a:	58e7      	ldr	r7, [r4, r3]
 800af1c:	5669      	ldrsb	r1, [r5, r1]
 800af1e:	7838      	ldrb	r0, [r7, #0]
 800af20:	f001 fa86 	bl	800c430 <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800af24:	2207      	movs	r2, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800af26:	3785      	adds	r7, #133	; 0x85
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800af28:	ab03      	add	r3, sp, #12
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800af2a:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 800af2c:	0030      	movs	r0, r6
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800af2e:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 800af30:	f7fe f928 	bl	8009184 <SwitchClass>
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800af34:	0022      	movs	r2, r4
 800af36:	4953      	ldr	r1, [pc, #332]	; (800b084 <LoRaMacMlmeRequest+0x1f8>)
 800af38:	32fc      	adds	r2, #252	; 0xfc
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800af3a:	0023      	movs	r3, r4
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800af3c:	60d1      	str	r1, [r2, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800af3e:	22ff      	movs	r2, #255	; 0xff
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800af40:	33ff      	adds	r3, #255	; 0xff
 800af42:	715e      	strb	r6, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800af44:	735a      	strb	r2, [r3, #13]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800af46:	739e      	strb	r6, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800af48:	f7fc ff94 	bl	8007e74 <SecureElementGetJoinEui>
 800af4c:	2208      	movs	r2, #8
 800af4e:	0001      	movs	r1, r0
 800af50:	484d      	ldr	r0, [pc, #308]	; (800b088 <LoRaMacMlmeRequest+0x1fc>)
 800af52:	f002 fab5 	bl	800d4c0 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800af56:	f7fc ff77 	bl	8007e48 <SecureElementGetDevEui>
 800af5a:	2208      	movs	r2, #8
 800af5c:	0001      	movs	r1, r0
 800af5e:	484b      	ldr	r0, [pc, #300]	; (800b08c <LoRaMacMlmeRequest+0x200>)
 800af60:	f002 faae 	bl	800d4c0 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 800af64:	0030      	movs	r0, r6
 800af66:	f7fd fecf 	bl	8008d08 <ScheduleTx>
 800af6a:	1e06      	subs	r6, r0, #0
            if( status != LORAMAC_STATUS_OK )
 800af6c:	d009      	beq.n	800af82 <LoRaMacMlmeRequest+0xf6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800af6e:	2104      	movs	r1, #4
 800af70:	4b43      	ldr	r3, [pc, #268]	; (800b080 <LoRaMacMlmeRequest+0x1f4>)
 800af72:	2201      	movs	r2, #1
 800af74:	58e7      	ldr	r7, [r4, r3]
 800af76:	5669      	ldrsb	r1, [r5, r1]
 800af78:	7838      	ldrb	r0, [r7, #0]
 800af7a:	f001 fa59 	bl	800c430 <RegionAlternateDr>
 800af7e:	3785      	adds	r7, #133	; 0x85
 800af80:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800af82:	2391      	movs	r3, #145	; 0x91
 800af84:	00db      	lsls	r3, r3, #3
 800af86:	58e3      	ldr	r3, [r4, r3]
 800af88:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800af8a:	2e00      	cmp	r6, #0
 800af8c:	d06a      	beq.n	800b064 <LoRaMacMlmeRequest+0x1d8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800af8e:	f000 fd27 	bl	800b9e0 <LoRaMacConfirmQueueGetCnt>
 800af92:	2800      	cmp	r0, #0
 800af94:	d000      	beq.n	800af98 <LoRaMacMlmeRequest+0x10c>
 800af96:	e787      	b.n	800aea8 <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800af98:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 800af9a:	4b3d      	ldr	r3, [pc, #244]	; (800b090 <LoRaMacMlmeRequest+0x204>)
 800af9c:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800af9e:	9b00      	ldr	r3, [sp, #0]
 800afa0:	5ce3      	ldrb	r3, [r4, r3]
 800afa2:	4393      	bics	r3, r2
 800afa4:	9a00      	ldr	r2, [sp, #0]
 800afa6:	54a3      	strb	r3, [r4, r2]
 800afa8:	e77e      	b.n	800aea8 <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800afaa:	2200      	movs	r2, #0
 800afac:	2002      	movs	r0, #2
 800afae:	a902      	add	r1, sp, #8
 800afb0:	f000 fb18 	bl	800b5e4 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800afb4:	2613      	movs	r6, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d1e3      	bne.n	800af82 <LoRaMacMlmeRequest+0xf6>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800afba:	2600      	movs	r6, #0
            break;
 800afbc:	e7e1      	b.n	800af82 <LoRaMacMlmeRequest+0xf6>
    continuousWave.Channel = MacCtx.Channel;
 800afbe:	4b35      	ldr	r3, [pc, #212]	; (800b094 <LoRaMacMlmeRequest+0x208>)
 800afc0:	a904      	add	r1, sp, #16
 800afc2:	5ce3      	ldrb	r3, [r4, r3]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800afc4:	88aa      	ldrh	r2, [r5, #4]
    continuousWave.Channel = MacCtx.Channel;
 800afc6:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800afc8:	4b2d      	ldr	r3, [pc, #180]	; (800b080 <LoRaMacMlmeRequest+0x1f4>)
 800afca:	58e3      	ldr	r3, [r4, r3]
 800afcc:	0018      	movs	r0, r3
 800afce:	3085      	adds	r0, #133	; 0x85
 800afd0:	7800      	ldrb	r0, [r0, #0]
 800afd2:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800afd4:	0018      	movs	r0, r3
 800afd6:	3084      	adds	r0, #132	; 0x84
 800afd8:	7800      	ldrb	r0, [r0, #0]
    continuousWave.Timeout = timeout;
 800afda:	818a      	strh	r2, [r1, #12]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800afdc:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800afde:	0018      	movs	r0, r3
 800afe0:	30bc      	adds	r0, #188	; 0xbc
 800afe2:	6800      	ldr	r0, [r0, #0]
 800afe4:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800afe6:	0018      	movs	r0, r3
 800afe8:	30c0      	adds	r0, #192	; 0xc0
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800afee:	7818      	ldrb	r0, [r3, #0]
 800aff0:	f001 fa38 	bl	800c464 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800aff4:	22d0      	movs	r2, #208	; 0xd0
 800aff6:	2302      	movs	r3, #2
 800aff8:	0092      	lsls	r2, r2, #2
 800affa:	58a1      	ldr	r1, [r4, r2]
 800affc:	430b      	orrs	r3, r1
 800affe:	50a3      	str	r3, [r4, r2]
 800b000:	e7db      	b.n	800afba <LoRaMacMlmeRequest+0x12e>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b002:	210c      	movs	r1, #12
 800b004:	4b24      	ldr	r3, [pc, #144]	; (800b098 <LoRaMacMlmeRequest+0x20c>)
 800b006:	88aa      	ldrh	r2, [r5, #4]
 800b008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00a:	5669      	ldrsb	r1, [r5, r1]
 800b00c:	68a8      	ldr	r0, [r5, #8]
 800b00e:	9301      	str	r3, [sp, #4]
 800b010:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b012:	e7ef      	b.n	800aff4 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b014:	2200      	movs	r2, #0
 800b016:	200d      	movs	r0, #13
 800b018:	a902      	add	r1, sp, #8
 800b01a:	e7c9      	b.n	800afb0 <LoRaMacMlmeRequest+0x124>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800b01c:	4b18      	ldr	r3, [pc, #96]	; (800b080 <LoRaMacMlmeRequest+0x1f4>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b01e:	2602      	movs	r6, #2
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800b020:	58e3      	ldr	r3, [r4, r3]
 800b022:	337c      	adds	r3, #124	; 0x7c
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1ab      	bne.n	800af82 <LoRaMacMlmeRequest+0xf6>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b02a:	792e      	ldrb	r6, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b02c:	0770      	lsls	r0, r6, #29
 800b02e:	0f40      	lsrs	r0, r0, #29
 800b030:	f000 fa94 	bl	800b55c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b034:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b036:	2201      	movs	r2, #1
 800b038:	0019      	movs	r1, r3
 800b03a:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 800b03c:	701e      	strb	r6, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b03e:	e7b7      	b.n	800afb0 <LoRaMacMlmeRequest+0x124>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b040:	2200      	movs	r2, #0
 800b042:	2012      	movs	r0, #18
 800b044:	a902      	add	r1, sp, #8
 800b046:	e7b3      	b.n	800afb0 <LoRaMacMlmeRequest+0x124>
            queueElement.RestrictCommonReadyToHandle = true;
 800b048:	70d3      	strb	r3, [r2, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b04a:	f000 fa78 	bl	800b53e <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 800b04e:	2601      	movs	r6, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b050:	1e07      	subs	r7, r0, #0
 800b052:	d196      	bne.n	800af82 <LoRaMacMlmeRequest+0xf6>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b054:	f000 fa70 	bl	800b538 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b058:	0038      	movs	r0, r7
 800b05a:	f000 fa72 	bl	800b542 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800b05e:	e7ac      	b.n	800afba <LoRaMacMlmeRequest+0x12e>
    queueElement.RestrictCommonReadyToHandle = false;
 800b060:	2602      	movs	r6, #2
 800b062:	e78e      	b.n	800af82 <LoRaMacMlmeRequest+0xf6>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b064:	a803      	add	r0, sp, #12
 800b066:	f000 fc0d 	bl	800b884 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800b06a:	f7fd fc43 	bl	80088f4 <EventMacNvmCtxChanged>
 800b06e:	e71b      	b.n	800aea8 <LoRaMacMlmeRequest+0x1c>
 800b070:	20000c24 	.word	0x20000c24
 800b074:	200007d4 	.word	0x200007d4
 800b078:	00000451 	.word	0x00000451
 800b07c:	00000481 	.word	0x00000481
 800b080:	00000484 	.word	0x00000484
 800b084:	200007d6 	.word	0x200007d6
 800b088:	200008e2 	.word	0x200008e2
 800b08c:	200008ea 	.word	0x200008ea
 800b090:	00000414 	.word	0x00000414
 800b094:	00000415 	.word	0x00000415
 800b098:	08012ccc 	.word	0x08012ccc

0800b09c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b09c:	2300      	movs	r3, #0
 800b09e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0a0:	b097      	sub	sp, #92	; 0x5c
 800b0a2:	9000      	str	r0, [sp, #0]
 800b0a4:	9108      	str	r1, [sp, #32]
 800b0a6:	9302      	str	r3, [sp, #8]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d103      	bne.n	800b0b4 <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b0ac:	2703      	movs	r7, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b0ae:	0038      	movs	r0, r7
 800b0b0:	b017      	add	sp, #92	; 0x5c
 800b0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 800b0b4:	f7fe fc28 	bl	8009908 <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 800b0b8:	2701      	movs	r7, #1
    if( LoRaMacIsBusy( ) == true )
 800b0ba:	1e04      	subs	r4, r0, #0
 800b0bc:	d1f7      	bne.n	800b0ae <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 800b0be:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b0c0:	0001      	movs	r1, r0
    macHdr.Value = 0;
 800b0c2:	7418      	strb	r0, [r3, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b0c4:	2214      	movs	r2, #20
 800b0c6:	48cb      	ldr	r0, [pc, #812]	; (800b3f4 <LoRaMacMcpsRequest+0x358>)
 800b0c8:	f002 fa10 	bl	800d4ec <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b0cc:	4dca      	ldr	r5, [pc, #808]	; (800b3f8 <LoRaMacMcpsRequest+0x35c>)
 800b0ce:	4bcb      	ldr	r3, [pc, #812]	; (800b3fc <LoRaMacMcpsRequest+0x360>)
 800b0d0:	54ef      	strb	r7, [r5, r3]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b0d2:	4bcb      	ldr	r3, [pc, #812]	; (800b400 <LoRaMacMcpsRequest+0x364>)
 800b0d4:	54ef      	strb	r7, [r5, r3]
    switch( mcpsRequest->Type )
 800b0d6:	9b00      	ldr	r3, [sp, #0]
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	42bb      	cmp	r3, r7
 800b0dc:	d100      	bne.n	800b0e0 <LoRaMacMcpsRequest+0x44>
 800b0de:	e115      	b.n	800b30c <LoRaMacMcpsRequest+0x270>
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d100      	bne.n	800b0e6 <LoRaMacMcpsRequest+0x4a>
 800b0e4:	e11c      	b.n	800b320 <LoRaMacMcpsRequest+0x284>
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d000      	beq.n	800b0ec <LoRaMacMcpsRequest+0x50>
 800b0ea:	e12b      	b.n	800b344 <LoRaMacMcpsRequest+0x2a8>
            MacCtx.AckTimeoutRetries = 1;
 800b0ec:	4bc5      	ldr	r3, [pc, #788]	; (800b404 <LoRaMacMcpsRequest+0x368>)
 800b0ee:	54ef      	strb	r7, [r5, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b0f0:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b0f2:	466a      	mov	r2, sp
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b0f4:	260e      	movs	r6, #14
            readyToSend = true;
 800b0f6:	2401      	movs	r4, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b0f8:	7413      	strb	r3, [r2, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800b0fa:	9b00      	ldr	r3, [sp, #0]
 800b0fc:	791b      	ldrb	r3, [r3, #4]
 800b0fe:	9305      	str	r3, [sp, #20]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	9303      	str	r3, [sp, #12]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800b106:	9b00      	ldr	r3, [sp, #0]
 800b108:	899b      	ldrh	r3, [r3, #12]
 800b10a:	9302      	str	r3, [sp, #8]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b10c:	9b00      	ldr	r3, [sp, #0]
 800b10e:	579e      	ldrsb	r6, [r3, r6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b110:	2202      	movs	r2, #2
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b112:	4fbd      	ldr	r7, [pc, #756]	; (800b408 <LoRaMacMcpsRequest+0x36c>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b114:	ab0a      	add	r3, sp, #40	; 0x28
 800b116:	751a      	strb	r2, [r3, #20]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b118:	59eb      	ldr	r3, [r5, r7]
 800b11a:	a90a      	add	r1, sp, #40	; 0x28
 800b11c:	001a      	movs	r2, r3
 800b11e:	32b8      	adds	r2, #184	; 0xb8
 800b120:	7812      	ldrb	r2, [r2, #0]
 800b122:	758a      	strb	r2, [r1, #22]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b124:	7818      	ldrb	r0, [r3, #0]
 800b126:	a90f      	add	r1, sp, #60	; 0x3c
 800b128:	f001 f8e5 	bl	800c2f6 <RegionGetPhyParam>
 800b12c:	9701      	str	r7, [sp, #4]
 800b12e:	900a      	str	r0, [sp, #40]	; 0x28
    if( readyToSend == true )
 800b130:	2c00      	cmp	r4, #0
 800b132:	d100      	bne.n	800b136 <LoRaMacMcpsRequest+0x9a>
 800b134:	e150      	b.n	800b3d8 <LoRaMacMcpsRequest+0x33c>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800b136:	59eb      	ldr	r3, [r5, r7]
 800b138:	001a      	movs	r2, r3
 800b13a:	327e      	adds	r2, #126	; 0x7e
 800b13c:	7812      	ldrb	r2, [r2, #0]
 800b13e:	2a00      	cmp	r2, #0
 800b140:	d117      	bne.n	800b172 <LoRaMacMcpsRequest+0xd6>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b142:	1c02      	adds	r2, r0, #0
 800b144:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800b146:	ac0b      	add	r4, sp, #44	; 0x2c
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b148:	42b0      	cmp	r0, r6
 800b14a:	da00      	bge.n	800b14e <LoRaMacMcpsRequest+0xb2>
 800b14c:	1c32      	adds	r2, r6, #0
            verify.DatarateParams.Datarate = datarate;
 800b14e:	7022      	strb	r2, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b150:	001a      	movs	r2, r3
 800b152:	32b8      	adds	r2, #184	; 0xb8
 800b154:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b156:	0021      	movs	r1, r4
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b158:	70a2      	strb	r2, [r4, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b15a:	7818      	ldrb	r0, [r3, #0]
 800b15c:	2205      	movs	r2, #5
 800b15e:	f001 f8ee 	bl	800c33e <RegionVerify>
 800b162:	2800      	cmp	r0, #0
 800b164:	d0a2      	beq.n	800b0ac <LoRaMacMcpsRequest+0x10>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b166:	9a01      	ldr	r2, [sp, #4]
 800b168:	4ba3      	ldr	r3, [pc, #652]	; (800b3f8 <LoRaMacMcpsRequest+0x35c>)
 800b16a:	589b      	ldr	r3, [r3, r2]
 800b16c:	7822      	ldrb	r2, [r4, #0]
 800b16e:	3385      	adds	r3, #133	; 0x85
 800b170:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b172:	4ba1      	ldr	r3, [pc, #644]	; (800b3f8 <LoRaMacMcpsRequest+0x35c>)
 800b174:	9a01      	ldr	r2, [sp, #4]
 800b176:	5899      	ldr	r1, [r3, r2]
 800b178:	000a      	movs	r2, r1
 800b17a:	3284      	adds	r2, #132	; 0x84
 800b17c:	8812      	ldrh	r2, [r2, #0]
 800b17e:	1d0b      	adds	r3, r1, #4
 800b180:	9206      	str	r2, [sp, #24]
 800b182:	ba57      	rev16	r7, r2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b184:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b186:	23b2      	movs	r3, #178	; 0xb2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b188:	920c      	str	r2, [sp, #48]	; 0x30
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b18a:	005b      	lsls	r3, r3, #1
 800b18c:	5ccb      	ldrb	r3, [r1, r3]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d100      	bne.n	800b194 <LoRaMacMcpsRequest+0xf8>
 800b192:	e11f      	b.n	800b3d4 <LoRaMacMcpsRequest+0x338>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800b194:	000b      	movs	r3, r1
 800b196:	33c8      	adds	r3, #200	; 0xc8
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d102      	bne.n	800b1a4 <LoRaMacMcpsRequest+0x108>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800b19e:	0008      	movs	r0, r1
 800b1a0:	30fc      	adds	r0, #252	; 0xfc
 800b1a2:	6583      	str	r3, [r0, #88]	; 0x58
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800b1a4:	000b      	movs	r3, r1
 800b1a6:	337e      	adds	r3, #126	; 0x7e
 800b1a8:	781c      	ldrb	r4, [r3, #0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800b1aa:	3b02      	subs	r3, #2
 800b1ac:	7818      	ldrb	r0, [r3, #0]
 800b1ae:	3801      	subs	r0, #1
 800b1b0:	4243      	negs	r3, r0
 800b1b2:	4143      	adcs	r3, r0
 800b1b4:	0118      	lsls	r0, r3, #4
 800b1b6:	01e3      	lsls	r3, r4, #7
 800b1b8:	4303      	orrs	r3, r0
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800b1ba:	204c      	movs	r0, #76	; 0x4c
 800b1bc:	30ff      	adds	r0, #255	; 0xff
 800b1be:	5c0e      	ldrb	r6, [r1, r0]
 800b1c0:	1c1d      	adds	r5, r3, #0
 800b1c2:	9009      	str	r0, [sp, #36]	; 0x24
 800b1c4:	2e00      	cmp	r6, #0
 800b1c6:	d001      	beq.n	800b1cc <LoRaMacMcpsRequest+0x130>
        fCtrl.Bits.Ack = 1;
 800b1c8:	2520      	movs	r5, #32
 800b1ca:	431d      	orrs	r5, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b1cc:	000b      	movs	r3, r1
 800b1ce:	33fc      	adds	r3, #252	; 0xfc
 800b1d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1d2:	a811      	add	r0, sp, #68	; 0x44
 800b1d4:	9311      	str	r3, [sp, #68]	; 0x44
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b1d6:	23fd      	movs	r3, #253	; 0xfd
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b1d8:	7144      	strb	r4, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b1da:	4c87      	ldr	r4, [pc, #540]	; (800b3f8 <LoRaMacMcpsRequest+0x35c>)
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	58e3      	ldr	r3, [r4, r3]
    adrNext.UpdateChanMask = true;
 800b1e0:	2601      	movs	r6, #1
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b1e2:	9314      	str	r3, [sp, #80]	; 0x50
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b1e4:	000b      	movs	r3, r1
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b1e6:	6082      	str	r2, [r0, #8]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b1e8:	000a      	movs	r2, r1
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b1ea:	8207      	strh	r7, [r0, #16]
    adrNext.UpdateChanMask = true;
 800b1ec:	7106      	strb	r6, [r0, #4]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b1ee:	33b8      	adds	r3, #184	; 0xb8
 800b1f0:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b1f2:	3284      	adds	r2, #132	; 0x84
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b1f4:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800b1f6:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b1f8:	3185      	adds	r1, #133	; 0x85
    adrNext.Region = MacCtx.NvmCtx->Region;
 800b1fa:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b1fc:	ab0c      	add	r3, sp, #48	; 0x30
 800b1fe:	f000 f92b 	bl	800b458 <LoRaMacAdrCalcNext>
    MacCtx.PktBufferLen = 0;
 800b202:	2300      	movs	r3, #0
    MacCtx.NodeAckRequested = false;
 800b204:	4a81      	ldr	r2, [pc, #516]	; (800b40c <LoRaMacMcpsRequest+0x370>)
    MacCtx.PktBufferLen = 0;
 800b206:	8023      	strh	r3, [r4, #0]
    MacCtx.NodeAckRequested = false;
 800b208:	54a3      	strb	r3, [r4, r2]
    uint32_t fCntUp = 0;
 800b20a:	930d      	str	r3, [sp, #52]	; 0x34
    size_t macCmdsSize = 0;
 800b20c:	930e      	str	r3, [sp, #56]	; 0x38
        fBufferSize = 0;
 800b20e:	9b03      	ldr	r3, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b210:	4030      	ands	r0, r6
        fBufferSize = 0;
 800b212:	1e5a      	subs	r2, r3, #1
 800b214:	4193      	sbcs	r3, r2
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b216:	0180      	lsls	r0, r0, #6
        fBufferSize = 0;
 800b218:	9a02      	ldr	r2, [sp, #8]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b21a:	4328      	orrs	r0, r5
        fBufferSize = 0;
 800b21c:	425b      	negs	r3, r3
 800b21e:	401a      	ands	r2, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b220:	9903      	ldr	r1, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b222:	9007      	str	r0, [sp, #28]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b224:	487a      	ldr	r0, [pc, #488]	; (800b410 <LoRaMacMcpsRequest+0x374>)
        fBufferSize = 0;
 800b226:	9202      	str	r2, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b228:	f002 f94a 	bl	800d4c0 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b22c:	466b      	mov	r3, sp
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b22e:	7c19      	ldrb	r1, [r3, #16]
    MacCtx.AppDataSize = fBufferSize;
 800b230:	7a1a      	ldrb	r2, [r3, #8]
 800b232:	4d78      	ldr	r5, [pc, #480]	; (800b414 <LoRaMacMcpsRequest+0x378>)
    switch( macHdr->Bits.MType )
 800b234:	060b      	lsls	r3, r1, #24
    MacCtx.AppDataSize = fBufferSize;
 800b236:	5562      	strb	r2, [r4, r5]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b238:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 800b23a:	0f5b      	lsrs	r3, r3, #29
 800b23c:	2b04      	cmp	r3, #4
 800b23e:	d100      	bne.n	800b242 <LoRaMacMcpsRequest+0x1a6>
 800b240:	e083      	b.n	800b34a <LoRaMacMcpsRequest+0x2ae>
 800b242:	2b07      	cmp	r3, #7
 800b244:	d100      	bne.n	800b248 <LoRaMacMcpsRequest+0x1ac>
 800b246:	e0b4      	b.n	800b3b2 <LoRaMacMcpsRequest+0x316>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b248:	2702      	movs	r7, #2
    switch( macHdr->Bits.MType )
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d000      	beq.n	800b250 <LoRaMacMcpsRequest+0x1b4>
 800b24e:	e088      	b.n	800b362 <LoRaMacMcpsRequest+0x2c6>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b250:	0025      	movs	r5, r4
 800b252:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b254:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b256:	35ff      	adds	r5, #255	; 0xff
 800b258:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b25a:	4b6f      	ldr	r3, [pc, #444]	; (800b418 <LoRaMacMcpsRequest+0x37c>)
 800b25c:	36fc      	adds	r6, #252	; 0xfc
 800b25e:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b260:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b262:	2798      	movs	r7, #152	; 0x98
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b264:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b266:	9905      	ldr	r1, [sp, #20]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b268:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b26a:	3329      	adds	r3, #41	; 0x29
 800b26c:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b26e:	9b01      	ldr	r3, [sp, #4]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b270:	007f      	lsls	r7, r7, #1
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b272:	58e3      	ldr	r3, [r4, r3]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b274:	a80d      	add	r0, sp, #52	; 0x34
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b278:	55e2      	strb	r2, [r4, r7]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b27a:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b27c:	9b07      	ldr	r3, [sp, #28]
 800b27e:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b280:	4b63      	ldr	r3, [pc, #396]	; (800b410 <LoRaMacMcpsRequest+0x374>)
 800b282:	6333      	str	r3, [r6, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b284:	f000 fd02 	bl	800bc8c <LoRaMacCryptoGetFCntUp>
 800b288:	2800      	cmp	r0, #0
 800b28a:	d000      	beq.n	800b28e <LoRaMacMcpsRequest+0x1f2>
 800b28c:	e0a0      	b.n	800b3d0 <LoRaMacMcpsRequest+0x334>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b28e:	0022      	movs	r2, r4
 800b290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b292:	32fe      	adds	r2, #254	; 0xfe
 800b294:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 800b296:	2288      	movs	r2, #136	; 0x88
 800b298:	00d2      	lsls	r2, r2, #3
 800b29a:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b29c:	3208      	adds	r2, #8
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b29e:	a80e      	add	r0, sp, #56	; 0x38
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b2a0:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b2a2:	f000 fa45 	bl	800b730 <LoRaMacCommandsGetSizeSerializedCmds>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d15a      	bne.n	800b360 <LoRaMacMcpsRequest+0x2c4>
            if( macCmdsSize > 0 )
 800b2aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d01a      	beq.n	800b2e6 <LoRaMacMcpsRequest+0x24a>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800b2b0:	2085      	movs	r0, #133	; 0x85
 800b2b2:	9b01      	ldr	r3, [sp, #4]
 800b2b4:	58e3      	ldr	r3, [r4, r3]
 800b2b6:	9302      	str	r3, [sp, #8]
 800b2b8:	5618      	ldrsb	r0, [r3, r0]
 800b2ba:	f7fd fb3f 	bl	800893c <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b2be:	4b55      	ldr	r3, [pc, #340]	; (800b414 <LoRaMacMcpsRequest+0x378>)
 800b2c0:	5ce3      	ldrb	r3, [r4, r3]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d060      	beq.n	800b388 <LoRaMacMcpsRequest+0x2ec>
 800b2c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2c8:	2b0f      	cmp	r3, #15
 800b2ca:	d841      	bhi.n	800b350 <LoRaMacMcpsRequest+0x2b4>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b2cc:	200f      	movs	r0, #15
 800b2ce:	4a53      	ldr	r2, [pc, #332]	; (800b41c <LoRaMacMcpsRequest+0x380>)
 800b2d0:	a90e      	add	r1, sp, #56	; 0x38
 800b2d2:	f000 fa39 	bl	800b748 <LoRaMacCommandsSerializeCmds>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d142      	bne.n	800b360 <LoRaMacMcpsRequest+0x2c4>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b2da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2dc:	300f      	adds	r0, #15
 800b2de:	4018      	ands	r0, r3
 800b2e0:	9b07      	ldr	r3, [sp, #28]
 800b2e2:	4303      	orrs	r3, r0
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b2e4:	756b      	strb	r3, [r5, #21]
        status = ScheduleTx( allowDelayedTx );
 800b2e6:	9808      	ldr	r0, [sp, #32]
 800b2e8:	f7fd fd0e 	bl	8008d08 <ScheduleTx>
 800b2ec:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800b2ee:	d138      	bne.n	800b362 <LoRaMacMcpsRequest+0x2c6>
        MacCtx.NvmCtx->SrvAckRequested = false;
 800b2f0:	4c41      	ldr	r4, [pc, #260]	; (800b3f8 <LoRaMacMcpsRequest+0x35c>)
 800b2f2:	9b01      	ldr	r3, [sp, #4]
 800b2f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f6:	58e3      	ldr	r3, [r4, r3]
 800b2f8:	5498      	strb	r0, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800b2fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	67da      	str	r2, [r3, #124]	; 0x7c
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b300:	f000 f9ea 	bl	800b6d8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800b304:	1e07      	subs	r7, r0, #0
 800b306:	d069      	beq.n	800b3dc <LoRaMacMcpsRequest+0x340>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b308:	2713      	movs	r7, #19
 800b30a:	e030      	b.n	800b36e <LoRaMacMcpsRequest+0x2d2>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800b30c:	9b00      	ldr	r3, [sp, #0]
 800b30e:	7bda      	ldrb	r2, [r3, #15]
 800b310:	1c13      	adds	r3, r2, #0
 800b312:	2a08      	cmp	r2, #8
 800b314:	d900      	bls.n	800b318 <LoRaMacMcpsRequest+0x27c>
 800b316:	2308      	movs	r3, #8
 800b318:	4a3a      	ldr	r2, [pc, #232]	; (800b404 <LoRaMacMcpsRequest+0x368>)
 800b31a:	54ab      	strb	r3, [r5, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b31c:	2380      	movs	r3, #128	; 0x80
 800b31e:	e6e8      	b.n	800b0f2 <LoRaMacMcpsRequest+0x56>
            MacCtx.AckTimeoutRetries = 1;
 800b320:	4b38      	ldr	r3, [pc, #224]	; (800b404 <LoRaMacMcpsRequest+0x368>)
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b322:	466a      	mov	r2, sp
            MacCtx.AckTimeoutRetries = 1;
 800b324:	54ef      	strb	r7, [r5, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b326:	23e0      	movs	r3, #224	; 0xe0
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b328:	260a      	movs	r6, #10
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b32a:	7413      	strb	r3, [r2, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b32c:	9b00      	ldr	r3, [sp, #0]
            readyToSend = true;
 800b32e:	003c      	movs	r4, r7
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	9303      	str	r3, [sp, #12]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800b334:	9b00      	ldr	r3, [sp, #0]
 800b336:	891b      	ldrh	r3, [r3, #8]
 800b338:	9302      	str	r3, [sp, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b33a:	9b00      	ldr	r3, [sp, #0]
 800b33c:	579e      	ldrsb	r6, [r3, r6]
    uint8_t fPort = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	9305      	str	r3, [sp, #20]
            break;
 800b342:	e6e5      	b.n	800b110 <LoRaMacMcpsRequest+0x74>
    switch( mcpsRequest->Type )
 800b344:	0026      	movs	r6, r4
 800b346:	9405      	str	r4, [sp, #20]
 800b348:	e6e2      	b.n	800b110 <LoRaMacMcpsRequest+0x74>
            MacCtx.NodeAckRequested = true;
 800b34a:	4b30      	ldr	r3, [pc, #192]	; (800b40c <LoRaMacMcpsRequest+0x370>)
 800b34c:	54e6      	strb	r6, [r4, r3]
 800b34e:	e77f      	b.n	800b250 <LoRaMacMcpsRequest+0x1b4>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	a90e      	add	r1, sp, #56	; 0x38
 800b354:	58e2      	ldr	r2, [r4, r3]
 800b356:	32cb      	adds	r2, #203	; 0xcb
 800b358:	f000 f9f6 	bl	800b748 <LoRaMacCommandsSerializeCmds>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d0c2      	beq.n	800b2e6 <LoRaMacMcpsRequest+0x24a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b360:	2713      	movs	r7, #19
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800b362:	9a01      	ldr	r2, [sp, #4]
 800b364:	4b24      	ldr	r3, [pc, #144]	; (800b3f8 <LoRaMacMcpsRequest+0x35c>)
 800b366:	589b      	ldr	r3, [r3, r2]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800b368:	9a06      	ldr	r2, [sp, #24]
 800b36a:	3384      	adds	r3, #132	; 0x84
 800b36c:	801a      	strh	r2, [r3, #0]
            MacCtx.NodeAckRequested = false;
 800b36e:	2200      	movs	r2, #0
 800b370:	4b21      	ldr	r3, [pc, #132]	; (800b3f8 <LoRaMacMcpsRequest+0x35c>)
 800b372:	4926      	ldr	r1, [pc, #152]	; (800b40c <LoRaMacMcpsRequest+0x370>)
 800b374:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b376:	2391      	movs	r3, #145	; 0x91
 800b378:	4a1f      	ldr	r2, [pc, #124]	; (800b3f8 <LoRaMacMcpsRequest+0x35c>)
 800b37a:	00db      	lsls	r3, r3, #3
 800b37c:	58d3      	ldr	r3, [r2, r3]
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	9a01      	ldr	r2, [sp, #4]
 800b382:	9b00      	ldr	r3, [sp, #0]
 800b384:	611a      	str	r2, [r3, #16]
    return status;
 800b386:	e692      	b.n	800b0ae <LoRaMacMcpsRequest+0x12>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b388:	9b01      	ldr	r3, [sp, #4]
 800b38a:	a90e      	add	r1, sp, #56	; 0x38
 800b38c:	58e3      	ldr	r3, [r4, r3]
 800b38e:	001a      	movs	r2, r3
 800b390:	32cb      	adds	r2, #203	; 0xcb
 800b392:	9302      	str	r3, [sp, #8]
 800b394:	f000 f9d8 	bl	800b748 <LoRaMacCommandsSerializeCmds>
 800b398:	2800      	cmp	r0, #0
 800b39a:	d1e1      	bne.n	800b360 <LoRaMacMcpsRequest+0x2c4>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b39c:	2394      	movs	r3, #148	; 0x94
 800b39e:	005b      	lsls	r3, r3, #1
 800b3a0:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800b3a2:	9b01      	ldr	r3, [sp, #4]
 800b3a4:	58e3      	ldr	r3, [r4, r3]
 800b3a6:	9302      	str	r3, [sp, #8]
 800b3a8:	33cb      	adds	r3, #203	; 0xcb
 800b3aa:	6333      	str	r3, [r6, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b3ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3ae:	55e3      	strb	r3, [r4, r7]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b3b0:	e799      	b.n	800b2e6 <LoRaMacMcpsRequest+0x24a>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b3b2:	9b03      	ldr	r3, [sp, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d096      	beq.n	800b2e6 <LoRaMacMcpsRequest+0x24a>
 800b3b8:	2a00      	cmp	r2, #0
 800b3ba:	d094      	beq.n	800b2e6 <LoRaMacMcpsRequest+0x24a>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b3bc:	466b      	mov	r3, sp
 800b3be:	9903      	ldr	r1, [sp, #12]
 800b3c0:	7a1a      	ldrb	r2, [r3, #8]
 800b3c2:	4817      	ldr	r0, [pc, #92]	; (800b420 <LoRaMacMcpsRequest+0x384>)
 800b3c4:	f002 f87c 	bl	800d4c0 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b3c8:	5d63      	ldrb	r3, [r4, r5]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b3ce:	e78a      	b.n	800b2e6 <LoRaMacMcpsRequest+0x24a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b3d0:	2712      	movs	r7, #18
 800b3d2:	e7c6      	b.n	800b362 <LoRaMacMcpsRequest+0x2c6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b3d4:	2707      	movs	r7, #7
 800b3d6:	e7ca      	b.n	800b36e <LoRaMacMcpsRequest+0x2d2>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b3d8:	2702      	movs	r7, #2
 800b3da:	e7cc      	b.n	800b376 <LoRaMacMcpsRequest+0x2da>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800b3dc:	9b00      	ldr	r3, [sp, #0]
 800b3de:	781a      	ldrb	r2, [r3, #0]
 800b3e0:	4b10      	ldr	r3, [pc, #64]	; (800b424 <LoRaMacMcpsRequest+0x388>)
 800b3e2:	54e2      	strb	r2, [r4, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	4a10      	ldr	r2, [pc, #64]	; (800b428 <LoRaMacMcpsRequest+0x38c>)
 800b3e8:	5ca1      	ldrb	r1, [r4, r2]
 800b3ea:	430b      	orrs	r3, r1
 800b3ec:	54a3      	strb	r3, [r4, r2]
            EventMacNvmCtxChanged( );
 800b3ee:	f7fd fa81 	bl	80088f4 <EventMacNvmCtxChanged>
 800b3f2:	e7c0      	b.n	800b376 <LoRaMacMcpsRequest+0x2da>
 800b3f4:	20000c10 	.word	0x20000c10
 800b3f8:	200007d4 	.word	0x200007d4
 800b3fc:	0000043d 	.word	0x0000043d
 800b400:	00000412 	.word	0x00000412
 800b404:	00000411 	.word	0x00000411
 800b408:	00000484 	.word	0x00000484
 800b40c:	00000414 	.word	0x00000414
 800b410:	2000090c 	.word	0x2000090c
 800b414:	00000237 	.word	0x00000237
 800b418:	200007d6 	.word	0x200007d6
 800b41c:	200008ec 	.word	0x200008ec
 800b420:	200007d7 	.word	0x200007d7
 800b424:	0000043c 	.word	0x0000043c
 800b428:	00000481 	.word	0x00000481

0800b42c <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b42c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b42e:	4e08      	ldr	r6, [pc, #32]	; (800b450 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b430:	4d08      	ldr	r5, [pc, #32]	; (800b454 <LoRaMacTestSetDutyCycleOn+0x28>)
    verify.DutyCycle = enable;
 800b432:	a901      	add	r1, sp, #4
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b434:	5973      	ldr	r3, [r6, r5]
{
 800b436:	0004      	movs	r4, r0
    verify.DutyCycle = enable;
 800b438:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b43a:	220f      	movs	r2, #15
 800b43c:	7818      	ldrb	r0, [r3, #0]
 800b43e:	f000 ff7e 	bl	800c33e <RegionVerify>
 800b442:	2800      	cmp	r0, #0
 800b444:	d002      	beq.n	800b44c <LoRaMacTestSetDutyCycleOn+0x20>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800b446:	5973      	ldr	r3, [r6, r5]
 800b448:	33c9      	adds	r3, #201	; 0xc9
 800b44a:	701c      	strb	r4, [r3, #0]
    }
}
 800b44c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800b44e:	46c0      	nop			; (mov r8, r8)
 800b450:	200007d4 	.word	0x200007d4
 800b454:	00000484 	.word	0x00000484

0800b458 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b458:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800b45a:	2500      	movs	r5, #0
{
 800b45c:	b08d      	sub	sp, #52	; 0x34
 800b45e:	9104      	str	r1, [sp, #16]
 800b460:	9205      	str	r2, [sp, #20]
 800b462:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800b464:	7883      	ldrb	r3, [r0, #2]
{
 800b466:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800b468:	42ab      	cmp	r3, r5
 800b46a:	d12b      	bne.n	800b4c4 <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 800b46c:	2310      	movs	r3, #16
 800b46e:	56c3      	ldrsb	r3, [r0, r3]
 800b470:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800b472:	2311      	movs	r3, #17
 800b474:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800b476:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800b478:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800b47a:	6883      	ldr	r3, [r0, #8]
 800b47c:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800b47e:	7945      	ldrb	r5, [r0, #5]
 800b480:	2d00      	cmp	r5, #0
 800b482:	d01a      	beq.n	800b4ba <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b484:	2302      	movs	r3, #2
 800b486:	aa06      	add	r2, sp, #24
 800b488:	7213      	strb	r3, [r2, #8]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b48a:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b48c:	a908      	add	r1, sp, #32
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b48e:	7293      	strb	r3, [r2, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b490:	7cc0      	ldrb	r0, [r0, #19]
 800b492:	f000 ff30 	bl	800c2f6 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800b496:	b243      	sxtb	r3, r0
 800b498:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800b49a:	466b      	mov	r3, sp
 800b49c:	9a02      	ldr	r2, [sp, #8]
 800b49e:	791f      	ldrb	r7, [r3, #4]
 800b4a0:	9b01      	ldr	r3, [sp, #4]
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	da01      	bge.n	800b4aa <LoRaMacAdrCalcNext+0x52>
 800b4a6:	466b      	mov	r3, sp
 800b4a8:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800b4aa:	9b01      	ldr	r3, [sp, #4]
 800b4ac:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800b4ae:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	dc0a      	bgt.n	800b4ca <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 800b4b8:	2500      	movs	r5, #0
    *drOut = datarate;
 800b4ba:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800b4bc:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800b4be:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800b4c0:	9b05      	ldr	r3, [sp, #20]
 800b4c2:	701a      	strb	r2, [r3, #0]
}
 800b4c4:	0028      	movs	r0, r5
 800b4c6:	b00d      	add	sp, #52	; 0x34
 800b4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b4ca:	2500      	movs	r5, #0
 800b4cc:	89a1      	ldrh	r1, [r4, #12]
 800b4ce:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b4d0:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b4d2:	428a      	cmp	r2, r1
 800b4d4:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b4d6:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b4d8:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d3ed      	bcc.n	800b4ba <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800b4de:	2308      	movs	r3, #8
 800b4e0:	ae08      	add	r6, sp, #32
 800b4e2:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b4e4:	0031      	movs	r1, r6
 800b4e6:	7ce0      	ldrb	r0, [r4, #19]
 800b4e8:	f000 ff05 	bl	800c2f6 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b4ec:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 800b4ee:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b4f0:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 800b4f2:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b4f4:	f7f4 febe 	bl	8000274 <__aeabi_uidivmod>
 800b4f8:	2901      	cmp	r1, #1
 800b4fa:	d1de      	bne.n	800b4ba <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b4fc:	2322      	movs	r3, #34	; 0x22
                    getPhy.Datarate = datarate;
 800b4fe:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b500:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b502:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b504:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b506:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b508:	7ce0      	ldrb	r0, [r4, #19]
 800b50a:	f000 fef4 	bl	800c2f6 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800b50e:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800b510:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800b512:	42bb      	cmp	r3, r7
 800b514:	d1d1      	bne.n	800b4ba <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 800b516:	7925      	ldrb	r5, [r4, #4]
 800b518:	2d00      	cmp	r5, #0
 800b51a:	d0ce      	beq.n	800b4ba <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b51c:	2302      	movs	r3, #2
 800b51e:	a90a      	add	r1, sp, #40	; 0x28
 800b520:	710b      	strb	r3, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800b522:	7ce0      	ldrb	r0, [r4, #19]
 800b524:	f000 fefa 	bl	800c31c <RegionInitDefaults>
 800b528:	e7c6      	b.n	800b4b8 <LoRaMacAdrCalcNext+0x60>

0800b52a <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800b52a:	4770      	bx	lr

0800b52c <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b52c:	2001      	movs	r0, #1
 800b52e:	4770      	bx	lr

0800b530 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 800b530:	0003      	movs	r3, r0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 800b532:	2000      	movs	r0, #0
 800b534:	6018      	str	r0, [r3, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b536:	4770      	bx	lr

0800b538 <LoRaMacClassBSetBeaconState>:
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b538:	4770      	bx	lr

0800b53a <LoRaMacClassBSetPingSlotState>:
 800b53a:	4770      	bx	lr

0800b53c <LoRaMacClassBSetMulticastSlotState>:
 800b53c:	4770      	bx	lr

0800b53e <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b53e:	2000      	movs	r0, #0
 800b540:	4770      	bx	lr

0800b542 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800b542:	4770      	bx	lr

0800b544 <LoRaMacClassBPingSlotTimerEvent>:
 800b544:	4770      	bx	lr

0800b546 <LoRaMacClassBMulticastSlotTimerEvent>:
 800b546:	4770      	bx	lr

0800b548 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b548:	2000      	movs	r0, #0
 800b54a:	4770      	bx	lr

0800b54c <LoRaMacClassBIsBeaconExpected>:
 800b54c:	2000      	movs	r0, #0
 800b54e:	4770      	bx	lr

0800b550 <LoRaMacClassBIsPingExpected>:
 800b550:	2000      	movs	r0, #0
 800b552:	4770      	bx	lr

0800b554 <LoRaMacClassBIsMulticastExpected>:
 800b554:	2000      	movs	r0, #0
 800b556:	4770      	bx	lr

0800b558 <LoRaMacClassBIsBeaconModeActive>:
 800b558:	2000      	movs	r0, #0
 800b55a:	4770      	bx	lr

0800b55c <LoRaMacClassBSetPingSlotInfo>:
 800b55c:	4770      	bx	lr

0800b55e <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800b55e:	4770      	bx	lr

0800b560 <LoRaMacClassBResumeBeaconing>:
 800b560:	4770      	bx	lr

0800b562 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b562:	2002      	movs	r0, #2
 800b564:	4770      	bx	lr

0800b566 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b566:	2002      	movs	r0, #2
 800b568:	4770      	bx	lr

0800b56a <LoRaMacMibClassBSetRequestConfirm>:
 800b56a:	2002      	movs	r0, #2
 800b56c:	4770      	bx	lr

0800b56e <LoRaMacClassBPingSlotInfoAns>:
 800b56e:	4770      	bx	lr

0800b570 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b570:	2000      	movs	r0, #0
 800b572:	4770      	bx	lr

0800b574 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800b574:	4770      	bx	lr

0800b576 <LoRaMacClassBDeviceTimeAns>:
 800b576:	4770      	bx	lr

0800b578 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b578:	2000      	movs	r0, #0
 800b57a:	4770      	bx	lr

0800b57c <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800b57c:	2000      	movs	r0, #0
 800b57e:	4770      	bx	lr

0800b580 <LoRaMacClassBStopRxSlots>:
 800b580:	4770      	bx	lr

0800b582 <LoRaMacClassBProcess>:
 800b582:	4770      	bx	lr

0800b584 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 800b584:	4b03      	ldr	r3, [pc, #12]	; (800b594 <NvmCtxCallback+0x10>)
{
 800b586:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d000      	beq.n	800b590 <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 800b58e:	4798      	blx	r3
    }
}
 800b590:	bd10      	pop	{r4, pc}
 800b592:	46c0      	nop			; (mov r8, r8)
 800b594:	20000c60 	.word	0x20000c60

0800b598 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800b598:	b570      	push	{r4, r5, r6, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800b59a:	4d06      	ldr	r5, [pc, #24]	; (800b5b4 <LoRaMacCommandsInit+0x1c>)
{
 800b59c:	0004      	movs	r4, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800b59e:	22fc      	movs	r2, #252	; 0xfc
 800b5a0:	0028      	movs	r0, r5
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	f001 ffa2 	bl	800d4ec <memset1>
    list->First = NULL;
 800b5a8:	2000      	movs	r0, #0

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800b5aa:	4b03      	ldr	r3, [pc, #12]	; (800b5b8 <LoRaMacCommandsInit+0x20>)
    list->First = NULL;
 800b5ac:	6028      	str	r0, [r5, #0]
    list->Last = NULL;
 800b5ae:	6068      	str	r0, [r5, #4]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800b5b0:	601c      	str	r4, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	20000c64 	.word	0x20000c64
 800b5b8:	20000c60 	.word	0x20000c60

0800b5bc <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800b5bc:	0001      	movs	r1, r0
 800b5be:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b5c0:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 800b5c2:	2900      	cmp	r1, #0
 800b5c4:	d004      	beq.n	800b5d0 <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800b5c6:	4803      	ldr	r0, [pc, #12]	; (800b5d4 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 800b5c8:	22fc      	movs	r2, #252	; 0xfc
 800b5ca:	f001 ff79 	bl	800d4c0 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800b5ce:	2000      	movs	r0, #0
    }
}
 800b5d0:	bd10      	pop	{r4, pc}
 800b5d2:	46c0      	nop			; (mov r8, r8)
 800b5d4:	20000c64 	.word	0x20000c64

0800b5d8 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800b5d8:	23fc      	movs	r3, #252	; 0xfc
 800b5da:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800b5dc:	4800      	ldr	r0, [pc, #0]	; (800b5e0 <LoRaMacCommandsGetNvmCtx+0x8>)
 800b5de:	4770      	bx	lr
 800b5e0:	20000c64 	.word	0x20000c64

0800b5e4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800b5e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5e6:	0015      	movs	r5, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b5e8:	2701      	movs	r7, #1
{
 800b5ea:	9001      	str	r0, [sp, #4]
    if( payload == NULL )
 800b5ec:	2900      	cmp	r1, #0
 800b5ee:	d03b      	beq.n	800b668 <LoRaMacCommandsAddCmd+0x84>
 800b5f0:	2400      	movs	r4, #0
 800b5f2:	4b21      	ldr	r3, [pc, #132]	; (800b678 <LoRaMacCommandsAddCmd+0x94>)
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800b5f4:	0122      	lsls	r2, r4, #4
 800b5f6:	0018      	movs	r0, r3
 800b5f8:	4694      	mov	ip, r2
 800b5fa:	001a      	movs	r2, r3
 800b5fc:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800b5fe:	7817      	ldrb	r7, [r2, #0]
 800b600:	2f00      	cmp	r7, #0
 800b602:	d133      	bne.n	800b66c <LoRaMacCommandsAddCmd+0x88>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b604:	3201      	adds	r2, #1
 800b606:	4282      	cmp	r2, r0
 800b608:	d1f9      	bne.n	800b5fe <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800b60a:	481c      	ldr	r0, [pc, #112]	; (800b67c <LoRaMacCommandsAddCmd+0x98>)
 800b60c:	6802      	ldr	r2, [r0, #0]
 800b60e:	2a00      	cmp	r2, #0
 800b610:	d100      	bne.n	800b614 <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 800b612:	6003      	str	r3, [r0, #0]
    if( list->Last )
 800b614:	6842      	ldr	r2, [r0, #4]
 800b616:	2a00      	cmp	r2, #0
 800b618:	d000      	beq.n	800b61c <LoRaMacCommandsAddCmd+0x38>
        list->Last->Next = element;
 800b61a:	6013      	str	r3, [r2, #0]
    list->Last = element;
 800b61c:	6043      	str	r3, [r0, #4]
    element->Next = NULL;
 800b61e:	0122      	lsls	r2, r4, #4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800b620:	9b01      	ldr	r3, [sp, #4]
    element->Next = NULL;
 800b622:	1882      	adds	r2, r0, r2
    newCmd->PayloadSize = payloadSize;
 800b624:	3401      	adds	r4, #1
    newCmd->CID = cid;
 800b626:	7313      	strb	r3, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800b628:	0123      	lsls	r3, r4, #4
 800b62a:	50c5      	str	r5, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b62c:	4663      	mov	r3, ip
    element->Next = NULL;
 800b62e:	2600      	movs	r6, #0
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b630:	330d      	adds	r3, #13
    element->Next = NULL;
 800b632:	6096      	str	r6, [r2, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b634:	18c0      	adds	r0, r0, r3
 800b636:	b2aa      	uxth	r2, r5
 800b638:	f001 ff42 	bl	800d4c0 <memcpy1>
    switch( cid )
 800b63c:	9b01      	ldr	r3, [sp, #4]
            return true;
 800b63e:	2201      	movs	r2, #1
    switch( cid )
 800b640:	2b05      	cmp	r3, #5
 800b642:	d006      	beq.n	800b652 <LoRaMacCommandsAddCmd+0x6e>
 800b644:	0018      	movs	r0, r3
 800b646:	2302      	movs	r3, #2
 800b648:	3808      	subs	r0, #8
 800b64a:	b2c0      	uxtb	r0, r0
 800b64c:	4283      	cmp	r3, r0
 800b64e:	4176      	adcs	r6, r6
 800b650:	b2f2      	uxtb	r2, r6
    newCmd->IsSticky = IsSticky( cid );
 800b652:	4b0a      	ldr	r3, [pc, #40]	; (800b67c <LoRaMacCommandsAddCmd+0x98>)
 800b654:	0124      	lsls	r4, r4, #4
 800b656:	191c      	adds	r4, r3, r4

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b658:	33f8      	adds	r3, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800b65a:	7122      	strb	r2, [r4, #4]
    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	3201      	adds	r2, #1
 800b660:	1955      	adds	r5, r2, r5
 800b662:	601d      	str	r5, [r3, #0]

    NvmCtxCallback( );
 800b664:	f7ff ff8e 	bl	800b584 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b668:	0038      	movs	r0, r7
 800b66a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800b66c:	3401      	adds	r4, #1
 800b66e:	0003      	movs	r3, r0
 800b670:	2c0f      	cmp	r4, #15
 800b672:	d1bf      	bne.n	800b5f4 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b674:	2702      	movs	r7, #2
 800b676:	e7f7      	b.n	800b668 <LoRaMacCommandsAddCmd+0x84>
 800b678:	20000c6c 	.word	0x20000c6c
 800b67c:	20000c64 	.word	0x20000c64

0800b680 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800b680:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b682:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800b684:	2800      	cmp	r0, #0
 800b686:	d023      	beq.n	800b6d0 <LoRaMacCommandsRemoveCmd+0x50>
    curElement = list->First;
 800b688:	4b12      	ldr	r3, [pc, #72]	; (800b6d4 <LoRaMacCommandsRemoveCmd+0x54>)
 800b68a:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800b68c:	4290      	cmp	r0, r2
 800b68e:	d104      	bne.n	800b69a <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800b690:	6802      	ldr	r2, [r0, #0]
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	2200      	movs	r2, #0
 800b696:	e005      	b.n	800b6a4 <LoRaMacCommandsRemoveCmd+0x24>
 800b698:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b69a:	2a00      	cmp	r2, #0
 800b69c:	d002      	beq.n	800b6a4 <LoRaMacCommandsRemoveCmd+0x24>
 800b69e:	6811      	ldr	r1, [r2, #0]
 800b6a0:	4288      	cmp	r0, r1
 800b6a2:	d1f9      	bne.n	800b698 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800b6a4:	6859      	ldr	r1, [r3, #4]
 800b6a6:	4288      	cmp	r0, r1
 800b6a8:	d100      	bne.n	800b6ac <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800b6aa:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800b6ac:	2a00      	cmp	r2, #0
 800b6ae:	d001      	beq.n	800b6b4 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800b6b0:	6801      	ldr	r1, [r0, #0]
 800b6b2:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800b6b4:	2400      	movs	r4, #0
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b6b6:	33f8      	adds	r3, #248	; 0xf8
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	6881      	ldr	r1, [r0, #8]
 800b6bc:	3a01      	subs	r2, #1
 800b6be:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800b6c0:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b6c2:	0021      	movs	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b6c4:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b6c6:	2210      	movs	r2, #16
 800b6c8:	f001 ff10 	bl	800d4ec <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 800b6cc:	f7ff ff5a 	bl	800b584 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b6d0:	0020      	movs	r0, r4
 800b6d2:	bd10      	pop	{r4, pc}
 800b6d4:	20000c64 	.word	0x20000c64

0800b6d8 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800b6d8:	4b08      	ldr	r3, [pc, #32]	; (800b6fc <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 800b6da:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800b6dc:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b6de:	2c00      	cmp	r4, #0
 800b6e0:	d103      	bne.n	800b6ea <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 800b6e2:	f7ff ff4f 	bl	800b584 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b6e6:	0020      	movs	r0, r4
 800b6e8:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 800b6ea:	7b23      	ldrb	r3, [r4, #12]
 800b6ec:	6825      	ldr	r5, [r4, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d102      	bne.n	800b6f8 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 800b6f2:	0020      	movs	r0, r4
 800b6f4:	f7ff ffc4 	bl	800b680 <LoRaMacCommandsRemoveCmd>
{
 800b6f8:	002c      	movs	r4, r5
 800b6fa:	e7f0      	b.n	800b6de <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800b6fc:	20000c64 	.word	0x20000c64

0800b700 <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800b700:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
{
 800b702:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800b704:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b706:	2c00      	cmp	r4, #0
 800b708:	d103      	bne.n	800b712 <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 800b70a:	f7ff ff3b 	bl	800b584 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b70e:	0020      	movs	r0, r4
 800b710:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 800b712:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 800b714:	6825      	ldr	r5, [r4, #0]
    switch( cid )
 800b716:	2b05      	cmp	r3, #5
 800b718:	d002      	beq.n	800b720 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
 800b71a:	3b08      	subs	r3, #8
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d802      	bhi.n	800b726 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
            LoRaMacCommandsRemoveCmd( curElement );
 800b720:	0020      	movs	r0, r4
 800b722:	f7ff ffad 	bl	800b680 <LoRaMacCommandsRemoveCmd>
{
 800b726:	002c      	movs	r4, r5
 800b728:	e7ed      	b.n	800b706 <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800b72a:	46c0      	nop			; (mov r8, r8)
 800b72c:	20000c64 	.word	0x20000c64

0800b730 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800b730:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b732:	2001      	movs	r0, #1
    if( size == NULL )
 800b734:	2b00      	cmp	r3, #0
 800b736:	d004      	beq.n	800b742 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = NvmCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800b738:	2000      	movs	r0, #0
    *size = NvmCtx.SerializedCmdsSize;
 800b73a:	4a02      	ldr	r2, [pc, #8]	; (800b744 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b73c:	32f8      	adds	r2, #248	; 0xf8
 800b73e:	6812      	ldr	r2, [r2, #0]
 800b740:	601a      	str	r2, [r3, #0]
}
 800b742:	4770      	bx	lr
 800b744:	20000c64 	.word	0x20000c64

0800b748 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800b748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b74a:	000f      	movs	r7, r1
 800b74c:	9001      	str	r0, [sp, #4]
 800b74e:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b750:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b752:	2a00      	cmp	r2, #0
 800b754:	d00a      	beq.n	800b76c <LoRaMacCommandsSerializeCmds+0x24>
 800b756:	2900      	cmp	r1, #0
 800b758:	d008      	beq.n	800b76c <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 800b75a:	4b13      	ldr	r3, [pc, #76]	; (800b7a8 <LoRaMacCommandsSerializeCmds+0x60>)
 800b75c:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800b75e:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b760:	2c00      	cmp	r4, #0
 800b762:	d104      	bne.n	800b76e <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b764:	0038      	movs	r0, r7
 800b766:	f7ff ffe3 	bl	800b730 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b76a:	2000      	movs	r0, #0
}
 800b76c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b76e:	9a01      	ldr	r2, [sp, #4]
 800b770:	1ad1      	subs	r1, r2, r3
 800b772:	68a2      	ldr	r2, [r4, #8]
 800b774:	3201      	adds	r2, #1
 800b776:	4291      	cmp	r1, r2
 800b778:	d30e      	bcc.n	800b798 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 800b77a:	7922      	ldrb	r2, [r4, #4]
 800b77c:	1c5d      	adds	r5, r3, #1
 800b77e:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b780:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800b782:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b784:	b29a      	uxth	r2, r3
 800b786:	1d61      	adds	r1, r4, #5
 800b788:	1970      	adds	r0, r6, r5
 800b78a:	f001 fe99 	bl	800d4c0 <memcpy1>
            itr += curElement->PayloadSize;
 800b78e:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800b790:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800b792:	18ed      	adds	r5, r5, r3
 800b794:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 800b796:	e7e3      	b.n	800b760 <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800b798:	0020      	movs	r0, r4
 800b79a:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b79c:	f7ff ff70 	bl	800b680 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800b7a0:	2c00      	cmp	r4, #0
 800b7a2:	d1f9      	bne.n	800b798 <LoRaMacCommandsSerializeCmds+0x50>
 800b7a4:	e7de      	b.n	800b764 <LoRaMacCommandsSerializeCmds+0x1c>
 800b7a6:	46c0      	nop			; (mov r8, r8)
 800b7a8:	20000c64 	.word	0x20000c64

0800b7ac <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800b7ac:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b7ae:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00b      	beq.n	800b7cc <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800b7b4:	4a07      	ldr	r2, [pc, #28]	; (800b7d4 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800b7b6:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d005      	beq.n	800b7cc <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 800b7c0:	7b02      	ldrb	r2, [r0, #12]
 800b7c2:	2a00      	cmp	r2, #0
 800b7c4:	d003      	beq.n	800b7ce <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800b7c6:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 800b7c8:	2000      	movs	r0, #0
            *cmdsPending = true;
 800b7ca:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b7cc:	4770      	bx	lr
        curElement = curElement->Next;
 800b7ce:	6800      	ldr	r0, [r0, #0]
 800b7d0:	e7f4      	b.n	800b7bc <LoRaMacCommandsStickyCmdsPending+0x10>
 800b7d2:	46c0      	nop			; (mov r8, r8)
 800b7d4:	20000c64 	.word	0x20000c64

0800b7d8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b7d8:	3802      	subs	r0, #2
 800b7da:	b2c3      	uxtb	r3, r0
{
 800b7dc:	2000      	movs	r0, #0
 800b7de:	2b11      	cmp	r3, #17
 800b7e0:	d801      	bhi.n	800b7e6 <LoRaMacCommandsGetCmdSize+0xe>
 800b7e2:	4a01      	ldr	r2, [pc, #4]	; (800b7e8 <LoRaMacCommandsGetCmdSize+0x10>)
 800b7e4:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b7e6:	4770      	bx	lr
 800b7e8:	08012b4d 	.word	0x08012b4d

0800b7ec <GetElement.isra.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800b7ec:	b570      	push	{r4, r5, r6, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b7ee:	4b0d      	ldr	r3, [pc, #52]	; (800b824 <GetElement.isra.0+0x38>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800b7f0:	0004      	movs	r4, r0
 800b7f2:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b7f4:	6919      	ldr	r1, [r3, #16]
 800b7f6:	7d0a      	ldrb	r2, [r1, #20]
    if( count == 0 )
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d010      	beq.n	800b81e <GetElement.isra.0+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b7fc:	000d      	movs	r5, r1
 800b7fe:	2300      	movs	r3, #0
 800b800:	3510      	adds	r5, #16
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800b802:	7806      	ldrb	r6, [r0, #0]
 800b804:	42a6      	cmp	r6, r4
 800b806:	d007      	beq.n	800b818 <GetElement.isra.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b808:	42a8      	cmp	r0, r5
 800b80a:	d106      	bne.n	800b81a <GetElement.isra.0+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b80c:	0008      	movs	r0, r1
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 800b80e:	3301      	adds	r3, #1
 800b810:	b2db      	uxtb	r3, r3
 800b812:	429a      	cmp	r2, r3
 800b814:	d1f5      	bne.n	800b802 <GetElement.isra.0+0x16>
        return NULL;
 800b816:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800b818:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800b81a:	3004      	adds	r0, #4
 800b81c:	e7f7      	b.n	800b80e <GetElement.isra.0+0x22>
        return NULL;
 800b81e:	0010      	movs	r0, r2
 800b820:	e7fa      	b.n	800b818 <GetElement.isra.0+0x2c>
 800b822:	46c0      	nop			; (mov r8, r8)
 800b824:	20000d60 	.word	0x20000d60

0800b828 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 800b828:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b82a:	4c0a      	ldr	r4, [pc, #40]	; (800b854 <LoRaMacConfirmQueueInit+0x2c>)

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800b82c:	2200      	movs	r2, #0
 800b82e:	0023      	movs	r3, r4
    ConfirmQueueCtx.Primitives = primitives;
 800b830:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800b832:	0020      	movs	r0, r4
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800b834:	3328      	adds	r3, #40	; 0x28
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800b836:	3014      	adds	r0, #20
{
 800b838:	000d      	movs	r5, r1
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800b83a:	701a      	strb	r2, [r3, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800b83c:	21ff      	movs	r1, #255	; 0xff
 800b83e:	3214      	adds	r2, #20
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800b840:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b842:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b844:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800b846:	f001 fe51 	bl	800d4ec <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800b84e:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b850:	7553      	strb	r3, [r2, #21]
}
 800b852:	bd70      	pop	{r4, r5, r6, pc}
 800b854:	20000d60 	.word	0x20000d60

0800b858 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800b858:	0001      	movs	r1, r0
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
        return true;
    }
    else
    {
        return false;
 800b85a:	2000      	movs	r0, #0
{
 800b85c:	b510      	push	{r4, lr}
    if( confirmQueueNvmCtx != NULL )
 800b85e:	4281      	cmp	r1, r0
 800b860:	d005      	beq.n	800b86e <LoRaMacConfirmQueueRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800b862:	4803      	ldr	r0, [pc, #12]	; (800b870 <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 800b864:	2216      	movs	r2, #22
 800b866:	3014      	adds	r0, #20
 800b868:	f001 fe2a 	bl	800d4c0 <memcpy1>
        return true;
 800b86c:	2001      	movs	r0, #1
    }
}
 800b86e:	bd10      	pop	{r4, pc}
 800b870:	20000d60 	.word	0x20000d60

0800b874 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800b874:	2316      	movs	r3, #22
 800b876:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
 800b878:	4801      	ldr	r0, [pc, #4]	; (800b880 <LoRaMacConfirmQueueGetNvmCtx+0xc>)
}
 800b87a:	3014      	adds	r0, #20
 800b87c:	4770      	bx	lr
 800b87e:	46c0      	nop			; (mov r8, r8)
 800b880:	20000d60 	.word	0x20000d60

0800b884 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800b884:	b510      	push	{r4, lr}
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b886:	4c0e      	ldr	r4, [pc, #56]	; (800b8c0 <LoRaMacConfirmQueueAdd+0x3c>)
{
 800b888:	0001      	movs	r1, r0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b88a:	6922      	ldr	r2, [r4, #16]
    {
        // Protect the buffer against overwrites
        return false;
 800b88c:	2000      	movs	r0, #0
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b88e:	7d13      	ldrb	r3, [r2, #20]
 800b890:	2b04      	cmp	r3, #4
 800b892:	d813      	bhi.n	800b8bc <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b894:	7808      	ldrb	r0, [r1, #0]
 800b896:	68a3      	ldr	r3, [r4, #8]
 800b898:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b89a:	7848      	ldrb	r0, [r1, #1]
 800b89c:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b89e:	78c9      	ldrb	r1, [r1, #3]
        bufferPointer++;
 800b8a0:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b8a2:	70d9      	strb	r1, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	7099      	strb	r1, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800b8a8:	7d11      	ldrb	r1, [r2, #20]
 800b8aa:	3101      	adds	r1, #1
 800b8ac:	7511      	strb	r1, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b8ae:	0011      	movs	r1, r2
 800b8b0:	3110      	adds	r1, #16
 800b8b2:	428b      	cmp	r3, r1
 800b8b4:	d100      	bne.n	800b8b8 <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b8b6:	0010      	movs	r0, r2
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b8b8:	60a0      	str	r0, [r4, #8]

    return true;
 800b8ba:	2001      	movs	r0, #1
}
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	46c0      	nop			; (mov r8, r8)
 800b8c0:	20000d60 	.word	0x20000d60

0800b8c4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800b8c4:	b510      	push	{r4, lr}
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b8c6:	4908      	ldr	r1, [pc, #32]	; (800b8e8 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800b8c8:	690a      	ldr	r2, [r1, #16]
 800b8ca:	7d13      	ldrb	r3, [r2, #20]
    {
        return false;
 800b8cc:	1e18      	subs	r0, r3, #0
    if( count == 0 )
 800b8ce:	d00a      	beq.n	800b8e6 <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	7513      	strb	r3, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b8d4:	0013      	movs	r3, r2
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b8d6:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b8d8:	3310      	adds	r3, #16
        bufferPointer++;
 800b8da:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b8dc:	429c      	cmp	r4, r3
 800b8de:	d100      	bne.n	800b8e2 <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b8e0:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b8e2:	6048      	str	r0, [r1, #4]

    return true;
 800b8e4:	2001      	movs	r0, #1
}
 800b8e6:	bd10      	pop	{r4, pc}
 800b8e8:	20000d60 	.word	0x20000d60

0800b8ec <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800b8ec:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800b8ee:	4b08      	ldr	r3, [pc, #32]	; (800b910 <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800b8f0:	0004      	movs	r4, r0
    if( count == 0 )
 800b8f2:	691a      	ldr	r2, [r3, #16]
{
 800b8f4:	0008      	movs	r0, r1
    if( count == 0 )
 800b8f6:	7d12      	ldrb	r2, [r2, #20]
 800b8f8:	2a00      	cmp	r2, #0
 800b8fa:	d007      	beq.n	800b90c <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b8fc:	6859      	ldr	r1, [r3, #4]
 800b8fe:	f7ff ff75 	bl	800b7ec <GetElement.isra.0>
        if( element != NULL )
 800b902:	2800      	cmp	r0, #0
 800b904:	d002      	beq.n	800b90c <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800b906:	2301      	movs	r3, #1
            element->Status = status;
 800b908:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800b90a:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800b90c:	bd10      	pop	{r4, pc}
 800b90e:	46c0      	nop			; (mov r8, r8)
 800b910:	20000d60 	.word	0x20000d60

0800b914 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b914:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800b916:	4b07      	ldr	r3, [pc, #28]	; (800b934 <LoRaMacConfirmQueueGetStatus+0x20>)
    if( count == 0 )
 800b918:	691a      	ldr	r2, [r3, #16]
 800b91a:	7d11      	ldrb	r1, [r2, #20]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b91c:	2201      	movs	r2, #1
    if( count == 0 )
 800b91e:	2900      	cmp	r1, #0
 800b920:	d006      	beq.n	800b930 <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b922:	6859      	ldr	r1, [r3, #4]
 800b924:	f7ff ff62 	bl	800b7ec <GetElement.isra.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b928:	2201      	movs	r2, #1
        if( element != NULL )
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d000      	beq.n	800b930 <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800b92e:	7842      	ldrb	r2, [r0, #1]
}
 800b930:	0010      	movs	r0, r2
 800b932:	bd10      	pop	{r4, pc}
 800b934:	20000d60 	.word	0x20000d60

0800b938 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800b938:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b93a:	490c      	ldr	r1, [pc, #48]	; (800b96c <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800b93c:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b93e:	684b      	ldr	r3, [r1, #4]
    if( count == 0 )
 800b940:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800b942:	7550      	strb	r0, [r2, #21]
    if( count == 0 )
 800b944:	2c00      	cmp	r4, #0
 800b946:	d00d      	beq.n	800b964 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b948:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800b94a:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b94c:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b94e:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 800b950:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800b952:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800b954:	2e00      	cmp	r6, #0
 800b956:	d100      	bne.n	800b95a <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 800b958:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b95a:	42a3      	cmp	r3, r4
 800b95c:	d103      	bne.n	800b966 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b95e:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b960:	4299      	cmp	r1, r3
 800b962:	d1f5      	bne.n	800b950 <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 800b964:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800b966:	3304      	adds	r3, #4
 800b968:	e7fa      	b.n	800b960 <LoRaMacConfirmQueueSetStatusCmn+0x28>
 800b96a:	46c0      	nop			; (mov r8, r8)
 800b96c:	20000d60 	.word	0x20000d60

0800b970 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b970:	4b04      	ldr	r3, [pc, #16]	; (800b984 <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800b972:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b974:	6859      	ldr	r1, [r3, #4]
 800b976:	f7ff ff39 	bl	800b7ec <GetElement.isra.0>
 800b97a:	1e43      	subs	r3, r0, #1
 800b97c:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800b97e:	b2c0      	uxtb	r0, r0
 800b980:	bd10      	pop	{r4, pc}
 800b982:	46c0      	nop			; (mov r8, r8)
 800b984:	20000d60 	.word	0x20000d60

0800b988 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800b988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b98a:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800b98c:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800b98e:	4e13      	ldr	r6, [pc, #76]	; (800b9dc <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800b990:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800b992:	6933      	ldr	r3, [r6, #16]
 800b994:	7d1b      	ldrb	r3, [r3, #20]
 800b996:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800b998:	9b01      	ldr	r3, [sp, #4]
 800b99a:	429c      	cmp	r4, r3
 800b99c:	d101      	bne.n	800b9a2 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800b99e:	b005      	add	sp, #20
 800b9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800b9a2:	6873      	ldr	r3, [r6, #4]
 800b9a4:	7818      	ldrb	r0, [r3, #0]
 800b9a6:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800b9a8:	7859      	ldrb	r1, [r3, #1]
 800b9aa:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800b9ac:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800b9ae:	2f00      	cmp	r7, #0
 800b9b0:	d00d      	beq.n	800b9ce <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800b9b2:	6833      	ldr	r3, [r6, #0]
 800b9b4:	0028      	movs	r0, r5
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800b9ba:	f7ff ff83 	bl	800b8c4 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800b9be:	2f00      	cmp	r7, #0
 800b9c0:	d102      	bne.n	800b9c8 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800b9c2:	a803      	add	r0, sp, #12
 800b9c4:	f7ff ff5e 	bl	800b884 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800b9c8:	3401      	adds	r4, #1
 800b9ca:	b2e4      	uxtb	r4, r4
 800b9cc:	e7e4      	b.n	800b998 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800b9ce:	aa03      	add	r2, sp, #12
 800b9d0:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800b9d2:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800b9d4:	78db      	ldrb	r3, [r3, #3]
 800b9d6:	70d3      	strb	r3, [r2, #3]
 800b9d8:	e7ef      	b.n	800b9ba <LoRaMacConfirmQueueHandleCb+0x32>
 800b9da:	46c0      	nop			; (mov r8, r8)
 800b9dc:	20000d60 	.word	0x20000d60

0800b9e0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800b9e0:	4b01      	ldr	r3, [pc, #4]	; (800b9e8 <LoRaMacConfirmQueueGetCnt+0x8>)
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	7d18      	ldrb	r0, [r3, #20]
}
 800b9e6:	4770      	bx	lr
 800b9e8:	20000d60 	.word	0x20000d60

0800b9ec <LoRaMacConfirmQueueIsFull>:
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b9ec:	2004      	movs	r0, #4

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b9ee:	4b03      	ldr	r3, [pc, #12]	; (800b9fc <LoRaMacConfirmQueueIsFull+0x10>)
 800b9f0:	691b      	ldr	r3, [r3, #16]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b9f2:	7d1b      	ldrb	r3, [r3, #20]
 800b9f4:	4298      	cmp	r0, r3
 800b9f6:	4180      	sbcs	r0, r0
 800b9f8:	4240      	negs	r0, r0
    }
    else
    {
        return false;
    }
}
 800b9fa:	4770      	bx	lr
 800b9fc:	20000d60 	.word	0x20000d60

0800ba00 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800ba00:	4770      	bx	lr
	...

0800ba04 <DeriveSessionKey10x>:
{
 800ba04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba06:	000f      	movs	r7, r1
    uint8_t compBase[16] = { 0 };
 800ba08:	2100      	movs	r1, #0
{
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	0004      	movs	r4, r0
 800ba0e:	0016      	movs	r6, r2
    uint8_t compBase[16] = { 0 };
 800ba10:	a801      	add	r0, sp, #4
 800ba12:	220c      	movs	r2, #12
{
 800ba14:	001d      	movs	r5, r3
    uint8_t compBase[16] = { 0 };
 800ba16:	9100      	str	r1, [sp, #0]
 800ba18:	f003 fe28 	bl	800f66c <memset>
    switch( keyID )
 800ba1c:	466a      	mov	r2, sp
 800ba1e:	1e63      	subs	r3, r4, #1
 800ba20:	7013      	strb	r3, [r2, #0]
    memcpy1( compBase + 1, joinNonce, 3 );
 800ba22:	466b      	mov	r3, sp
 800ba24:	2203      	movs	r2, #3
 800ba26:	1c58      	adds	r0, r3, #1
 800ba28:	0039      	movs	r1, r7
 800ba2a:	f001 fd49 	bl	800d4c0 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 800ba2e:	2203      	movs	r2, #3
 800ba30:	0031      	movs	r1, r6
 800ba32:	a801      	add	r0, sp, #4
 800ba34:	f001 fd44 	bl	800d4c0 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 800ba38:	466b      	mov	r3, sp
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	1dd8      	adds	r0, r3, #7
 800ba3e:	0029      	movs	r1, r5
 800ba40:	f001 fd3e 	bl	800d4c0 <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800ba44:	4b06      	ldr	r3, [pc, #24]	; (800ba60 <DeriveSessionKey10x+0x5c>)
 800ba46:	2201      	movs	r2, #1
 800ba48:	6818      	ldr	r0, [r3, #0]
 800ba4a:	4669      	mov	r1, sp
 800ba4c:	0023      	movs	r3, r4
 800ba4e:	6800      	ldr	r0, [r0, #0]
 800ba50:	f7fc f979 	bl	8007d46 <SecureElementDeriveAndStoreKey>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d000      	beq.n	800ba5a <DeriveSessionKey10x+0x56>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba58:	200f      	movs	r0, #15
}
 800ba5a:	b005      	add	sp, #20
 800ba5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	20000d8c 	.word	0x20000d8c

0800ba64 <PayloadEncrypt>:
{
 800ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba66:	b08d      	sub	sp, #52	; 0x34
 800ba68:	001d      	movs	r5, r3
 800ba6a:	ab12      	add	r3, sp, #72	; 0x48
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	9001      	str	r0, [sp, #4]
 800ba70:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800ba72:	9b01      	ldr	r3, [sp, #4]
{
 800ba74:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba76:	200a      	movs	r0, #10
{
 800ba78:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d026      	beq.n	800bacc <PayloadEncrypt+0x68>
    uint8_t sBlock[16] = { 0 };
 800ba7e:	2600      	movs	r6, #0
 800ba80:	220c      	movs	r2, #12
 800ba82:	0031      	movs	r1, r6
 800ba84:	a805      	add	r0, sp, #20
 800ba86:	9604      	str	r6, [sp, #16]
 800ba88:	f003 fdf0 	bl	800f66c <memset>
    uint8_t aBlock[16] = { 0 };
 800ba8c:	220c      	movs	r2, #12
 800ba8e:	0031      	movs	r1, r6
 800ba90:	a809      	add	r0, sp, #36	; 0x24
 800ba92:	9608      	str	r6, [sp, #32]
 800ba94:	f003 fdea 	bl	800f66c <memset>
    aBlock[0] = 0x01;
 800ba98:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800ba9a:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 800ba9c:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 800ba9e:	7163      	strb	r3, [r4, #5]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800baa0:	0c2b      	lsrs	r3, r5, #16
 800baa2:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 800baa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800baa6:	80e5      	strh	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 800baa8:	8163      	strh	r3, [r4, #10]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800baaa:	0c1b      	lsrs	r3, r3, #16
 800baac:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800baae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bab0:	0e2d      	lsrs	r5, r5, #24
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bab2:	0e1b      	lsrs	r3, r3, #24
    aBlock[0] = 0x01;
 800bab4:	7022      	strb	r2, [r4, #0]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bab6:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bab8:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 800baba:	0014      	movs	r4, r2
 800babc:	b2e2      	uxtb	r2, r4
 800babe:	0113      	lsls	r3, r2, #4
 800bac0:	3b10      	subs	r3, #16
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 800bac6:	2f00      	cmp	r7, #0
 800bac8:	dc02      	bgt.n	800bad0 <PayloadEncrypt+0x6c>
    return LORAMAC_CRYPTO_SUCCESS;
 800baca:	2000      	movs	r0, #0
}
 800bacc:	b00d      	add	sp, #52	; 0x34
 800bace:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800bad0:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bad2:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 800bad4:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800bad6:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bad8:	002b      	movs	r3, r5
 800bada:	2110      	movs	r1, #16
 800badc:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 800bade:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bae0:	f7fc f8bf 	bl	8007c62 <SecureElementAesEncrypt>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d115      	bne.n	800bb14 <PayloadEncrypt+0xb0>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bae8:	1c39      	adds	r1, r7, #0
 800baea:	1c0b      	adds	r3, r1, #0
 800baec:	2f10      	cmp	r7, #16
 800baee:	dd00      	ble.n	800baf2 <PayloadEncrypt+0x8e>
 800baf0:	2310      	movs	r3, #16
 800baf2:	b21b      	sxth	r3, r3
 800baf4:	4298      	cmp	r0, r3
 800baf6:	db02      	blt.n	800bafe <PayloadEncrypt+0x9a>
        size -= 16;
 800baf8:	3f10      	subs	r7, #16
 800bafa:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 800bafc:	e7de      	b.n	800babc <PayloadEncrypt+0x58>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bafe:	9b02      	ldr	r3, [sp, #8]
 800bb00:	5c2e      	ldrb	r6, [r5, r0]
 800bb02:	181a      	adds	r2, r3, r0
 800bb04:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bb06:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bb08:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bb0a:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bb0c:	4073      	eors	r3, r6
 800bb0e:	9e01      	ldr	r6, [sp, #4]
 800bb10:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bb12:	e7ea      	b.n	800baea <PayloadEncrypt+0x86>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bb14:	200f      	movs	r0, #15
 800bb16:	e7d9      	b.n	800bacc <PayloadEncrypt+0x68>

0800bb18 <GetLastFcntDown>:
    switch( fCntID )
 800bb18:	3801      	subs	r0, #1
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800bb1a:	2305      	movs	r3, #5
{
 800bb1c:	b500      	push	{lr}
 800bb1e:	2803      	cmp	r0, #3
 800bb20:	d80b      	bhi.n	800bb3a <GetLastFcntDown+0x22>
 800bb22:	4b0d      	ldr	r3, [pc, #52]	; (800bb58 <GetLastFcntDown+0x40>)
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f7f4 fb01 	bl	800012c <__gnu_thumb1_case_uqi>
 800bb2a:	0a02      	.short	0x0a02
 800bb2c:	140f      	.short	0x140f
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800bb2e:	691a      	ldr	r2, [r3, #16]
 800bb30:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800bb32:	001a      	movs	r2, r3
 800bb34:	3210      	adds	r2, #16
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bb36:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	0018      	movs	r0, r3
 800bb3c:	bd00      	pop	{pc}
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800bb3e:	695a      	ldr	r2, [r3, #20]
 800bb40:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800bb42:	001a      	movs	r2, r3
 800bb44:	3214      	adds	r2, #20
 800bb46:	e7f6      	b.n	800bb36 <GetLastFcntDown+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bb48:	699a      	ldr	r2, [r3, #24]
 800bb4a:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bb4c:	001a      	movs	r2, r3
 800bb4e:	3218      	adds	r2, #24
 800bb50:	e7f1      	b.n	800bb36 <GetLastFcntDown+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	600b      	str	r3, [r1, #0]
 800bb56:	e7ef      	b.n	800bb38 <GetLastFcntDown+0x20>
 800bb58:	20000d8c 	.word	0x20000d8c

0800bb5c <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800bb5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800bb5e:	2100      	movs	r1, #0
 800bb60:	220c      	movs	r2, #12
 800bb62:	a801      	add	r0, sp, #4
 800bb64:	9100      	str	r1, [sp, #0]
 800bb66:	f003 fd81 	bl	800f66c <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800bb6a:	4b06      	ldr	r3, [pc, #24]	; (800bb84 <LoRaMacCryptoDeriveMcKEKey.part.0+0x28>)
 800bb6c:	2204      	movs	r2, #4
 800bb6e:	6818      	ldr	r0, [r3, #0]
 800bb70:	4669      	mov	r1, sp
 800bb72:	237f      	movs	r3, #127	; 0x7f
 800bb74:	6800      	ldr	r0, [r0, #0]
 800bb76:	f7fc f8e6 	bl	8007d46 <SecureElementDeriveAndStoreKey>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d000      	beq.n	800bb80 <LoRaMacCryptoDeriveMcKEKey.part.0+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bb7e:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bb80:	b005      	add	sp, #20
 800bb82:	bd00      	pop	{pc}
 800bb84:	20000d8c 	.word	0x20000d8c

0800bb88 <VerifyCmacB0.isra.0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb8a:	b0c7      	sub	sp, #284	; 0x11c
 800bb8c:	0007      	movs	r7, r0
 800bb8e:	000c      	movs	r4, r1
 800bb90:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb92:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800bb94:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800bb96:	2f00      	cmp	r7, #0
 800bb98:	d030      	beq.n	800bbfc <VerifyCmacB0.isra.0.constprop.0+0x74>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bb9a:	2680      	movs	r6, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bb9c:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bb9e:	0076      	lsls	r6, r6, #1
 800bba0:	42b1      	cmp	r1, r6
 800bba2:	d82b      	bhi.n	800bbfc <VerifyCmacB0.isra.0.constprop.0+0x74>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800bba4:	2288      	movs	r2, #136	; 0x88
 800bba6:	2100      	movs	r1, #0
 800bba8:	0052      	lsls	r2, r2, #1
 800bbaa:	a802      	add	r0, sp, #8
 800bbac:	f001 fc9e 	bl	800d4ec <memset1>
    b0[0] = 0x49;
 800bbb0:	2349      	movs	r3, #73	; 0x49
 800bbb2:	9302      	str	r3, [sp, #8]
    b0[4] = 0x00;
 800bbb4:	ab02      	add	r3, sp, #8
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bbb6:	aa02      	add	r2, sp, #8
    b0[4] = 0x00;
 800bbb8:	809e      	strh	r6, [r3, #4]
    b0[6] = devAddr & 0xFF;
 800bbba:	80dd      	strh	r5, [r3, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bbbc:	0c2b      	lsrs	r3, r5, #16
 800bbbe:	7213      	strb	r3, [r2, #8]
    b0[10] = fCnt & 0xFF;
 800bbc0:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bbc2:	0e2d      	lsrs	r5, r5, #24
    b0[10] = fCnt & 0xFF;
 800bbc4:	8153      	strh	r3, [r2, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bbc6:	0c1b      	lsrs	r3, r3, #16
 800bbc8:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bbca:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bbcc:	0039      	movs	r1, r7
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bbce:	0e1e      	lsrs	r6, r3, #24
    b0[14] = 0x00;
 800bbd0:	2300      	movs	r3, #0
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bbd2:	7255      	strb	r5, [r2, #9]
    b0[14] = 0x00;
 800bbd4:	7393      	strb	r3, [r2, #14]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bbd6:	7356      	strb	r6, [r2, #13]
    b0[15] = msgLen & 0xFF;
 800bbd8:	73d4      	strb	r4, [r2, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bbda:	a806      	add	r0, sp, #24
 800bbdc:	0022      	movs	r2, r4
 800bbde:	f001 fc6f 	bl	800d4c0 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800bbe2:	0021      	movs	r1, r4
 800bbe4:	3110      	adds	r1, #16
 800bbe6:	9b01      	ldr	r3, [sp, #4]
 800bbe8:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800bbea:	b289      	uxth	r1, r1
 800bbec:	a802      	add	r0, sp, #8
 800bbee:	f7fc f820 	bl	8007c32 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d002      	beq.n	800bbfc <VerifyCmacB0.isra.0.constprop.0+0x74>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800bbf6:	2801      	cmp	r0, #1
 800bbf8:	d000      	beq.n	800bbfc <VerifyCmacB0.isra.0.constprop.0+0x74>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bbfa:	200f      	movs	r0, #15
}
 800bbfc:	b047      	add	sp, #284	; 0x11c
 800bbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc00 <LoRaMacCryptoInit>:
{
 800bc00:	b570      	push	{r4, r5, r6, lr}
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 800bc02:	4c10      	ldr	r4, [pc, #64]	; (800bc44 <LoRaMacCryptoInit+0x44>)
 800bc04:	0023      	movs	r3, r4
 800bc06:	3308      	adds	r3, #8
 800bc08:	6023      	str	r3, [r4, #0]
    if( cryptoNvmCtxChanged != 0 )
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d100      	bne.n	800bc10 <LoRaMacCryptoInit+0x10>
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 800bc0e:	480e      	ldr	r0, [pc, #56]	; (800bc48 <LoRaMacCryptoInit+0x48>)
 800bc10:	6060      	str	r0, [r4, #4]
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 800bc12:	0020      	movs	r0, r4
 800bc14:	2224      	movs	r2, #36	; 0x24
 800bc16:	3008      	adds	r0, #8
 800bc18:	2100      	movs	r1, #0
 800bc1a:	f001 fc67 	bl	800d4ec <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 800bc1e:	6823      	ldr	r3, [r4, #0]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800bc20:	4a0a      	ldr	r2, [pc, #40]	; (800bc4c <LoRaMacCryptoInit+0x4c>)
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bc22:	0019      	movs	r1, r3
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800bc24:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bc26:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800bc28:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bc2a:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bc2c:	3118      	adds	r1, #24
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800bc2e:	60dd      	str	r5, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bc30:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bc32:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800bc34:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bc36:	6219      	str	r1, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800bc38:	61da      	str	r2, [r3, #28]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800bc3a:	6863      	ldr	r3, [r4, #4]
 800bc3c:	4798      	blx	r3
}
 800bc3e:	0028      	movs	r0, r5
 800bc40:	bd70      	pop	{r4, r5, r6, pc}
 800bc42:	46c0      	nop			; (mov r8, r8)
 800bc44:	20000d8c 	.word	0x20000d8c
 800bc48:	0800ba01 	.word	0x0800ba01
 800bc4c:	01010100 	.word	0x01010100

0800bc50 <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 800bc50:	4b02      	ldr	r3, [pc, #8]	; (800bc5c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6018      	str	r0, [r3, #0]
}
 800bc56:	2000      	movs	r0, #0
 800bc58:	4770      	bx	lr
 800bc5a:	46c0      	nop			; (mov r8, r8)
 800bc5c:	20000d8c 	.word	0x20000d8c

0800bc60 <LoRaMacCryptoRestoreNvmCtx>:
{
 800bc60:	0001      	movs	r1, r0
 800bc62:	b510      	push	{r4, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc64:	200a      	movs	r0, #10
    if( cryptoNvmCtx != 0 )
 800bc66:	2900      	cmp	r1, #0
 800bc68:	d005      	beq.n	800bc76 <LoRaMacCryptoRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 800bc6a:	4803      	ldr	r0, [pc, #12]	; (800bc78 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 800bc6c:	2224      	movs	r2, #36	; 0x24
 800bc6e:	3008      	adds	r0, #8
 800bc70:	f001 fc26 	bl	800d4c0 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 800bc74:	2000      	movs	r0, #0
}
 800bc76:	bd10      	pop	{r4, pc}
 800bc78:	20000d8c 	.word	0x20000d8c

0800bc7c <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 800bc7c:	2324      	movs	r3, #36	; 0x24
 800bc7e:	6003      	str	r3, [r0, #0]
    return &NvmCryptoCtx;
 800bc80:	4801      	ldr	r0, [pc, #4]	; (800bc88 <LoRaMacCryptoGetNvmCtx+0xc>)
}
 800bc82:	3008      	adds	r0, #8
 800bc84:	4770      	bx	lr
 800bc86:	46c0      	nop			; (mov r8, r8)
 800bc88:	20000d8c 	.word	0x20000d8c

0800bc8c <LoRaMacCryptoGetFCntUp>:
{
 800bc8c:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc8e:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d005      	beq.n	800bca0 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800bc94:	2000      	movs	r0, #0
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 800bc96:	4a03      	ldr	r2, [pc, #12]	; (800bca4 <LoRaMacCryptoGetFCntUp+0x18>)
 800bc98:	6812      	ldr	r2, [r2, #0]
 800bc9a:	68d2      	ldr	r2, [r2, #12]
 800bc9c:	3201      	adds	r2, #1
 800bc9e:	601a      	str	r2, [r3, #0]
}
 800bca0:	4770      	bx	lr
 800bca2:	46c0      	nop			; (mov r8, r8)
 800bca4:	20000d8c 	.word	0x20000d8c

0800bca8 <LoRaMacCryptoGetFCntDown>:
{
 800bca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcaa:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800bcac:	2300      	movs	r3, #0
{
 800bcae:	0007      	movs	r7, r0
 800bcb0:	000d      	movs	r5, r1
 800bcb2:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bcb4:	200a      	movs	r0, #10
    uint32_t lastDown = 0;
 800bcb6:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 800bcb8:	429c      	cmp	r4, r3
 800bcba:	d026      	beq.n	800bd0a <LoRaMacCryptoGetFCntDown+0x62>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800bcbc:	0038      	movs	r0, r7
 800bcbe:	a901      	add	r1, sp, #4
 800bcc0:	f7ff ff2a 	bl	800bb18 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d120      	bne.n	800bd0a <LoRaMacCryptoGetFCntDown+0x62>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800bcc8:	9f01      	ldr	r7, [sp, #4]
 800bcca:	1c7b      	adds	r3, r7, #1
 800bccc:	d101      	bne.n	800bcd2 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800bcce:	6026      	str	r6, [r4, #0]
 800bcd0:	e005      	b.n	800bcde <LoRaMacCryptoGetFCntDown+0x36>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800bcd2:	b2bb      	uxth	r3, r7
 800bcd4:	1af3      	subs	r3, r6, r3
        if( fCntDiff > 0 )
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	dd13      	ble.n	800bd02 <LoRaMacCryptoGetFCntDown+0x5a>
            *currentDown = lastDown + fCntDiff;
 800bcda:	18fb      	adds	r3, r7, r3
 800bcdc:	6023      	str	r3, [r4, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800bcde:	4b10      	ldr	r3, [pc, #64]	; (800bd20 <LoRaMacCryptoGetFCntDown+0x78>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	789e      	ldrb	r6, [r3, #2]
 800bce4:	2e00      	cmp	r6, #0
 800bce6:	d110      	bne.n	800bd0a <LoRaMacCryptoGetFCntDown+0x62>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800bce8:	0033      	movs	r3, r6
 800bcea:	0038      	movs	r0, r7
 800bcec:	0031      	movs	r1, r6
 800bcee:	6822      	ldr	r2, [r4, #0]
 800bcf0:	1a12      	subs	r2, r2, r0
 800bcf2:	418b      	sbcs	r3, r1
 800bcf4:	429e      	cmp	r6, r3
 800bcf6:	dc10      	bgt.n	800bd1a <LoRaMacCryptoGetFCntDown+0x72>
 800bcf8:	d101      	bne.n	800bcfe <LoRaMacCryptoGetFCntDown+0x56>
 800bcfa:	4295      	cmp	r5, r2
 800bcfc:	d80d      	bhi.n	800bd1a <LoRaMacCryptoGetFCntDown+0x72>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800bcfe:	2008      	movs	r0, #8
 800bd00:	e003      	b.n	800bd0a <LoRaMacCryptoGetFCntDown+0x62>
        else if( fCntDiff == 0 )
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d102      	bne.n	800bd0c <LoRaMacCryptoGetFCntDown+0x64>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800bd06:	2007      	movs	r0, #7
            *currentDown = lastDown;
 800bd08:	6027      	str	r7, [r4, #0]
}
 800bd0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800bd0c:	2380      	movs	r3, #128	; 0x80
 800bd0e:	0c3a      	lsrs	r2, r7, #16
 800bd10:	0412      	lsls	r2, r2, #16
 800bd12:	025b      	lsls	r3, r3, #9
 800bd14:	18d2      	adds	r2, r2, r3
 800bd16:	1996      	adds	r6, r2, r6
 800bd18:	e7d9      	b.n	800bcce <LoRaMacCryptoGetFCntDown+0x26>
    return LORAMAC_CRYPTO_SUCCESS;
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e7f5      	b.n	800bd0a <LoRaMacCryptoGetFCntDown+0x62>
 800bd1e:	46c0      	nop			; (mov r8, r8)
 800bd20:	20000d8c 	.word	0x20000d8c

0800bd24 <LoRaMacCryptoSetMulticastReference>:
{
 800bd24:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd26:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d004      	beq.n	800bd36 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800bd2c:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800bd2e:	4a02      	ldr	r2, [pc, #8]	; (800bd38 <LoRaMacCryptoSetMulticastReference+0x14>)
 800bd30:	6812      	ldr	r2, [r2, #0]
 800bd32:	321c      	adds	r2, #28
 800bd34:	621a      	str	r2, [r3, #32]
}
 800bd36:	4770      	bx	lr
 800bd38:	20000d8c 	.word	0x20000d8c

0800bd3c <LoRaMacCryptoPrepareJoinRequest>:
{
 800bd3c:	b530      	push	{r4, r5, lr}
 800bd3e:	0004      	movs	r4, r0
 800bd40:	b085      	sub	sp, #20
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd42:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800bd44:	2c00      	cmp	r4, #0
 800bd46:	d024      	beq.n	800bd92 <LoRaMacCryptoPrepareJoinRequest+0x56>
    uint32_t devNonce = 0;
 800bd48:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800bd4a:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800bd4c:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800bd4e:	f7fc f85b 	bl	8007e08 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 800bd52:	4d11      	ldr	r5, [pc, #68]	; (800bd98 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	682a      	ldr	r2, [r5, #0]
 800bd58:	8093      	strh	r3, [r2, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800bd5a:	686b      	ldr	r3, [r5, #4]
 800bd5c:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800bd5e:	682b      	ldr	r3, [r5, #0]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bd60:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800bd62:	889b      	ldrh	r3, [r3, #4]
 800bd64:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bd66:	f000 fa1e 	bl	800c1a6 <LoRaMacSerializerJoinRequest>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d110      	bne.n	800bd90 <LoRaMacCryptoPrepareJoinRequest+0x54>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bd6e:	0023      	movs	r3, r4
 800bd70:	3318      	adds	r3, #24
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	2213      	movs	r2, #19
 800bd76:	2301      	movs	r3, #1
 800bd78:	6821      	ldr	r1, [r4, #0]
 800bd7a:	f7fb ff4f 	bl	8007c1c <SecureElementComputeAesCmac>
 800bd7e:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bd80:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d105      	bne.n	800bd92 <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bd86:	0020      	movs	r0, r4
 800bd88:	f000 fa0d 	bl	800c1a6 <LoRaMacSerializerJoinRequest>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d000      	beq.n	800bd92 <LoRaMacCryptoPrepareJoinRequest+0x56>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bd90:	2011      	movs	r0, #17
}
 800bd92:	b005      	add	sp, #20
 800bd94:	bd30      	pop	{r4, r5, pc}
 800bd96:	46c0      	nop			; (mov r8, r8)
 800bd98:	20000d8c 	.word	0x20000d8c

0800bd9c <LoRaMacCryptoSecureMessage>:
{
 800bd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd9e:	0006      	movs	r6, r0
 800bda0:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bda2:	240a      	movs	r4, #10
{
 800bda4:	b087      	sub	sp, #28
    if( macMsg == NULL )
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d01f      	beq.n	800bdea <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800bdaa:	4b2b      	ldr	r3, [pc, #172]	; (800be58 <LoRaMacCryptoSecureMessage+0xbc>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bdac:	3c04      	subs	r4, #4
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	4283      	cmp	r3, r0
 800bdb4:	d819      	bhi.n	800bdea <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 800bdb6:	1c6a      	adds	r2, r5, #1
 800bdb8:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_KEY;
 800bdba:	1e51      	subs	r1, r2, #1
 800bdbc:	418a      	sbcs	r2, r1
 800bdbe:	3202      	adds	r2, #2
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 800bdc0:	4283      	cmp	r3, r0
 800bdc2:	d306      	bcc.n	800bdd2 <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bdc4:	0028      	movs	r0, r5
 800bdc6:	f000 fa23 	bl	800c210 <LoRaMacSerializerData>
 800bdca:	1e03      	subs	r3, r0, #0
 800bdcc:	d010      	beq.n	800bdf0 <LoRaMacCryptoSecureMessage+0x54>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bdce:	2411      	movs	r4, #17
 800bdd0:	e00b      	b.n	800bdea <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800bdd2:	002b      	movs	r3, r5
 800bdd4:	3328      	adds	r3, #40	; 0x28
 800bdd6:	7819      	ldrb	r1, [r3, #0]
 800bdd8:	2300      	movs	r3, #0
 800bdda:	9001      	str	r0, [sp, #4]
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bde0:	68ab      	ldr	r3, [r5, #8]
 800bde2:	f7ff fe3f 	bl	800ba64 <PayloadEncrypt>
 800bde6:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bde8:	d0ec      	beq.n	800bdc4 <LoRaMacCryptoSecureMessage+0x28>
}
 800bdea:	0020      	movs	r0, r4
 800bdec:	b007      	add	sp, #28
 800bdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bdf0:	792f      	ldrb	r7, [r5, #4]
 800bdf2:	6829      	ldr	r1, [r5, #0]
 800bdf4:	3f04      	subs	r7, #4
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bdf6:	240a      	movs	r4, #10
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bdf8:	b2ba      	uxth	r2, r7
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800bdfa:	2900      	cmp	r1, #0
 800bdfc:	d0f5      	beq.n	800bdea <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bdfe:	2080      	movs	r0, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800be00:	240e      	movs	r4, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800be02:	0040      	lsls	r0, r0, #1
 800be04:	4282      	cmp	r2, r0
 800be06:	d8f0      	bhi.n	800bdea <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 800be08:	38b7      	subs	r0, #183	; 0xb7
 800be0a:	9002      	str	r0, [sp, #8]
    b0[4] = 0x00;
 800be0c:	a802      	add	r0, sp, #8
 800be0e:	8083      	strh	r3, [r0, #4]
    b0[14] = 0x00;
 800be10:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800be12:	002b      	movs	r3, r5
 800be14:	892c      	ldrh	r4, [r5, #8]
 800be16:	332c      	adds	r3, #44	; 0x2c
    b0[6] = devAddr & 0xFF;
 800be18:	80c4      	strh	r4, [r0, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800be1a:	68ac      	ldr	r4, [r5, #8]
    b0[10] = fCnt & 0xFF;
 800be1c:	8146      	strh	r6, [r0, #10]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800be1e:	0c24      	lsrs	r4, r4, #16
 800be20:	7204      	strb	r4, [r0, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800be22:	68ac      	ldr	r4, [r5, #8]
    b0[15] = msgLen & 0xFF;
 800be24:	73c7      	strb	r7, [r0, #15]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800be26:	0e24      	lsrs	r4, r4, #24
 800be28:	7244      	strb	r4, [r0, #9]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800be2a:	0c34      	lsrs	r4, r6, #16
 800be2c:	7304      	strb	r4, [r0, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800be2e:	0e34      	lsrs	r4, r6, #24
 800be30:	7344      	strb	r4, [r0, #13]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	2302      	movs	r3, #2
 800be36:	f7fb fef1 	bl	8007c1c <SecureElementComputeAesCmac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800be3a:	240f      	movs	r4, #15
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d1d4      	bne.n	800bdea <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800be40:	0028      	movs	r0, r5
 800be42:	f000 f9e5 	bl	800c210 <LoRaMacSerializerData>
 800be46:	1e04      	subs	r4, r0, #0
 800be48:	d1c1      	bne.n	800bdce <LoRaMacCryptoSecureMessage+0x32>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800be4a:	4b03      	ldr	r3, [pc, #12]	; (800be58 <LoRaMacCryptoSecureMessage+0xbc>)
 800be4c:	681a      	ldr	r2, [r3, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800be4e:	685b      	ldr	r3, [r3, #4]
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800be50:	60d6      	str	r6, [r2, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800be52:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 800be54:	e7c9      	b.n	800bdea <LoRaMacCryptoSecureMessage+0x4e>
 800be56:	46c0      	nop			; (mov r8, r8)
 800be58:	20000d8c 	.word	0x20000d8c

0800be5c <LoRaMacCryptoUnsecureMessage>:
{
 800be5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be5e:	b087      	sub	sp, #28
 800be60:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800be62:	000f      	movs	r7, r1
 800be64:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be66:	240a      	movs	r4, #10
{
 800be68:	9002      	str	r0, [sp, #8]
 800be6a:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800be6c:	2e00      	cmp	r6, #0
 800be6e:	d008      	beq.n	800be82 <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800be70:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800be72:	0010      	movs	r0, r2
 800be74:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800be76:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800be78:	f7ff fe4e 	bl	800bb18 <GetLastFcntDown>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d003      	beq.n	800be88 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800be80:	2406      	movs	r4, #6
}
 800be82:	0020      	movs	r0, r4
 800be84:	b007      	add	sp, #28
 800be86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800be88:	9b05      	ldr	r3, [sp, #20]
 800be8a:	429d      	cmp	r5, r3
 800be8c:	d801      	bhi.n	800be92 <LoRaMacCryptoUnsecureMessage+0x36>
 800be8e:	3301      	adds	r3, #1
 800be90:	d1f6      	bne.n	800be80 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800be92:	0030      	movs	r0, r6
 800be94:	f000 f92c 	bl	800c0f0 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800be98:	2410      	movs	r4, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d1f1      	bne.n	800be82 <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800be9e:	4b23      	ldr	r3, [pc, #140]	; (800bf2c <LoRaMacCryptoUnsecureMessage+0xd0>)
 800bea0:	9902      	ldr	r1, [sp, #8]
 800bea2:	781a      	ldrb	r2, [r3, #0]
 800bea4:	428a      	cmp	r2, r1
 800bea6:	d004      	beq.n	800beb2 <LoRaMacCryptoUnsecureMessage+0x56>
 800bea8:	791a      	ldrb	r2, [r3, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800beaa:	3c04      	subs	r4, #4
        if( KeyAddrList[i].AddrID == addrID )
 800beac:	428a      	cmp	r2, r1
 800beae:	d1e8      	bne.n	800be82 <LoRaMacCryptoUnsecureMessage+0x26>
 800beb0:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800beb2:	68b2      	ldr	r2, [r6, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800beb4:	2402      	movs	r4, #2
    if( address != macMsg->FHDR.DevAddr )
 800beb6:	42ba      	cmp	r2, r7
 800beb8:	d1e3      	bne.n	800be82 <LoRaMacCryptoUnsecureMessage+0x26>
    payloadDecryptionKeyID = curItem->AppSkey;
 800beba:	40a0      	lsls	r0, r4
 800bebc:	1818      	adds	r0, r3, r0
 800bebe:	7843      	ldrb	r3, [r0, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800bec0:	7882      	ldrb	r2, [r0, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800bec2:	9302      	str	r3, [sp, #8]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800bec4:	7931      	ldrb	r1, [r6, #4]
 800bec6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800bec8:	3904      	subs	r1, #4
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	9500      	str	r5, [sp, #0]
 800bece:	003b      	movs	r3, r7
 800bed0:	6830      	ldr	r0, [r6, #0]
 800bed2:	b289      	uxth	r1, r1
 800bed4:	f7ff fe58 	bl	800bb88 <VerifyCmacB0.isra.0.constprop.0>
 800bed8:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800beda:	d1d2      	bne.n	800be82 <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800bedc:	1c73      	adds	r3, r6, #1
 800bede:	7fdb      	ldrb	r3, [r3, #31]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <LoRaMacCryptoUnsecureMessage+0x8c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800bee4:	3302      	adds	r3, #2
 800bee6:	9302      	str	r3, [sp, #8]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800bee8:	0033      	movs	r3, r6
 800beea:	3328      	adds	r3, #40	; 0x28
 800beec:	7819      	ldrb	r1, [r3, #0]
 800beee:	2301      	movs	r3, #1
 800bef0:	9501      	str	r5, [sp, #4]
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	9a02      	ldr	r2, [sp, #8]
 800bef6:	003b      	movs	r3, r7
 800bef8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800befa:	f7ff fdb3 	bl	800ba64 <PayloadEncrypt>
 800befe:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bf00:	d1bf      	bne.n	800be82 <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800bf02:	9803      	ldr	r0, [sp, #12]
 800bf04:	4b0a      	ldr	r3, [pc, #40]	; (800bf30 <LoRaMacCryptoUnsecureMessage+0xd4>)
 800bf06:	3801      	subs	r0, #1
 800bf08:	2803      	cmp	r0, #3
 800bf0a:	d805      	bhi.n	800bf18 <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	f7f4 f90d 	bl	800012c <__gnu_thumb1_case_uqi>
 800bf12:	0602      	.short	0x0602
 800bf14:	0a08      	.short	0x0a08
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 800bf16:	6115      	str	r5, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	4798      	blx	r3
}
 800bf1c:	e7b1      	b.n	800be82 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 800bf1e:	6155      	str	r5, [r2, #20]
            break;
 800bf20:	e7fa      	b.n	800bf18 <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 800bf22:	6195      	str	r5, [r2, #24]
            break;
 800bf24:	e7f8      	b.n	800bf18 <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800bf26:	61d5      	str	r5, [r2, #28]
            break;
 800bf28:	e7f6      	b.n	800bf18 <LoRaMacCryptoUnsecureMessage+0xbc>
 800bf2a:	46c0      	nop			; (mov r8, r8)
 800bf2c:	20000170 	.word	0x20000170
 800bf30:	20000d8c 	.word	0x20000d8c

0800bf34 <LoRaMacCryptoDeriveMcRootKey>:
{
 800bf34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf36:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800bf38:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800bf3a:	2900      	cmp	r1, #0
 800bf3c:	d115      	bne.n	800bf6a <LoRaMacCryptoDeriveMcRootKey+0x36>
    uint8_t compBase[16] = { 0 };
 800bf3e:	220c      	movs	r2, #12
 800bf40:	a801      	add	r0, sp, #4
 800bf42:	9100      	str	r1, [sp, #0]
 800bf44:	f003 fb92 	bl	800f66c <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 800bf48:	4b09      	ldr	r3, [pc, #36]	; (800bf70 <LoRaMacCryptoDeriveMcRootKey+0x3c>)
 800bf4a:	6818      	ldr	r0, [r3, #0]
 800bf4c:	7883      	ldrb	r3, [r0, #2]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d102      	bne.n	800bf58 <LoRaMacCryptoDeriveMcRootKey+0x24>
        compBase[0] = 0x20;
 800bf52:	466a      	mov	r2, sp
 800bf54:	331f      	adds	r3, #31
 800bf56:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800bf58:	2304      	movs	r3, #4
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	4669      	mov	r1, sp
 800bf5e:	6800      	ldr	r0, [r0, #0]
 800bf60:	f7fb fef1 	bl	8007d46 <SecureElementDeriveAndStoreKey>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d000      	beq.n	800bf6a <LoRaMacCryptoDeriveMcRootKey+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bf68:	200f      	movs	r0, #15
}
 800bf6a:	b005      	add	sp, #20
 800bf6c:	bd00      	pop	{pc}
 800bf6e:	46c0      	nop			; (mov r8, r8)
 800bf70:	20000d8c 	.word	0x20000d8c

0800bf74 <LoRaMacCryptoSetKey>:
{
 800bf74:	b570      	push	{r4, r5, r6, lr}
 800bf76:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800bf78:	f7fb fedc 	bl	8007d34 <SecureElementSetKey>
 800bf7c:	1e04      	subs	r4, r0, #0
 800bf7e:	d109      	bne.n	800bf94 <LoRaMacCryptoSetKey+0x20>
    if( keyID == APP_KEY )
 800bf80:	2d00      	cmp	r5, #0
 800bf82:	d108      	bne.n	800bf96 <LoRaMacCryptoSetKey+0x22>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800bf84:	f7ff ffd6 	bl	800bf34 <LoRaMacCryptoDeriveMcRootKey>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d103      	bne.n	800bf94 <LoRaMacCryptoSetKey+0x20>
    if( keyID != MC_ROOT_KEY )
 800bf8c:	f7ff fde6 	bl	800bb5c <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d000      	beq.n	800bf96 <LoRaMacCryptoSetKey+0x22>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bf94:	240f      	movs	r4, #15
}
 800bf96:	0020      	movs	r0, r4
 800bf98:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf9c <LoRaMacCryptoHandleJoinAccept>:
{
 800bf9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf9e:	b091      	sub	sp, #68	; 0x44
 800bfa0:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfa2:	240a      	movs	r4, #10
{
 800bfa4:	9005      	str	r0, [sp, #20]
 800bfa6:	9104      	str	r1, [sp, #16]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800bfa8:	2a00      	cmp	r2, #0
 800bfaa:	d050      	beq.n	800c04e <LoRaMacCryptoHandleJoinAccept+0xb2>
 800bfac:	2900      	cmp	r1, #0
 800bfae:	d04e      	beq.n	800c04e <LoRaMacCryptoHandleJoinAccept+0xb2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800bfb0:	2400      	movs	r4, #0
 800bfb2:	221d      	movs	r2, #29
 800bfb4:	0021      	movs	r1, r4
 800bfb6:	a808      	add	r0, sp, #32
 800bfb8:	9407      	str	r4, [sp, #28]
 800bfba:	f003 fb57 	bl	800f66c <memset>
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 800bfbe:	4e25      	ldr	r6, [pc, #148]	; (800c054 <LoRaMacCryptoHandleJoinAccept+0xb8>)
    uint8_t versionMinor         = 0;
 800bfc0:	ab02      	add	r3, sp, #8
 800bfc2:	74dc      	strb	r4, [r3, #19]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 800bfc4:	6833      	ldr	r3, [r6, #0]
 800bfc6:	a902      	add	r1, sp, #8
 800bfc8:	791a      	ldrb	r2, [r3, #4]
 800bfca:	2313      	movs	r3, #19
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800bfcc:	af07      	add	r7, sp, #28
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 800bfce:	185b      	adds	r3, r3, r1
 800bfd0:	9302      	str	r3, [sp, #8]
 800bfd2:	9701      	str	r7, [sp, #4]
 800bfd4:	792b      	ldrb	r3, [r5, #4]
 800bfd6:	9904      	ldr	r1, [sp, #16]
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	682b      	ldr	r3, [r5, #0]
 800bfdc:	9805      	ldr	r0, [sp, #20]
 800bfde:	f7fb fed2 	bl	8007d86 <SecureElementProcessJoinAccept>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bfe2:	340f      	adds	r4, #15
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d132      	bne.n	800c04e <LoRaMacCryptoHandleJoinAccept+0xb2>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800bfe8:	0039      	movs	r1, r7
 800bfea:	792a      	ldrb	r2, [r5, #4]
 800bfec:	6828      	ldr	r0, [r5, #0]
 800bfee:	f001 fa67 	bl	800d4c0 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bff2:	0028      	movs	r0, r5
 800bff4:	f000 f830 	bl	800c058 <LoRaMacParserJoinAccept>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bff8:	3401      	adds	r4, #1
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d127      	bne.n	800c04e <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 800bffe:	f7ff ff99 	bl	800bf34 <LoRaMacCryptoDeriveMcRootKey>
 800c002:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c004:	d123      	bne.n	800c04e <LoRaMacCryptoHandleJoinAccept+0xb2>
    if( keyID != MC_ROOT_KEY )
 800c006:	f7ff fda9 	bl	800bb5c <LoRaMacCryptoDeriveMcKEKey.part.0>
 800c00a:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c00c:	d11f      	bne.n	800c04e <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 800c00e:	6833      	ldr	r3, [r6, #0]
 800c010:	1daf      	adds	r7, r5, #6
 800c012:	3509      	adds	r5, #9
 800c014:	002a      	movs	r2, r5
 800c016:	0039      	movs	r1, r7
 800c018:	2003      	movs	r0, #3
 800c01a:	3304      	adds	r3, #4
 800c01c:	f7ff fcf2 	bl	800ba04 <DeriveSessionKey10x>
 800c020:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c022:	d114      	bne.n	800c04e <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 800c024:	6833      	ldr	r3, [r6, #0]
 800c026:	002a      	movs	r2, r5
 800c028:	0039      	movs	r1, r7
 800c02a:	2002      	movs	r0, #2
 800c02c:	3304      	adds	r3, #4
 800c02e:	f7ff fce9 	bl	800ba04 <DeriveSessionKey10x>
 800c032:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c034:	d10b      	bne.n	800c04e <LoRaMacCryptoHandleJoinAccept+0xb2>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 800c036:	aa02      	add	r2, sp, #8
 800c038:	6833      	ldr	r3, [r6, #0]
 800c03a:	7cd2      	ldrb	r2, [r2, #19]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800c03c:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 800c03e:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c040:	2201      	movs	r2, #1
 800c042:	4252      	negs	r2, r2
 800c044:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c046:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c048:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c04a:	6873      	ldr	r3, [r6, #4]
 800c04c:	4798      	blx	r3
}
 800c04e:	0020      	movs	r0, r4
 800c050:	b011      	add	sp, #68	; 0x44
 800c052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c054:	20000d8c 	.word	0x20000d8c

0800c058 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800c058:	b510      	push	{r4, lr}
 800c05a:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800c05c:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c05e:	2c00      	cmp	r4, #0
 800c060:	d040      	beq.n	800c0e4 <LoRaMacParserJoinAccept+0x8c>
 800c062:	6821      	ldr	r1, [r4, #0]
 800c064:	2900      	cmp	r1, #0
 800c066:	d03d      	beq.n	800c0e4 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c068:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c06a:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c06c:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c06e:	3101      	adds	r1, #1
 800c070:	1da0      	adds	r0, r4, #6
 800c072:	f001 fa25 	bl	800d4c0 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800c076:	0020      	movs	r0, r4
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	2203      	movs	r2, #3
 800c07c:	1d19      	adds	r1, r3, #4
 800c07e:	3009      	adds	r0, #9
 800c080:	f001 fa1e 	bl	800d4c0 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c084:	6821      	ldr	r1, [r4, #0]
 800c086:	79ca      	ldrb	r2, [r1, #7]
 800c088:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c08a:	7a0b      	ldrb	r3, [r1, #8]
 800c08c:	021b      	lsls	r3, r3, #8
 800c08e:	431a      	orrs	r2, r3
 800c090:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c092:	7a4b      	ldrb	r3, [r1, #9]
 800c094:	041b      	lsls	r3, r3, #16
 800c096:	4313      	orrs	r3, r2
 800c098:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c09a:	7a8a      	ldrb	r2, [r1, #10]
 800c09c:	0612      	lsls	r2, r2, #24
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c0a2:	7acb      	ldrb	r3, [r1, #11]
 800c0a4:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c0a6:	7b0b      	ldrb	r3, [r1, #12]
 800c0a8:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800c0aa:	7923      	ldrb	r3, [r4, #4]
 800c0ac:	2b21      	cmp	r3, #33	; 0x21
 800c0ae:	d11a      	bne.n	800c0e6 <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800c0b0:	0020      	movs	r0, r4
 800c0b2:	2210      	movs	r2, #16
 800c0b4:	310d      	adds	r1, #13
 800c0b6:	3012      	adds	r0, #18
 800c0b8:	f001 fa02 	bl	800d4c0 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800c0bc:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c0be:	6820      	ldr	r0, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c0c0:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c0c2:	5cc1      	ldrb	r1, [r0, r3]
 800c0c4:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c0c6:	5c82      	ldrb	r2, [r0, r2]
 800c0c8:	0212      	lsls	r2, r2, #8
 800c0ca:	4311      	orrs	r1, r2
 800c0cc:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c0ce:	1c9a      	adds	r2, r3, #2
 800c0d0:	5c82      	ldrb	r2, [r0, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c0d2:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c0d4:	0412      	lsls	r2, r2, #16
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c0da:	5cc3      	ldrb	r3, [r0, r3]

    return LORAMAC_PARSER_SUCCESS;
 800c0dc:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c0de:	061b      	lsls	r3, r3, #24
 800c0e0:	431a      	orrs	r2, r3
 800c0e2:	6262      	str	r2, [r4, #36]	; 0x24
}
 800c0e4:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_FAIL;
 800c0e6:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c0e8:	2b11      	cmp	r3, #17
 800c0ea:	dcfb      	bgt.n	800c0e4 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c0ec:	230d      	movs	r3, #13
 800c0ee:	e7e6      	b.n	800c0be <LoRaMacParserJoinAccept+0x66>

0800c0f0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800c0f4:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c0f6:	2c00      	cmp	r4, #0
 800c0f8:	d054      	beq.n	800c1a4 <LoRaMacParserData+0xb4>
 800c0fa:	6821      	ldr	r1, [r4, #0]
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	d051      	beq.n	800c1a4 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c100:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c102:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c104:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c106:	784a      	ldrb	r2, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c108:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c10a:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c10c:	788b      	ldrb	r3, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c10e:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c110:	021b      	lsls	r3, r3, #8
 800c112:	431a      	orrs	r2, r3
 800c114:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c116:	78cb      	ldrb	r3, [r1, #3]
 800c118:	041b      	lsls	r3, r3, #16
 800c11a:	4313      	orrs	r3, r2
 800c11c:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c11e:	790a      	ldrb	r2, [r1, #4]
 800c120:	0612      	lsls	r2, r2, #24
 800c122:	4313      	orrs	r3, r2
 800c124:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c126:	794b      	ldrb	r3, [r1, #5]
 800c128:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c12a:	798b      	ldrb	r3, [r1, #6]
 800c12c:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c12e:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c130:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c132:	0212      	lsls	r2, r2, #8
 800c134:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c136:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c138:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c13a:	0712      	lsls	r2, r2, #28
 800c13c:	0f12      	lsrs	r2, r2, #28
 800c13e:	f001 f9bf 	bl	800d4c0 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c142:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800c144:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800c146:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c148:	0709      	lsls	r1, r1, #28
 800c14a:	0f09      	lsrs	r1, r1, #28
 800c14c:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800c14e:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800c150:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800c152:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c154:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c156:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c158:	1b93      	subs	r3, r2, r6
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	dd0c      	ble.n	800c178 <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c162:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c164:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c166:	1a52      	subs	r2, r2, r1
 800c168:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c16a:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c16c:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c16e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c170:	b292      	uxth	r2, r2
 800c172:	1859      	adds	r1, r3, r1
 800c174:	f001 f9a4 	bl	800d4c0 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800c178:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c17a:	6822      	ldr	r2, [r4, #0]
 800c17c:	7923      	ldrb	r3, [r4, #4]
 800c17e:	18d3      	adds	r3, r2, r3
 800c180:	1f1a      	subs	r2, r3, #4
 800c182:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c184:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c186:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c188:	7812      	ldrb	r2, [r2, #0]
 800c18a:	0212      	lsls	r2, r2, #8
 800c18c:	4311      	orrs	r1, r2
 800c18e:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c190:	1e9a      	subs	r2, r3, #2
 800c192:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c194:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c196:	0412      	lsls	r2, r2, #16
 800c198:	430a      	orrs	r2, r1
 800c19a:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	061b      	lsls	r3, r3, #24
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800c1a4:	bd70      	pop	{r4, r5, r6, pc}

0800c1a6 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800c1a6:	b510      	push	{r4, lr}
 800c1a8:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c1aa:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1ac:	2c00      	cmp	r4, #0
 800c1ae:	d02e      	beq.n	800c20e <LoRaMacSerializerJoinRequest+0x68>
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d02b      	beq.n	800c20e <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c1b6:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c1b8:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c1ba:	2a16      	cmp	r2, #22
 800c1bc:	d927      	bls.n	800c20e <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c1be:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c1c0:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c1c2:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	2208      	movs	r2, #8
 800c1c8:	1c58      	adds	r0, r3, #1
 800c1ca:	f001 f982 	bl	800d4d2 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c1ce:	0021      	movs	r1, r4
 800c1d0:	6820      	ldr	r0, [r4, #0]
 800c1d2:	2208      	movs	r2, #8
 800c1d4:	3009      	adds	r0, #9
 800c1d6:	310e      	adds	r1, #14
 800c1d8:	f001 f97b 	bl	800d4d2 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c1dc:	8ae3      	ldrh	r3, [r4, #22]
 800c1de:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800c1e0:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c1e2:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c1e4:	8ae3      	ldrh	r3, [r4, #22]
 800c1e6:	6822      	ldr	r2, [r4, #0]
 800c1e8:	0a1b      	lsrs	r3, r3, #8
 800c1ea:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c1ec:	69a3      	ldr	r3, [r4, #24]
 800c1ee:	6822      	ldr	r2, [r4, #0]
 800c1f0:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c1f2:	69a3      	ldr	r3, [r4, #24]
 800c1f4:	6822      	ldr	r2, [r4, #0]
 800c1f6:	0a1b      	lsrs	r3, r3, #8
 800c1f8:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c1fa:	69a3      	ldr	r3, [r4, #24]
 800c1fc:	6822      	ldr	r2, [r4, #0]
 800c1fe:	0c1b      	lsrs	r3, r3, #16
 800c200:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c202:	69a3      	ldr	r3, [r4, #24]
 800c204:	6822      	ldr	r2, [r4, #0]
 800c206:	0e1b      	lsrs	r3, r3, #24
 800c208:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800c20a:	2317      	movs	r3, #23
 800c20c:	7123      	strb	r3, [r4, #4]
}
 800c20e:	bd10      	pop	{r4, pc}

0800c210 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c214:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c216:	2c00      	cmp	r4, #0
 800c218:	d068      	beq.n	800c2ec <LoRaMacSerializerData+0xdc>
 800c21a:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c21c:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c21e:	2900      	cmp	r1, #0
 800c220:	d064      	beq.n	800c2ec <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800c222:	0025      	movs	r5, r4
 800c224:	3528      	adds	r5, #40	; 0x28
 800c226:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c228:	7b22      	ldrb	r2, [r4, #12]
 800c22a:	0003      	movs	r3, r0
 800c22c:	1e5e      	subs	r6, r3, #1
 800c22e:	41b3      	sbcs	r3, r6
 800c230:	0712      	lsls	r2, r2, #28
 800c232:	0f12      	lsrs	r2, r2, #28
 800c234:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c236:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c238:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c23a:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800c23c:	7922      	ldrb	r2, [r4, #4]
 800c23e:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c240:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800c242:	429a      	cmp	r2, r3
 800c244:	d352      	bcc.n	800c2ec <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c246:	7963      	ldrb	r3, [r4, #5]
 800c248:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c24a:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c24c:	68a3      	ldr	r3, [r4, #8]
 800c24e:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c250:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c252:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c254:	68a3      	ldr	r3, [r4, #8]
 800c256:	6822      	ldr	r2, [r4, #0]
 800c258:	0a1b      	lsrs	r3, r3, #8
 800c25a:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c25c:	68a3      	ldr	r3, [r4, #8]
 800c25e:	6822      	ldr	r2, [r4, #0]
 800c260:	0c1b      	lsrs	r3, r3, #16
 800c262:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c264:	68a3      	ldr	r3, [r4, #8]
 800c266:	6822      	ldr	r2, [r4, #0]
 800c268:	0e1b      	lsrs	r3, r3, #24
 800c26a:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c26c:	7b23      	ldrb	r3, [r4, #12]
 800c26e:	6822      	ldr	r2, [r4, #0]
 800c270:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c272:	89e3      	ldrh	r3, [r4, #14]
 800c274:	6822      	ldr	r2, [r4, #0]
 800c276:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c278:	89e3      	ldrh	r3, [r4, #14]
 800c27a:	6822      	ldr	r2, [r4, #0]
 800c27c:	0a1b      	lsrs	r3, r3, #8
 800c27e:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c280:	7b22      	ldrb	r2, [r4, #12]
 800c282:	6820      	ldr	r0, [r4, #0]
 800c284:	0712      	lsls	r2, r2, #28
 800c286:	0f12      	lsrs	r2, r2, #28
 800c288:	3008      	adds	r0, #8
 800c28a:	f001 f919 	bl	800d4c0 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c28e:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800c290:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c292:	071b      	lsls	r3, r3, #28
 800c294:	0f1b      	lsrs	r3, r3, #28
 800c296:	001e      	movs	r6, r3
 800c298:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800c29a:	2a00      	cmp	r2, #0
 800c29c:	d005      	beq.n	800c2aa <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c29e:	1c62      	adds	r2, r4, #1
 800c2a0:	7fd2      	ldrb	r2, [r2, #31]
 800c2a2:	6821      	ldr	r1, [r4, #0]
 800c2a4:	3309      	adds	r3, #9
 800c2a6:	558a      	strb	r2, [r1, r6]
 800c2a8:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	782a      	ldrb	r2, [r5, #0]
 800c2ae:	1998      	adds	r0, r3, r6
 800c2b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c2b2:	f001 f905 	bl	800d4c0 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c2b6:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c2b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c2ba:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c2bc:	18f3      	adds	r3, r6, r3
 800c2be:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c2c0:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c2c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c2c4:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c2c6:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c2c8:	b292      	uxth	r2, r2
 800c2ca:	0a09      	lsrs	r1, r1, #8
 800c2cc:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c2ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c2d0:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c2d2:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c2d4:	b292      	uxth	r2, r2
 800c2d6:	0c09      	lsrs	r1, r1, #16
 800c2d8:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c2da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c2dc:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c2de:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c2e0:	b292      	uxth	r2, r2
 800c2e2:	0e09      	lsrs	r1, r1, #24
 800c2e4:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800c2e6:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c2e8:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800c2ea:	7123      	strb	r3, [r4, #4]
}
 800c2ec:	bd70      	pop	{r4, r5, r6, pc}

0800c2ee <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c2ee:	4243      	negs	r3, r0
 800c2f0:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800c2f2:	b2c0      	uxtb	r0, r0
 800c2f4:	4770      	bx	lr

0800c2f6 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c2f6:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d105      	bne.n	800c308 <RegionGetPhyParam+0x12>
    {
        AS923_GET_PHY_PARAM( );
 800c2fc:	0008      	movs	r0, r1
 800c2fe:	f000 f91f 	bl	800c540 <RegionAS923GetPhyParam>
 800c302:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800c304:	9801      	ldr	r0, [sp, #4]
 800c306:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800c308:	2300      	movs	r3, #0
 800c30a:	9301      	str	r3, [sp, #4]
 800c30c:	e7fa      	b.n	800c304 <RegionGetPhyParam+0xe>

0800c30e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800c30e:	b510      	push	{r4, lr}
    switch( region )
 800c310:	2800      	cmp	r0, #0
 800c312:	d102      	bne.n	800c31a <RegionSetBandTxDone+0xc>
    {
        AS923_SET_BAND_TX_DONE( );
 800c314:	0008      	movs	r0, r1
 800c316:	f000 f9c1 	bl	800c69c <RegionAS923SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800c31a:	bd10      	pop	{r4, pc}

0800c31c <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800c31c:	b510      	push	{r4, lr}
    switch( region )
 800c31e:	2800      	cmp	r0, #0
 800c320:	d102      	bne.n	800c328 <RegionInitDefaults+0xc>
    {
        AS923_INIT_DEFAULTS( );
 800c322:	0008      	movs	r0, r1
 800c324:	f000 f9d0 	bl	800c6c8 <RegionAS923InitDefaults>
        default:
        {
            break;
        }
    }
}
 800c328:	bd10      	pop	{r4, pc}

0800c32a <RegionGetNvmCtx>:
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 800c32a:	2300      	movs	r3, #0
{
 800c32c:	b510      	push	{r4, lr}
    switch( region )
 800c32e:	4298      	cmp	r0, r3
 800c330:	d103      	bne.n	800c33a <RegionGetNvmCtx+0x10>
        AS923_GET_NVM_CTX( );
 800c332:	0008      	movs	r0, r1
 800c334:	f000 fa14 	bl	800c760 <RegionAS923GetNvmCtx>
 800c338:	0003      	movs	r3, r0
        }
    }
}
 800c33a:	0018      	movs	r0, r3
 800c33c:	bd10      	pop	{r4, pc}

0800c33e <RegionVerify>:
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800c33e:	2300      	movs	r3, #0
{
 800c340:	b510      	push	{r4, lr}
 800c342:	0004      	movs	r4, r0
 800c344:	0008      	movs	r0, r1
 800c346:	0011      	movs	r1, r2
    switch( region )
 800c348:	429c      	cmp	r4, r3
 800c34a:	d102      	bne.n	800c352 <RegionVerify+0x14>
        AS923_VERIFY( );
 800c34c:	f000 fa0e 	bl	800c76c <RegionAS923Verify>
 800c350:	0003      	movs	r3, r0
        }
    }
}
 800c352:	0018      	movs	r0, r3
 800c354:	bd10      	pop	{r4, pc}

0800c356 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800c356:	b510      	push	{r4, lr}
    switch( region )
 800c358:	2800      	cmp	r0, #0
 800c35a:	d102      	bne.n	800c362 <RegionApplyCFList+0xc>
    {
        AS923_APPLY_CF_LIST( );
 800c35c:	0008      	movs	r0, r1
 800c35e:	f000 fd41 	bl	800cde4 <RegionAS923ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800c362:	bd10      	pop	{r4, pc}

0800c364 <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800c364:	2300      	movs	r3, #0
{
 800c366:	b510      	push	{r4, lr}
    switch( region )
 800c368:	4298      	cmp	r0, r3
 800c36a:	d103      	bne.n	800c374 <RegionChanMaskSet+0x10>
        AS923_CHAN_MASK_SET( );
 800c36c:	0008      	movs	r0, r1
 800c36e:	f000 fa2b 	bl	800c7c8 <RegionAS923ChanMaskSet>
 800c372:	0003      	movs	r3, r0
        }
    }
}
 800c374:	0018      	movs	r0, r3
 800c376:	bd10      	pop	{r4, pc}

0800c378 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c378:	b510      	push	{r4, lr}
 800c37a:	0004      	movs	r4, r0
 800c37c:	0008      	movs	r0, r1
 800c37e:	0011      	movs	r1, r2
 800c380:	001a      	movs	r2, r3
    switch( region )
 800c382:	2c00      	cmp	r4, #0
 800c384:	d102      	bne.n	800c38c <RegionComputeRxWindowParameters+0x14>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c386:	9b02      	ldr	r3, [sp, #8]
 800c388:	f000 fa38 	bl	800c7fc <RegionAS923ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800c38c:	bd10      	pop	{r4, pc}

0800c38e <RegionRxConfig>:
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800c38e:	2300      	movs	r3, #0
{
 800c390:	b510      	push	{r4, lr}
 800c392:	0004      	movs	r4, r0
 800c394:	0008      	movs	r0, r1
 800c396:	0011      	movs	r1, r2
    switch( region )
 800c398:	429c      	cmp	r4, r3
 800c39a:	d102      	bne.n	800c3a2 <RegionRxConfig+0x14>
        AS923_RX_CONFIG( );
 800c39c:	f000 fa62 	bl	800c864 <RegionAS923RxConfig>
 800c3a0:	0003      	movs	r3, r0
        }
    }
}
 800c3a2:	0018      	movs	r0, r3
 800c3a4:	bd10      	pop	{r4, pc}

0800c3a6 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c3a6:	b570      	push	{r4, r5, r6, lr}
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800c3a8:	2400      	movs	r4, #0
{
 800c3aa:	0005      	movs	r5, r0
 800c3ac:	0008      	movs	r0, r1
 800c3ae:	0011      	movs	r1, r2
 800c3b0:	001a      	movs	r2, r3
    switch( region )
 800c3b2:	42a5      	cmp	r5, r4
 800c3b4:	d102      	bne.n	800c3bc <RegionTxConfig+0x16>
        AS923_TX_CONFIG( );
 800c3b6:	f000 fad1 	bl	800c95c <RegionAS923TxConfig>
 800c3ba:	0004      	movs	r4, r0
        }
    }
}
 800c3bc:	0020      	movs	r0, r4
 800c3be:	bd70      	pop	{r4, r5, r6, pc}

0800c3c0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800c3c2:	2400      	movs	r4, #0
{
 800c3c4:	0005      	movs	r5, r0
 800c3c6:	0008      	movs	r0, r1
 800c3c8:	0011      	movs	r1, r2
 800c3ca:	001a      	movs	r2, r3
    switch( region )
 800c3cc:	42a5      	cmp	r5, r4
 800c3ce:	d105      	bne.n	800c3dc <RegionLinkAdrReq+0x1c>
        AS923_LINK_ADR_REQ( );
 800c3d0:	9b07      	ldr	r3, [sp, #28]
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	9b06      	ldr	r3, [sp, #24]
 800c3d6:	f000 fb49 	bl	800ca6c <RegionAS923LinkAdrReq>
 800c3da:	0004      	movs	r4, r0
        }
    }
}
 800c3dc:	0020      	movs	r0, r4
 800c3de:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800c3e0 <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c3e0:	2300      	movs	r3, #0
{
 800c3e2:	b510      	push	{r4, lr}
    switch( region )
 800c3e4:	4298      	cmp	r0, r3
 800c3e6:	d103      	bne.n	800c3f0 <RegionRxParamSetupReq+0x10>
        AS923_RX_PARAM_SETUP_REQ( );
 800c3e8:	0008      	movs	r0, r1
 800c3ea:	f000 fbe7 	bl	800cbbc <RegionAS923RxParamSetupReq>
 800c3ee:	0003      	movs	r3, r0
        }
    }
}
 800c3f0:	0018      	movs	r0, r3
 800c3f2:	bd10      	pop	{r4, pc}

0800c3f4 <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c3f4:	2300      	movs	r3, #0
{
 800c3f6:	b510      	push	{r4, lr}
    switch( region )
 800c3f8:	4298      	cmp	r0, r3
 800c3fa:	d103      	bne.n	800c404 <RegionNewChannelReq+0x10>
        AS923_NEW_CHANNEL_REQ( );
 800c3fc:	0008      	movs	r0, r1
 800c3fe:	f000 fd2b 	bl	800ce58 <RegionAS923NewChannelReq>
 800c402:	0003      	movs	r3, r0
        }
    }
}
 800c404:	0018      	movs	r0, r3
 800c406:	bd10      	pop	{r4, pc}

0800c408 <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c408:	2300      	movs	r3, #0
{
 800c40a:	b510      	push	{r4, lr}
    switch( region )
 800c40c:	4298      	cmp	r0, r3
 800c40e:	d103      	bne.n	800c418 <RegionTxParamSetupReq+0x10>
        AS923_TX_PARAM_SETUP_REQ( );
 800c410:	0008      	movs	r0, r1
 800c412:	f000 fbf2 	bl	800cbfa <RegionAS923TxParamSetupReq>
 800c416:	0003      	movs	r3, r0
        }
    }
}
 800c418:	0018      	movs	r0, r3
 800c41a:	bd10      	pop	{r4, pc}

0800c41c <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c41c:	2300      	movs	r3, #0
{
 800c41e:	b510      	push	{r4, lr}
    switch( region )
 800c420:	4298      	cmp	r0, r3
 800c422:	d103      	bne.n	800c42c <RegionDlChannelReq+0x10>
        AS923_DL_CHANNEL_REQ( );
 800c424:	0008      	movs	r0, r1
 800c426:	f000 fbeb 	bl	800cc00 <RegionAS923DlChannelReq>
 800c42a:	0003      	movs	r3, r0
        }
    }
}
 800c42c:	0018      	movs	r0, r3
 800c42e:	bd10      	pop	{r4, pc}

0800c430 <RegionAlternateDr>:
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800c430:	2300      	movs	r3, #0
{
 800c432:	b510      	push	{r4, lr}
 800c434:	0004      	movs	r4, r0
 800c436:	0008      	movs	r0, r1
 800c438:	0011      	movs	r1, r2
    switch( region )
 800c43a:	429c      	cmp	r4, r3
 800c43c:	d102      	bne.n	800c444 <RegionAlternateDr+0x14>
        AS923_ALTERNATE_DR( );
 800c43e:	f000 fbfb 	bl	800cc38 <RegionAS923AlternateDr>
 800c442:	0003      	movs	r3, r0
        }
    }
}
 800c444:	0018      	movs	r0, r3
 800c446:	bd10      	pop	{r4, pc}

0800c448 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c44c:	2409      	movs	r4, #9
{
 800c44e:	0008      	movs	r0, r1
 800c450:	0011      	movs	r1, r2
 800c452:	001a      	movs	r2, r3
    switch( region )
 800c454:	2d00      	cmp	r5, #0
 800c456:	d103      	bne.n	800c460 <RegionNextChannel+0x18>
        AS923_NEXT_CHANNEL( );
 800c458:	9b04      	ldr	r3, [sp, #16]
 800c45a:	f000 fbef 	bl	800cc3c <RegionAS923NextChannel>
 800c45e:	0004      	movs	r4, r0
        }
    }
}
 800c460:	0020      	movs	r0, r4
 800c462:	bd70      	pop	{r4, r5, r6, pc}

0800c464 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800c464:	b510      	push	{r4, lr}
    switch( region )
 800c466:	2800      	cmp	r0, #0
 800c468:	d102      	bne.n	800c470 <RegionSetContinuousWave+0xc>
    {
        AS923_SET_CONTINUOUS_WAVE( );
 800c46a:	0008      	movs	r0, r1
 800c46c:	f000 fd14 	bl	800ce98 <RegionAS923SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800c470:	bd10      	pop	{r4, pc}

0800c472 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c472:	b570      	push	{r4, r5, r6, lr}
 800c474:	0005      	movs	r5, r0
 800c476:	0008      	movs	r0, r1
 800c478:	0011      	movs	r1, r2
 800c47a:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c47c:	b2cc      	uxtb	r4, r1
    switch( region )
 800c47e:	2d00      	cmp	r5, #0
 800c480:	d102      	bne.n	800c488 <RegionApplyDrOffset+0x16>
        AS923_APPLY_DR_OFFSET( );
 800c482:	f000 fd31 	bl	800cee8 <RegionAS923ApplyDrOffset>
 800c486:	0004      	movs	r4, r0
        }
    }
}
 800c488:	0020      	movs	r0, r4
 800c48a:	bd70      	pop	{r4, r5, r6, pc}

0800c48c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c48c:	4800      	ldr	r0, [pc, #0]	; (800c490 <RegionGetVersion+0x4>)
 800c48e:	4770      	bx	lr
 800c490:	01000300 	.word	0x01000300

0800c494 <GetBandwidth>:
    return nextLowerDr;
}

static uint32_t GetBandwidth( uint32_t drIndex )
{
    switch( BandwidthsAS923[drIndex] )
 800c494:	4b06      	ldr	r3, [pc, #24]	; (800c4b0 <GetBandwidth+0x1c>)
 800c496:	0080      	lsls	r0, r0, #2
 800c498:	58c3      	ldr	r3, [r0, r3]
 800c49a:	4a06      	ldr	r2, [pc, #24]	; (800c4b4 <GetBandwidth+0x20>)
 800c49c:	2001      	movs	r0, #1
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d004      	beq.n	800c4ac <GetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800c4a2:	4a05      	ldr	r2, [pc, #20]	; (800c4b8 <GetBandwidth+0x24>)
 800c4a4:	189b      	adds	r3, r3, r2
 800c4a6:	4258      	negs	r0, r3
 800c4a8:	4158      	adcs	r0, r3
 800c4aa:	0040      	lsls	r0, r0, #1
    }
}
 800c4ac:	4770      	bx	lr
 800c4ae:	46c0      	nop			; (mov r8, r8)
 800c4b0:	08012b60 	.word	0x08012b60
 800c4b4:	0003d090 	.word	0x0003d090
 800c4b8:	fff85ee0 	.word	0xfff85ee0

0800c4bc <VerifyRfFreq>:

    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800c4bc:	b513      	push	{r0, r1, r4, lr}
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800c4be:	4b07      	ldr	r3, [pc, #28]	; (800c4dc <VerifyRfFreq+0x20>)
{
 800c4c0:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800c4c2:	6a1b      	ldr	r3, [r3, #32]
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	4798      	blx	r3
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d006      	beq.n	800c4da <VerifyRfFreq+0x1e>
    {
        return false;
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	4b04      	ldr	r3, [pc, #16]	; (800c4e0 <VerifyRfFreq+0x24>)
 800c4d0:	18e4      	adds	r4, r4, r3
 800c4d2:	4b04      	ldr	r3, [pc, #16]	; (800c4e4 <VerifyRfFreq+0x28>)
 800c4d4:	42a3      	cmp	r3, r4
 800c4d6:	4140      	adcs	r0, r0
 800c4d8:	b2c0      	uxtb	r0, r0
    {
        return false;
    }
    return true;
}
 800c4da:	bd16      	pop	{r1, r2, r4, pc}
 800c4dc:	08012ccc 	.word	0x08012ccc
 800c4e0:	c9763540 	.word	0xc9763540
 800c4e4:	00c65d40 	.word	0x00c65d40

0800c4e8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesAS923[datarate];
 800c4ea:	271f      	movs	r7, #31
 800c4ec:	4b12      	ldr	r3, [pc, #72]	; (800c538 <GetTimeOnAir+0x50>)
{
 800c4ee:	b085      	sub	sp, #20
    int8_t phyDr = DataratesAS923[datarate];
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	181b      	adds	r3, r3, r0
{
 800c4f4:	000c      	movs	r4, r1
    int8_t phyDr = DataratesAS923[datarate];
 800c4f6:	57df      	ldrsb	r7, [r3, r7]
{
 800c4f8:	0005      	movs	r5, r0
    uint32_t bandwidth = GetBandwidth( datarate );
 800c4fa:	f7ff ffcb 	bl	800c494 <GetBandwidth>
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	; (800c53c <GetTimeOnAir+0x54>)
 800c500:	0001      	movs	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800c502:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800c504:	2001      	movs	r0, #1
 800c506:	b2e4      	uxtb	r4, r4
 800c508:	2d07      	cmp	r5, #7
 800c50a:	d10c      	bne.n	800c526 <GetTimeOnAir+0x3e>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800c50c:	2305      	movs	r3, #5
 800c50e:	9003      	str	r0, [sp, #12]
 800c510:	2000      	movs	r0, #0
 800c512:	22fa      	movs	r2, #250	; 0xfa
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	0003      	movs	r3, r0
 800c518:	0092      	lsls	r2, r2, #2
 800c51a:	437a      	muls	r2, r7
 800c51c:	9402      	str	r4, [sp, #8]
 800c51e:	9001      	str	r0, [sp, #4]
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c520:	47b0      	blx	r6
    }
    return timeOnAir;
}
 800c522:	b005      	add	sp, #20
 800c524:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c526:	2300      	movs	r3, #0
 800c528:	9301      	str	r3, [sp, #4]
 800c52a:	3308      	adds	r3, #8
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	003a      	movs	r2, r7
 800c530:	0003      	movs	r3, r0
 800c532:	9003      	str	r0, [sp, #12]
 800c534:	9402      	str	r4, [sp, #8]
 800c536:	e7f3      	b.n	800c520 <GetTimeOnAir+0x38>
 800c538:	08012b60 	.word	0x08012b60
 800c53c:	08012ccc 	.word	0x08012ccc

0800c540 <RegionAS923GetPhyParam>:

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 800c540:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 800c542:	2200      	movs	r2, #0
{
 800c544:	0003      	movs	r3, r0
 800c546:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800c548:	9200      	str	r2, [sp, #0]

    switch( getPhy->Attribute )
 800c54a:	3801      	subs	r0, #1
 800c54c:	2838      	cmp	r0, #56	; 0x38
 800c54e:	d835      	bhi.n	800c5bc <RegionAS923GetPhyParam+0x7c>
 800c550:	f7f3 fdec 	bl	800012c <__gnu_thumb1_case_uqi>
 800c554:	3434231d 	.word	0x3434231d
 800c558:	34342034 	.word	0x34342034
 800c55c:	38363434 	.word	0x38363434
 800c560:	4d34453a 	.word	0x4d34453a
 800c564:	5755524f 	.word	0x5755524f
 800c568:	66345c59 	.word	0x66345c59
 800c56c:	6c6a6820 	.word	0x6c6a6820
 800c570:	7270706e 	.word	0x7270706e
 800c574:	34342576 	.word	0x34342576
 800c578:	34343434 	.word	0x34343434
 800c57c:	34343434 	.word	0x34343434
 800c580:	78343434 	.word	0x78343434
 800c584:	3434207a 	.word	0x3434207a
 800c588:	80342078 	.word	0x80342078
 800c58c:	87          	.byte	0x87
 800c58d:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 800c58e:	78db      	ldrb	r3, [r3, #3]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d013      	beq.n	800c5bc <RegionAS923GetPhyParam+0x7c>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 800c594:	2303      	movs	r3, #3
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	e010      	b.n	800c5bc <RegionAS923GetPhyParam+0x7c>
            if( getPhy->UplinkDwellTime == 0 )
 800c59a:	789b      	ldrb	r3, [r3, #2]
 800c59c:	e7f8      	b.n	800c590 <RegionAS923GetPhyParam+0x50>
            if( getPhy->UplinkDwellTime == 0 )
 800c59e:	789a      	ldrb	r2, [r3, #2]
 800c5a0:	785b      	ldrb	r3, [r3, #1]
 800c5a2:	b25b      	sxtb	r3, r3
 800c5a4:	2a00      	cmp	r2, #0
 800c5a6:	d104      	bne.n	800c5b2 <RegionAS923GetPhyParam+0x72>
    if( dr == minDr )
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d005      	beq.n	800c5b8 <RegionAS923GetPhyParam+0x78>
        nextLowerDr = dr - 1;
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	e002      	b.n	800c5b8 <RegionAS923GetPhyParam+0x78>
        nextLowerDr = minDr;
 800c5b2:	001a      	movs	r2, r3
    if( dr == minDr )
 800c5b4:	2b03      	cmp	r3, #3
 800c5b6:	d1f9      	bne.n	800c5ac <RegionAS923GetPhyParam+0x6c>
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE );
 800c5b8:	b252      	sxtb	r2, r2
 800c5ba:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800c5bc:	9800      	ldr	r0, [sp, #0]
 800c5be:	bd0e      	pop	{r1, r2, r3, pc}
            phyParam.Value = AS923_ADR_ACK_LIMIT;
 800c5c0:	2340      	movs	r3, #64	; 0x40
 800c5c2:	e7e8      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Value = AS923_ADR_ACK_DELAY;
 800c5c4:	2320      	movs	r3, #32
 800c5c6:	e7e6      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            if( getPhy->UplinkDwellTime == 0 )
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	7899      	ldrb	r1, [r3, #2]
 800c5cc:	569a      	ldrsb	r2, [r3, r2]
 800c5ce:	4b27      	ldr	r3, [pc, #156]	; (800c66c <RegionAS923GetPhyParam+0x12c>)
 800c5d0:	2900      	cmp	r1, #0
 800c5d2:	d102      	bne.n	800c5da <RegionAS923GetPhyParam+0x9a>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 800c5d4:	3328      	adds	r3, #40	; 0x28
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 800c5d6:	5c9b      	ldrb	r3, [r3, r2]
 800c5d8:	e7dd      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
 800c5da:	3330      	adds	r3, #48	; 0x30
 800c5dc:	e7fb      	b.n	800c5d6 <RegionAS923GetPhyParam+0x96>
            if( getPhy->UplinkDwellTime == 0 )
 800c5de:	2201      	movs	r2, #1
 800c5e0:	7899      	ldrb	r1, [r3, #2]
 800c5e2:	569a      	ldrsb	r2, [r3, r2]
 800c5e4:	4b21      	ldr	r3, [pc, #132]	; (800c66c <RegionAS923GetPhyParam+0x12c>)
 800c5e6:	2900      	cmp	r1, #0
 800c5e8:	d1f7      	bne.n	800c5da <RegionAS923GetPhyParam+0x9a>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800c5ea:	3338      	adds	r3, #56	; 0x38
 800c5ec:	e7f3      	b.n	800c5d6 <RegionAS923GetPhyParam+0x96>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 800c5ee:	4b20      	ldr	r3, [pc, #128]	; (800c670 <RegionAS923GetPhyParam+0x130>)
 800c5f0:	e7d1      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Value = AS923_RECEIVE_DELAY1;
 800c5f2:	23fa      	movs	r3, #250	; 0xfa
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	e7ce      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Value = AS923_RECEIVE_DELAY2;
 800c5f8:	23fa      	movs	r3, #250	; 0xfa
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	e7cb      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY1;
 800c5fe:	4b1d      	ldr	r3, [pc, #116]	; (800c674 <RegionAS923GetPhyParam+0x134>)
 800c600:	e7c9      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY2;
 800c602:	4b1d      	ldr	r3, [pc, #116]	; (800c678 <RegionAS923GetPhyParam+0x138>)
 800c604:	e7c7      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Value = AS923_MAX_FCNT_GAP;
 800c606:	2380      	movs	r3, #128	; 0x80
 800c608:	01db      	lsls	r3, r3, #7
 800c60a:	e7c4      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Value = ( AS923_ACKTIMEOUT + randr( -AS923_ACK_TIMEOUT_RND, AS923_ACK_TIMEOUT_RND ) );
 800c60c:	21fa      	movs	r1, #250	; 0xfa
 800c60e:	481b      	ldr	r0, [pc, #108]	; (800c67c <RegionAS923GetPhyParam+0x13c>)
 800c610:	0089      	lsls	r1, r1, #2
 800c612:	f000 ff39 	bl	800d488 <randr>
 800c616:	23fa      	movs	r3, #250	; 0xfa
 800c618:	00db      	lsls	r3, r3, #3
 800c61a:	18c0      	adds	r0, r0, r3
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800c61c:	9000      	str	r0, [sp, #0]
            break;
 800c61e:	e7cd      	b.n	800c5bc <RegionAS923GetPhyParam+0x7c>
            phyParam.Value = AS923_RX_WND_2_FREQ;
 800c620:	4b17      	ldr	r3, [pc, #92]	; (800c680 <RegionAS923GetPhyParam+0x140>)
 800c622:	e7b8      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800c624:	4b17      	ldr	r3, [pc, #92]	; (800c684 <RegionAS923GetPhyParam+0x144>)
 800c626:	e7b6      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800c628:	4b17      	ldr	r3, [pc, #92]	; (800c688 <RegionAS923GetPhyParam+0x148>)
 800c62a:	e7b4      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800c62c:	2310      	movs	r3, #16
 800c62e:	e7b2      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Channels = NvmCtx.Channels;
 800c630:	4b16      	ldr	r3, [pc, #88]	; (800c68c <RegionAS923GetPhyParam+0x14c>)
 800c632:	e7b0      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800c634:	2301      	movs	r3, #1
 800c636:	e7ae      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800c638:	2383      	movs	r3, #131	; 0x83
 800c63a:	05db      	lsls	r3, r3, #23
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800c63c:	9300      	str	r3, [sp, #0]
            break;
 800c63e:	e7bd      	b.n	800c5bc <RegionAS923GetPhyParam+0x7c>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800c640:	4b13      	ldr	r3, [pc, #76]	; (800c690 <RegionAS923GetPhyParam+0x150>)
 800c642:	e7fb      	b.n	800c63c <RegionAS923GetPhyParam+0xfc>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ;
 800c644:	4b13      	ldr	r3, [pc, #76]	; (800c694 <RegionAS923GetPhyParam+0x154>)
 800c646:	e7a6      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800c648:	466a      	mov	r2, sp
 800c64a:	4b13      	ldr	r3, [pc, #76]	; (800c698 <RegionAS923GetPhyParam+0x158>)
 800c64c:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 800c64e:	2300      	movs	r3, #0
 800c650:	7093      	strb	r3, [r2, #2]
            break;
 800c652:	e7b3      	b.n	800c5bc <RegionAS923GetPhyParam+0x7c>
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 800c654:	2101      	movs	r1, #1
 800c656:	4a05      	ldr	r2, [pc, #20]	; (800c66c <RegionAS923GetPhyParam+0x12c>)
 800c658:	5659      	ldrsb	r1, [r3, r1]
 800c65a:	1c53      	adds	r3, r2, #1
 800c65c:	185b      	adds	r3, r3, r1
 800c65e:	7fdb      	ldrb	r3, [r3, #31]
 800c660:	e799      	b.n	800c596 <RegionAS923GetPhyParam+0x56>
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800c662:	2001      	movs	r0, #1
 800c664:	5618      	ldrsb	r0, [r3, r0]
 800c666:	f7ff ff15 	bl	800c494 <GetBandwidth>
 800c66a:	e7d7      	b.n	800c61c <RegionAS923GetPhyParam+0xdc>
 800c66c:	08012b60 	.word	0x08012b60
 800c670:	00000bb8 	.word	0x00000bb8
 800c674:	00001388 	.word	0x00001388
 800c678:	00001770 	.word	0x00001770
 800c67c:	fffffc18 	.word	0xfffffc18
 800c680:	3706ea00 	.word	0x3706ea00
 800c684:	20000e8c 	.word	0x20000e8c
 800c688:	20000e8e 	.word	0x20000e8e
 800c68c:	20000db8 	.word	0x20000db8
 800c690:	4009999a 	.word	0x4009999a
 800c694:	3709f740 	.word	0x3709f740
 800c698:	00000211 	.word	0x00000211

0800c69c <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800c69c:	230c      	movs	r3, #12
{
 800c69e:	b513      	push	{r0, r1, r4, lr}
 800c6a0:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800c6a2:	7842      	ldrb	r2, [r0, #1]
 800c6a4:	7800      	ldrb	r0, [r0, #0]
 800c6a6:	4c07      	ldr	r4, [pc, #28]	; (800c6c4 <RegionAS923SetBandTxDone+0x28>)
 800c6a8:	4343      	muls	r3, r0
 800c6aa:	2014      	movs	r0, #20
 800c6ac:	18e3      	adds	r3, r4, r3
 800c6ae:	7a5b      	ldrb	r3, [r3, #9]
 800c6b0:	4358      	muls	r0, r3
 800c6b2:	690b      	ldr	r3, [r1, #16]
 800c6b4:	30c0      	adds	r0, #192	; 0xc0
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	68cb      	ldr	r3, [r1, #12]
 800c6ba:	1900      	adds	r0, r0, r4
 800c6bc:	6889      	ldr	r1, [r1, #8]
 800c6be:	f000 fcad 	bl	800d01c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800c6c2:	bd13      	pop	{r0, r1, r4, pc}
 800c6c4:	20000db8 	.word	0x20000db8

0800c6c8 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
    Band_t bands[AS923_MAX_NB_BANDS] =
 800c6c8:	2364      	movs	r3, #100	; 0x64
{
 800c6ca:	b570      	push	{r4, r5, r6, lr}
 800c6cc:	b086      	sub	sp, #24
    Band_t bands[AS923_MAX_NB_BANDS] =
 800c6ce:	a901      	add	r1, sp, #4
 800c6d0:	800b      	strh	r3, [r1, #0]
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	708b      	strb	r3, [r1, #2]
 800c6d6:	604b      	str	r3, [r1, #4]
 800c6d8:	608b      	str	r3, [r1, #8]
 800c6da:	60cb      	str	r3, [r1, #12]
 800c6dc:	740b      	strb	r3, [r1, #16]
{
 800c6de:	0002      	movs	r2, r0
 800c6e0:	7900      	ldrb	r0, [r0, #4]
 800c6e2:	2803      	cmp	r0, #3
 800c6e4:	d818      	bhi.n	800c718 <RegionAS923InitDefaults+0x50>
 800c6e6:	f7f3 fd21 	bl	800012c <__gnu_thumb1_case_uqi>
 800c6ea:	1902      	.short	0x1902
 800c6ec:	281f      	.short	0x281f
    switch( params->Type )
    {
        case INIT_TYPE_DEFAULTS:
        {
            // Default bands
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800c6ee:	2214      	movs	r2, #20
 800c6f0:	4816      	ldr	r0, [pc, #88]	; (800c74c <RegionAS923InitDefaults+0x84>)
 800c6f2:	f000 fee5 	bl	800d4c0 <memcpy1>

            // Default channels
            NvmCtx.Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800c6f6:	4b16      	ldr	r3, [pc, #88]	; (800c750 <RegionAS923InitDefaults+0x88>)
 800c6f8:	4916      	ldr	r1, [pc, #88]	; (800c754 <RegionAS923InitDefaults+0x8c>)
 800c6fa:	001a      	movs	r2, r3
 800c6fc:	0008      	movs	r0, r1
 800c6fe:	3240      	adds	r2, #64	; 0x40
 800c700:	ca70      	ldmia	r2!, {r4, r5, r6}
 800c702:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800c704:	334c      	adds	r3, #76	; 0x4c
 800c706:	cb34      	ldmia	r3!, {r2, r4, r5}
 800c708:	c034      	stmia	r0!, {r2, r4, r5}

            // Default ChannelsMask
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800c70a:	2303      	movs	r3, #3

            // Update the channels mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c70c:	2201      	movs	r2, #1
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800c70e:	31d6      	adds	r1, #214	; 0xd6
 800c710:	800b      	strh	r3, [r1, #0]
        {
            // Reset Channels Rx1Frequency to default 0
            NvmCtx.Channels[0].Rx1Frequency = 0;
            NvmCtx.Channels[1].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c712:	4811      	ldr	r0, [pc, #68]	; (800c758 <RegionAS923InitDefaults+0x90>)
 800c714:	f000 fc73 	bl	800cffe <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
 800c718:	b006      	add	sp, #24
 800c71a:	bd70      	pop	{r4, r5, r6, pc}
            NvmCtx.Channels[0].Rx1Frequency = 0;
 800c71c:	4a0d      	ldr	r2, [pc, #52]	; (800c754 <RegionAS923InitDefaults+0x8c>)
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c71e:	490f      	ldr	r1, [pc, #60]	; (800c75c <RegionAS923InitDefaults+0x94>)
            NvmCtx.Channels[0].Rx1Frequency = 0;
 800c720:	6053      	str	r3, [r2, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 800c722:	6113      	str	r3, [r2, #16]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c724:	2201      	movs	r2, #1
 800c726:	e7f4      	b.n	800c712 <RegionAS923InitDefaults+0x4a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 800c728:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <RegionAS923InitDefaults+0x8c>)
 800c72a:	0019      	movs	r1, r3
 800c72c:	33d6      	adds	r3, #214	; 0xd6
 800c72e:	31d4      	adds	r1, #212	; 0xd4
 800c730:	880a      	ldrh	r2, [r1, #0]
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	4313      	orrs	r3, r2
 800c736:	800b      	strh	r3, [r1, #0]
            break;
 800c738:	e7ee      	b.n	800c718 <RegionAS923InitDefaults+0x50>
            if( params->NvmCtx != 0 )
 800c73a:	6811      	ldr	r1, [r2, #0]
 800c73c:	2900      	cmp	r1, #0
 800c73e:	d0eb      	beq.n	800c718 <RegionAS923InitDefaults+0x50>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800c740:	22d8      	movs	r2, #216	; 0xd8
 800c742:	4804      	ldr	r0, [pc, #16]	; (800c754 <RegionAS923InitDefaults+0x8c>)
 800c744:	f000 febc 	bl	800d4c0 <memcpy1>
}
 800c748:	e7e6      	b.n	800c718 <RegionAS923InitDefaults+0x50>
 800c74a:	46c0      	nop			; (mov r8, r8)
 800c74c:	20000e78 	.word	0x20000e78
 800c750:	08012b60 	.word	0x08012b60
 800c754:	20000db8 	.word	0x20000db8
 800c758:	20000e8c 	.word	0x20000e8c
 800c75c:	20000e8e 	.word	0x20000e8e

0800c760 <RegionAS923GetNvmCtx>:

void* RegionAS923GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionAS923NvmCtx_t );
 800c760:	23d8      	movs	r3, #216	; 0xd8
 800c762:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800c764:	4800      	ldr	r0, [pc, #0]	; (800c768 <RegionAS923GetNvmCtx+0x8>)
 800c766:	4770      	bx	lr
 800c768:	20000db8 	.word	0x20000db8

0800c76c <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c76c:	0003      	movs	r3, r0
 800c76e:	b510      	push	{r4, lr}
 800c770:	0008      	movs	r0, r1
 800c772:	290a      	cmp	r1, #10
 800c774:	d826      	bhi.n	800c7c4 <RegionAS923Verify+0x58>
 800c776:	f7f3 fcd9 	bl	800012c <__gnu_thumb1_case_uqi>
 800c77a:	2506      	.short	0x2506
 800c77c:	0a252525 	.word	0x0a252525
 800c780:	21251b16 	.word	0x21251b16
 800c784:	21          	.byte	0x21
 800c785:	00          	.byte	0x00
    switch( phyAttribute )
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800c786:	6818      	ldr	r0, [r3, #0]
 800c788:	f7ff fe98 	bl	800c4bc <VerifyRfFreq>
            return AS923_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 800c78c:	bd10      	pop	{r4, pc}
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800c78e:	2000      	movs	r0, #0
 800c790:	7899      	ldrb	r1, [r3, #2]
 800c792:	5618      	ldrsb	r0, [r3, r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 800c794:	2207      	movs	r2, #7
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800c796:	2900      	cmp	r1, #0
 800c798:	d10e      	bne.n	800c7b8 <RegionAS923Verify+0x4c>
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800c79a:	f000 fbf3 	bl	800cf84 <RegionCommonValueInRange>
 800c79e:	1e43      	subs	r3, r0, #1
 800c7a0:	4198      	sbcs	r0, r3
 800c7a2:	b2c0      	uxtb	r0, r0
 800c7a4:	e7f2      	b.n	800c78c <RegionAS923Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	2205      	movs	r2, #5
 800c7aa:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	e7f4      	b.n	800c79a <RegionAS923Verify+0x2e>
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	7859      	ldrb	r1, [r3, #1]
 800c7b4:	5618      	ldrsb	r0, [r3, r0]
 800c7b6:	e7ed      	b.n	800c794 <RegionAS923Verify+0x28>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 800c7b8:	2103      	movs	r1, #3
 800c7ba:	e7ee      	b.n	800c79a <RegionAS923Verify+0x2e>
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800c7bc:	2000      	movs	r0, #0
 800c7be:	2207      	movs	r2, #7
 800c7c0:	5618      	ldrsb	r0, [r3, r0]
 800c7c2:	e7f3      	b.n	800c7ac <RegionAS923Verify+0x40>
{
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	e7e1      	b.n	800c78c <RegionAS923Verify+0x20>

0800c7c8 <RegionAS923ChanMaskSet>:
        }
    }
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800c7c8:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800c7ca:	7904      	ldrb	r4, [r0, #4]
 800c7cc:	2c00      	cmp	r4, #0
 800c7ce:	d003      	beq.n	800c7d8 <RegionAS923ChanMaskSet+0x10>
 800c7d0:	2c01      	cmp	r4, #1
 800c7d2:	d008      	beq.n	800c7e6 <RegionAS923ChanMaskSet+0x1e>
 800c7d4:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 800c7d6:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800c7d8:	6801      	ldr	r1, [r0, #0]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	4805      	ldr	r0, [pc, #20]	; (800c7f4 <RegionAS923ChanMaskSet+0x2c>)
 800c7de:	f000 fc0e 	bl	800cffe <RegionCommonChanMaskCopy>
    return true;
 800c7e2:	2001      	movs	r0, #1
            break;
 800c7e4:	e7f7      	b.n	800c7d6 <RegionAS923ChanMaskSet+0xe>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800c7e6:	6801      	ldr	r1, [r0, #0]
 800c7e8:	0022      	movs	r2, r4
 800c7ea:	4803      	ldr	r0, [pc, #12]	; (800c7f8 <RegionAS923ChanMaskSet+0x30>)
 800c7ec:	f000 fc07 	bl	800cffe <RegionCommonChanMaskCopy>
    return true;
 800c7f0:	0020      	movs	r0, r4
            break;
 800c7f2:	e7f0      	b.n	800c7d6 <RegionAS923ChanMaskSet+0xe>
 800c7f4:	20000e8c 	.word	0x20000e8c
 800c7f8:	20000e8e 	.word	0x20000e8e

0800c7fc <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7fe:	b085      	sub	sp, #20
 800c800:	001c      	movs	r4, r3
 800c802:	0005      	movs	r5, r0
 800c804:	000e      	movs	r6, r1
 800c806:	9202      	str	r2, [sp, #8]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800c808:	1c03      	adds	r3, r0, #0
 800c80a:	2807      	cmp	r0, #7
 800c80c:	dd00      	ble.n	800c810 <RegionAS923ComputeRxWindowParameters+0x14>
 800c80e:	2307      	movs	r3, #7
 800c810:	b25f      	sxtb	r7, r3
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800c812:	0038      	movs	r0, r7
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800c814:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800c816:	f7ff fe3d 	bl	800c494 <GetBandwidth>
 800c81a:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800c81c:	2d06      	cmp	r5, #6
 800c81e:	dd14      	ble.n	800c84a <RegionAS923ComputeRxWindowParameters+0x4e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800c820:	2032      	movs	r0, #50	; 0x32
 800c822:	f000 fd15 	bl	800d250 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c826:	4b0d      	ldr	r3, [pc, #52]	; (800c85c <RegionAS923ComputeRxWindowParameters+0x60>)
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800c828:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c82a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c82c:	9303      	str	r3, [sp, #12]
 800c82e:	4798      	blx	r3
 800c830:	0022      	movs	r2, r4
 800c832:	3408      	adds	r4, #8
 800c834:	320c      	adds	r2, #12
 800c836:	0003      	movs	r3, r0
 800c838:	9201      	str	r2, [sp, #4]
 800c83a:	0031      	movs	r1, r6
 800c83c:	0028      	movs	r0, r5
 800c83e:	9a02      	ldr	r2, [sp, #8]
 800c840:	9400      	str	r4, [sp, #0]
 800c842:	f000 fd09 	bl	800d258 <RegionCommonComputeRxWindowParameters>
}
 800c846:	b005      	add	sp, #20
 800c848:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800c84a:	4a05      	ldr	r2, [pc, #20]	; (800c860 <RegionAS923ComputeRxWindowParameters+0x64>)
 800c84c:	00b9      	lsls	r1, r7, #2
 800c84e:	1c53      	adds	r3, r2, #1
 800c850:	19df      	adds	r7, r3, r7
 800c852:	7ff8      	ldrb	r0, [r7, #31]
 800c854:	5889      	ldr	r1, [r1, r2]
 800c856:	f000 fcf1 	bl	800d23c <RegionCommonComputeSymbolTimeLoRa>
 800c85a:	e7e4      	b.n	800c826 <RegionAS923ComputeRxWindowParameters+0x2a>
 800c85c:	08012ccc 	.word	0x08012ccc
 800c860:	08012b60 	.word	0x08012b60

0800c864 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c864:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800c866:	2701      	movs	r7, #1
{
 800c868:	b08f      	sub	sp, #60	; 0x3c
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800c86a:	6843      	ldr	r3, [r0, #4]
{
 800c86c:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800c86e:	57c7      	ldrsb	r7, [r0, r7]
    uint32_t frequency = rxConfig->Frequency;
 800c870:	930a      	str	r3, [sp, #40]	; 0x28

    if( Radio.GetStatus( ) != RF_IDLE )
 800c872:	4b35      	ldr	r3, [pc, #212]	; (800c948 <RegionAS923RxConfig+0xe4>)
{
 800c874:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	930b      	str	r3, [sp, #44]	; 0x2c
 800c87a:	4798      	blx	r3
 800c87c:	0005      	movs	r5, r0
    {
        return false;
 800c87e:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800c880:	4285      	cmp	r5, r0
 800c882:	d148      	bne.n	800c916 <RegionAS923RxConfig+0xb2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800c884:	7ce3      	ldrb	r3, [r4, #19]
 800c886:	4283      	cmp	r3, r0
 800c888:	d10a      	bne.n	800c8a0 <RegionAS923RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800c88a:	220c      	movs	r2, #12
 800c88c:	7821      	ldrb	r1, [r4, #0]
 800c88e:	4b2f      	ldr	r3, [pc, #188]	; (800c94c <RegionAS923RxConfig+0xe8>)
 800c890:	434a      	muls	r2, r1
 800c892:	58d1      	ldr	r1, [r2, r3]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800c894:	189b      	adds	r3, r3, r2
 800c896:	685b      	ldr	r3, [r3, #4]
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800c898:	910a      	str	r1, [sp, #40]	; 0x28
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800c89a:	4283      	cmp	r3, r0
 800c89c:	d000      	beq.n	800c8a0 <RegionAS923RxConfig+0x3c>
 800c89e:	930a      	str	r3, [sp, #40]	; 0x28
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800c8a0:	4b2b      	ldr	r3, [pc, #172]	; (800c950 <RegionAS923RxConfig+0xec>)

    Radio.SetChannel( frequency );
 800c8a2:	4e29      	ldr	r6, [pc, #164]	; (800c948 <RegionAS923RxConfig+0xe4>)
    phyDr = DataratesAS923[dr];
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	19db      	adds	r3, r3, r7
 800c8a8:	7fdb      	ldrb	r3, [r3, #31]
    Radio.SetChannel( frequency );
 800c8aa:	980a      	ldr	r0, [sp, #40]	; 0x28
    phyDr = DataratesAS923[dr];
 800c8ac:	b25b      	sxtb	r3, r3
 800c8ae:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800c8b0:	68f3      	ldr	r3, [r6, #12]
 800c8b2:	930d      	str	r3, [sp, #52]	; 0x34
 800c8b4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800c8b6:	69b6      	ldr	r6, [r6, #24]
 800c8b8:	7ca3      	ldrb	r3, [r4, #18]
 800c8ba:	2f07      	cmp	r7, #7
 800c8bc:	d12d      	bne.n	800c91a <RegionAS923RxConfig+0xb6>
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800c8be:	9309      	str	r3, [sp, #36]	; 0x24
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	9305      	str	r3, [sp, #20]
 800c8c4:	68a3      	ldr	r3, [r4, #8]
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	9302      	str	r3, [sp, #8]
 800c8cc:	2305      	movs	r3, #5
 800c8ce:	22fa      	movs	r2, #250	; 0xfa
 800c8d0:	9301      	str	r3, [sp, #4]
 800c8d2:	4b20      	ldr	r3, [pc, #128]	; (800c954 <RegionAS923RxConfig+0xf0>)
 800c8d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	0003      	movs	r3, r0
 800c8da:	0092      	lsls	r2, r2, #2
 800c8dc:	434a      	muls	r2, r1
 800c8de:	491e      	ldr	r1, [pc, #120]	; (800c958 <RegionAS923RxConfig+0xf4>)
 800c8e0:	9008      	str	r0, [sp, #32]
 800c8e2:	9007      	str	r0, [sp, #28]
 800c8e4:	9006      	str	r0, [sp, #24]
 800c8e6:	9004      	str	r0, [sp, #16]
 800c8e8:	9003      	str	r0, [sp, #12]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800c8ea:	47b0      	blx	r6
    }

    // Check for repeater support
    if( rxConfig->RepeaterSupport == true )
 800c8ec:	7c62      	ldrb	r2, [r4, #17]
 800c8ee:	4b18      	ldr	r3, [pc, #96]	; (800c950 <RegionAS923RxConfig+0xec>)
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	d026      	beq.n	800c942 <RegionAS923RxConfig+0xde>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800c8f4:	3338      	adds	r3, #56	; 0x38
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800c8f6:	5dd9      	ldrb	r1, [r3, r7]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800c8f8:	4b13      	ldr	r3, [pc, #76]	; (800c948 <RegionAS923RxConfig+0xe4>)
 800c8fa:	310d      	adds	r1, #13
 800c8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8fe:	0028      	movs	r0, r5
 800c900:	b2c9      	uxtb	r1, r1
 800c902:	930b      	str	r3, [sp, #44]	; 0x2c
 800c904:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800c906:	7ce0      	ldrb	r0, [r4, #19]
 800c908:	003a      	movs	r2, r7
 800c90a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c90c:	f000 fd80 	bl	800d410 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
    return true;
 800c910:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 800c912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c914:	701f      	strb	r7, [r3, #0]
}
 800c916:	b00f      	add	sp, #60	; 0x3c
 800c918:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800c91a:	68a2      	ldr	r2, [r4, #8]
 800c91c:	2501      	movs	r5, #1
 800c91e:	b292      	uxth	r2, r2
 800c920:	9309      	str	r3, [sp, #36]	; 0x24
 800c922:	9202      	str	r2, [sp, #8]
 800c924:	2300      	movs	r3, #0
 800c926:	2208      	movs	r2, #8
 800c928:	9307      	str	r3, [sp, #28]
 800c92a:	9306      	str	r3, [sp, #24]
 800c92c:	9305      	str	r3, [sp, #20]
 800c92e:	9304      	str	r3, [sp, #16]
 800c930:	9303      	str	r3, [sp, #12]
 800c932:	9201      	str	r2, [sp, #4]
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	0028      	movs	r0, r5
 800c938:	002b      	movs	r3, r5
 800c93a:	78a1      	ldrb	r1, [r4, #2]
 800c93c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c93e:	9508      	str	r5, [sp, #32]
 800c940:	e7d3      	b.n	800c8ea <RegionAS923RxConfig+0x86>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800c942:	3328      	adds	r3, #40	; 0x28
 800c944:	e7d7      	b.n	800c8f6 <RegionAS923RxConfig+0x92>
 800c946:	46c0      	nop			; (mov r8, r8)
 800c948:	08012ccc 	.word	0x08012ccc
 800c94c:	20000db8 	.word	0x20000db8
 800c950:	08012b60 	.word	0x08012b60
 800c954:	00014585 	.word	0x00014585
 800c958:	0000c350 	.word	0x0000c350

0800c95c <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c95e:	0004      	movs	r4, r0
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800c960:	2001      	movs	r0, #1
{
 800c962:	b091      	sub	sp, #68	; 0x44
 800c964:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c966:	220c      	movs	r2, #12
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800c968:	4b3c      	ldr	r3, [pc, #240]	; (800ca5c <RegionAS923TxConfig+0x100>)
 800c96a:	5620      	ldrsb	r0, [r4, r0]
 800c96c:	3301      	adds	r3, #1
{
 800c96e:	910e      	str	r1, [sp, #56]	; 0x38
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800c970:	181b      	adds	r3, r3, r0
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c972:	7821      	ldrb	r1, [r4, #0]
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800c974:	7fdb      	ldrb	r3, [r3, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c976:	434a      	muls	r2, r1
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800c978:	b25b      	sxtb	r3, r3
 800c97a:	930a      	str	r3, [sp, #40]	; 0x28
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c97c:	4b38      	ldr	r3, [pc, #224]	; (800ca60 <RegionAS923TxConfig+0x104>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800c97e:	2502      	movs	r5, #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c980:	189a      	adds	r2, r3, r2
 800c982:	7a51      	ldrb	r1, [r2, #9]
 800c984:	2214      	movs	r2, #20
 800c986:	434a      	muls	r2, r1
 800c988:	189b      	adds	r3, r3, r2
 800c98a:	33c2      	adds	r3, #194	; 0xc2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	5765      	ldrsb	r5, [r4, r5]
 800c990:	1c19      	adds	r1, r3, #0
 800c992:	b25b      	sxtb	r3, r3
 800c994:	78a2      	ldrb	r2, [r4, #2]
 800c996:	42ab      	cmp	r3, r5
 800c998:	da00      	bge.n	800c99c <RegionAS923TxConfig+0x40>
 800c99a:	1c11      	adds	r1, r2, #0
 800c99c:	b24b      	sxtb	r3, r1
 800c99e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800c9a0:	f7ff fd78 	bl	800c494 <GetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c9a4:	68a2      	ldr	r2, [r4, #8]
 800c9a6:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800c9a8:	900c      	str	r0, [sp, #48]	; 0x30
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c9aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c9ac:	f000 fc7e 	bl	800d2ac <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800c9b0:	230c      	movs	r3, #12
 800c9b2:	4d2c      	ldr	r5, [pc, #176]	; (800ca64 <RegionAS923TxConfig+0x108>)
 800c9b4:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c9b6:	0007      	movs	r7, r0
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800c9b8:	4353      	muls	r3, r2
 800c9ba:	68ea      	ldr	r2, [r5, #12]
 800c9bc:	920d      	str	r2, [sp, #52]	; 0x34
 800c9be:	4a28      	ldr	r2, [pc, #160]	; (800ca60 <RegionAS923TxConfig+0x104>)
 800c9c0:	5898      	ldr	r0, [r3, r2]
 800c9c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c4:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
 800c9c6:	69eb      	ldr	r3, [r5, #28]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	930d      	str	r3, [sp, #52]	; 0x34
 800c9cc:	23fa      	movs	r3, #250	; 0xfa
 800c9ce:	2500      	movs	r5, #0
 800c9d0:	56a2      	ldrsb	r2, [r4, r2]
 800c9d2:	011b      	lsls	r3, r3, #4
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800c9d4:	9308      	str	r3, [sp, #32]
 800c9d6:	9507      	str	r5, [sp, #28]
 800c9d8:	9506      	str	r5, [sp, #24]
 800c9da:	9505      	str	r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800c9dc:	2a07      	cmp	r2, #7
 800c9de:	d12c      	bne.n	800ca3a <RegionAS923TxConfig+0xde>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	9304      	str	r3, [sp, #16]
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	9302      	str	r3, [sp, #8]
 800c9e8:	23fa      	movs	r3, #250	; 0xfa
 800c9ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	4353      	muls	r3, r2
 800c9f0:	0039      	movs	r1, r7
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	0028      	movs	r0, r5
 800c9f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9f8:	4a1b      	ldr	r2, [pc, #108]	; (800ca68 <RegionAS923TxConfig+0x10c>)
 800c9fa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800c9fc:	9503      	str	r5, [sp, #12]
 800c9fe:	9501      	str	r5, [sp, #4]
 800ca00:	47b0      	blx	r6
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ca02:	230c      	movs	r3, #12
 800ca04:	2101      	movs	r1, #1
 800ca06:	7822      	ldrb	r2, [r4, #0]
 800ca08:	5661      	ldrsb	r1, [r4, r1]
 800ca0a:	4353      	muls	r3, r2
 800ca0c:	4a14      	ldr	r2, [pc, #80]	; (800ca60 <RegionAS923TxConfig+0x104>)
 800ca0e:	5898      	ldr	r0, [r3, r2]
 800ca10:	f000 fd28 	bl	800d464 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ca14:	2001      	movs	r0, #1
 800ca16:	89a1      	ldrh	r1, [r4, #12]
 800ca18:	5620      	ldrsb	r0, [r4, r0]
 800ca1a:	f7ff fd65 	bl	800c4e8 <GetTimeOnAir>
 800ca1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca20:	6018      	str	r0, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ca22:	4b10      	ldr	r3, [pc, #64]	; (800ca64 <RegionAS923TxConfig+0x108>)
 800ca24:	0028      	movs	r0, r5
 800ca26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca28:	7b21      	ldrb	r1, [r4, #12]
 800ca2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca2c:	4798      	blx	r3

    *txPower = txPowerLimited;
    return true;
}
 800ca2e:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800ca30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca34:	701a      	strb	r2, [r3, #0]
}
 800ca36:	b011      	add	sp, #68	; 0x44
 800ca38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ca3a:	2308      	movs	r3, #8
 800ca3c:	2601      	movs	r6, #1
 800ca3e:	9302      	str	r3, [sp, #8]
 800ca40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca42:	002a      	movs	r2, r5
 800ca44:	9503      	str	r5, [sp, #12]
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ca4a:	0039      	movs	r1, r7
 800ca4c:	0030      	movs	r0, r6
 800ca4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca50:	9604      	str	r6, [sp, #16]
 800ca52:	9601      	str	r6, [sp, #4]
 800ca54:	47a8      	blx	r5
        modem = MODEM_LORA;
 800ca56:	0035      	movs	r5, r6
 800ca58:	e7d3      	b.n	800ca02 <RegionAS923TxConfig+0xa6>
 800ca5a:	46c0      	nop			; (mov r8, r8)
 800ca5c:	08012b60 	.word	0x08012b60
 800ca60:	20000db8 	.word	0x20000db8
 800ca64:	08012ccc 	.word	0x08012ccc
 800ca68:	000061a8 	.word	0x000061a8

0800ca6c <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ca6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca6e:	b095      	sub	sp, #84	; 0x54
 800ca70:	9103      	str	r1, [sp, #12]
 800ca72:	9204      	str	r2, [sp, #16]
 800ca74:	0005      	movs	r5, r0
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ca76:	2206      	movs	r2, #6
 800ca78:	2100      	movs	r1, #0
 800ca7a:	a80a      	add	r0, sp, #40	; 0x28
{
 800ca7c:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ca7e:	f002 fdf5 	bl	800f66c <memset>
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800ca82:	2000      	movs	r0, #0
    uint8_t status = 0x07;
 800ca84:	2407      	movs	r4, #7
    uint16_t chMask = 0;
 800ca86:	ab06      	add	r3, sp, #24
 800ca88:	8058      	strh	r0, [r3, #2]
    uint8_t bytesProcessed = 0;
 800ca8a:	9001      	str	r0, [sp, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ca8c:	7a2b      	ldrb	r3, [r5, #8]
 800ca8e:	9a01      	ldr	r2, [sp, #4]
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d907      	bls.n	800caa4 <RegionAS923LinkAdrReq+0x38>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ca94:	686b      	ldr	r3, [r5, #4]
 800ca96:	9a01      	ldr	r2, [sp, #4]
 800ca98:	a90a      	add	r1, sp, #40	; 0x28
 800ca9a:	1898      	adds	r0, r3, r2
 800ca9c:	f000 fb6c 	bl	800d178 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d14b      	bne.n	800cb3c <RegionAS923LinkAdrReq+0xd0>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800caa4:	2702      	movs	r7, #2
 800caa6:	ab06      	add	r3, sp, #24
 800caa8:	721f      	strb	r7, [r3, #8]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800caaa:	7a6b      	ldrb	r3, [r5, #9]
    phyParam = RegionAS923GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800caac:	ae0c      	add	r6, sp, #48	; 0x30
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800caae:	aa06      	add	r2, sp, #24
    phyParam = RegionAS923GetPhyParam( &getPhy );
 800cab0:	a808      	add	r0, sp, #32
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800cab2:	7293      	strb	r3, [r2, #10]
    phyParam = RegionAS923GetPhyParam( &getPhy );
 800cab4:	f7ff fd44 	bl	800c540 <RegionAS923GetPhyParam>
    linkAdrVerifyParams.Status = status;
 800cab8:	7134      	strb	r4, [r6, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800caba:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800cabc:	ac0a      	add	r4, sp, #40	; 0x28
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800cabe:	7173      	strb	r3, [r6, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800cac0:	7863      	ldrb	r3, [r4, #1]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = &chMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800cac2:	4a3c      	ldr	r2, [pc, #240]	; (800cbb4 <RegionAS923LinkAdrReq+0x148>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800cac4:	71b3      	strb	r3, [r6, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800cac6:	78a3      	ldrb	r3, [r4, #2]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cac8:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800caca:	71f3      	strb	r3, [r6, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800cacc:	7823      	ldrb	r3, [r4, #0]
 800cace:	7233      	strb	r3, [r6, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800cad0:	7aeb      	ldrb	r3, [r5, #11]
 800cad2:	7273      	strb	r3, [r6, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800cad4:	7b2b      	ldrb	r3, [r5, #12]
 800cad6:	72b3      	strb	r3, [r6, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800cad8:	7b6b      	ldrb	r3, [r5, #13]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800cada:	9212      	str	r2, [sp, #72]	; 0x48
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800cadc:	72f3      	strb	r3, [r6, #11]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800cade:	2310      	movs	r3, #16
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cae0:	2212      	movs	r2, #18
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800cae2:	7333      	strb	r3, [r6, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800cae4:	ab06      	add	r3, sp, #24
 800cae6:	19db      	adds	r3, r3, r7
 800cae8:	9310      	str	r3, [sp, #64]	; 0x40
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800caea:	2307      	movs	r3, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800caec:	1852      	adds	r2, r2, r1
 800caee:	2111      	movs	r1, #17
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800caf0:	7573      	strb	r3, [r6, #21]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 800caf2:	83b3      	strh	r3, [r6, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800caf4:	682b      	ldr	r3, [r5, #0]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800caf6:	7530      	strb	r0, [r6, #20]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800caf8:	a806      	add	r0, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800cafa:	930c      	str	r3, [sp, #48]	; 0x30
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cafc:	1809      	adds	r1, r1, r0
 800cafe:	0023      	movs	r3, r4
 800cb00:	0030      	movs	r0, r6
 800cb02:	f000 fb54 	bl	800d1ae <RegionCommonLinkAdrReqVerifyParams>
 800cb06:	0005      	movs	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800cb08:	2807      	cmp	r0, #7
 800cb0a:	d108      	bne.n	800cb1e <RegionAS923LinkAdrReq+0xb2>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 800cb0c:	4e2a      	ldr	r6, [pc, #168]	; (800cbb8 <RegionAS923LinkAdrReq+0x14c>)
 800cb0e:	003a      	movs	r2, r7
 800cb10:	2100      	movs	r1, #0
 800cb12:	0030      	movs	r0, r6
 800cb14:	f000 fcea 	bl	800d4ec <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 800cb18:	ab06      	add	r3, sp, #24
 800cb1a:	885b      	ldrh	r3, [r3, #2]
 800cb1c:	8033      	strh	r3, [r6, #0]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800cb1e:	0028      	movs	r0, r5
    *drOut = linkAdrParams.Datarate;
 800cb20:	7863      	ldrb	r3, [r4, #1]
 800cb22:	9a03      	ldr	r2, [sp, #12]
 800cb24:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800cb26:	78a3      	ldrb	r3, [r4, #2]
 800cb28:	9a04      	ldr	r2, [sp, #16]
 800cb2a:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800cb2c:	7823      	ldrb	r3, [r4, #0]
 800cb2e:	9a05      	ldr	r2, [sp, #20]
 800cb30:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800cb32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cb34:	9a01      	ldr	r2, [sp, #4]
 800cb36:	701a      	strb	r2, [r3, #0]
}
 800cb38:	b015      	add	sp, #84	; 0x54
 800cb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bytesProcessed += nextIndex;
 800cb3c:	9b01      	ldr	r3, [sp, #4]
        chMask = linkAdrParams.ChMask;
 800cb3e:	aa06      	add	r2, sp, #24
        bytesProcessed += nextIndex;
 800cb40:	1818      	adds	r0, r3, r0
 800cb42:	b2c3      	uxtb	r3, r0
 800cb44:	9301      	str	r3, [sp, #4]
        chMask = linkAdrParams.ChMask;
 800cb46:	ab06      	add	r3, sp, #24
 800cb48:	8a9b      	ldrh	r3, [r3, #20]
 800cb4a:	8053      	strh	r3, [r2, #2]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800cb4c:	aa06      	add	r2, sp, #24
 800cb4e:	7cd0      	ldrb	r0, [r2, #19]
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d11c      	bne.n	800cb8e <RegionAS923LinkAdrReq+0x122>
            status &= 0xFE; // Channel mask KO
 800cb54:	2406      	movs	r4, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d098      	beq.n	800ca8c <RegionAS923LinkAdrReq+0x20>
{
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	2407      	movs	r4, #7
 800cb5e:	4915      	ldr	r1, [pc, #84]	; (800cbb4 <RegionAS923LinkAdrReq+0x148>)
 800cb60:	9202      	str	r2, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800cb62:	2806      	cmp	r0, #6
 800cb64:	d11c      	bne.n	800cba0 <RegionAS923LinkAdrReq+0x134>
                    if( NvmCtx.Channels[i].Frequency != 0 )
 800cb66:	680e      	ldr	r6, [r1, #0]
 800cb68:	2e00      	cmp	r6, #0
 800cb6a:	d005      	beq.n	800cb78 <RegionAS923LinkAdrReq+0x10c>
                        chMask |= 1 << i;
 800cb6c:	2701      	movs	r7, #1
 800cb6e:	4097      	lsls	r7, r2
 800cb70:	2601      	movs	r6, #1
 800cb72:	433b      	orrs	r3, r7
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	9602      	str	r6, [sp, #8]
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800cb78:	3201      	adds	r2, #1
 800cb7a:	310c      	adds	r1, #12
 800cb7c:	2a10      	cmp	r2, #16
 800cb7e:	d1f0      	bne.n	800cb62 <RegionAS923LinkAdrReq+0xf6>
 800cb80:	9a02      	ldr	r2, [sp, #8]
 800cb82:	2a00      	cmp	r2, #0
 800cb84:	d100      	bne.n	800cb88 <RegionAS923LinkAdrReq+0x11c>
 800cb86:	e781      	b.n	800ca8c <RegionAS923LinkAdrReq+0x20>
 800cb88:	aa06      	add	r2, sp, #24
 800cb8a:	8053      	strh	r3, [r2, #2]
 800cb8c:	e77e      	b.n	800ca8c <RegionAS923LinkAdrReq+0x20>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800cb8e:	1e42      	subs	r2, r0, #1
            status &= 0xFE; // Channel mask KO
 800cb90:	2406      	movs	r4, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800cb92:	2a04      	cmp	r2, #4
 800cb94:	d800      	bhi.n	800cb98 <RegionAS923LinkAdrReq+0x12c>
 800cb96:	e779      	b.n	800ca8c <RegionAS923LinkAdrReq+0x20>
 800cb98:	42a0      	cmp	r0, r4
 800cb9a:	d000      	beq.n	800cb9e <RegionAS923LinkAdrReq+0x132>
 800cb9c:	e776      	b.n	800ca8c <RegionAS923LinkAdrReq+0x20>
 800cb9e:	e7dc      	b.n	800cb5a <RegionAS923LinkAdrReq+0xee>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800cba0:	001e      	movs	r6, r3
 800cba2:	2701      	movs	r7, #1
 800cba4:	4116      	asrs	r6, r2
 800cba6:	423e      	tst	r6, r7
 800cba8:	d0e6      	beq.n	800cb78 <RegionAS923LinkAdrReq+0x10c>
 800cbaa:	680e      	ldr	r6, [r1, #0]
 800cbac:	2e00      	cmp	r6, #0
 800cbae:	d1e3      	bne.n	800cb78 <RegionAS923LinkAdrReq+0x10c>
                        status &= 0xFE; // Channel mask KO
 800cbb0:	2406      	movs	r4, #6
 800cbb2:	e7e1      	b.n	800cb78 <RegionAS923LinkAdrReq+0x10c>
 800cbb4:	20000db8 	.word	0x20000db8
 800cbb8:	20000e8c 	.word	0x20000e8c

0800cbbc <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800cbbc:	b570      	push	{r4, r5, r6, lr}
 800cbbe:	0005      	movs	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800cbc0:	6840      	ldr	r0, [r0, #4]
 800cbc2:	f7ff fc7b 	bl	800c4bc <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800cbc6:	0004      	movs	r4, r0
 800cbc8:	1e60      	subs	r0, r4, #1
 800cbca:	4184      	sbcs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800cbcc:	2000      	movs	r0, #0
 800cbce:	2207      	movs	r2, #7
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800cbd4:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800cbd6:	f000 f9d5 	bl	800cf84 <RegionCommonValueInRange>
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	d101      	bne.n	800cbe2 <RegionAS923RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 800cbde:	2302      	movs	r3, #2
 800cbe0:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 800cbe2:	2001      	movs	r0, #1
 800cbe4:	2207      	movs	r2, #7
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	5628      	ldrsb	r0, [r5, r0]
 800cbea:	f000 f9cb 	bl	800cf84 <RegionCommonValueInRange>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d101      	bne.n	800cbf6 <RegionAS923RxParamSetupReq+0x3a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800cbf2:	2304      	movs	r3, #4
 800cbf4:	439c      	bics	r4, r3
    }

    return status;
}
 800cbf6:	0020      	movs	r0, r4
 800cbf8:	bd70      	pop	{r4, r5, r6, pc}

0800cbfa <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	4770      	bx	lr
	...

0800cc00 <RegionAS923DlChannelReq>:

uint8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800cc00:	b510      	push	{r4, lr}
 800cc02:	0004      	movs	r4, r0
    uint8_t status = 0x03;

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800cc04:	6840      	ldr	r0, [r0, #4]
 800cc06:	f7ff fc59 	bl	800c4bc <VerifyRfFreq>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800cc0a:	220c      	movs	r2, #12
        status &= 0xFE;
 800cc0c:	1e43      	subs	r3, r0, #1
 800cc0e:	4198      	sbcs	r0, r3
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800cc10:	7821      	ldrb	r1, [r4, #0]
 800cc12:	4b08      	ldr	r3, [pc, #32]	; (800cc34 <RegionAS923DlChannelReq+0x34>)
 800cc14:	434a      	muls	r2, r1
 800cc16:	58d1      	ldr	r1, [r2, r3]
        status &= 0xFE;
 800cc18:	3002      	adds	r0, #2
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800cc1a:	2900      	cmp	r1, #0
 800cc1c:	d102      	bne.n	800cc24 <RegionAS923DlChannelReq+0x24>
    {
        status &= 0xFD;
 800cc1e:	2302      	movs	r3, #2
 800cc20:	4398      	bics	r0, r3
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 800cc22:	bd10      	pop	{r4, pc}
    if( status == 0x03 )
 800cc24:	2803      	cmp	r0, #3
 800cc26:	d103      	bne.n	800cc30 <RegionAS923DlChannelReq+0x30>
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800cc28:	189b      	adds	r3, r3, r2
 800cc2a:	6862      	ldr	r2, [r4, #4]
 800cc2c:	605a      	str	r2, [r3, #4]
 800cc2e:	e7f8      	b.n	800cc22 <RegionAS923DlChannelReq+0x22>
 800cc30:	2002      	movs	r0, #2
 800cc32:	e7f6      	b.n	800cc22 <RegionAS923DlChannelReq+0x22>
 800cc34:	20000db8 	.word	0x20000db8

0800cc38 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
}
 800cc38:	2003      	movs	r0, #3
 800cc3a:	4770      	bx	lr

0800cc3c <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3e:	b099      	sub	sp, #100	; 0x64
 800cc40:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 800cc42:	230a      	movs	r3, #10
 800cc44:	2500      	movs	r5, #0
{
 800cc46:	9204      	str	r2, [sp, #16]
    uint8_t nbEnabledChannels = 0;
 800cc48:	aa04      	add	r2, sp, #16
 800cc4a:	189b      	adds	r3, r3, r2
 800cc4c:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800cc4e:	230b      	movs	r3, #11
{
 800cc50:	9103      	str	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 800cc52:	189b      	adds	r3, r3, r2
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800cc54:	0029      	movs	r1, r5
 800cc56:	220c      	movs	r2, #12
{
 800cc58:	0004      	movs	r4, r0
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800cc5a:	a808      	add	r0, sp, #32
    uint8_t nbRestrictedChannels = 0;
 800cc5c:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800cc5e:	9507      	str	r5, [sp, #28]
 800cc60:	f002 fd04 	bl	800f66c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 800cc64:	4e29      	ldr	r6, [pc, #164]	; (800cd0c <RegionAS923NextChannel+0xd0>)
 800cc66:	2201      	movs	r2, #1
 800cc68:	0029      	movs	r1, r5
 800cc6a:	0030      	movs	r0, r6
 800cc6c:	f000 f9a8 	bl	800cfc0 <RegionCommonCountChannels>
 800cc70:	42a8      	cmp	r0, r5
 800cc72:	d103      	bne.n	800cc7c <RegionAS923NextChannel+0x40>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800cc74:	2303      	movs	r3, #3
 800cc76:	8832      	ldrh	r2, [r6, #0]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	8033      	strh	r3, [r6, #0]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800cc7c:	7a63      	ldrb	r3, [r4, #9]
 800cc7e:	ae0b      	add	r6, sp, #44	; 0x2c
 800cc80:	7033      	strb	r3, [r6, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800cc82:	2308      	movs	r3, #8
 800cc84:	56e3      	ldrsb	r3, [r4, r3]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 800cc86:	4f21      	ldr	r7, [pc, #132]	; (800cd0c <RegionAS923NextChannel+0xd0>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800cc88:	7073      	strb	r3, [r6, #1]
 800cc8a:	469c      	mov	ip, r3
    countChannelsParams.Channels = NvmCtx.Channels;
 800cc8c:	4b20      	ldr	r3, [pc, #128]	; (800cd10 <RegionAS923NextChannel+0xd4>)
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 800cc8e:	970c      	str	r7, [sp, #48]	; 0x30
    countChannelsParams.Channels = NvmCtx.Channels;
 800cc90:	930d      	str	r3, [sp, #52]	; 0x34
    countChannelsParams.Bands = NvmCtx.Bands;
 800cc92:	4b20      	ldr	r3, [pc, #128]	; (800cd14 <RegionAS923NextChannel+0xd8>)
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = AS923_JOIN_CHANNELS;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cc94:	ad10      	add	r5, sp, #64	; 0x40
    countChannelsParams.Bands = NvmCtx.Bands;
 800cc96:	930e      	str	r3, [sp, #56]	; 0x38
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 800cc98:	4b1f      	ldr	r3, [pc, #124]	; (800cd18 <RegionAS923NextChannel+0xdc>)
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800cc9a:	0022      	movs	r2, r4
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 800cc9c:	930f      	str	r3, [sp, #60]	; 0x3c
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cc9e:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800cca0:	320c      	adds	r2, #12
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cca2:	9310      	str	r3, [sp, #64]	; 0x40
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800cca4:	6863      	ldr	r3, [r4, #4]
 800cca6:	9311      	str	r3, [sp, #68]	; 0x44
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800cca8:	7aa3      	ldrb	r3, [r4, #10]
 800ccaa:	722b      	strb	r3, [r5, #8]
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 800ccac:	2301      	movs	r3, #1
 800ccae:	726b      	strb	r3, [r5, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800ccb0:	ab13      	add	r3, sp, #76	; 0x4c
 800ccb2:	ca03      	ldmia	r2!, {r0, r1}
 800ccb4:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800ccb6:	7d23      	ldrb	r3, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800ccb8:	4660      	mov	r0, ip
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800ccba:	752b      	strb	r3, [r5, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800ccbc:	8ae1      	ldrh	r1, [r4, #22]
 800ccbe:	f7ff fc13 	bl	800c4e8 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800ccc2:	61ee      	str	r6, [r5, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800ccc4:	260a      	movs	r6, #10
 800ccc6:	ab04      	add	r3, sp, #16
 800ccc8:	18f6      	adds	r6, r6, r3
 800ccca:	9b04      	ldr	r3, [sp, #16]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800cccc:	61a8      	str	r0, [r5, #24]
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	230b      	movs	r3, #11
 800ccd2:	aa04      	add	r2, sp, #16
 800ccd4:	189b      	adds	r3, r3, r2
 800ccd6:	ac07      	add	r4, sp, #28
 800ccd8:	0028      	movs	r0, r5
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	0022      	movs	r2, r4
 800ccde:	0033      	movs	r3, r6
 800cce0:	9905      	ldr	r1, [sp, #20]
 800cce2:	f000 fb4f 	bl	800d384 <RegionCommonIdentifyChannels>
 800cce6:	1e05      	subs	r5, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800cce8:	d109      	bne.n	800ccfe <RegionAS923NextChannel+0xc2>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800ccea:	7831      	ldrb	r1, [r6, #0]
 800ccec:	3901      	subs	r1, #1
 800ccee:	f000 fbcb 	bl	800d488 <randr>
 800ccf2:	9a03      	ldr	r2, [sp, #12]
 800ccf4:	5c23      	ldrb	r3, [r4, r0]
 800ccf6:	7013      	strb	r3, [r2, #0]
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
    }
    return status;
}
 800ccf8:	0028      	movs	r0, r5
 800ccfa:	b019      	add	sp, #100	; 0x64
 800ccfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800ccfe:	280c      	cmp	r0, #12
 800cd00:	d1fa      	bne.n	800ccf8 <RegionAS923NextChannel+0xbc>
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800cd02:	2303      	movs	r3, #3
 800cd04:	883a      	ldrh	r2, [r7, #0]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	803b      	strh	r3, [r7, #0]
 800cd0a:	e7f5      	b.n	800ccf8 <RegionAS923NextChannel+0xbc>
 800cd0c:	20000e8c 	.word	0x20000e8c
 800cd10:	20000db8 	.word	0x20000db8
 800cd14:	20000e78 	.word	0x20000e78
 800cd18:	00030010 	.word	0x00030010

0800cd1c <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800cd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800cd1e:	7906      	ldrb	r6, [r0, #4]
{
 800cd20:	0004      	movs	r4, r0

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800cd22:	2e01      	cmp	r6, #1
 800cd24:	d801      	bhi.n	800cd2a <RegionAS923ChannelAdd+0xe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800cd26:	2006      	movs	r0, #6

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
    NvmCtx.Channels[id].Band = 0;
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
 800cd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cd2a:	2003      	movs	r0, #3
    if( id >= AS923_MAX_NB_CHANNELS )
 800cd2c:	2e0f      	cmp	r6, #15
 800cd2e:	d8fb      	bhi.n	800cd28 <RegionAS923ChannelAdd+0xc>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	2207      	movs	r2, #7
 800cd34:	7a18      	ldrb	r0, [r3, #8]
 800cd36:	2100      	movs	r1, #0
 800cd38:	0700      	lsls	r0, r0, #28
 800cd3a:	1700      	asrs	r0, r0, #28
 800cd3c:	f000 f922 	bl	800cf84 <RegionCommonValueInRange>
 800cd40:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800cd42:	2008      	movs	r0, #8
 800cd44:	6823      	ldr	r3, [r4, #0]
 800cd46:	2207      	movs	r2, #7
 800cd48:	5618      	ldrsb	r0, [r3, r0]
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	1100      	asrs	r0, r0, #4
 800cd4e:	f000 f919 	bl	800cf84 <RegionCommonValueInRange>
        drInvalid = true;
 800cd52:	2501      	movs	r5, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d002      	beq.n	800cd5e <RegionAS923ChannelAdd+0x42>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800cd58:	427d      	negs	r5, r7
 800cd5a:	417d      	adcs	r5, r7
 800cd5c:	b2ed      	uxtb	r5, r5
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800cd5e:	6821      	ldr	r1, [r4, #0]
 800cd60:	7a0b      	ldrb	r3, [r1, #8]
 800cd62:	071a      	lsls	r2, r3, #28
 800cd64:	b25b      	sxtb	r3, r3
 800cd66:	1712      	asrs	r2, r2, #28
 800cd68:	111b      	asrs	r3, r3, #4
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	dd00      	ble.n	800cd70 <RegionAS923ChannelAdd+0x54>
        drInvalid = true;
 800cd6e:	2501      	movs	r5, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800cd70:	6808      	ldr	r0, [r1, #0]
 800cd72:	f7ff fba3 	bl	800c4bc <VerifyRfFreq>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d103      	bne.n	800cd82 <RegionAS923ChannelAdd+0x66>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800cd7a:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800cd7c:	2d00      	cmp	r5, #0
 800cd7e:	d0d3      	beq.n	800cd28 <RegionAS923ChannelAdd+0xc>
 800cd80:	e7d1      	b.n	800cd26 <RegionAS923ChannelAdd+0xa>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800cd82:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800cd84:	2d00      	cmp	r5, #0
 800cd86:	d1cf      	bne.n	800cd28 <RegionAS923ChannelAdd+0xc>
    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 800cd88:	220c      	movs	r2, #12
 800cd8a:	0017      	movs	r7, r2
 800cd8c:	4377      	muls	r7, r6
 800cd8e:	4b08      	ldr	r3, [pc, #32]	; (800cdb0 <RegionAS923ChannelAdd+0x94>)
 800cd90:	6821      	ldr	r1, [r4, #0]
 800cd92:	18ff      	adds	r7, r7, r3
 800cd94:	0038      	movs	r0, r7
 800cd96:	f000 fb93 	bl	800d4c0 <memcpy1>
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800cd9a:	2101      	movs	r1, #1
 800cd9c:	40b1      	lsls	r1, r6
 800cd9e:	4b04      	ldr	r3, [pc, #16]	; (800cdb0 <RegionAS923ChannelAdd+0x94>)
    NvmCtx.Channels[id].Band = 0;
 800cda0:	727d      	strb	r5, [r7, #9]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800cda2:	33d4      	adds	r3, #212	; 0xd4
 800cda4:	881a      	ldrh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800cda6:	0028      	movs	r0, r5
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800cda8:	430a      	orrs	r2, r1
 800cdaa:	801a      	strh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800cdac:	e7bc      	b.n	800cd28 <RegionAS923ChannelAdd+0xc>
 800cdae:	46c0      	nop			; (mov r8, r8)
 800cdb0:	20000db8 	.word	0x20000db8

0800cdb4 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800cdb4:	b510      	push	{r4, lr}
    uint8_t id = channelRemove->ChannelId;
 800cdb6:	7804      	ldrb	r4, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800cdb8:	2100      	movs	r1, #0
    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800cdba:	2c01      	cmp	r4, #1
 800cdbc:	d90c      	bls.n	800cdd8 <RegionAS923ChannelsRemove+0x24>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800cdbe:	220c      	movs	r2, #12
 800cdc0:	0013      	movs	r3, r2
 800cdc2:	4363      	muls	r3, r4
 800cdc4:	4805      	ldr	r0, [pc, #20]	; (800cddc <RegionAS923ChannelsRemove+0x28>)
 800cdc6:	18c0      	adds	r0, r0, r3
 800cdc8:	f002 fc50 	bl	800f66c <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 800cdcc:	0021      	movs	r1, r4
 800cdce:	2210      	movs	r2, #16
 800cdd0:	4803      	ldr	r0, [pc, #12]	; (800cde0 <RegionAS923ChannelsRemove+0x2c>)
 800cdd2:	f000 f8e1 	bl	800cf98 <RegionCommonChanDisable>
 800cdd6:	0001      	movs	r1, r0
}
 800cdd8:	0008      	movs	r0, r1
 800cdda:	bd10      	pop	{r4, pc}
 800cddc:	20000db8 	.word	0x20000db8
 800cde0:	20000e8c 	.word	0x20000e8c

0800cde4 <RegionAS923ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800cde4:	2350      	movs	r3, #80	; 0x50
{
 800cde6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde8:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800cdea:	ac03      	add	r4, sp, #12
 800cdec:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800cdee:	7903      	ldrb	r3, [r0, #4]
{
 800cdf0:	0006      	movs	r6, r0
    if( applyCFList->Size != 16 )
 800cdf2:	2b10      	cmp	r3, #16
 800cdf4:	d12e      	bne.n	800ce54 <RegionAS923ApplyCFList+0x70>
    if( applyCFList->Payload[15] != 0 )
 800cdf6:	6803      	ldr	r3, [r0, #0]
 800cdf8:	7bdd      	ldrb	r5, [r3, #15]
 800cdfa:	2d00      	cmp	r5, #0
 800cdfc:	d12a      	bne.n	800ce54 <RegionAS923ApplyCFList+0x70>
            newChannel.Frequency *= 100;
 800cdfe:	2764      	movs	r7, #100	; 0x64
 800ce00:	1caa      	adds	r2, r5, #2
 800ce02:	b2d2      	uxtb	r2, r2
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 800ce04:	2a06      	cmp	r2, #6
 800ce06:	d818      	bhi.n	800ce3a <RegionAS923ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800ce08:	2003      	movs	r0, #3
 800ce0a:	4368      	muls	r0, r5
 800ce0c:	6833      	ldr	r3, [r6, #0]
 800ce0e:	5c19      	ldrb	r1, [r3, r0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800ce10:	1818      	adds	r0, r3, r0
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800ce12:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800ce14:	7843      	ldrb	r3, [r0, #1]
 800ce16:	021b      	lsls	r3, r3, #8
 800ce18:	4319      	orrs	r1, r3
 800ce1a:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800ce1c:	7883      	ldrb	r3, [r0, #2]
 800ce1e:	041b      	lsls	r3, r3, #16
 800ce20:	430b      	orrs	r3, r1
            newChannel.Rx1Frequency = 0;
 800ce22:	2100      	movs	r1, #0
            newChannel.Frequency *= 100;
 800ce24:	437b      	muls	r3, r7
            newChannel.Rx1Frequency = 0;
 800ce26:	6061      	str	r1, [r4, #4]
            newChannel.Frequency *= 100;
 800ce28:	6023      	str	r3, [r4, #0]
        if( newChannel.Frequency != 0 )
 800ce2a:	428b      	cmp	r3, r1
 800ce2c:	d10a      	bne.n	800ce44 <RegionAS923ApplyCFList+0x60>
            channelRemove.ChannelId = chanIdx;
 800ce2e:	466b      	mov	r3, sp
            RegionAS923ChannelsRemove( &channelRemove );
 800ce30:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800ce32:	701a      	strb	r2, [r3, #0]
            RegionAS923ChannelsRemove( &channelRemove );
 800ce34:	f7ff ffbe 	bl	800cdb4 <RegionAS923ChannelsRemove>
 800ce38:	e009      	b.n	800ce4e <RegionAS923ApplyCFList+0x6a>
            newChannel.Frequency = 0;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800ce3e:	7223      	strb	r3, [r4, #8]
            newChannel.Rx1Frequency = 0;
 800ce40:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800ce42:	e7f4      	b.n	800ce2e <RegionAS923ApplyCFList+0x4a>
            channelAdd.NewChannel = &newChannel;
 800ce44:	a801      	add	r0, sp, #4
 800ce46:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800ce48:	7102      	strb	r2, [r0, #4]
            RegionAS923ChannelAdd( &channelAdd );
 800ce4a:	f7ff ff67 	bl	800cd1c <RegionAS923ChannelAdd>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800ce4e:	3501      	adds	r5, #1
 800ce50:	2d0e      	cmp	r5, #14
 800ce52:	d1d5      	bne.n	800ce00 <RegionAS923ApplyCFList+0x1c>
}
 800ce54:	b007      	add	sp, #28
 800ce56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce58 <RegionAS923NewChannelReq>:
{
 800ce58:	b507      	push	{r0, r1, r2, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800ce5a:	6802      	ldr	r2, [r0, #0]
 800ce5c:	7903      	ldrb	r3, [r0, #4]
 800ce5e:	6811      	ldr	r1, [r2, #0]
 800ce60:	2900      	cmp	r1, #0
 800ce62:	d10a      	bne.n	800ce7a <RegionAS923NewChannelReq+0x22>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800ce64:	466a      	mov	r2, sp
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800ce66:	4668      	mov	r0, sp
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800ce68:	7013      	strb	r3, [r2, #0]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800ce6a:	f7ff ffa3 	bl	800cdb4 <RegionAS923ChannelsRemove>
    uint8_t status = 0x03;
 800ce6e:	2303      	movs	r3, #3
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d100      	bne.n	800ce76 <RegionAS923NewChannelReq+0x1e>
            status &= 0xFC;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	0018      	movs	r0, r3
 800ce78:	bd0e      	pop	{r1, r2, r3, pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800ce7a:	9200      	str	r2, [sp, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800ce7c:	466a      	mov	r2, sp
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800ce7e:	4668      	mov	r0, sp
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800ce80:	7113      	strb	r3, [r2, #4]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800ce82:	f7ff ff4b 	bl	800cd1c <RegionAS923ChannelAdd>
 800ce86:	2806      	cmp	r0, #6
 800ce88:	d8f4      	bhi.n	800ce74 <RegionAS923NewChannelReq+0x1c>
 800ce8a:	4b02      	ldr	r3, [pc, #8]	; (800ce94 <RegionAS923NewChannelReq+0x3c>)
 800ce8c:	3358      	adds	r3, #88	; 0x58
 800ce8e:	5c1b      	ldrb	r3, [r3, r0]
 800ce90:	e7f1      	b.n	800ce76 <RegionAS923NewChannelReq+0x1e>
 800ce92:	46c0      	nop			; (mov r8, r8)
 800ce94:	08012b60 	.word	0x08012b60

0800ce98 <RegionAS923SetContinuousWave>:

void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800ce98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800ce9a:	220c      	movs	r2, #12
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ce9c:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800ce9e:	4b10      	ldr	r3, [pc, #64]	; (800cee0 <RegionAS923SetContinuousWave+0x48>)
 800cea0:	434a      	muls	r2, r1
 800cea2:	58d5      	ldr	r5, [r2, r3]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800cea4:	189a      	adds	r2, r3, r2
 800cea6:	7a51      	ldrb	r1, [r2, #9]
 800cea8:	2214      	movs	r2, #20
{
 800ceaa:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ceac:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ceae:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ceb0:	189b      	adds	r3, r3, r2
 800ceb2:	33c2      	adds	r3, #194	; 0xc2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	5661      	ldrsb	r1, [r4, r1]
 800ceb8:	7882      	ldrb	r2, [r0, #2]
 800ceba:	1c18      	adds	r0, r3, #0
 800cebc:	b25b      	sxtb	r3, r3
 800cebe:	428b      	cmp	r3, r1
 800cec0:	da00      	bge.n	800cec4 <RegionAS923SetContinuousWave+0x2c>
 800cec2:	1c10      	adds	r0, r2, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800cec4:	68a2      	ldr	r2, [r4, #8]
 800cec6:	6861      	ldr	r1, [r4, #4]
 800cec8:	b240      	sxtb	r0, r0
 800ceca:	f000 f9ef 	bl	800d2ac <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800cece:	4b05      	ldr	r3, [pc, #20]	; (800cee4 <RegionAS923SetContinuousWave+0x4c>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800ced0:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800ced2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced4:	0028      	movs	r0, r5
 800ced6:	89a2      	ldrh	r2, [r4, #12]
 800ced8:	9301      	str	r3, [sp, #4]
 800ceda:	4798      	blx	r3
}
 800cedc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800cede:	46c0      	nop			; (mov r8, r8)
 800cee0:	20000db8 	.word	0x20000db8
 800cee4:	08012ccc 	.word	0x08012ccc

0800cee8 <RegionAS923ApplyDrOffset>:

uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;
 800cee8:	2300      	movs	r3, #0

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 800ceea:	2801      	cmp	r0, #1
 800ceec:	d100      	bne.n	800cef0 <RegionAS923ApplyDrOffset+0x8>
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 800ceee:	3303      	adds	r3, #3
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 800cef0:	4805      	ldr	r0, [pc, #20]	; (800cf08 <RegionAS923ApplyDrOffset+0x20>)
 800cef2:	305f      	adds	r0, #95	; 0x5f
 800cef4:	5680      	ldrsb	r0, [r0, r2]
 800cef6:	1a08      	subs	r0, r1, r0
 800cef8:	4298      	cmp	r0, r3
 800cefa:	da00      	bge.n	800cefe <RegionAS923ApplyDrOffset+0x16>
 800cefc:	0018      	movs	r0, r3
 800cefe:	2805      	cmp	r0, #5
 800cf00:	dd00      	ble.n	800cf04 <RegionAS923ApplyDrOffset+0x1c>
 800cf02:	2005      	movs	r0, #5
 800cf04:	b2c0      	uxtb	r0, r0
}
 800cf06:	4770      	bx	lr
 800cf08:	08012b60 	.word	0x08012b60

0800cf0c <RegionCommonChanVerifyDr>:
    }
    return dutyCycle;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800cf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	9103      	str	r1, [sp, #12]
 800cf12:	a90a      	add	r1, sp, #40	; 0x28
 800cf14:	7809      	ldrb	r1, [r1, #0]
 800cf16:	9002      	str	r0, [sp, #8]
 800cf18:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800cf1a:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	db2d      	blt.n	800cf7c <RegionCommonChanVerifyDr+0x70>
 800cf20:	428a      	cmp	r2, r1
 800cf22:	dc2b      	bgt.n	800cf7c <RegionCommonChanVerifyDr+0x70>
 800cf24:	260c      	movs	r6, #12
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cf26:	270f      	movs	r7, #15
 800cf28:	e022      	b.n	800cf70 <RegionCommonChanVerifyDr+0x64>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800cf2a:	9c03      	ldr	r4, [sp, #12]
 800cf2c:	0041      	lsls	r1, r0, #1
 800cf2e:	5b09      	ldrh	r1, [r1, r4]
 800cf30:	4373      	muls	r3, r6
 800cf32:	9101      	str	r1, [sp, #4]
 800cf34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf36:	2400      	movs	r4, #0
 800cf38:	18cb      	adds	r3, r1, r3
 800cf3a:	2101      	movs	r1, #1
 800cf3c:	468c      	mov	ip, r1
 800cf3e:	9901      	ldr	r1, [sp, #4]
 800cf40:	4665      	mov	r5, ip
 800cf42:	4121      	asrs	r1, r4
 800cf44:	4229      	tst	r1, r5
 800cf46:	d00e      	beq.n	800cf66 <RegionCommonChanVerifyDr+0x5a>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cf48:	0035      	movs	r5, r6
 800cf4a:	4365      	muls	r5, r4
 800cf4c:	18ed      	adds	r5, r5, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800cf4e:	7a29      	ldrb	r1, [r5, #8]
 800cf50:	7a2d      	ldrb	r5, [r5, #8]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cf52:	0709      	lsls	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800cf54:	b26d      	sxtb	r5, r5
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cf56:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800cf58:	112d      	asrs	r5, r5, #4
    if( ( value >= min ) && ( value <= max ) )
 800cf5a:	4039      	ands	r1, r7
 800cf5c:	428a      	cmp	r2, r1
 800cf5e:	db02      	blt.n	800cf66 <RegionCommonChanVerifyDr+0x5a>
 800cf60:	403d      	ands	r5, r7
 800cf62:	42aa      	cmp	r2, r5
 800cf64:	dd0c      	ble.n	800cf80 <RegionCommonChanVerifyDr+0x74>
        for( uint8_t j = 0; j < 16; j++ )
 800cf66:	3401      	adds	r4, #1
 800cf68:	2c10      	cmp	r4, #16
 800cf6a:	d1e8      	bne.n	800cf3e <RegionCommonChanVerifyDr+0x32>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800cf6c:	3001      	adds	r0, #1
 800cf6e:	b2c0      	uxtb	r0, r0
 800cf70:	0103      	lsls	r3, r0, #4
 800cf72:	9902      	ldr	r1, [sp, #8]
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	4299      	cmp	r1, r3
 800cf78:	d8d7      	bhi.n	800cf2a <RegionCommonChanVerifyDr+0x1e>
        return false;
 800cf7a:	2000      	movs	r0, #0
}
 800cf7c:	b005      	add	sp, #20
 800cf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    return true;
 800cf80:	2001      	movs	r0, #1
 800cf82:	e7fb      	b.n	800cf7c <RegionCommonChanVerifyDr+0x70>

0800cf84 <RegionCommonValueInRange>:
{
 800cf84:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800cf86:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800cf88:	428b      	cmp	r3, r1
 800cf8a:	db04      	blt.n	800cf96 <RegionCommonValueInRange+0x12>
 800cf8c:	0fd8      	lsrs	r0, r3, #31
 800cf8e:	17d1      	asrs	r1, r2, #31
 800cf90:	429a      	cmp	r2, r3
 800cf92:	4148      	adcs	r0, r1
        return 1;
 800cf94:	b2c0      	uxtb	r0, r0
}
 800cf96:	4770      	bx	lr

0800cf98 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800cf98:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800cf9a:	090b      	lsrs	r3, r1, #4
{
 800cf9c:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800cf9e:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800cfa0:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800cfa2:	429d      	cmp	r5, r3
 800cfa4:	d30b      	bcc.n	800cfbe <RegionCommonChanDisable+0x26>
 800cfa6:	4291      	cmp	r1, r2
 800cfa8:	d209      	bcs.n	800cfbe <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800cfaa:	220f      	movs	r2, #15
 800cfac:	3001      	adds	r0, #1
 800cfae:	4011      	ands	r1, r2
 800cfb0:	0002      	movs	r2, r0
 800cfb2:	408a      	lsls	r2, r1
 800cfb4:	0011      	movs	r1, r2
 800cfb6:	005b      	lsls	r3, r3, #1
 800cfb8:	5ae2      	ldrh	r2, [r4, r3]
 800cfba:	438a      	bics	r2, r1
 800cfbc:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800cfbe:	bd30      	pop	{r4, r5, pc}

0800cfc0 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800cfc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfc2:	1e03      	subs	r3, r0, #0
 800cfc4:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800cfc6:	d005      	beq.n	800cfd4 <RegionCommonCountChannels+0x14>
 800cfc8:	0048      	lsls	r0, r1, #1
 800cfca:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 800cfcc:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cfce:	9a01      	ldr	r2, [sp, #4]
 800cfd0:	4291      	cmp	r1, r2
 800cfd2:	d300      	bcc.n	800cfd6 <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800cfd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cfd6:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800cfd8:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cfda:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800cfdc:	2501      	movs	r5, #1
 800cfde:	40a5      	lsls	r5, r4
 800cfe0:	002e      	movs	r6, r5
 800cfe2:	403e      	ands	r6, r7
 800cfe4:	42b5      	cmp	r5, r6
 800cfe6:	d101      	bne.n	800cfec <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800cfe8:	3201      	adds	r2, #1
 800cfea:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800cfec:	3401      	adds	r4, #1
 800cfee:	2c10      	cmp	r4, #16
 800cff0:	d1f4      	bne.n	800cfdc <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cff2:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cff4:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cff6:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cff8:	b2c9      	uxtb	r1, r1
 800cffa:	3302      	adds	r3, #2
 800cffc:	e7e7      	b.n	800cfce <RegionCommonCountChannels+0xe>

0800cffe <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800cffe:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800d000:	2800      	cmp	r0, #0
 800d002:	d005      	beq.n	800d010 <RegionCommonChanMaskCopy+0x12>
 800d004:	2900      	cmp	r1, #0
 800d006:	d003      	beq.n	800d010 <RegionCommonChanMaskCopy+0x12>
 800d008:	2300      	movs	r3, #0
 800d00a:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d100      	bne.n	800d012 <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800d010:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800d012:	5acc      	ldrh	r4, [r1, r3]
 800d014:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800d016:	3302      	adds	r3, #2
 800d018:	e7f8      	b.n	800d00c <RegionCommonChanMaskCopy+0xe>
	...

0800d01c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d01c:	b082      	sub	sp, #8
 800d01e:	b570      	push	{r4, r5, r6, lr}
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d020:	8805      	ldrh	r5, [r0, #0]
{
 800d022:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800d024:	2a00      	cmp	r2, #0
 800d026:	d111      	bne.n	800d04c <RegionCommonSetBandTxDone+0x30>
    if( elapsedTime.Seconds < 3600 )
 800d028:	26e1      	movs	r6, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800d02a:	2464      	movs	r4, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800d02c:	0136      	lsls	r6, r6, #4
 800d02e:	42b3      	cmp	r3, r6
 800d030:	d307      	bcc.n	800d042 <RegionCommonSetBandTxDone+0x26>
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800d032:	4c0e      	ldr	r4, [pc, #56]	; (800d06c <RegionCommonSetBandTxDone+0x50>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800d034:	429c      	cmp	r4, r3
 800d036:	4152      	adcs	r2, r2
 800d038:	4254      	negs	r4, r2
 800d03a:	4a0d      	ldr	r2, [pc, #52]	; (800d070 <RegionCommonSetBandTxDone+0x54>)
 800d03c:	4b0d      	ldr	r3, [pc, #52]	; (800d074 <RegionCommonSetBandTxDone+0x58>)
 800d03e:	4014      	ands	r4, r2
 800d040:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d042:	1c2b      	adds	r3, r5, #0
 800d044:	42a5      	cmp	r5, r4
 800d046:	d200      	bcs.n	800d04a <RegionCommonSetBandTxDone+0x2e>
 800d048:	1c23      	adds	r3, r4, #0
 800d04a:	b29d      	uxth	r5, r3

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d04c:	6882      	ldr	r2, [r0, #8]
 800d04e:	1c2b      	adds	r3, r5, #0
 800d050:	2d00      	cmp	r5, #0
 800d052:	d100      	bne.n	800d056 <RegionCommonSetBandTxDone+0x3a>
 800d054:	2301      	movs	r3, #1
 800d056:	b29b      	uxth	r3, r3
 800d058:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800d05a:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d05c:	428a      	cmp	r2, r1
 800d05e:	d900      	bls.n	800d062 <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800d060:	1a53      	subs	r3, r2, r1
    }
}
 800d062:	6083      	str	r3, [r0, #8]
 800d064:	bc70      	pop	{r4, r5, r6}
 800d066:	bc08      	pop	{r3}
 800d068:	b002      	add	sp, #8
 800d06a:	4718      	bx	r3
 800d06c:	00009aaf 	.word	0x00009aaf
 800d070:	ffffdcd8 	.word	0xffffdcd8
 800d074:	00002710 	.word	0x00002710

0800d078 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800d078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d07a:	b087      	sub	sp, #28
 800d07c:	9302      	str	r3, [sp, #8]
 800d07e:	ab0c      	add	r3, sp, #48	; 0x30
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	0015      	movs	r5, r2
 800d084:	000c      	movs	r4, r1
 800d086:	9305      	str	r3, [sp, #20]
 800d088:	0007      	movs	r7, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d08a:	f002 f85b 	bl	800f144 <UTIL_TIMER_GetCurrentTime>
 800d08e:	2214      	movs	r2, #20
 800d090:	4355      	muls	r5, r2
 800d092:	1963      	adds	r3, r4, r5
 800d094:	9304      	str	r3, [sp, #16]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d096:	2301      	movs	r3, #1
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 800d098:	2600      	movs	r6, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d09a:	425b      	negs	r3, r3
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d09c:	9003      	str	r0, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d09e:	9301      	str	r3, [sp, #4]

    for( uint8_t i = 0; i < nbBands; i++ )
 800d0a0:	9b04      	ldr	r3, [sp, #16]
 800d0a2:	42a3      	cmp	r3, r4
 800d0a4:	d107      	bne.n	800d0b6 <RegionCommonUpdateBandTimeOff+0x3e>
            }
        }
    }


    if( validBands == 0 )
 800d0a6:	2e00      	cmp	r6, #0
 800d0a8:	d102      	bne.n	800d0b0 <RegionCommonUpdateBandTimeOff+0x38>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	425b      	negs	r3, r3
 800d0ae:	9301      	str	r3, [sp, #4]
    }
    return minTimeToWait;
}
 800d0b0:	9801      	ldr	r0, [sp, #4]
 800d0b2:	b007      	add	sp, #28
 800d0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800d0b6:	990d      	ldr	r1, [sp, #52]	; 0x34
    uint16_t dutyCycle = band->DCycle;
 800d0b8:	8822      	ldrh	r2, [r4, #0]
    if( joined == false )
 800d0ba:	2f00      	cmp	r7, #0
 800d0bc:	d112      	bne.n	800d0e4 <RegionCommonUpdateBandTimeOff+0x6c>
    if( elapsedTime.Seconds < 3600 )
 800d0be:	20e1      	movs	r0, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800d0c0:	2364      	movs	r3, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800d0c2:	0100      	lsls	r0, r0, #4
 800d0c4:	4281      	cmp	r1, r0
 800d0c6:	d308      	bcc.n	800d0da <RegionCommonUpdateBandTimeOff+0x62>
        dutyCycle = BACKOFF_DC_24_HOURS;
 800d0c8:	0038      	movs	r0, r7
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800d0ca:	4b27      	ldr	r3, [pc, #156]	; (800d168 <RegionCommonUpdateBandTimeOff+0xf0>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800d0cc:	428b      	cmp	r3, r1
 800d0ce:	4178      	adcs	r0, r7
 800d0d0:	4926      	ldr	r1, [pc, #152]	; (800d16c <RegionCommonUpdateBandTimeOff+0xf4>)
 800d0d2:	4243      	negs	r3, r0
 800d0d4:	400b      	ands	r3, r1
 800d0d6:	4926      	ldr	r1, [pc, #152]	; (800d170 <RegionCommonUpdateBandTimeOff+0xf8>)
 800d0d8:	185b      	adds	r3, r3, r1
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d0da:	1c11      	adds	r1, r2, #0
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d200      	bcs.n	800d0e2 <RegionCommonUpdateBandTimeOff+0x6a>
 800d0e0:	1c19      	adds	r1, r3, #0
 800d0e2:	b28a      	uxth	r2, r1
    if( dutyCycle == 0 )
 800d0e4:	1c15      	adds	r5, r2, #0
 800d0e6:	2a00      	cmp	r2, #0
 800d0e8:	d100      	bne.n	800d0ec <RegionCommonUpdateBandTimeOff+0x74>
 800d0ea:	2501      	movs	r5, #1
    uint8_t timePeriodFactor = 1;
 800d0ec:	2001      	movs	r0, #1
 800d0ee:	b2ad      	uxth	r5, r5
    if( joined == false )
 800d0f0:	2f00      	cmp	r7, #0
 800d0f2:	d104      	bne.n	800d0fe <RegionCommonUpdateBandTimeOff+0x86>
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 800d0f4:	2164      	movs	r1, #100	; 0x64
 800d0f6:	0028      	movs	r0, r5
 800d0f8:	f7f3 f836 	bl	8000168 <__udivsi3>
 800d0fc:	b2c0      	uxtb	r0, r0
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800d0fe:	4b1d      	ldr	r3, [pc, #116]	; (800d174 <RegionCommonUpdateBandTimeOff+0xfc>)
 800d100:	4343      	muls	r3, r0
    if( band->LastBandUpdateTime == 0 )
 800d102:	6860      	ldr	r0, [r4, #4]
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800d104:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 800d106:	2800      	cmp	r0, #0
 800d108:	d100      	bne.n	800d10c <RegionCommonUpdateBandTimeOff+0x94>
        band->TimeCredits = band->MaxTimeCredits;
 800d10a:	60a3      	str	r3, [r4, #8]
        if( ( dutyCycleEnabled == false ) &&
 800d10c:	9a02      	ldr	r2, [sp, #8]
    if( joined == false )
 800d10e:	2f00      	cmp	r7, #0
 800d110:	d102      	bne.n	800d118 <RegionCommonUpdateBandTimeOff+0xa0>
        if( ( dutyCycleEnabled == false ) &&
 800d112:	2a00      	cmp	r2, #0
 800d114:	d103      	bne.n	800d11e <RegionCommonUpdateBandTimeOff+0xa6>
 800d116:	9a05      	ldr	r2, [sp, #20]
        if( dutyCycleEnabled == false )
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d100      	bne.n	800d11e <RegionCommonUpdateBandTimeOff+0xa6>
            band->TimeCredits = band->MaxTimeCredits;
 800d11c:	60a3      	str	r3, [r4, #8]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d11e:	f002 f81b 	bl	800f158 <UTIL_TIMER_GetElapsedTime>
 800d122:	68a3      	ldr	r3, [r4, #8]
 800d124:	18c0      	adds	r0, r0, r3
    if( band->TimeCredits > band->MaxTimeCredits )
 800d126:	68e3      	ldr	r3, [r4, #12]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d128:	60a0      	str	r0, [r4, #8]
    if( band->TimeCredits > band->MaxTimeCredits )
 800d12a:	4298      	cmp	r0, r3
 800d12c:	d900      	bls.n	800d130 <RegionCommonUpdateBandTimeOff+0xb8>
        band->TimeCredits = band->MaxTimeCredits;
 800d12e:	60a3      	str	r3, [r4, #8]
    band->LastBandUpdateTime = currentTime;
 800d130:	9a03      	ldr	r2, [sp, #12]
 800d132:	6062      	str	r2, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d136:	4355      	muls	r5, r2
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800d138:	68a2      	ldr	r2, [r4, #8]
 800d13a:	42aa      	cmp	r2, r5
 800d13c:	d802      	bhi.n	800d144 <RegionCommonUpdateBandTimeOff+0xcc>
 800d13e:	9902      	ldr	r1, [sp, #8]
 800d140:	2900      	cmp	r1, #0
 800d142:	d105      	bne.n	800d150 <RegionCommonUpdateBandTimeOff+0xd8>
            bands[i].ReadyForTransmission = true;
 800d144:	2301      	movs	r3, #1
 800d146:	7423      	strb	r3, [r4, #16]
            validBands++;
 800d148:	18f6      	adds	r6, r6, r3
                validBands++;
 800d14a:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800d14c:	3414      	adds	r4, #20
 800d14e:	e7a7      	b.n	800d0a0 <RegionCommonUpdateBandTimeOff+0x28>
            bands[i].ReadyForTransmission = false;
 800d150:	2100      	movs	r1, #0
 800d152:	7421      	strb	r1, [r4, #16]
            if( bands[i].MaxTimeCredits > creditCosts )
 800d154:	429d      	cmp	r5, r3
 800d156:	d2f9      	bcs.n	800d14c <RegionCommonUpdateBandTimeOff+0xd4>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800d158:	9b01      	ldr	r3, [sp, #4]
 800d15a:	1aad      	subs	r5, r5, r2
 800d15c:	42ab      	cmp	r3, r5
 800d15e:	d900      	bls.n	800d162 <RegionCommonUpdateBandTimeOff+0xea>
 800d160:	9501      	str	r5, [sp, #4]
                validBands++;
 800d162:	3601      	adds	r6, #1
 800d164:	e7f1      	b.n	800d14a <RegionCommonUpdateBandTimeOff+0xd2>
 800d166:	46c0      	nop			; (mov r8, r8)
 800d168:	00009aaf 	.word	0x00009aaf
 800d16c:	ffffdcd8 	.word	0xffffdcd8
 800d170:	00002710 	.word	0x00002710
 800d174:	0036ee80 	.word	0x0036ee80

0800d178 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800d178:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d17a:	7802      	ldrb	r2, [r0, #0]
{
 800d17c:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800d17e:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d180:	2a03      	cmp	r2, #3
 800d182:	d113      	bne.n	800d1ac <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800d184:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d186:	300f      	adds	r0, #15
 800d188:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d18a:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d18c:	4004      	ands	r4, r0
 800d18e:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d190:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d192:	789a      	ldrb	r2, [r3, #2]
 800d194:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d196:	78dc      	ldrb	r4, [r3, #3]
 800d198:	0224      	lsls	r4, r4, #8
 800d19a:	4322      	orrs	r2, r4
 800d19c:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800d19e:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d1a0:	065a      	lsls	r2, r3, #25
 800d1a2:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800d1a4:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d1a6:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d1a8:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800d1aa:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800d1ac:	bd10      	pop	{r4, pc}

0800d1ae <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d1ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1b0:	b087      	sub	sp, #28
 800d1b2:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800d1b4:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800d1b6:	2707      	movs	r7, #7
{
 800d1b8:	9103      	str	r1, [sp, #12]
 800d1ba:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800d1bc:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800d1be:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d1c0:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d1c2:	7943      	ldrb	r3, [r0, #5]
{
 800d1c4:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800d1c6:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d1c8:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d026      	beq.n	800d21c <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800d1ce:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800d1d0:	2d00      	cmp	r5, #0
 800d1d2:	d019      	beq.n	800d208 <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d1d4:	69a2      	ldr	r2, [r4, #24]
 800d1d6:	2314      	movs	r3, #20
 800d1d8:	9201      	str	r2, [sp, #4]
 800d1da:	2215      	movs	r2, #21
 800d1dc:	56a2      	ldrsb	r2, [r4, r2]
 800d1de:	56e3      	ldrsb	r3, [r4, r3]
 800d1e0:	9200      	str	r2, [sp, #0]
 800d1e2:	7b20      	ldrb	r0, [r4, #12]
 800d1e4:	9a02      	ldr	r2, [sp, #8]
 800d1e6:	6921      	ldr	r1, [r4, #16]
 800d1e8:	f7ff fe90 	bl	800cf0c <RegionCommonChanVerifyDr>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d101      	bne.n	800d1f4 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800d1f0:	2302      	movs	r3, #2
 800d1f2:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d1f4:	231d      	movs	r3, #29
 800d1f6:	221c      	movs	r2, #28
 800d1f8:	56e3      	ldrsb	r3, [r4, r3]
 800d1fa:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800d1fc:	42bb      	cmp	r3, r7
 800d1fe:	dc15      	bgt.n	800d22c <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800d200:	42ba      	cmp	r2, r7
 800d202:	da14      	bge.n	800d22e <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800d204:	2304      	movs	r3, #4
 800d206:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800d208:	0028      	movs	r0, r5
    *dr = datarate;
 800d20a:	9b03      	ldr	r3, [sp, #12]
 800d20c:	9a02      	ldr	r2, [sp, #8]
 800d20e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800d210:	9b04      	ldr	r3, [sp, #16]
 800d212:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800d214:	9b05      	ldr	r3, [sp, #20]
 800d216:	701e      	strb	r6, [r3, #0]
}
 800d218:	b007      	add	sp, #28
 800d21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800d21c:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800d21e:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800d220:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800d222:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800d224:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800d226:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800d228:	57c7      	ldrsb	r7, [r0, r7]
 800d22a:	e7d1      	b.n	800d1d0 <RegionCommonLinkAdrReqVerifyParams+0x22>
 800d22c:	001f      	movs	r7, r3
    if( status == 0x07 )
 800d22e:	2d07      	cmp	r5, #7
 800d230:	d1ea      	bne.n	800d208 <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800d232:	2e00      	cmp	r6, #0
 800d234:	d1e8      	bne.n	800d208 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800d236:	3601      	adds	r6, #1
 800d238:	e7e6      	b.n	800d208 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800d23c <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800d23c:	b510      	push	{r4, lr}
 800d23e:	0004      	movs	r4, r0
    return (1000000000UL/bandwidth) * (1 << phyDr);
 800d240:	4802      	ldr	r0, [pc, #8]	; (800d24c <RegionCommonComputeSymbolTimeLoRa+0x10>)
 800d242:	f7f2 ff91 	bl	8000168 <__udivsi3>
 800d246:	40a0      	lsls	r0, r4
}
 800d248:	bd10      	pop	{r4, pc}
 800d24a:	46c0      	nop			; (mov r8, r8)
 800d24c:	3b9aca00 	.word	0x3b9aca00

0800d250 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
    // ((8 * 1000000) / 50);
    return 160000UL;
}
 800d250:	4800      	ldr	r0, [pc, #0]	; (800d254 <RegionCommonComputeSymbolTimeFsk+0x4>)
 800d252:	4770      	bx	lr
 800d254:	00027100 	.word	0x00027100

0800d258 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800d258:	b570      	push	{r4, r5, r6, lr}
 800d25a:	0004      	movs	r4, r0
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d25c:	480f      	ldr	r0, [pc, #60]	; (800d29c <RegionCommonComputeRxWindowParameters+0x44>)
{
 800d25e:	000e      	movs	r6, r1
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d260:	4350      	muls	r0, r2
 800d262:	1e62      	subs	r2, r4, #1
 800d264:	0021      	movs	r1, r4
 800d266:	1880      	adds	r0, r0, r2
{
 800d268:	001d      	movs	r5, r3
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d26a:	f7f2 ff7d 	bl	8000168 <__udivsi3>
 800d26e:	4b0c      	ldr	r3, [pc, #48]	; (800d2a0 <RegionCommonComputeRxWindowParameters+0x48>)
 800d270:	18f3      	adds	r3, r6, r3
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	18c0      	adds	r0, r0, r3
 800d276:	42b0      	cmp	r0, r6
 800d278:	d200      	bcs.n	800d27c <RegionCommonComputeRxWindowParameters+0x24>
 800d27a:	0030      	movs	r0, r6
 800d27c:	9b04      	ldr	r3, [sp, #16]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800d27e:	4909      	ldr	r1, [pc, #36]	; (800d2a4 <RegionCommonComputeRxWindowParameters+0x4c>)
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d280:	6018      	str	r0, [r3, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800d282:	00a3      	lsls	r3, r4, #2
 800d284:	4344      	muls	r4, r0
 800d286:	0864      	lsrs	r4, r4, #1
 800d288:	1b18      	subs	r0, r3, r4
 800d28a:	4b07      	ldr	r3, [pc, #28]	; (800d2a8 <RegionCommonComputeRxWindowParameters+0x50>)
 800d28c:	43ed      	mvns	r5, r5
 800d28e:	18c0      	adds	r0, r0, r3
 800d290:	f7f2 fff4 	bl	800027c <__divsi3>
 800d294:	9b05      	ldr	r3, [sp, #20]
 800d296:	1940      	adds	r0, r0, r5
 800d298:	6018      	str	r0, [r3, #0]
}
 800d29a:	bd70      	pop	{r4, r5, r6, pc}
 800d29c:	001e8480 	.word	0x001e8480
 800d2a0:	7ffffffc 	.word	0x7ffffffc
 800d2a4:	000f4240 	.word	0x000f4240
 800d2a8:	000f423f 	.word	0x000f423f

0800d2ac <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800d2ac:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d2ae:	0040      	lsls	r0, r0, #1
{
 800d2b0:	1c14      	adds	r4, r2, #0
 800d2b2:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d2b4:	f7f3 fc06 	bl	8000ac4 <__aeabi_ui2f>
 800d2b8:	1c01      	adds	r1, r0, #0
 800d2ba:	1c28      	adds	r0, r5, #0
 800d2bc:	f7f3 fa3a 	bl	8000734 <__aeabi_fsub>
 800d2c0:	1c21      	adds	r1, r4, #0
 800d2c2:	f7f3 fa37 	bl	8000734 <__aeabi_fsub>
 800d2c6:	f7f5 fa51 	bl	800276c <__aeabi_f2d>
 800d2ca:	f005 f937 	bl	801253c <floor>
 800d2ce:	f7f5 f9c1 	bl	8002654 <__aeabi_d2iz>

    return phyTxPower;
 800d2d2:	b240      	sxtb	r0, r0
}
 800d2d4:	bd70      	pop	{r4, r5, r6, pc}

0800d2d6 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800d2d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2d8:	b087      	sub	sp, #28
 800d2da:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d2dc:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800d2de:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800d2e0:	001e      	movs	r6, r3
{
 800d2e2:	9103      	str	r1, [sp, #12]
 800d2e4:	9204      	str	r2, [sp, #16]
 800d2e6:	011c      	lsls	r4, r3, #4
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d2e8:	8a02      	ldrh	r2, [r0, #16]
 800d2ea:	b2e4      	uxtb	r4, r4
 800d2ec:	42a2      	cmp	r2, r4
 800d2ee:	d806      	bhi.n	800d2fe <RegionCommonCountNbOfEnabledChannels+0x28>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d2f0:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800d2f2:	9b04      	ldr	r3, [sp, #16]
 800d2f4:	701e      	strb	r6, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d2f6:	9b05      	ldr	r3, [sp, #20]
 800d2f8:	701a      	strb	r2, [r3, #0]
}
 800d2fa:	b007      	add	sp, #28
 800d2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800d2fe:	005a      	lsls	r2, r3, #1
 800d300:	9202      	str	r2, [sp, #8]
 800d302:	2200      	movs	r2, #0
 800d304:	6841      	ldr	r1, [r0, #4]
 800d306:	9d02      	ldr	r5, [sp, #8]
 800d308:	2701      	movs	r7, #1
 800d30a:	5b49      	ldrh	r1, [r1, r5]
 800d30c:	4111      	asrs	r1, r2
 800d30e:	4239      	tst	r1, r7
 800d310:	d02c      	beq.n	800d36c <RegionCommonCountNbOfEnabledChannels+0x96>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800d312:	210c      	movs	r1, #12
 800d314:	1915      	adds	r5, r2, r4
 800d316:	434d      	muls	r5, r1
 800d318:	6881      	ldr	r1, [r0, #8]
 800d31a:	194d      	adds	r5, r1, r5
 800d31c:	6829      	ldr	r1, [r5, #0]
 800d31e:	2900      	cmp	r1, #0
 800d320:	d024      	beq.n	800d36c <RegionCommonCountNbOfEnabledChannels+0x96>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d322:	7801      	ldrb	r1, [r0, #0]
 800d324:	2900      	cmp	r1, #0
 800d326:	d105      	bne.n	800d334 <RegionCommonCountNbOfEnabledChannels+0x5e>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 800d328:	8a41      	ldrh	r1, [r0, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d32a:	2900      	cmp	r1, #0
 800d32c:	d002      	beq.n	800d334 <RegionCommonCountNbOfEnabledChannels+0x5e>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 800d32e:	4111      	asrs	r1, r2
 800d330:	4239      	tst	r1, r7
 800d332:	d01b      	beq.n	800d36c <RegionCommonCountNbOfEnabledChannels+0x96>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d334:	2101      	movs	r1, #1
 800d336:	5641      	ldrsb	r1, [r0, r1]
 800d338:	9100      	str	r1, [sp, #0]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800d33a:	7a29      	ldrb	r1, [r5, #8]
 800d33c:	070f      	lsls	r7, r1, #28
 800d33e:	9101      	str	r1, [sp, #4]
    if( ( value >= min ) && ( value <= max ) )
 800d340:	1739      	asrs	r1, r7, #28
 800d342:	9f00      	ldr	r7, [sp, #0]
 800d344:	428f      	cmp	r7, r1
 800d346:	db11      	blt.n	800d36c <RegionCommonCountNbOfEnabledChannels+0x96>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d348:	4669      	mov	r1, sp
 800d34a:	7909      	ldrb	r1, [r1, #4]
 800d34c:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800d34e:	1109      	asrs	r1, r1, #4
 800d350:	428f      	cmp	r7, r1
 800d352:	dc0b      	bgt.n	800d36c <RegionCommonCountNbOfEnabledChannels+0x96>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800d354:	7a69      	ldrb	r1, [r5, #9]
 800d356:	2514      	movs	r5, #20
 800d358:	4369      	muls	r1, r5
 800d35a:	68c5      	ldr	r5, [r0, #12]
 800d35c:	1869      	adds	r1, r5, r1
 800d35e:	7c09      	ldrb	r1, [r1, #16]
 800d360:	2900      	cmp	r1, #0
 800d362:	d109      	bne.n	800d378 <RegionCommonCountNbOfEnabledChannels+0xa2>
                    nbRestrictedChannelsCount++;
 800d364:	4661      	mov	r1, ip
 800d366:	3101      	adds	r1, #1
 800d368:	b2c9      	uxtb	r1, r1
 800d36a:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800d36c:	3201      	adds	r2, #1
 800d36e:	2a10      	cmp	r2, #16
 800d370:	d1c8      	bne.n	800d304 <RegionCommonCountNbOfEnabledChannels+0x2e>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d372:	3301      	adds	r3, #1
 800d374:	b2db      	uxtb	r3, r3
 800d376:	e7b6      	b.n	800d2e6 <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 800d378:	9f03      	ldr	r7, [sp, #12]
 800d37a:	1c71      	adds	r1, r6, #1
 800d37c:	18a5      	adds	r5, r4, r2
 800d37e:	55bd      	strb	r5, [r7, r6]
 800d380:	b2ce      	uxtb	r6, r1
 800d382:	e7f3      	b.n	800d36c <RegionCommonCountNbOfEnabledChannels+0x96>

0800d384 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800d384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d386:	0004      	movs	r4, r0
 800d388:	b089      	sub	sp, #36	; 0x24
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d38a:	6840      	ldr	r0, [r0, #4]
{
 800d38c:	001d      	movs	r5, r3
 800d38e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d390:	9206      	str	r2, [sp, #24]
 800d392:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d394:	f001 fee0 	bl	800f158 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d398:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 800d39a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d39c:	1a1b      	subs	r3, r3, r0
 800d39e:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d3a8:	9305      	str	r3, [sp, #20]
 800d3aa:	6863      	ldr	r3, [r4, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <RegionCommonIdentifyChannels+0x32>
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	4283      	cmp	r3, r0
 800d3b4:	d825      	bhi.n	800d402 <RegionCommonIdentifyChannels+0x7e>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d3b6:	9b05      	ldr	r3, [sp, #20]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d3b8:	69e1      	ldr	r1, [r4, #28]
        *aggregatedTimeOff = 0;
 800d3ba:	6033      	str	r3, [r6, #0]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d3bc:	7808      	ldrb	r0, [r1, #0]
 800d3be:	69a1      	ldr	r1, [r4, #24]
 800d3c0:	7a23      	ldrb	r3, [r4, #8]
 800d3c2:	9103      	str	r1, [sp, #12]
 800d3c4:	0021      	movs	r1, r4
 800d3c6:	469c      	mov	ip, r3
 800d3c8:	7a63      	ldrb	r3, [r4, #9]
 800d3ca:	ae01      	add	r6, sp, #4
 800d3cc:	9307      	str	r3, [sp, #28]
 800d3ce:	310c      	adds	r1, #12
 800d3d0:	c90c      	ldmia	r1!, {r2, r3}
 800d3d2:	c60c      	stmia	r6!, {r2, r3}
 800d3d4:	7d21      	ldrb	r1, [r4, #20]
 800d3d6:	4663      	mov	r3, ip
 800d3d8:	9100      	str	r1, [sp, #0]
 800d3da:	69e1      	ldr	r1, [r4, #28]
 800d3dc:	9a07      	ldr	r2, [sp, #28]
 800d3de:	68c9      	ldr	r1, [r1, #12]
 800d3e0:	f7ff fe4a 	bl	800d078 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d3e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d3e6:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d3e8:	002a      	movs	r2, r5
 800d3ea:	9906      	ldr	r1, [sp, #24]
 800d3ec:	69e0      	ldr	r0, [r4, #28]
 800d3ee:	f7ff ff72 	bl	800d2d6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800d3f2:	782b      	ldrb	r3, [r5, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d004      	beq.n	800d402 <RegionCommonIdentifyChannels+0x7e>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
 800d3f8:	2000      	movs	r0, #0
        *nextTxDelay = 0;
 800d3fa:	9b05      	ldr	r3, [sp, #20]
 800d3fc:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800d3fe:	b009      	add	sp, #36	; 0x24
 800d400:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800d402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d404:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d406:	4243      	negs	r3, r0
 800d408:	4158      	adcs	r0, r3
 800d40a:	300b      	adds	r0, #11
 800d40c:	e7f7      	b.n	800d3fe <RegionCommonIdentifyChannels+0x7a>
	...

0800d410 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800d410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d412:	b08b      	sub	sp, #44	; 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800d414:	ac04      	add	r4, sp, #16
 800d416:	0025      	movs	r5, r4
{
 800d418:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800d41a:	4b0f      	ldr	r3, [pc, #60]	; (800d458 <RegionCommonRxConfigPrint+0x48>)
 800d41c:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800d41e:	c5c4      	stmia	r5!, {r2, r6, r7}
 800d420:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800d422:	c5c4      	stmia	r5!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800d424:	4663      	mov	r3, ip
    if ( rxSlot < RX_SLOT_NONE )
 800d426:	2805      	cmp	r0, #5
 800d428:	d80c      	bhi.n	800d444 <RegionCommonRxConfigPrint+0x34>
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800d42a:	9101      	str	r1, [sp, #4]
 800d42c:	0080      	lsls	r0, r0, #2
 800d42e:	9302      	str	r3, [sp, #8]
 800d430:	5903      	ldr	r3, [r0, r4]
 800d432:	2201      	movs	r2, #1
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	2100      	movs	r1, #0
 800d438:	2002      	movs	r0, #2
 800d43a:	4b08      	ldr	r3, [pc, #32]	; (800d45c <RegionCommonRxConfigPrint+0x4c>)
 800d43c:	f001 fbf0 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800d440:	b00b      	add	sp, #44	; 0x2c
 800d442:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	9100      	str	r1, [sp, #0]
 800d448:	2201      	movs	r2, #1
 800d44a:	2100      	movs	r1, #0
 800d44c:	4b04      	ldr	r3, [pc, #16]	; (800d460 <RegionCommonRxConfigPrint+0x50>)
 800d44e:	2002      	movs	r0, #2
 800d450:	f001 fbe6 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 800d454:	e7f4      	b.n	800d440 <RegionCommonRxConfigPrint+0x30>
 800d456:	46c0      	nop			; (mov r8, r8)
 800d458:	08012bc8 	.word	0x08012bc8
 800d45c:	08013376 	.word	0x08013376
 800d460:	08013395 	.word	0x08013395

0800d464 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800d464:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d466:	4b04      	ldr	r3, [pc, #16]	; (800d478 <RegionCommonTxConfigPrint+0x14>)
 800d468:	9101      	str	r1, [sp, #4]
 800d46a:	9000      	str	r0, [sp, #0]
 800d46c:	2201      	movs	r2, #1
 800d46e:	2100      	movs	r1, #0
 800d470:	2002      	movs	r0, #2
 800d472:	f001 fbd5 	bl	800ec20 <UTIL_ADV_TRACE_COND_FSend>
}
 800d476:	bd07      	pop	{r0, r1, r2, pc}
 800d478:	080133b1 	.word	0x080133b1

0800d47c <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800d47c:	4b01      	ldr	r3, [pc, #4]	; (800d484 <srand1+0x8>)
 800d47e:	6018      	str	r0, [r3, #0]
}
 800d480:	4770      	bx	lr
 800d482:	46c0      	nop			; (mov r8, r8)
 800d484:	20000178 	.word	0x20000178

0800d488 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d488:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800d48a:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d48c:	681a      	ldr	r2, [r3, #0]
{
 800d48e:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d490:	4808      	ldr	r0, [pc, #32]	; (800d4b4 <randr+0x2c>)
{
 800d492:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d494:	4350      	muls	r0, r2
 800d496:	4a08      	ldr	r2, [pc, #32]	; (800d4b8 <randr+0x30>)
 800d498:	4908      	ldr	r1, [pc, #32]	; (800d4bc <randr+0x34>)
 800d49a:	1880      	adds	r0, r0, r2
 800d49c:	6018      	str	r0, [r3, #0]
 800d49e:	f7f2 fee9 	bl	8000274 <__aeabi_uidivmod>
 800d4a2:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800d4a4:	1b61      	subs	r1, r4, r5
 800d4a6:	3101      	adds	r1, #1
 800d4a8:	f7f2 ffce 	bl	8000448 <__aeabi_idivmod>
 800d4ac:	1948      	adds	r0, r1, r5
}
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	20000178 	.word	0x20000178
 800d4b4:	41c64e6d 	.word	0x41c64e6d
 800d4b8:	00003039 	.word	0x00003039
 800d4bc:	7fffffff 	.word	0x7fffffff

0800d4c0 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800d4c0:	2300      	movs	r3, #0
{
 800d4c2:	b510      	push	{r4, lr}
    while( size-- )
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d100      	bne.n	800d4ca <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800d4c8:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800d4ca:	5ccc      	ldrb	r4, [r1, r3]
 800d4cc:	54c4      	strb	r4, [r0, r3]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	e7f8      	b.n	800d4c4 <memcpy1+0x4>

0800d4d2 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800d4d2:	1e53      	subs	r3, r2, #1
 800d4d4:	18c0      	adds	r0, r0, r3
    while( size-- )
 800d4d6:	2300      	movs	r3, #0
{
 800d4d8:	b530      	push	{r4, r5, lr}
    while( size-- )
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d100      	bne.n	800d4e0 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800d4de:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800d4e0:	5ccd      	ldrb	r5, [r1, r3]
 800d4e2:	425c      	negs	r4, r3
 800d4e4:	5505      	strb	r5, [r0, r4]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	e7f7      	b.n	800d4da <memcpyr+0x8>
	...

0800d4ec <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800d4ec:	4b04      	ldr	r3, [pc, #16]	; (800d500 <memset1+0x14>)
 800d4ee:	3a01      	subs	r2, #1
 800d4f0:	b292      	uxth	r2, r2
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d100      	bne.n	800d4f8 <memset1+0xc>
    {
        *dst++ = value;
    }
}
 800d4f6:	4770      	bx	lr
        *dst++ = value;
 800d4f8:	7001      	strb	r1, [r0, #0]
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	e7f7      	b.n	800d4ee <memset1+0x2>
 800d4fe:	46c0      	nop			; (mov r8, r8)
 800d500:	0000ffff 	.word	0x0000ffff

0800d504 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 800d504:	4b01      	ldr	r3, [pc, #4]	; (800d50c <SX1276GetStatus+0x8>)
 800d506:	7918      	ldrb	r0, [r3, #4]
}
 800d508:	4770      	bx	lr
 800d50a:	46c0      	nop			; (mov r8, r8)
 800d50c:	20001644 	.word	0x20001644

0800d510 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800d510:	4a09      	ldr	r2, [pc, #36]	; (800d538 <GetFskBandwidthRegValue+0x28>)
{
 800d512:	2300      	movs	r3, #0
 800d514:	0011      	movs	r1, r2
 800d516:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 800d518:	6814      	ldr	r4, [r2, #0]
 800d51a:	4284      	cmp	r4, r0
 800d51c:	d806      	bhi.n	800d52c <GetFskBandwidthRegValue+0x1c>
 800d51e:	6894      	ldr	r4, [r2, #8]
 800d520:	4284      	cmp	r4, r0
 800d522:	d903      	bls.n	800d52c <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 800d524:	00db      	lsls	r3, r3, #3
 800d526:	18cb      	adds	r3, r1, r3
 800d528:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 800d52a:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800d52c:	3301      	adds	r3, #1
 800d52e:	3208      	adds	r2, #8
 800d530:	2b15      	cmp	r3, #21
 800d532:	d1f1      	bne.n	800d518 <GetFskBandwidthRegValue+0x8>
    while( 1 );
 800d534:	e7fe      	b.n	800d534 <GetFskBandwidthRegValue+0x24>
 800d536:	46c0      	nop			; (mov r8, r8)
 800d538:	08012c1c 	.word	0x08012c1c

0800d53c <SX1276GetTimeOnAir>:
{
 800d53c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d53e:	0014      	movs	r4, r2
 800d540:	aa08      	add	r2, sp, #32
 800d542:	8816      	ldrh	r6, [r2, #0]
 800d544:	aa09      	add	r2, sp, #36	; 0x24
 800d546:	7817      	ldrb	r7, [r2, #0]
 800d548:	aa0a      	add	r2, sp, #40	; 0x28
 800d54a:	7812      	ldrb	r2, [r2, #0]
 800d54c:	000d      	movs	r5, r1
 800d54e:	a90b      	add	r1, sp, #44	; 0x2c
 800d550:	4694      	mov	ip, r2
 800d552:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 800d554:	2800      	cmp	r0, #0
 800d556:	d009      	beq.n	800d56c <SX1276GetTimeOnAir+0x30>
 800d558:	2801      	cmp	r0, #1
 800d55a:	d017      	beq.n	800d58c <SX1276GetTimeOnAir+0x50>
 800d55c:	2401      	movs	r4, #1
 800d55e:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 800d560:	1900      	adds	r0, r0, r4
 800d562:	0021      	movs	r1, r4
 800d564:	3801      	subs	r0, #1
 800d566:	f7f2 fdff 	bl	8000168 <__udivsi3>
}
 800d56a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 800d56c:	1e4b      	subs	r3, r1, #1
 800d56e:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800d570:	4278      	negs	r0, r7
 800d572:	4178      	adcs	r0, r7
               ( ( crcOn == true ) ? 2 : 0 ) 
 800d574:	0049      	lsls	r1, r1, #1
               ( 0 ) + // Address filter size
 800d576:	000a      	movs	r2, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 800d578:	1986      	adds	r6, r0, r6
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800d57a:	20fa      	movs	r0, #250	; 0xfa
    return ( preambleLen << 3 ) +
 800d57c:	00f6      	lsls	r6, r6, #3
               ( 0 ) + // Address filter size
 800d57e:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 800d580:	3618      	adds	r6, #24
               ) << 3 
 800d582:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 800d584:	1992      	adds	r2, r2, r6
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800d586:	0080      	lsls	r0, r0, #2
 800d588:	4350      	muls	r0, r2
        break;
 800d58a:	e7e9      	b.n	800d560 <SX1276GetTimeOnAir+0x24>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 800d58c:	3304      	adds	r3, #4
 800d58e:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800d590:	1f63      	subs	r3, r4, #5
 800d592:	2b01      	cmp	r3, #1
 800d594:	d804      	bhi.n	800d5a0 <SX1276GetTimeOnAir+0x64>
    {
        if( preambleLen < 12 )
 800d596:	1c33      	adds	r3, r6, #0
 800d598:	2e0c      	cmp	r6, #12
 800d59a:	d200      	bcs.n	800d59e <SX1276GetTimeOnAir+0x62>
 800d59c:	230c      	movs	r3, #12
 800d59e:	b29e      	uxth	r6, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d5a0:	2d00      	cmp	r5, #0
 800d5a2:	d136      	bne.n	800d612 <SX1276GetTimeOnAir+0xd6>
 800d5a4:	0023      	movs	r3, r4
 800d5a6:	2001      	movs	r0, #1
 800d5a8:	002a      	movs	r2, r5
 800d5aa:	3b0b      	subs	r3, #11
 800d5ac:	4298      	cmp	r0, r3
 800d5ae:	416a      	adcs	r2, r5
 800d5b0:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d5b2:	b2db      	uxtb	r3, r3
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
                            ( crcOn ? 16 : 0 ) -
 800d5b4:	1e48      	subs	r0, r1, #1
 800d5b6:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d5b8:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 800d5ba:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d5bc:	00d2      	lsls	r2, r2, #3
 800d5be:	1810      	adds	r0, r2, r0
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 800d5c0:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 800d5c2:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800d5c4:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 800d5c6:	4297      	cmp	r7, r2
 800d5c8:	d100      	bne.n	800d5cc <SX1276GetTimeOnAir+0x90>
 800d5ca:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 800d5cc:	1880      	adds	r0, r0, r2

    if( datarate <= 6 )
 800d5ce:	1ea7      	subs	r7, r4, #2
 800d5d0:	2c06      	cmp	r4, #6
 800d5d2:	d903      	bls.n	800d5dc <SX1276GetTimeOnAir+0xa0>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800d5d4:	3008      	adds	r0, #8

        if( lowDatareOptimize == true )
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d000      	beq.n	800d5dc <SX1276GetTimeOnAir+0xa0>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800d5da:	00b9      	lsls	r1, r7, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800d5dc:	43c3      	mvns	r3, r0
 800d5de:	17db      	asrs	r3, r3, #31
 800d5e0:	4018      	ands	r0, r3
 800d5e2:	1840      	adds	r0, r0, r1
 800d5e4:	3801      	subs	r0, #1
 800d5e6:	f7f2 fe49 	bl	800027c <__divsi3>
 800d5ea:	9b01      	ldr	r3, [sp, #4]
 800d5ec:	4343      	muls	r3, r0
 800d5ee:	199e      	adds	r6, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 800d5f0:	0032      	movs	r2, r6
 800d5f2:	320e      	adds	r2, #14
    if( datarate <= 6 )
 800d5f4:	2c06      	cmp	r4, #6
 800d5f6:	d900      	bls.n	800d5fa <SX1276GetTimeOnAir+0xbe>
    int32_t intermediate =
 800d5f8:	3a02      	subs	r2, #2
    switch( bw )
 800d5fa:	2d02      	cmp	r5, #2
 800d5fc:	d811      	bhi.n	800d622 <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d5fe:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800d600:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d602:	3201      	adds	r2, #1
 800d604:	40ba      	lsls	r2, r7
 800d606:	4b07      	ldr	r3, [pc, #28]	; (800d624 <SX1276GetTimeOnAir+0xe8>)
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800d608:	0080      	lsls	r0, r0, #2
 800d60a:	00ad      	lsls	r5, r5, #2
 800d60c:	4350      	muls	r0, r2
 800d60e:	58ec      	ldr	r4, [r5, r3]
 800d610:	e7a6      	b.n	800d560 <SX1276GetTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 800d612:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d614:	2d01      	cmp	r5, #1
 800d616:	d1cd      	bne.n	800d5b4 <SX1276GetTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d618:	0023      	movs	r3, r4
 800d61a:	3b0c      	subs	r3, #12
 800d61c:	4258      	negs	r0, r3
 800d61e:	4143      	adcs	r3, r0
 800d620:	e7c7      	b.n	800d5b2 <SX1276GetTimeOnAir+0x76>
    return ( numerator + denominator - 1 ) / denominator;
 800d622:	deff      	udf	#255	; 0xff
 800d624:	08012be0 	.word	0x08012be0

0800d628 <SX1276GetWakeupTime>:
{
 800d628:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800d62a:	f7f6 fd07 	bl	800403c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800d62e:	3002      	adds	r0, #2
}
 800d630:	bd10      	pop	{r4, pc}

0800d632 <SX1276WriteBuffer>:
{
 800d632:	b570      	push	{r4, r5, r6, lr}
 800d634:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 800d636:	2000      	movs	r0, #0
{
 800d638:	000c      	movs	r4, r1
 800d63a:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 800d63c:	f7f6 fed6 	bl	80043ec <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 800d640:	2080      	movs	r0, #128	; 0x80
 800d642:	4330      	orrs	r0, r6
 800d644:	b280      	uxth	r0, r0
 800d646:	f7f6 fec3 	bl	80043d0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800d64a:	1965      	adds	r5, r4, r5
 800d64c:	42ac      	cmp	r4, r5
 800d64e:	d103      	bne.n	800d658 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 800d650:	2001      	movs	r0, #1
 800d652:	f7f6 fecb 	bl	80043ec <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800d656:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 800d658:	7820      	ldrb	r0, [r4, #0]
 800d65a:	f7f6 feb9 	bl	80043d0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800d65e:	3401      	adds	r4, #1
 800d660:	e7f4      	b.n	800d64c <SX1276WriteBuffer+0x1a>

0800d662 <SX1276Write>:
{
 800d662:	b507      	push	{r0, r1, r2, lr}
 800d664:	466b      	mov	r3, sp
 800d666:	71d9      	strb	r1, [r3, #7]
 800d668:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800d66a:	2201      	movs	r2, #1
 800d66c:	0019      	movs	r1, r3
 800d66e:	f7ff ffe0 	bl	800d632 <SX1276WriteBuffer>
}
 800d672:	bd07      	pop	{r0, r1, r2, pc}

0800d674 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 800d674:	4b11      	ldr	r3, [pc, #68]	; (800d6bc <SX1276SetChannel+0x48>)
{
 800d676:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 800d678:	4911      	ldr	r1, [pc, #68]	; (800d6c0 <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 800d67a:	6098      	str	r0, [r3, #8]
{
 800d67c:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 800d67e:	f7f2 fdf9 	bl	8000274 <__aeabi_uidivmod>
 800d682:	4b10      	ldr	r3, [pc, #64]	; (800d6c4 <SX1276SetChannel+0x50>)
 800d684:	0208      	lsls	r0, r1, #8
 800d686:	18c0      	adds	r0, r0, r3
 800d688:	490d      	ldr	r1, [pc, #52]	; (800d6c0 <SX1276SetChannel+0x4c>)
 800d68a:	f7f2 fd6d 	bl	8000168 <__udivsi3>
 800d68e:	490c      	ldr	r1, [pc, #48]	; (800d6c0 <SX1276SetChannel+0x4c>)
 800d690:	0004      	movs	r4, r0
 800d692:	0028      	movs	r0, r5
 800d694:	f7f2 fd68 	bl	8000168 <__udivsi3>
 800d698:	0200      	lsls	r0, r0, #8
 800d69a:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 800d69c:	0c21      	lsrs	r1, r4, #16
 800d69e:	2006      	movs	r0, #6
 800d6a0:	b2c9      	uxtb	r1, r1
 800d6a2:	f7ff ffde 	bl	800d662 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 800d6a6:	0a21      	lsrs	r1, r4, #8
 800d6a8:	2007      	movs	r0, #7
 800d6aa:	b2c9      	uxtb	r1, r1
 800d6ac:	f7ff ffd9 	bl	800d662 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 800d6b0:	2008      	movs	r0, #8
 800d6b2:	b2e1      	uxtb	r1, r4
 800d6b4:	f7ff ffd5 	bl	800d662 <SX1276Write>
}
 800d6b8:	bd70      	pop	{r4, r5, r6, pc}
 800d6ba:	46c0      	nop			; (mov r8, r8)
 800d6bc:	20001644 	.word	0x20001644
 800d6c0:	00003d09 	.word	0x00003d09
 800d6c4:	00001e84 	.word	0x00001e84

0800d6c8 <SX1276ReadBuffer>:
{
 800d6c8:	b570      	push	{r4, r5, r6, lr}
 800d6ca:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 800d6cc:	2000      	movs	r0, #0
{
 800d6ce:	000c      	movs	r4, r1
 800d6d0:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 800d6d2:	f7f6 fe8b 	bl	80043ec <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 800d6d6:	207f      	movs	r0, #127	; 0x7f
 800d6d8:	4028      	ands	r0, r5
 800d6da:	f7f6 fe79 	bl	80043d0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800d6de:	19a6      	adds	r6, r4, r6
 800d6e0:	42b4      	cmp	r4, r6
 800d6e2:	d103      	bne.n	800d6ec <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 800d6e4:	2001      	movs	r0, #1
 800d6e6:	f7f6 fe81 	bl	80043ec <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800d6ea:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	f7f6 fe6f 	bl	80043d0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 800d6f2:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 800d6f4:	3401      	adds	r4, #1
 800d6f6:	e7f3      	b.n	800d6e0 <SX1276ReadBuffer+0x18>

0800d6f8 <SX1276Read>:
{
 800d6f8:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800d6fa:	466b      	mov	r3, sp
 800d6fc:	1ddc      	adds	r4, r3, #7
 800d6fe:	2201      	movs	r2, #1
 800d700:	0021      	movs	r1, r4
 800d702:	f7ff ffe1 	bl	800d6c8 <SX1276ReadBuffer>
    return data;
 800d706:	7820      	ldrb	r0, [r4, #0]
}
 800d708:	bd16      	pop	{r1, r2, r4, pc}
	...

0800d70c <RxChainCalibration>:
{
 800d70c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800d70e:	2009      	movs	r0, #9
 800d710:	f7ff fff2 	bl	800d6f8 <SX1276Read>
 800d714:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d716:	2006      	movs	r0, #6
 800d718:	f7ff ffee 	bl	800d6f8 <SX1276Read>
 800d71c:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800d71e:	2007      	movs	r0, #7
 800d720:	f7ff ffea 	bl	800d6f8 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d724:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800d726:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d728:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 800d72a:	2008      	movs	r0, #8
 800d72c:	f7ff ffe4 	bl	800d6f8 <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800d730:	4b1a      	ldr	r3, [pc, #104]	; (800d79c <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d732:	4304      	orrs	r4, r0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800d734:	b2c0      	uxtb	r0, r0
 800d736:	4358      	muls	r0, r3
 800d738:	0a24      	lsrs	r4, r4, #8
 800d73a:	435c      	muls	r4, r3
 800d73c:	3080      	adds	r0, #128	; 0x80
 800d73e:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 800d740:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800d742:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 800d744:	2009      	movs	r0, #9
 800d746:	f7ff ff8c 	bl	800d662 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800d74a:	203b      	movs	r0, #59	; 0x3b
 800d74c:	f7ff ffd4 	bl	800d6f8 <SX1276Read>
 800d750:	2140      	movs	r1, #64	; 0x40
 800d752:	4301      	orrs	r1, r0
 800d754:	b2c9      	uxtb	r1, r1
 800d756:	203b      	movs	r0, #59	; 0x3b
 800d758:	f7ff ff83 	bl	800d662 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800d75c:	2620      	movs	r6, #32
 800d75e:	203b      	movs	r0, #59	; 0x3b
 800d760:	f7ff ffca 	bl	800d6f8 <SX1276Read>
 800d764:	4230      	tst	r0, r6
 800d766:	d1fa      	bne.n	800d75e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 800d768:	480d      	ldr	r0, [pc, #52]	; (800d7a0 <RxChainCalibration+0x94>)
 800d76a:	f7ff ff83 	bl	800d674 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800d76e:	203b      	movs	r0, #59	; 0x3b
 800d770:	f7ff ffc2 	bl	800d6f8 <SX1276Read>
 800d774:	2140      	movs	r1, #64	; 0x40
 800d776:	4301      	orrs	r1, r0
 800d778:	b2c9      	uxtb	r1, r1
 800d77a:	203b      	movs	r0, #59	; 0x3b
 800d77c:	f7ff ff71 	bl	800d662 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800d780:	2620      	movs	r6, #32
 800d782:	203b      	movs	r0, #59	; 0x3b
 800d784:	f7ff ffb8 	bl	800d6f8 <SX1276Read>
 800d788:	4230      	tst	r0, r6
 800d78a:	d1fa      	bne.n	800d782 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800d78c:	0029      	movs	r1, r5
 800d78e:	2009      	movs	r0, #9
 800d790:	f7ff ff67 	bl	800d662 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800d794:	0020      	movs	r0, r4
 800d796:	f7ff ff6d 	bl	800d674 <SX1276SetChannel>
}
 800d79a:	bd70      	pop	{r4, r5, r6, pc}
 800d79c:	00003d09 	.word	0x00003d09
 800d7a0:	33bca100 	.word	0x33bca100

0800d7a4 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 800d7a4:	4b05      	ldr	r3, [pc, #20]	; (800d7bc <SX1276OnDio4Irq+0x18>)
 800d7a6:	795a      	ldrb	r2, [r3, #5]
 800d7a8:	2a00      	cmp	r2, #0
 800d7aa:	d105      	bne.n	800d7b8 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800d7ac:	3330      	adds	r3, #48	; 0x30
 800d7ae:	781a      	ldrb	r2, [r3, #0]
 800d7b0:	2a00      	cmp	r2, #0
 800d7b2:	d101      	bne.n	800d7b8 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800d7b4:	3201      	adds	r2, #1
 800d7b6:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 800d7b8:	4770      	bx	lr
 800d7ba:	46c0      	nop			; (mov r8, r8)
 800d7bc:	20001644 	.word	0x20001644

0800d7c0 <SX1276OnDio3Irq>:
{
 800d7c0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800d7c2:	4b12      	ldr	r3, [pc, #72]	; (800d80c <SX1276OnDio3Irq+0x4c>)
 800d7c4:	795c      	ldrb	r4, [r3, #5]
 800d7c6:	2c01      	cmp	r4, #1
 800d7c8:	d112      	bne.n	800d7f0 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800d7ca:	2012      	movs	r0, #18
 800d7cc:	f7ff ff94 	bl	800d6f8 <SX1276Read>
 800d7d0:	0005      	movs	r5, r0
 800d7d2:	4e0f      	ldr	r6, [pc, #60]	; (800d810 <SX1276OnDio3Irq+0x50>)
 800d7d4:	4025      	ands	r5, r4
 800d7d6:	4220      	tst	r0, r4
 800d7d8:	d00b      	beq.n	800d7f2 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800d7da:	2105      	movs	r1, #5
 800d7dc:	2012      	movs	r0, #18
 800d7de:	f7ff ff40 	bl	800d662 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800d7e2:	6833      	ldr	r3, [r6, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d003      	beq.n	800d7f0 <SX1276OnDio3Irq+0x30>
 800d7e8:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 800d7ea:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10b      	bne.n	800d808 <SX1276OnDio3Irq+0x48>
}
 800d7f0:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800d7f2:	2104      	movs	r1, #4
 800d7f4:	2012      	movs	r0, #18
 800d7f6:	f7ff ff34 	bl	800d662 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800d7fa:	6833      	ldr	r3, [r6, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d0f7      	beq.n	800d7f0 <SX1276OnDio3Irq+0x30>
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d0f4      	beq.n	800d7f0 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 800d806:	0028      	movs	r0, r5
 800d808:	4798      	blx	r3
}
 800d80a:	e7f1      	b.n	800d7f0 <SX1276OnDio3Irq+0x30>
 800d80c:	20001644 	.word	0x20001644
 800d810:	20000e90 	.word	0x20000e90

0800d814 <SX1276OnDio2Irq>:
{
 800d814:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800d816:	4c2c      	ldr	r4, [pc, #176]	; (800d8c8 <SX1276OnDio2Irq+0xb4>)
 800d818:	7925      	ldrb	r5, [r4, #4]
 800d81a:	2d01      	cmp	r5, #1
 800d81c:	d002      	beq.n	800d824 <SX1276OnDio2Irq+0x10>
 800d81e:	2d02      	cmp	r5, #2
 800d820:	d048      	beq.n	800d8b4 <SX1276OnDio2Irq+0xa0>
}
 800d822:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800d824:	7963      	ldrb	r3, [r4, #5]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d017      	beq.n	800d85a <SX1276OnDio2Irq+0x46>
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d1f9      	bne.n	800d822 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d82e:	3453      	adds	r4, #83	; 0x53
 800d830:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800d832:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d834:	2b00      	cmp	r3, #0
 800d836:	d0f4      	beq.n	800d822 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800d838:	2012      	movs	r0, #18
 800d83a:	f7ff ff12 	bl	800d662 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800d83e:	4b23      	ldr	r3, [pc, #140]	; (800d8cc <SX1276OnDio2Irq+0xb8>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d0ed      	beq.n	800d822 <SX1276OnDio2Irq+0xe>
 800d846:	695c      	ldr	r4, [r3, #20]
 800d848:	2c00      	cmp	r4, #0
 800d84a:	d0ea      	beq.n	800d822 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800d84c:	201c      	movs	r0, #28
 800d84e:	f7ff ff53 	bl	800d6f8 <SX1276Read>
 800d852:	233f      	movs	r3, #63	; 0x3f
 800d854:	4018      	ands	r0, r3
 800d856:	47a0      	blx	r4
}
 800d858:	e7e3      	b.n	800d822 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800d85a:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800d85c:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800d85e:	3330      	adds	r3, #48	; 0x30
 800d860:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800d862:	3631      	adds	r6, #49	; 0x31
 800d864:	7833      	ldrb	r3, [r6, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1db      	bne.n	800d822 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 800d86a:	4819      	ldr	r0, [pc, #100]	; (800d8d0 <SX1276OnDio2Irq+0xbc>)
 800d86c:	f001 fcae 	bl	800f1cc <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800d870:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800d872:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800d874:	f7ff ff40 	bl	800d6f8 <SX1276Read>
 800d878:	0023      	movs	r3, r4
 800d87a:	0840      	lsrs	r0, r0, #1
 800d87c:	3332      	adds	r3, #50	; 0x32
 800d87e:	4240      	negs	r0, r0
 800d880:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800d882:	201b      	movs	r0, #27
 800d884:	f7ff ff38 	bl	800d6f8 <SX1276Read>
 800d888:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800d88a:	201c      	movs	r0, #28
 800d88c:	f7ff ff34 	bl	800d6f8 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800d890:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 800d892:	4b10      	ldr	r3, [pc, #64]	; (800d8d4 <SX1276OnDio2Irq+0xc0>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800d894:	4305      	orrs	r5, r0
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 800d896:	b2c0      	uxtb	r0, r0
 800d898:	4358      	muls	r0, r3
 800d89a:	0a2d      	lsrs	r5, r5, #8
 800d89c:	435d      	muls	r5, r3
 800d89e:	3080      	adds	r0, #128	; 0x80
 800d8a0:	0a00      	lsrs	r0, r0, #8
 800d8a2:	1940      	adds	r0, r0, r5
 800d8a4:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800d8a6:	200c      	movs	r0, #12
 800d8a8:	f7ff ff26 	bl	800d6f8 <SX1276Read>
 800d8ac:	3438      	adds	r4, #56	; 0x38
 800d8ae:	0940      	lsrs	r0, r0, #5
 800d8b0:	7020      	strb	r0, [r4, #0]
 800d8b2:	e7b6      	b.n	800d822 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 800d8b4:	7963      	ldrb	r3, [r4, #5]
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d1b3      	bne.n	800d822 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d8ba:	3453      	adds	r4, #83	; 0x53
 800d8bc:	7823      	ldrb	r3, [r4, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d0af      	beq.n	800d822 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800d8c2:	0029      	movs	r1, r5
 800d8c4:	e7b8      	b.n	800d838 <SX1276OnDio2Irq+0x24>
 800d8c6:	46c0      	nop			; (mov r8, r8)
 800d8c8:	20001644 	.word	0x20001644
 800d8cc:	20000e90 	.word	0x20000e90
 800d8d0:	2000162c 	.word	0x2000162c
 800d8d4:	00003d09 	.word	0x00003d09

0800d8d8 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800d8d8:	b510      	push	{r4, lr}
      Sx_Board_SetXO( SET ); 
 800d8da:	2001      	movs	r0, #1
 800d8dc:	f7f6 fbb0 	bl	8004040 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 800d8e0:	2001      	movs	r0, #1
 800d8e2:	f7f6 fd25 	bl	8004330 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800d8e6:	2001      	movs	r0, #1
 800d8e8:	f7ff ff06 	bl	800d6f8 <SX1276Read>
 800d8ec:	2307      	movs	r3, #7
 800d8ee:	2105      	movs	r1, #5
 800d8f0:	4398      	bics	r0, r3
 800d8f2:	4301      	orrs	r1, r0
 800d8f4:	b2c9      	uxtb	r1, r1
 800d8f6:	2001      	movs	r0, #1
 800d8f8:	f7ff feb3 	bl	800d662 <SX1276Write>
}
 800d8fc:	bd10      	pop	{r4, pc}

0800d8fe <SX1276SetOpMode>:
{
 800d8fe:	b570      	push	{r4, r5, r6, lr}
 800d900:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 800d902:	d10e      	bne.n	800d922 <SX1276SetOpMode+0x24>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800d904:	2001      	movs	r0, #1
 800d906:	f7ff fef7 	bl	800d6f8 <SX1276Read>
 800d90a:	21f8      	movs	r1, #248	; 0xf8
 800d90c:	4001      	ands	r1, r0
 800d90e:	2001      	movs	r0, #1
 800d910:	f7ff fea7 	bl	800d662 <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 800d914:	0020      	movs	r0, r4
 800d916:	f7f6 fd0b 	bl	8004330 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 800d91a:	0020      	movs	r0, r4
 800d91c:	f7f6 fb90 	bl	8004040 <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 800d920:	bd70      	pop	{r4, r5, r6, pc}
    else if ( opMode == RF_OPMODE_RECEIVER )
 800d922:	2805      	cmp	r0, #5
 800d924:	d102      	bne.n	800d92c <SX1276SetOpMode+0x2e>
 800d926:	f7ff ffd7 	bl	800d8d8 <SX1276SetOpMode.part.0>
 800d92a:	e7f9      	b.n	800d920 <SX1276SetOpMode+0x22>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 800d92c:	2009      	movs	r0, #9
 800d92e:	f7ff fee3 	bl	800d6f8 <SX1276Read>
 800d932:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 800d934:	2001      	movs	r0, #1
 800d936:	f7f6 fb83 	bl	8004040 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 800d93a:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800d93c:	062b      	lsls	r3, r5, #24
 800d93e:	d400      	bmi.n	800d942 <SX1276SetOpMode+0x44>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 800d940:	2002      	movs	r0, #2
 800d942:	f7f6 fcf5 	bl	8004330 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800d946:	2001      	movs	r0, #1
 800d948:	f7ff fed6 	bl	800d6f8 <SX1276Read>
 800d94c:	2307      	movs	r3, #7
 800d94e:	0001      	movs	r1, r0
 800d950:	4399      	bics	r1, r3
 800d952:	4321      	orrs	r1, r4
 800d954:	2001      	movs	r0, #1
 800d956:	b2c9      	uxtb	r1, r1
 800d958:	f7ff fe83 	bl	800d662 <SX1276Write>
}
 800d95c:	e7e0      	b.n	800d920 <SX1276SetOpMode+0x22>
	...

0800d960 <SX1276SetSleep>:
{
 800d960:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800d962:	4809      	ldr	r0, [pc, #36]	; (800d988 <SX1276SetSleep+0x28>)
 800d964:	f001 fc32 	bl	800f1cc <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800d968:	4808      	ldr	r0, [pc, #32]	; (800d98c <SX1276SetSleep+0x2c>)
 800d96a:	f001 fc2f 	bl	800f1cc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800d96e:	4808      	ldr	r0, [pc, #32]	; (800d990 <SX1276SetSleep+0x30>)
 800d970:	f001 fc2c 	bl	800f1cc <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800d974:	2000      	movs	r0, #0
 800d976:	f7ff ffc2 	bl	800d8fe <SX1276SetOpMode>
    Sx_Board_SetXO( RESET );
 800d97a:	2000      	movs	r0, #0
 800d97c:	f7f6 fb60 	bl	8004040 <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 800d980:	2200      	movs	r2, #0
 800d982:	4b04      	ldr	r3, [pc, #16]	; (800d994 <SX1276SetSleep+0x34>)
 800d984:	711a      	strb	r2, [r3, #4]
}
 800d986:	bd10      	pop	{r4, pc}
 800d988:	200016ac 	.word	0x200016ac
 800d98c:	20001614 	.word	0x20001614
 800d990:	2000162c 	.word	0x2000162c
 800d994:	20001644 	.word	0x20001644

0800d998 <SX1276SetStby>:
{
 800d998:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800d99a:	4808      	ldr	r0, [pc, #32]	; (800d9bc <SX1276SetStby+0x24>)
 800d99c:	f001 fc16 	bl	800f1cc <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800d9a0:	4807      	ldr	r0, [pc, #28]	; (800d9c0 <SX1276SetStby+0x28>)
 800d9a2:	f001 fc13 	bl	800f1cc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800d9a6:	4807      	ldr	r0, [pc, #28]	; (800d9c4 <SX1276SetStby+0x2c>)
 800d9a8:	f001 fc10 	bl	800f1cc <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800d9ac:	2001      	movs	r0, #1
 800d9ae:	f7ff ffa6 	bl	800d8fe <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4b04      	ldr	r3, [pc, #16]	; (800d9c8 <SX1276SetStby+0x30>)
 800d9b6:	711a      	strb	r2, [r3, #4]
}
 800d9b8:	bd10      	pop	{r4, pc}
 800d9ba:	46c0      	nop			; (mov r8, r8)
 800d9bc:	200016ac 	.word	0x200016ac
 800d9c0:	20001614 	.word	0x20001614
 800d9c4:	2000162c 	.word	0x2000162c
 800d9c8:	20001644 	.word	0x20001644

0800d9cc <SX1276SetRx>:
{
 800d9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ce:	0006      	movs	r6, r0
    TimerStop( &TxTimeoutTimer );
 800d9d0:	4878      	ldr	r0, [pc, #480]	; (800dbb4 <SX1276SetRx+0x1e8>)
 800d9d2:	f001 fbfb 	bl	800f1cc <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 800d9d6:	4c78      	ldr	r4, [pc, #480]	; (800dbb8 <SX1276SetRx+0x1ec>)
 800d9d8:	7965      	ldrb	r5, [r4, #5]
 800d9da:	2d00      	cmp	r5, #0
 800d9dc:	d02f      	beq.n	800da3e <SX1276SetRx+0x72>
 800d9de:	2700      	movs	r7, #0
 800d9e0:	2d01      	cmp	r5, #1
 800d9e2:	d151      	bne.n	800da88 <SX1276SetRx+0xbc>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800d9e4:	0023      	movs	r3, r4
 800d9e6:	3355      	adds	r3, #85	; 0x55
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	2741      	movs	r7, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800d9ec:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d100      	bne.n	800d9f4 <SX1276SetRx+0x28>
 800d9f2:	e06c      	b.n	800dace <SX1276SetRx+0x102>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800d9f4:	f7ff fe80 	bl	800d6f8 <SX1276Read>
 800d9f8:	4338      	orrs	r0, r7
 800d9fa:	b2c1      	uxtb	r1, r0
 800d9fc:	2033      	movs	r0, #51	; 0x33
 800d9fe:	f7ff fe30 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800da02:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800da04:	203b      	movs	r0, #59	; 0x3b
 800da06:	f7ff fe2c 	bl	800d662 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800da0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800da0c:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800da0e:	2b08      	cmp	r3, #8
 800da10:	d900      	bls.n	800da14 <SX1276SetRx+0x48>
 800da12:	e0b5      	b.n	800db80 <SX1276SetRx+0x1b4>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800da14:	f7ff fe70 	bl	800d6f8 <SX1276Read>
 800da18:	217f      	movs	r1, #127	; 0x7f
 800da1a:	4001      	ands	r1, r0
 800da1c:	2031      	movs	r0, #49	; 0x31
 800da1e:	f7ff fe20 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800da22:	2030      	movs	r0, #48	; 0x30
 800da24:	2100      	movs	r1, #0
 800da26:	f7ff fe1c 	bl	800d662 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800da2a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800da2c:	2808      	cmp	r0, #8
 800da2e:	d862      	bhi.n	800daf6 <SX1276SetRx+0x12a>
 800da30:	f7f2 fb7c 	bl	800012c <__gnu_thumb1_case_uqi>
 800da34:	8c857e58 	.word	0x8c857e58
 800da38:	a1a19a93 	.word	0xa1a19a93
 800da3c:	a1          	.byte	0xa1
 800da3d:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800da3e:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800da40:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800da42:	7fdf      	ldrb	r7, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800da44:	f7ff fe58 	bl	800d6f8 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800da48:	2103      	movs	r1, #3
 800da4a:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800da4c:	3109      	adds	r1, #9
 800da4e:	4301      	orrs	r1, r0
 800da50:	2040      	movs	r0, #64	; 0x40
 800da52:	f7ff fe06 	bl	800d662 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800da56:	2041      	movs	r0, #65	; 0x41
 800da58:	f7ff fe4e 	bl	800d6f8 <SX1276Read>
 800da5c:	213f      	movs	r1, #63	; 0x3f
 800da5e:	4249      	negs	r1, r1
 800da60:	4301      	orrs	r1, r0
 800da62:	b2c9      	uxtb	r1, r1
 800da64:	2041      	movs	r0, #65	; 0x41
 800da66:	f7ff fdfc 	bl	800d662 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800da6a:	2035      	movs	r0, #53	; 0x35
 800da6c:	f7ff fe44 	bl	800d6f8 <SX1276Read>
 800da70:	233f      	movs	r3, #63	; 0x3f
 800da72:	4018      	ands	r0, r3
 800da74:	0023      	movs	r3, r4
 800da76:	333e      	adds	r3, #62	; 0x3e
 800da78:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800da7a:	211e      	movs	r1, #30
 800da7c:	200d      	movs	r0, #13
 800da7e:	f7ff fdf0 	bl	800d662 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800da82:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800da84:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800da86:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800da88:	2280      	movs	r2, #128	; 0x80
 800da8a:	2100      	movs	r1, #0
 800da8c:	484b      	ldr	r0, [pc, #300]	; (800dbbc <SX1276SetRx+0x1f0>)
 800da8e:	0052      	lsls	r2, r2, #1
 800da90:	f001 fdec 	bl	800f66c <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 800da94:	2301      	movs	r3, #1
 800da96:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 800da98:	2e00      	cmp	r6, #0
 800da9a:	d007      	beq.n	800daac <SX1276SetRx+0xe0>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800da9c:	4d48      	ldr	r5, [pc, #288]	; (800dbc0 <SX1276SetRx+0x1f4>)
 800da9e:	0031      	movs	r1, r6
 800daa0:	0028      	movs	r0, r5
 800daa2:	f001 fc29 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800daa6:	0028      	movs	r0, r5
 800daa8:	f001 fbe4 	bl	800f274 <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 800daac:	7963      	ldrb	r3, [r4, #5]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d000      	beq.n	800dab4 <SX1276SetRx+0xe8>
 800dab2:	e076      	b.n	800dba2 <SX1276SetRx+0x1d6>
    else if ( opMode == RF_OPMODE_RECEIVER )
 800dab4:	f7ff ff10 	bl	800d8d8 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 800dab8:	2f00      	cmp	r7, #0
 800daba:	d107      	bne.n	800dacc <SX1276SetRx+0x100>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800dabc:	4d41      	ldr	r5, [pc, #260]	; (800dbc4 <SX1276SetRx+0x1f8>)
 800dabe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dac0:	0028      	movs	r0, r5
 800dac2:	f001 fc19 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 800dac6:	0028      	movs	r0, r5
 800dac8:	f001 fbd4 	bl	800f274 <UTIL_TIMER_Start>
}
 800dacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800dace:	f7ff fe13 	bl	800d6f8 <SX1276Read>
 800dad2:	0001      	movs	r1, r0
 800dad4:	43b9      	bics	r1, r7
 800dad6:	4329      	orrs	r1, r5
 800dad8:	b2c9      	uxtb	r1, r1
 800dada:	2033      	movs	r0, #51	; 0x33
 800dadc:	f7ff fdc1 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800dae0:	211d      	movs	r1, #29
 800dae2:	e78f      	b.n	800da04 <SX1276SetRx+0x38>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800dae4:	2148      	movs	r1, #72	; 0x48
 800dae6:	202f      	movs	r0, #47	; 0x2f
 800dae8:	f7ff fdbb 	bl	800d662 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 800daec:	68a3      	ldr	r3, [r4, #8]
 800daee:	4a36      	ldr	r2, [pc, #216]	; (800dbc8 <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800daf0:	1898      	adds	r0, r3, r2
 800daf2:	f7ff fdbf 	bl	800d674 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800daf6:	0023      	movs	r3, r4
 800daf8:	3356      	adds	r3, #86	; 0x56
 800dafa:	781f      	ldrb	r7, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800dafc:	0023      	movs	r3, r4
 800dafe:	3353      	adds	r3, #83	; 0x53
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d044      	beq.n	800db90 <SX1276SetRx+0x1c4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800db06:	211d      	movs	r1, #29
 800db08:	2011      	movs	r0, #17
 800db0a:	f7ff fdaa 	bl	800d662 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800db0e:	2040      	movs	r0, #64	; 0x40
 800db10:	f7ff fdf2 	bl	800d6f8 <SX1276Read>
 800db14:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800db16:	4001      	ands	r1, r0
 800db18:	2040      	movs	r0, #64	; 0x40
 800db1a:	f7ff fda2 	bl	800d662 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800db1e:	2100      	movs	r1, #0
 800db20:	200f      	movs	r0, #15
 800db22:	f7ff fd9e 	bl	800d662 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800db26:	2100      	movs	r1, #0
 800db28:	200d      	movs	r0, #13
 800db2a:	f7ff fd9a 	bl	800d662 <SX1276Write>
        break;
 800db2e:	e7ab      	b.n	800da88 <SX1276SetRx+0xbc>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800db30:	2144      	movs	r1, #68	; 0x44
 800db32:	202f      	movs	r0, #47	; 0x2f
 800db34:	f7ff fd95 	bl	800d662 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800db38:	68a3      	ldr	r3, [r4, #8]
 800db3a:	4a24      	ldr	r2, [pc, #144]	; (800dbcc <SX1276SetRx+0x200>)
 800db3c:	e7d8      	b.n	800daf0 <SX1276SetRx+0x124>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800db3e:	2144      	movs	r1, #68	; 0x44
 800db40:	202f      	movs	r0, #47	; 0x2f
 800db42:	f7ff fd8e 	bl	800d662 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800db46:	68a3      	ldr	r3, [r4, #8]
 800db48:	4a21      	ldr	r2, [pc, #132]	; (800dbd0 <SX1276SetRx+0x204>)
 800db4a:	e7d1      	b.n	800daf0 <SX1276SetRx+0x124>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800db4c:	2144      	movs	r1, #68	; 0x44
 800db4e:	202f      	movs	r0, #47	; 0x2f
 800db50:	f7ff fd87 	bl	800d662 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800db54:	68a3      	ldr	r3, [r4, #8]
 800db56:	4a1f      	ldr	r2, [pc, #124]	; (800dbd4 <SX1276SetRx+0x208>)
 800db58:	e7ca      	b.n	800daf0 <SX1276SetRx+0x124>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800db5a:	2144      	movs	r1, #68	; 0x44
 800db5c:	202f      	movs	r0, #47	; 0x2f
 800db5e:	f7ff fd80 	bl	800d662 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800db62:	68a3      	ldr	r3, [r4, #8]
 800db64:	4a1c      	ldr	r2, [pc, #112]	; (800dbd8 <SX1276SetRx+0x20c>)
 800db66:	e7c3      	b.n	800daf0 <SX1276SetRx+0x124>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800db68:	2144      	movs	r1, #68	; 0x44
 800db6a:	202f      	movs	r0, #47	; 0x2f
 800db6c:	f7ff fd79 	bl	800d662 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800db70:	68a3      	ldr	r3, [r4, #8]
 800db72:	4a1a      	ldr	r2, [pc, #104]	; (800dbdc <SX1276SetRx+0x210>)
 800db74:	e7bc      	b.n	800daf0 <SX1276SetRx+0x124>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800db76:	2140      	movs	r1, #64	; 0x40
 800db78:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800db7a:	f7ff fd72 	bl	800d662 <SX1276Write>
 800db7e:	e7ba      	b.n	800daf6 <SX1276SetRx+0x12a>
 800db80:	f7ff fdba 	bl	800d6f8 <SX1276Read>
 800db84:	2180      	movs	r1, #128	; 0x80
 800db86:	4249      	negs	r1, r1
 800db88:	4301      	orrs	r1, r0
 800db8a:	b2c9      	uxtb	r1, r1
 800db8c:	2031      	movs	r0, #49	; 0x31
 800db8e:	e7f4      	b.n	800db7a <SX1276SetRx+0x1ae>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800db90:	211f      	movs	r1, #31
 800db92:	2011      	movs	r0, #17
 800db94:	f7ff fd65 	bl	800d662 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800db98:	2040      	movs	r0, #64	; 0x40
 800db9a:	f7ff fdad 	bl	800d6f8 <SX1276Read>
 800db9e:	213f      	movs	r1, #63	; 0x3f
 800dba0:	e7b9      	b.n	800db16 <SX1276SetRx+0x14a>
        if( rxContinuous == true )
 800dba2:	2f00      	cmp	r7, #0
 800dba4:	d002      	beq.n	800dbac <SX1276SetRx+0x1e0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 800dba6:	f7ff fe97 	bl	800d8d8 <SX1276SetOpMode.part.0>
}
 800dbaa:	e78f      	b.n	800dacc <SX1276SetRx+0x100>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800dbac:	2006      	movs	r0, #6
 800dbae:	f7ff fea6 	bl	800d8fe <SX1276SetOpMode>
}
 800dbb2:	e78b      	b.n	800dacc <SX1276SetRx+0x100>
 800dbb4:	20001614 	.word	0x20001614
 800dbb8:	20001644 	.word	0x20001644
 800dbbc:	20000e94 	.word	0x20000e94
 800dbc0:	200016ac 	.word	0x200016ac
 800dbc4:	2000162c 	.word	0x2000162c
 800dbc8:	00001e82 	.word	0x00001e82
 800dbcc:	000028b4 	.word	0x000028b4
 800dbd0:	00003d04 	.word	0x00003d04
 800dbd4:	0000515e 	.word	0x0000515e
 800dbd8:	00007a12 	.word	0x00007a12
 800dbdc:	0000a2c6 	.word	0x0000a2c6

0800dbe0 <SX1276StartCad>:
{
 800dbe0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800dbe2:	4c0b      	ldr	r4, [pc, #44]	; (800dc10 <SX1276StartCad+0x30>)
 800dbe4:	7963      	ldrb	r3, [r4, #5]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d110      	bne.n	800dc0c <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800dbea:	21fa      	movs	r1, #250	; 0xfa
 800dbec:	2011      	movs	r0, #17
 800dbee:	f7ff fd38 	bl	800d662 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800dbf2:	2040      	movs	r0, #64	; 0x40
 800dbf4:	f7ff fd80 	bl	800d6f8 <SX1276Read>
 800dbf8:	2503      	movs	r5, #3
 800dbfa:	43a8      	bics	r0, r5
 800dbfc:	b2c1      	uxtb	r1, r0
 800dbfe:	2040      	movs	r0, #64	; 0x40
 800dc00:	f7ff fd2f 	bl	800d662 <SX1276Write>
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800dc04:	2007      	movs	r0, #7
            SX1276.Settings.State = RF_CAD;
 800dc06:	7125      	strb	r5, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800dc08:	f7ff fe79 	bl	800d8fe <SX1276SetOpMode>
}
 800dc0c:	bd70      	pop	{r4, r5, r6, pc}
 800dc0e:	46c0      	nop			; (mov r8, r8)
 800dc10:	20001644 	.word	0x20001644

0800dc14 <SX1276ReadRssi>:
{
 800dc14:	b510      	push	{r4, lr}
    switch( modem )
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d004      	beq.n	800dc24 <SX1276ReadRssi+0x10>
 800dc1a:	2801      	cmp	r0, #1
 800dc1c:	d00a      	beq.n	800dc34 <SX1276ReadRssi+0x20>
 800dc1e:	2001      	movs	r0, #1
 800dc20:	4240      	negs	r0, r0
}
 800dc22:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800dc24:	2011      	movs	r0, #17
 800dc26:	f7ff fd67 	bl	800d6f8 <SX1276Read>
 800dc2a:	0840      	lsrs	r0, r0, #1
 800dc2c:	b2c0      	uxtb	r0, r0
 800dc2e:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800dc30:	b200      	sxth	r0, r0
 800dc32:	e7f6      	b.n	800dc22 <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800dc34:	4a06      	ldr	r2, [pc, #24]	; (800dc50 <SX1276ReadRssi+0x3c>)
 800dc36:	4b07      	ldr	r3, [pc, #28]	; (800dc54 <SX1276ReadRssi+0x40>)
 800dc38:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800dc3a:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d903      	bls.n	800dc48 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800dc40:	f7ff fd5a 	bl	800d6f8 <SX1276Read>
 800dc44:	389d      	subs	r0, #157	; 0x9d
 800dc46:	e7f3      	b.n	800dc30 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800dc48:	f7ff fd56 	bl	800d6f8 <SX1276Read>
 800dc4c:	38a4      	subs	r0, #164	; 0xa4
 800dc4e:	e7ef      	b.n	800dc30 <SX1276ReadRssi+0x1c>
 800dc50:	20001644 	.word	0x20001644
 800dc54:	1f4add40 	.word	0x1f4add40

0800dc58 <SX1276SetModem>:
{
 800dc58:	b510      	push	{r4, lr}
 800dc5a:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800dc5c:	2001      	movs	r0, #1
 800dc5e:	f7ff fd4b 	bl	800d6f8 <SX1276Read>
 800dc62:	b2c0      	uxtb	r0, r0
 800dc64:	4b17      	ldr	r3, [pc, #92]	; (800dcc4 <SX1276SetModem+0x6c>)
        SX1276.Settings.Modem = MODEM_LORA;
 800dc66:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 800dc68:	42a0      	cmp	r0, r4
 800dc6a:	d101      	bne.n	800dc70 <SX1276SetModem+0x18>
 800dc6c:	7158      	strb	r0, [r3, #5]
}
 800dc6e:	bd10      	pop	{r4, pc}
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800dc70:	2000      	movs	r0, #0
    SX1276.Settings.Modem = modem;
 800dc72:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800dc74:	2c01      	cmp	r4, #1
 800dc76:	d012      	beq.n	800dc9e <SX1276SetModem+0x46>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800dc78:	f7ff fe41 	bl	800d8fe <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800dc7c:	2001      	movs	r0, #1
 800dc7e:	f7ff fd3b 	bl	800d6f8 <SX1276Read>
 800dc82:	217f      	movs	r1, #127	; 0x7f
 800dc84:	4001      	ands	r1, r0
 800dc86:	2001      	movs	r0, #1
 800dc88:	f7ff fceb 	bl	800d662 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	2040      	movs	r0, #64	; 0x40
 800dc90:	f7ff fce7 	bl	800d662 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800dc94:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800dc96:	2041      	movs	r0, #65	; 0x41
 800dc98:	f7ff fce3 	bl	800d662 <SX1276Write>
        break;
 800dc9c:	e7e7      	b.n	800dc6e <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800dc9e:	f7ff fe2e 	bl	800d8fe <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800dca2:	0020      	movs	r0, r4
 800dca4:	f7ff fd28 	bl	800d6f8 <SX1276Read>
 800dca8:	2180      	movs	r1, #128	; 0x80
 800dcaa:	4249      	negs	r1, r1
 800dcac:	4301      	orrs	r1, r0
 800dcae:	b2c9      	uxtb	r1, r1
 800dcb0:	0020      	movs	r0, r4
 800dcb2:	f7ff fcd6 	bl	800d662 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	2040      	movs	r0, #64	; 0x40
 800dcba:	f7ff fcd2 	bl	800d662 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	e7e9      	b.n	800dc96 <SX1276SetModem+0x3e>
 800dcc2:	46c0      	nop			; (mov r8, r8)
 800dcc4:	20001644 	.word	0x20001644

0800dcc8 <SX1276Init>:
{
 800dcc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800dcca:	2400      	movs	r4, #0
 800dccc:	2101      	movs	r1, #1
 800dcce:	4d1f      	ldr	r5, [pc, #124]	; (800dd4c <SX1276Init+0x84>)
    RadioEvents = events;
 800dcd0:	4b1f      	ldr	r3, [pc, #124]	; (800dd50 <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800dcd2:	0022      	movs	r2, r4
    RadioEvents = events;
 800dcd4:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800dcd6:	4249      	negs	r1, r1
 800dcd8:	002b      	movs	r3, r5
 800dcda:	9400      	str	r4, [sp, #0]
 800dcdc:	481d      	ldr	r0, [pc, #116]	; (800dd54 <SX1276Init+0x8c>)
 800dcde:	f001 fa15 	bl	800f10c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800dce2:	2101      	movs	r1, #1
 800dce4:	002b      	movs	r3, r5
 800dce6:	0022      	movs	r2, r4
 800dce8:	9400      	str	r4, [sp, #0]
 800dcea:	4249      	negs	r1, r1
 800dcec:	481a      	ldr	r0, [pc, #104]	; (800dd58 <SX1276Init+0x90>)
 800dcee:	f001 fa0d 	bl	800f10c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800dcf2:	2101      	movs	r1, #1
 800dcf4:	002b      	movs	r3, r5
 800dcf6:	0022      	movs	r2, r4
 800dcf8:	4249      	negs	r1, r1
 800dcfa:	9400      	str	r4, [sp, #0]
 800dcfc:	4817      	ldr	r0, [pc, #92]	; (800dd5c <SX1276Init+0x94>)
 800dcfe:	f001 fa05 	bl	800f10c <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 800dd02:	2001      	movs	r0, #1
 800dd04:	f7f6 f99c 	bl	8004040 <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 800dd08:	f7f6 fb3a 	bl	8004380 <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 800dd0c:	f7ff fcfe 	bl	800d70c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800dd10:	0020      	movs	r0, r4
 800dd12:	f7ff fdf4 	bl	800d8fe <SX1276SetOpMode>
    Sx_Board_IoIrqInit( DioIrq );
 800dd16:	4812      	ldr	r0, [pc, #72]	; (800dd60 <SX1276Init+0x98>)
 800dd18:	f7f6 fada 	bl	80042d0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800dd1c:	4d11      	ldr	r5, [pc, #68]	; (800dd64 <SX1276Init+0x9c>)
 800dd1e:	002c      	movs	r4, r5
 800dd20:	353c      	adds	r5, #60	; 0x3c
 800dd22:	340c      	adds	r4, #12
        SX1276SetModem( RadioRegsInit[i].Modem );
 800dd24:	7820      	ldrb	r0, [r4, #0]
 800dd26:	f7ff ff97 	bl	800dc58 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800dd2a:	78a1      	ldrb	r1, [r4, #2]
 800dd2c:	7860      	ldrb	r0, [r4, #1]
 800dd2e:	3403      	adds	r4, #3
 800dd30:	f7ff fc97 	bl	800d662 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800dd34:	42ac      	cmp	r4, r5
 800dd36:	d1f5      	bne.n	800dd24 <SX1276Init+0x5c>
    SX1276SetModem( MODEM_FSK );
 800dd38:	2000      	movs	r0, #0
 800dd3a:	f7ff ff8d 	bl	800dc58 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800dd3e:	2200      	movs	r2, #0
 800dd40:	4b09      	ldr	r3, [pc, #36]	; (800dd68 <SX1276Init+0xa0>)
 800dd42:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800dd44:	f7f6 f97a 	bl	800403c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800dd48:	3002      	adds	r0, #2
}
 800dd4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800dd4c:	0800e515 	.word	0x0800e515
 800dd50:	20000e90 	.word	0x20000e90
 800dd54:	20001614 	.word	0x20001614
 800dd58:	200016ac 	.word	0x200016ac
 800dd5c:	2000162c 	.word	0x2000162c
 800dd60:	2000017c 	.word	0x2000017c
 800dd64:	08012be0 	.word	0x08012be0
 800dd68:	20001644 	.word	0x20001644

0800dd6c <SX1276IsChannelFree>:
{
 800dd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6e:	0007      	movs	r7, r0
 800dd70:	000c      	movs	r4, r1
 800dd72:	0016      	movs	r6, r2
 800dd74:	001d      	movs	r5, r3
    SX1276SetSleep( );
 800dd76:	f7ff fdf3 	bl	800d960 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	f7ff ff6c 	bl	800dc58 <SX1276SetModem>
    SX1276SetChannel( freq );
 800dd80:	0038      	movs	r0, r7
 800dd82:	f7ff fc77 	bl	800d674 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800dd86:	0020      	movs	r0, r4
 800dd88:	f7ff fbc2 	bl	800d510 <GetFskBandwidthRegValue>
 800dd8c:	0004      	movs	r4, r0
 800dd8e:	0001      	movs	r1, r0
 800dd90:	2012      	movs	r0, #18
 800dd92:	f7ff fc66 	bl	800d662 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800dd96:	0021      	movs	r1, r4
 800dd98:	2013      	movs	r0, #19
 800dd9a:	f7ff fc62 	bl	800d662 <SX1276Write>
    else if ( opMode == RF_OPMODE_RECEIVER )
 800dd9e:	f7ff fd9b 	bl	800d8d8 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 800dda2:	2001      	movs	r0, #1
 800dda4:	f7f5 fe54 	bl	8003a50 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800dda8:	f001 f9cc 	bl	800f144 <UTIL_TIMER_GetCurrentTime>
 800ddac:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800ddae:	0020      	movs	r0, r4
 800ddb0:	f001 f9d2 	bl	800f158 <UTIL_TIMER_GetElapsedTime>
 800ddb4:	42a8      	cmp	r0, r5
 800ddb6:	d304      	bcc.n	800ddc2 <SX1276IsChannelFree+0x56>
    bool status = true;
 800ddb8:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800ddba:	f7ff fdd1 	bl	800d960 <SX1276SetSleep>
}
 800ddbe:	0020      	movs	r0, r4
 800ddc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 800ddc2:	2000      	movs	r0, #0
 800ddc4:	f7ff ff26 	bl	800dc14 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800ddc8:	42b0      	cmp	r0, r6
 800ddca:	ddf0      	ble.n	800ddae <SX1276IsChannelFree+0x42>
            status = false;
 800ddcc:	2400      	movs	r4, #0
 800ddce:	e7f4      	b.n	800ddba <SX1276IsChannelFree+0x4e>

0800ddd0 <SX1276Random>:
{
 800ddd0:	b570      	push	{r4, r5, r6, lr}
 800ddd2:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 800ddd4:	2001      	movs	r0, #1
 800ddd6:	f7ff ff3f 	bl	800dc58 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800ddda:	21ff      	movs	r1, #255	; 0xff
 800dddc:	2011      	movs	r0, #17
 800ddde:	f7ff fc40 	bl	800d662 <SX1276Write>
    uint32_t rnd = 0;
 800dde2:	0025      	movs	r5, r4
 800dde4:	f7ff fd78 	bl	800d8d8 <SX1276SetOpMode.part.0>
        RADIO_DELAY_MS( 1 );
 800dde8:	2601      	movs	r6, #1
 800ddea:	0030      	movs	r0, r6
 800ddec:	f7f5 fe30 	bl	8003a50 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800ddf0:	202c      	movs	r0, #44	; 0x2c
 800ddf2:	f7ff fc81 	bl	800d6f8 <SX1276Read>
 800ddf6:	4030      	ands	r0, r6
 800ddf8:	40a0      	lsls	r0, r4
 800ddfa:	3401      	adds	r4, #1
 800ddfc:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800ddfe:	2c20      	cmp	r4, #32
 800de00:	d1f3      	bne.n	800ddea <SX1276Random+0x1a>
    SX1276SetSleep( );
 800de02:	f7ff fdad 	bl	800d960 <SX1276SetSleep>
}
 800de06:	0028      	movs	r0, r5
 800de08:	bd70      	pop	{r4, r5, r6, pc}
	...

0800de0c <SX1276SetRxConfig>:
{
 800de0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de0e:	b08d      	sub	sp, #52	; 0x34
 800de10:	9306      	str	r3, [sp, #24]
 800de12:	ab12      	add	r3, sp, #72	; 0x48
 800de14:	0016      	movs	r6, r2
 800de16:	cb04      	ldmia	r3!, {r2}
 800de18:	0004      	movs	r4, r0
 800de1a:	881b      	ldrh	r3, [r3, #0]
 800de1c:	9208      	str	r2, [sp, #32]
 800de1e:	9301      	str	r3, [sp, #4]
 800de20:	ab14      	add	r3, sp, #80	; 0x50
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	aa0c      	add	r2, sp, #48	; 0x30
 800de26:	9305      	str	r3, [sp, #20]
 800de28:	ab15      	add	r3, sp, #84	; 0x54
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	000d      	movs	r5, r1
 800de2e:	9302      	str	r3, [sp, #8]
 800de30:	ab16      	add	r3, sp, #88	; 0x58
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	9303      	str	r3, [sp, #12]
 800de36:	ab17      	add	r3, sp, #92	; 0x5c
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	9304      	str	r3, [sp, #16]
 800de3c:	ab18      	add	r3, sp, #96	; 0x60
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	930a      	str	r3, [sp, #40]	; 0x28
 800de42:	ab19      	add	r3, sp, #100	; 0x64
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	930b      	str	r3, [sp, #44]	; 0x2c
 800de48:	2319      	movs	r3, #25
 800de4a:	189b      	adds	r3, r3, r2
 800de4c:	7fdf      	ldrb	r7, [r3, #31]
 800de4e:	231d      	movs	r3, #29
 800de50:	189b      	adds	r3, r3, r2
 800de52:	7fdb      	ldrb	r3, [r3, #31]
 800de54:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 800de56:	f7ff feff 	bl	800dc58 <SX1276SetModem>
    switch( modem )
 800de5a:	2c00      	cmp	r4, #0
 800de5c:	d004      	beq.n	800de68 <SX1276SetRxConfig+0x5c>
 800de5e:	2c01      	cmp	r4, #1
 800de60:	d100      	bne.n	800de64 <SX1276SetRxConfig+0x58>
 800de62:	e084      	b.n	800df6e <SX1276SetRxConfig+0x162>
}
 800de64:	b00d      	add	sp, #52	; 0x34
 800de66:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800de68:	4ca6      	ldr	r4, [pc, #664]	; (800e104 <SX1276SetRxConfig+0x2f8>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800de6a:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800de6c:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800de6e:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800de70:	1ce3      	adds	r3, r4, #3
 800de72:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800de74:	9a03      	ldr	r2, [sp, #12]
 800de76:	1d23      	adds	r3, r4, #4
 800de78:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800de7a:	9a04      	ldr	r2, [sp, #16]
 800de7c:	1d63      	adds	r3, r4, #5
 800de7e:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800de80:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800de82:	1da3      	adds	r3, r4, #6
 800de84:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800de86:	1de3      	adds	r3, r4, #7
 800de88:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800de8a:	9b01      	ldr	r3, [sp, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 800de8c:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800de8e:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800de90:	0030      	movs	r0, r6
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800de92:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800de94:	f7f4 fc44 	bl	8002720 <__aeabi_ui2d>
 800de98:	0002      	movs	r2, r0
 800de9a:	000b      	movs	r3, r1
 800de9c:	0006      	movs	r6, r0
 800de9e:	000f      	movs	r7, r1
 800dea0:	2000      	movs	r0, #0
 800dea2:	4999      	ldr	r1, [pc, #612]	; (800e108 <SX1276SetRxConfig+0x2fc>)
 800dea4:	f7f3 f9b4 	bl	8001210 <__aeabi_ddiv>
 800dea8:	2200      	movs	r2, #0
 800deaa:	4b98      	ldr	r3, [pc, #608]	; (800e10c <SX1276SetRxConfig+0x300>)
 800deac:	f7f3 fdb6 	bl	8001a1c <__aeabi_dmul>
 800deb0:	9006      	str	r0, [sp, #24]
 800deb2:	9107      	str	r1, [sp, #28]
 800deb4:	9805      	ldr	r0, [sp, #20]
 800deb6:	f7f4 fc03 	bl	80026c0 <__aeabi_i2d>
 800deba:	0002      	movs	r2, r0
 800debc:	000b      	movs	r3, r1
 800debe:	9806      	ldr	r0, [sp, #24]
 800dec0:	9907      	ldr	r1, [sp, #28]
 800dec2:	f7f3 fdab 	bl	8001a1c <__aeabi_dmul>
 800dec6:	2200      	movs	r2, #0
 800dec8:	4b91      	ldr	r3, [pc, #580]	; (800e110 <SX1276SetRxConfig+0x304>)
 800deca:	f7f3 fda7 	bl	8001a1c <__aeabi_dmul>
 800dece:	f7f2 fb47 	bl	8000560 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800ded2:	0032      	movs	r2, r6
 800ded4:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800ded6:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800ded8:	498e      	ldr	r1, [pc, #568]	; (800e114 <SX1276SetRxConfig+0x308>)
 800deda:	2000      	movs	r0, #0
 800dedc:	f7f3 f998 	bl	8001210 <__aeabi_ddiv>
 800dee0:	f7f2 fb3e 	bl	8000560 <__aeabi_d2uiz>
 800dee4:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800dee6:	0a21      	lsrs	r1, r4, #8
 800dee8:	2002      	movs	r0, #2
 800deea:	f7ff fbba 	bl	800d662 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800deee:	b2e1      	uxtb	r1, r4
 800def0:	2003      	movs	r0, #3
 800def2:	f7ff fbb6 	bl	800d662 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800def6:	0028      	movs	r0, r5
 800def8:	f7ff fb0a 	bl	800d510 <GetFskBandwidthRegValue>
 800defc:	0001      	movs	r1, r0
 800defe:	2012      	movs	r0, #18
 800df00:	f7ff fbaf 	bl	800d662 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800df04:	9808      	ldr	r0, [sp, #32]
 800df06:	f7ff fb03 	bl	800d510 <GetFskBandwidthRegValue>
 800df0a:	0001      	movs	r1, r0
 800df0c:	2013      	movs	r0, #19
 800df0e:	f7ff fba8 	bl	800d662 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800df12:	9b01      	ldr	r3, [sp, #4]
 800df14:	2025      	movs	r0, #37	; 0x25
 800df16:	0a19      	lsrs	r1, r3, #8
 800df18:	f7ff fba3 	bl	800d662 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800df1c:	466b      	mov	r3, sp
 800df1e:	2026      	movs	r0, #38	; 0x26
 800df20:	7919      	ldrb	r1, [r3, #4]
 800df22:	f7ff fb9e 	bl	800d662 <SX1276Write>
            if( fixLen == 1 )
 800df26:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800df28:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d100      	bne.n	800df30 <SX1276SetRxConfig+0x124>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800df2e:	21ff      	movs	r1, #255	; 0xff
 800df30:	2032      	movs	r0, #50	; 0x32
 800df32:	f7ff fb96 	bl	800d662 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800df36:	2030      	movs	r0, #48	; 0x30
 800df38:	f7ff fbde 	bl	800d6f8 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800df3c:	216f      	movs	r1, #111	; 0x6f
 800df3e:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800df40:	2100      	movs	r1, #0
 800df42:	9b02      	ldr	r3, [sp, #8]
 800df44:	428b      	cmp	r3, r1
 800df46:	d100      	bne.n	800df4a <SX1276SetRxConfig+0x13e>
 800df48:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 800df4a:	9b04      	ldr	r3, [sp, #16]
 800df4c:	011c      	lsls	r4, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800df4e:	4320      	orrs	r0, r4
 800df50:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800df52:	b2c9      	uxtb	r1, r1
 800df54:	2030      	movs	r0, #48	; 0x30
 800df56:	f7ff fb84 	bl	800d662 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800df5a:	2031      	movs	r0, #49	; 0x31
 800df5c:	f7ff fbcc 	bl	800d6f8 <SX1276Read>
 800df60:	2140      	movs	r1, #64	; 0x40
 800df62:	4301      	orrs	r1, r0
 800df64:	2031      	movs	r0, #49	; 0x31
 800df66:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800df68:	f7ff fb7b 	bl	800d662 <SX1276Write>
}
 800df6c:	e77a      	b.n	800de64 <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 800df6e:	2d02      	cmp	r5, #2
 800df70:	d900      	bls.n	800df74 <SX1276SetRxConfig+0x168>
                while( 1 );
 800df72:	e7fe      	b.n	800df72 <SX1276SetRxConfig+0x166>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800df74:	4b63      	ldr	r3, [pc, #396]	; (800e104 <SX1276SetRxConfig+0x2f8>)
            SX1276.Settings.LoRa.Coderate = coderate;
 800df76:	9906      	ldr	r1, [sp, #24]
 800df78:	001a      	movs	r2, r3
 800df7a:	324d      	adds	r2, #77	; 0x4d
 800df7c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800df7e:	001a      	movs	r2, r3
 800df80:	9901      	ldr	r1, [sp, #4]
 800df82:	324e      	adds	r2, #78	; 0x4e
 800df84:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800df86:	001a      	movs	r2, r3
 800df88:	9902      	ldr	r1, [sp, #8]
 800df8a:	3250      	adds	r2, #80	; 0x50
 800df8c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800df8e:	001a      	movs	r2, r3
 800df90:	9903      	ldr	r1, [sp, #12]
 800df92:	3251      	adds	r2, #81	; 0x51
 800df94:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800df96:	001a      	movs	r2, r3
 800df98:	9904      	ldr	r1, [sp, #16]
 800df9a:	3252      	adds	r2, #82	; 0x52
 800df9c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800df9e:	001a      	movs	r2, r3
 800dfa0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dfa2:	3253      	adds	r2, #83	; 0x53
 800dfa4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800dfa6:	001a      	movs	r2, r3
 800dfa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfaa:	3254      	adds	r2, #84	; 0x54
 800dfac:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800dfae:	001a      	movs	r2, r3
 800dfb0:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800dfb2:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800dfb4:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800dfb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800dfb8:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800dfba:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800dfbc:	3356      	adds	r3, #86	; 0x56
 800dfbe:	2406      	movs	r4, #6
 800dfc0:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 800dfc2:	2e06      	cmp	r6, #6
 800dfc4:	d303      	bcc.n	800dfce <SX1276SetRxConfig+0x1c2>
 800dfc6:	0034      	movs	r4, r6
 800dfc8:	2e0c      	cmp	r6, #12
 800dfca:	d900      	bls.n	800dfce <SX1276SetRxConfig+0x1c2>
 800dfcc:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800dfce:	2d07      	cmp	r5, #7
 800dfd0:	d17d      	bne.n	800e0ce <SX1276SetRxConfig+0x2c2>
 800dfd2:	0022      	movs	r2, r4
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	3a0b      	subs	r2, #11
 800dfda:	4291      	cmp	r1, r2
 800dfdc:	415b      	adcs	r3, r3
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	4f48      	ldr	r7, [pc, #288]	; (800e104 <SX1276SetRxConfig+0x2f8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800dfe2:	201d      	movs	r0, #29
 800dfe4:	374c      	adds	r7, #76	; 0x4c
 800dfe6:	703b      	strb	r3, [r7, #0]
 800dfe8:	f7ff fb86 	bl	800d6f8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800dfec:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800dfee:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800dff0:	0059      	lsls	r1, r3, #1
 800dff2:	9b02      	ldr	r3, [sp, #8]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800dff4:	0124      	lsls	r4, r4, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800dff6:	4319      	orrs	r1, r3
 800dff8:	012b      	lsls	r3, r5, #4
 800dffa:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800dffc:	b2c9      	uxtb	r1, r1
 800dffe:	f7ff fb30 	bl	800d662 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800e002:	201e      	movs	r0, #30
 800e004:	f7ff fb78 	bl	800d6f8 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800e008:	9b05      	ldr	r3, [sp, #20]
 800e00a:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e00c:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800e00e:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e010:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e012:	4319      	orrs	r1, r3
 800e014:	4321      	orrs	r1, r4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800e016:	2408      	movs	r4, #8
 800e018:	4020      	ands	r0, r4
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e01a:	4301      	orrs	r1, r0
 800e01c:	b2c9      	uxtb	r1, r1
 800e01e:	201e      	movs	r0, #30
 800e020:	f7ff fb1f 	bl	800d662 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e024:	2026      	movs	r0, #38	; 0x26
 800e026:	f7ff fb67 	bl	800d6f8 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e02a:	7839      	ldrb	r1, [r7, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e02c:	43a0      	bics	r0, r4
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e02e:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800e030:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e032:	b2c9      	uxtb	r1, r1
 800e034:	2026      	movs	r0, #38	; 0x26
 800e036:	f7ff fb14 	bl	800d662 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800e03a:	466b      	mov	r3, sp
 800e03c:	201f      	movs	r0, #31
 800e03e:	7d19      	ldrb	r1, [r3, #20]
 800e040:	f7ff fb0f 	bl	800d662 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800e044:	9b01      	ldr	r3, [sp, #4]
 800e046:	2020      	movs	r0, #32
 800e048:	0a19      	lsrs	r1, r3, #8
 800e04a:	f7ff fb0a 	bl	800d662 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800e04e:	466b      	mov	r3, sp
 800e050:	2021      	movs	r0, #33	; 0x21
 800e052:	7919      	ldrb	r1, [r3, #4]
 800e054:	f7ff fb05 	bl	800d662 <SX1276Write>
            if( fixLen == 1 )
 800e058:	9b02      	ldr	r3, [sp, #8]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d003      	beq.n	800e066 <SX1276SetRxConfig+0x25a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800e05e:	2022      	movs	r0, #34	; 0x22
 800e060:	9903      	ldr	r1, [sp, #12]
 800e062:	f7ff fafe 	bl	800d662 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e066:	4b27      	ldr	r3, [pc, #156]	; (800e104 <SX1276SetRxConfig+0x2f8>)
 800e068:	3353      	adds	r3, #83	; 0x53
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00f      	beq.n	800e090 <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e070:	2044      	movs	r0, #68	; 0x44
 800e072:	f7ff fb41 	bl	800d6f8 <SX1276Read>
 800e076:	2180      	movs	r1, #128	; 0x80
 800e078:	4249      	negs	r1, r1
 800e07a:	4301      	orrs	r1, r0
 800e07c:	b2c9      	uxtb	r1, r1
 800e07e:	2044      	movs	r0, #68	; 0x44
 800e080:	f7ff faef 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e084:	4b1f      	ldr	r3, [pc, #124]	; (800e104 <SX1276SetRxConfig+0x2f8>)
 800e086:	2024      	movs	r0, #36	; 0x24
 800e088:	3354      	adds	r3, #84	; 0x54
 800e08a:	7819      	ldrb	r1, [r3, #0]
 800e08c:	f7ff fae9 	bl	800d662 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800e090:	2d09      	cmp	r5, #9
 800e092:	d128      	bne.n	800e0e6 <SX1276SetRxConfig+0x2da>
 800e094:	4a1b      	ldr	r2, [pc, #108]	; (800e104 <SX1276SetRxConfig+0x2f8>)
 800e096:	4b20      	ldr	r3, [pc, #128]	; (800e118 <SX1276SetRxConfig+0x30c>)
 800e098:	6892      	ldr	r2, [r2, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800e09a:	2102      	movs	r1, #2
 800e09c:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d91d      	bls.n	800e0de <SX1276SetRxConfig+0x2d2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800e0a2:	f7ff fade 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800e0a6:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800e0a8:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800e0aa:	f7ff fada 	bl	800d662 <SX1276Write>
            if( datarate == 6 )
 800e0ae:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e0b0:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800e0b2:	2e06      	cmp	r6, #6
 800e0b4:	d81a      	bhi.n	800e0ec <SX1276SetRxConfig+0x2e0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e0b6:	f7ff fb1f 	bl	800d6f8 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e0ba:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e0bc:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e0be:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e0c0:	b2c9      	uxtb	r1, r1
 800e0c2:	2031      	movs	r0, #49	; 0x31
 800e0c4:	f7ff facd 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e0c8:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e0ca:	2037      	movs	r0, #55	; 0x37
 800e0cc:	e74c      	b.n	800df68 <SX1276SetRxConfig+0x15c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e0ce:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e0d0:	2d08      	cmp	r5, #8
 800e0d2:	d185      	bne.n	800dfe0 <SX1276SetRxConfig+0x1d4>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e0d4:	330b      	adds	r3, #11
 800e0d6:	42b3      	cmp	r3, r6
 800e0d8:	419b      	sbcs	r3, r3
 800e0da:	425b      	negs	r3, r3
 800e0dc:	e780      	b.n	800dfe0 <SX1276SetRxConfig+0x1d4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800e0de:	f7ff fac0 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800e0e2:	217f      	movs	r1, #127	; 0x7f
 800e0e4:	e7e0      	b.n	800e0a8 <SX1276SetRxConfig+0x29c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800e0e6:	2103      	movs	r1, #3
 800e0e8:	2036      	movs	r0, #54	; 0x36
 800e0ea:	e7de      	b.n	800e0aa <SX1276SetRxConfig+0x29e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e0ec:	f7ff fb04 	bl	800d6f8 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e0f0:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e0f2:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e0f4:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e0f6:	b2c9      	uxtb	r1, r1
 800e0f8:	2031      	movs	r0, #49	; 0x31
 800e0fa:	f7ff fab2 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e0fe:	210a      	movs	r1, #10
 800e100:	e7e3      	b.n	800e0ca <SX1276SetRxConfig+0x2be>
 800e102:	46c0      	nop			; (mov r8, r8)
 800e104:	20001644 	.word	0x20001644
 800e108:	3ff00000 	.word	0x3ff00000
 800e10c:	40200000 	.word	0x40200000
 800e110:	408f4000 	.word	0x408f4000
 800e114:	417e8480 	.word	0x417e8480
 800e118:	1f4add40 	.word	0x1f4add40

0800e11c <SX1276SetTxConfig>:
{
 800e11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e11e:	b08d      	sub	sp, #52	; 0x34
 800e120:	9304      	str	r3, [sp, #16]
 800e122:	ab12      	add	r3, sp, #72	; 0x48
 800e124:	cb80      	ldmia	r3!, {r7}
 800e126:	9206      	str	r2, [sp, #24]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	0006      	movs	r6, r0
 800e12c:	9307      	str	r3, [sp, #28]
 800e12e:	ab14      	add	r3, sp, #80	; 0x50
 800e130:	881b      	ldrh	r3, [r3, #0]
 800e132:	000c      	movs	r4, r1
 800e134:	9301      	str	r3, [sp, #4]
 800e136:	ab15      	add	r3, sp, #84	; 0x54
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	9302      	str	r3, [sp, #8]
 800e13c:	ab16      	add	r3, sp, #88	; 0x58
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	9303      	str	r3, [sp, #12]
 800e142:	ab17      	add	r3, sp, #92	; 0x5c
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	9308      	str	r3, [sp, #32]
 800e148:	ab18      	add	r3, sp, #96	; 0x60
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	930a      	str	r3, [sp, #40]	; 0x28
 800e14e:	ab19      	add	r3, sp, #100	; 0x64
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 800e154:	4bb5      	ldr	r3, [pc, #724]	; (800e42c <SX1276SetTxConfig+0x310>)
 800e156:	791d      	ldrb	r5, [r3, #4]
 800e158:	2d01      	cmp	r5, #1
 800e15a:	d106      	bne.n	800e16a <SX1276SetTxConfig+0x4e>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d104      	bne.n	800e16a <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 800e160:	f7ff fbfe 	bl	800d960 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 800e164:	0028      	movs	r0, r5
 800e166:	f7f5 fc73 	bl	8003a50 <HAL_Delay>
    SX1276SetModem( modem );
 800e16a:	0030      	movs	r0, r6
 800e16c:	f7ff fd74 	bl	800dc58 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 800e170:	2009      	movs	r0, #9
 800e172:	f7ff fac1 	bl	800d6f8 <SX1276Read>
 800e176:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 800e178:	204d      	movs	r0, #77	; 0x4d
 800e17a:	f7ff fabd 	bl	800d6f8 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800e17e:	4bab      	ldr	r3, [pc, #684]	; (800e42c <SX1276SetTxConfig+0x310>)
    paDac = SX1276Read( REG_PADAC );
 800e180:	0005      	movs	r5, r0
 800e182:	9005      	str	r0, [sp, #20]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800e184:	6898      	ldr	r0, [r3, #8]
 800e186:	f7f6 f8d1 	bl	800432c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 800e18a:	2800      	cmp	r0, #0
 800e18c:	d029      	beq.n	800e1e2 <SX1276SetTxConfig+0xc6>
 800e18e:	3802      	subs	r0, #2
 800e190:	b2c3      	uxtb	r3, r0
 800e192:	2080      	movs	r0, #128	; 0x80
 800e194:	2b01      	cmp	r3, #1
 800e196:	d900      	bls.n	800e19a <SX1276SetTxConfig+0x7e>
    uint8_t board_config = 0;
 800e198:	2000      	movs	r0, #0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800e19a:	237f      	movs	r3, #127	; 0x7f
 800e19c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e19e:	401a      	ands	r2, r3
 800e1a0:	4310      	orrs	r0, r2
 800e1a2:	b241      	sxtb	r1, r0
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800e1a4:	0603      	lsls	r3, r0, #24
 800e1a6:	d52a      	bpl.n	800e1fe <SX1276SetTxConfig+0xe2>
        if( power > 17 )
 800e1a8:	230f      	movs	r3, #15
 800e1aa:	2507      	movs	r5, #7
 800e1ac:	4399      	bics	r1, r3
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800e1ae:	9b05      	ldr	r3, [sp, #20]
        if( power > 17 )
 800e1b0:	2c11      	cmp	r4, #17
 800e1b2:	dd1a      	ble.n	800e1ea <SX1276SetTxConfig+0xce>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800e1b4:	431d      	orrs	r5, r3
 800e1b6:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800e1b8:	1c23      	adds	r3, r4, #0
 800e1ba:	2c14      	cmp	r4, #20
 800e1bc:	dd00      	ble.n	800e1c0 <SX1276SetTxConfig+0xa4>
 800e1be:	2314      	movs	r3, #20
 800e1c0:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800e1c2:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 800e1c4:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800e1c6:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800e1c8:	f7ff fa4b 	bl	800d662 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800e1cc:	0029      	movs	r1, r5
 800e1ce:	204d      	movs	r0, #77	; 0x4d
 800e1d0:	f7ff fa47 	bl	800d662 <SX1276Write>
    switch( modem )
 800e1d4:	2e00      	cmp	r6, #0
 800e1d6:	d021      	beq.n	800e21c <SX1276SetTxConfig+0x100>
 800e1d8:	2e01      	cmp	r6, #1
 800e1da:	d100      	bne.n	800e1de <SX1276SetTxConfig+0xc2>
 800e1dc:	e07f      	b.n	800e2de <SX1276SetTxConfig+0x1c2>
}
 800e1de:	b00d      	add	sp, #52	; 0x34
 800e1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 800e1e2:	2c0e      	cmp	r4, #14
 800e1e4:	ddd9      	ble.n	800e19a <SX1276SetTxConfig+0x7e>
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 800e1e6:	2080      	movs	r0, #128	; 0x80
 800e1e8:	e7d7      	b.n	800e19a <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800e1ea:	43ab      	bics	r3, r5
 800e1ec:	2504      	movs	r5, #4
 800e1ee:	432b      	orrs	r3, r5
 800e1f0:	b2dd      	uxtb	r5, r3
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800e1f2:	1c23      	adds	r3, r4, #0
 800e1f4:	2c02      	cmp	r4, #2
 800e1f6:	da00      	bge.n	800e1fa <SX1276SetTxConfig+0xde>
 800e1f8:	2302      	movs	r3, #2
 800e1fa:	3b02      	subs	r3, #2
 800e1fc:	e7e1      	b.n	800e1c2 <SX1276SetTxConfig+0xa6>
        if( power > 0 )
 800e1fe:	2c00      	cmp	r4, #0
 800e200:	dd05      	ble.n	800e20e <SX1276SetTxConfig+0xf2>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800e202:	1c23      	adds	r3, r4, #0
 800e204:	2c0f      	cmp	r4, #15
 800e206:	dd00      	ble.n	800e20a <SX1276SetTxConfig+0xee>
 800e208:	230f      	movs	r3, #15
 800e20a:	2170      	movs	r1, #112	; 0x70
 800e20c:	e7d9      	b.n	800e1c2 <SX1276SetTxConfig+0xa6>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800e20e:	1c21      	adds	r1, r4, #0
 800e210:	1d23      	adds	r3, r4, #4
 800e212:	da01      	bge.n	800e218 <SX1276SetTxConfig+0xfc>
 800e214:	4b86      	ldr	r3, [pc, #536]	; (800e430 <SX1276SetTxConfig+0x314>)
 800e216:	7819      	ldrb	r1, [r3, #0]
 800e218:	3104      	adds	r1, #4
 800e21a:	e7d3      	b.n	800e1c4 <SX1276SetTxConfig+0xa8>
            SX1276.Settings.Fsk.Power = power;
 800e21c:	4b83      	ldr	r3, [pc, #524]	; (800e42c <SX1276SetTxConfig+0x310>)
            SX1276.Settings.Fsk.Fdev = fdev;
 800e21e:	9a06      	ldr	r2, [sp, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e220:	9902      	ldr	r1, [sp, #8]
            SX1276.Settings.Fsk.Fdev = fdev;
 800e222:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e224:	9a04      	ldr	r2, [sp, #16]
            SX1276.Settings.Fsk.Power = power;
 800e226:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e228:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e22a:	9a01      	ldr	r2, [sp, #4]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800e22c:	9806      	ldr	r0, [sp, #24]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e22e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e230:	1cda      	adds	r2, r3, #3
 800e232:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800e234:	9903      	ldr	r1, [sp, #12]
 800e236:	1d5a      	adds	r2, r3, #5
 800e238:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800e23a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e23c:	1d9a      	adds	r2, r3, #6
 800e23e:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800e240:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 800e242:	61df      	str	r7, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800e244:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800e246:	f7f4 fa6b 	bl	8002720 <__aeabi_ui2d>
 800e24a:	2200      	movs	r2, #0
 800e24c:	4b79      	ldr	r3, [pc, #484]	; (800e434 <SX1276SetTxConfig+0x318>)
 800e24e:	f7f2 ffdf 	bl	8001210 <__aeabi_ddiv>
 800e252:	f7f2 f985 	bl	8000560 <__aeabi_d2uiz>
 800e256:	b284      	uxth	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800e258:	0a21      	lsrs	r1, r4, #8
 800e25a:	2004      	movs	r0, #4
 800e25c:	f7ff fa01 	bl	800d662 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800e260:	b2e1      	uxtb	r1, r4
 800e262:	2005      	movs	r0, #5
 800e264:	f7ff f9fd 	bl	800d662 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800e268:	0038      	movs	r0, r7
 800e26a:	f7f4 fa59 	bl	8002720 <__aeabi_ui2d>
 800e26e:	0002      	movs	r2, r0
 800e270:	000b      	movs	r3, r1
 800e272:	2000      	movs	r0, #0
 800e274:	4970      	ldr	r1, [pc, #448]	; (800e438 <SX1276SetTxConfig+0x31c>)
 800e276:	f7f2 ffcb 	bl	8001210 <__aeabi_ddiv>
 800e27a:	f7f2 f971 	bl	8000560 <__aeabi_d2uiz>
 800e27e:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800e280:	0a21      	lsrs	r1, r4, #8
 800e282:	2002      	movs	r0, #2
 800e284:	f7ff f9ed 	bl	800d662 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800e288:	2003      	movs	r0, #3
 800e28a:	b2e1      	uxtb	r1, r4
 800e28c:	f7ff f9e9 	bl	800d662 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800e290:	9b01      	ldr	r3, [sp, #4]
 800e292:	2025      	movs	r0, #37	; 0x25
 800e294:	0a19      	lsrs	r1, r3, #8
 800e296:	f7ff f9e4 	bl	800d662 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800e29a:	466b      	mov	r3, sp
 800e29c:	2026      	movs	r0, #38	; 0x26
 800e29e:	7919      	ldrb	r1, [r3, #4]
 800e2a0:	f7ff f9df 	bl	800d662 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800e2a4:	2030      	movs	r0, #48	; 0x30
 800e2a6:	f7ff fa27 	bl	800d6f8 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800e2aa:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e2ac:	9b02      	ldr	r3, [sp, #8]
                           RF_PACKETCONFIG1_CRC_MASK &
 800e2ae:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e2b0:	0031      	movs	r1, r6
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <SX1276SetTxConfig+0x19e>
 800e2b6:	2180      	movs	r1, #128	; 0x80
 800e2b8:	4249      	negs	r1, r1
                           ( crcOn << 4 ) );
 800e2ba:	9b03      	ldr	r3, [sp, #12]
 800e2bc:	011c      	lsls	r4, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800e2be:	4320      	orrs	r0, r4
 800e2c0:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800e2c2:	b2c9      	uxtb	r1, r1
 800e2c4:	2030      	movs	r0, #48	; 0x30
 800e2c6:	f7ff f9cc 	bl	800d662 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800e2ca:	2031      	movs	r0, #49	; 0x31
 800e2cc:	f7ff fa14 	bl	800d6f8 <SX1276Read>
 800e2d0:	2140      	movs	r1, #64	; 0x40
 800e2d2:	4301      	orrs	r1, r0
 800e2d4:	2031      	movs	r0, #49	; 0x31
 800e2d6:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e2d8:	f7ff f9c3 	bl	800d662 <SX1276Write>
}
 800e2dc:	e77f      	b.n	800e1de <SX1276SetTxConfig+0xc2>
            SX1276.Settings.LoRa.Power = power;
 800e2de:	4b53      	ldr	r3, [pc, #332]	; (800e42c <SX1276SetTxConfig+0x310>)
 800e2e0:	001a      	movs	r2, r3
 800e2e2:	3240      	adds	r2, #64	; 0x40
 800e2e4:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 800e2e6:	9a04      	ldr	r2, [sp, #16]
 800e2e8:	2a02      	cmp	r2, #2
 800e2ea:	d900      	bls.n	800e2ee <SX1276SetTxConfig+0x1d2>
                while( 1 );
 800e2ec:	e7fe      	b.n	800e2ec <SX1276SetTxConfig+0x1d0>
            SX1276.Settings.LoRa.Coderate = coderate;
 800e2ee:	001a      	movs	r2, r3
 800e2f0:	9907      	ldr	r1, [sp, #28]
 800e2f2:	324d      	adds	r2, #77	; 0x4d
 800e2f4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800e2f6:	001a      	movs	r2, r3
 800e2f8:	9901      	ldr	r1, [sp, #4]
 800e2fa:	324e      	adds	r2, #78	; 0x4e
 800e2fc:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800e2fe:	001a      	movs	r2, r3
 800e300:	9902      	ldr	r1, [sp, #8]
 800e302:	3250      	adds	r2, #80	; 0x50
 800e304:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800e306:	001a      	movs	r2, r3
 800e308:	9908      	ldr	r1, [sp, #32]
 800e30a:	3253      	adds	r2, #83	; 0x53
 800e30c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800e30e:	001a      	movs	r2, r3
 800e310:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e312:	3254      	adds	r2, #84	; 0x54
 800e314:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800e316:	001a      	movs	r2, r3
 800e318:	9903      	ldr	r1, [sp, #12]
 800e31a:	3252      	adds	r2, #82	; 0x52
 800e31c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e31e:	001a      	movs	r2, r3
 800e320:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e322:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800e324:	9d04      	ldr	r5, [sp, #16]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e326:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800e328:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            bandwidth += 7;
 800e32a:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e32c:	2406      	movs	r4, #6
 800e32e:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800e330:	649f      	str	r7, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800e332:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 800e334:	2f06      	cmp	r7, #6
 800e336:	d303      	bcc.n	800e340 <SX1276SetTxConfig+0x224>
 800e338:	003c      	movs	r4, r7
 800e33a:	2f0c      	cmp	r7, #12
 800e33c:	d900      	bls.n	800e340 <SX1276SetTxConfig+0x224>
 800e33e:	240c      	movs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e340:	2d07      	cmp	r5, #7
 800e342:	d160      	bne.n	800e406 <SX1276SetTxConfig+0x2ea>
 800e344:	0022      	movs	r2, r4
 800e346:	2300      	movs	r3, #0
 800e348:	2101      	movs	r1, #1
 800e34a:	3a0b      	subs	r2, #11
 800e34c:	4291      	cmp	r1, r2
 800e34e:	415b      	adcs	r3, r3
 800e350:	b2db      	uxtb	r3, r3
 800e352:	4e36      	ldr	r6, [pc, #216]	; (800e42c <SX1276SetTxConfig+0x310>)
 800e354:	0032      	movs	r2, r6
 800e356:	324c      	adds	r2, #76	; 0x4c
 800e358:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e35a:	9b08      	ldr	r3, [sp, #32]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00f      	beq.n	800e380 <SX1276SetTxConfig+0x264>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e360:	2044      	movs	r0, #68	; 0x44
 800e362:	f7ff f9c9 	bl	800d6f8 <SX1276Read>
 800e366:	2180      	movs	r1, #128	; 0x80
 800e368:	4249      	negs	r1, r1
 800e36a:	4301      	orrs	r1, r0
 800e36c:	b2c9      	uxtb	r1, r1
 800e36e:	2044      	movs	r0, #68	; 0x44
 800e370:	f7ff f977 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e374:	0033      	movs	r3, r6
 800e376:	3354      	adds	r3, #84	; 0x54
 800e378:	2024      	movs	r0, #36	; 0x24
 800e37a:	7819      	ldrb	r1, [r3, #0]
 800e37c:	f7ff f971 	bl	800d662 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e380:	201d      	movs	r0, #29
 800e382:	f7ff f9b9 	bl	800d6f8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e386:	9b07      	ldr	r3, [sp, #28]
 800e388:	012d      	lsls	r5, r5, #4
 800e38a:	0059      	lsls	r1, r3, #1
 800e38c:	9b02      	ldr	r3, [sp, #8]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e38e:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e390:	430b      	orrs	r3, r1
 800e392:	0019      	movs	r1, r3
 800e394:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e396:	b2c9      	uxtb	r1, r1
 800e398:	f7ff f963 	bl	800d662 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800e39c:	201e      	movs	r0, #30
 800e39e:	f7ff f9ab 	bl	800d6f8 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 800e3a2:	210b      	movs	r1, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800e3a4:	9b03      	ldr	r3, [sp, #12]
 800e3a6:	0124      	lsls	r4, r4, #4
 800e3a8:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e3aa:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800e3ac:	4001      	ands	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e3ae:	4321      	orrs	r1, r4
 800e3b0:	b2c9      	uxtb	r1, r1
 800e3b2:	201e      	movs	r0, #30
 800e3b4:	f7ff f955 	bl	800d662 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e3b8:	2026      	movs	r0, #38	; 0x26
 800e3ba:	f7ff f99d 	bl	800d6f8 <SX1276Read>
 800e3be:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e3c0:	364c      	adds	r6, #76	; 0x4c
 800e3c2:	7831      	ldrb	r1, [r6, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e3c4:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e3c6:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800e3c8:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e3ca:	b2c9      	uxtb	r1, r1
 800e3cc:	2026      	movs	r0, #38	; 0x26
 800e3ce:	f7ff f948 	bl	800d662 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800e3d2:	9b01      	ldr	r3, [sp, #4]
 800e3d4:	2020      	movs	r0, #32
 800e3d6:	0a19      	lsrs	r1, r3, #8
 800e3d8:	f7ff f943 	bl	800d662 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800e3dc:	466b      	mov	r3, sp
 800e3de:	2021      	movs	r0, #33	; 0x21
 800e3e0:	7919      	ldrb	r1, [r3, #4]
 800e3e2:	f7ff f93e 	bl	800d662 <SX1276Write>
            if( datarate == 6 )
 800e3e6:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e3e8:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800e3ea:	2f06      	cmp	r7, #6
 800e3ec:	d813      	bhi.n	800e416 <SX1276SetTxConfig+0x2fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e3ee:	f7ff f983 	bl	800d6f8 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e3f2:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e3f4:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e3f6:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e3f8:	b2c9      	uxtb	r1, r1
 800e3fa:	2031      	movs	r0, #49	; 0x31
 800e3fc:	f7ff f931 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e400:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e402:	2037      	movs	r0, #55	; 0x37
 800e404:	e768      	b.n	800e2d8 <SX1276SetTxConfig+0x1bc>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e406:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e408:	2d08      	cmp	r5, #8
 800e40a:	d1a2      	bne.n	800e352 <SX1276SetTxConfig+0x236>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e40c:	330b      	adds	r3, #11
 800e40e:	42bb      	cmp	r3, r7
 800e410:	419b      	sbcs	r3, r3
 800e412:	425b      	negs	r3, r3
 800e414:	e79d      	b.n	800e352 <SX1276SetTxConfig+0x236>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e416:	f7ff f96f 	bl	800d6f8 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e41a:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e41c:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e41e:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e420:	b2c9      	uxtb	r1, r1
 800e422:	2031      	movs	r0, #49	; 0x31
 800e424:	f7ff f91d 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e428:	210a      	movs	r1, #10
 800e42a:	e7ea      	b.n	800e402 <SX1276SetTxConfig+0x2e6>
 800e42c:	20001644 	.word	0x20001644
 800e430:	080133cd 	.word	0x080133cd
 800e434:	404e8480 	.word	0x404e8480
 800e438:	417e8480 	.word	0x417e8480

0800e43c <SX1276SetTxContinuousWave>:
{
 800e43c:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800e43e:	24fa      	movs	r4, #250	; 0xfa
{
 800e440:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 800e442:	00a4      	lsls	r4, r4, #2
 800e444:	4354      	muls	r4, r2
{
 800e446:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 800e448:	f7ff f914 	bl	800d674 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800e44c:	2305      	movs	r3, #5
 800e44e:	9302      	str	r3, [sp, #8]
 800e450:	2396      	movs	r3, #150	; 0x96
 800e452:	2000      	movs	r0, #0
 800e454:	015b      	lsls	r3, r3, #5
 800e456:	0002      	movs	r2, r0
 800e458:	0029      	movs	r1, r5
 800e45a:	9007      	str	r0, [sp, #28]
 800e45c:	9006      	str	r0, [sp, #24]
 800e45e:	9005      	str	r0, [sp, #20]
 800e460:	9004      	str	r0, [sp, #16]
 800e462:	9003      	str	r0, [sp, #12]
 800e464:	9001      	str	r0, [sp, #4]
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	9408      	str	r4, [sp, #32]
 800e46a:	0003      	movs	r3, r0
 800e46c:	f7ff fe56 	bl	800e11c <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800e470:	2031      	movs	r0, #49	; 0x31
 800e472:	f7ff f941 	bl	800d6f8 <SX1276Read>
 800e476:	2540      	movs	r5, #64	; 0x40
 800e478:	43a8      	bics	r0, r5
 800e47a:	b2c1      	uxtb	r1, r0
 800e47c:	2031      	movs	r0, #49	; 0x31
 800e47e:	f7ff f8f0 	bl	800d662 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800e482:	0028      	movs	r0, r5
 800e484:	21f0      	movs	r1, #240	; 0xf0
 800e486:	f7ff f8ec 	bl	800d662 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800e48a:	21a0      	movs	r1, #160	; 0xa0
 800e48c:	2041      	movs	r0, #65	; 0x41
 800e48e:	f7ff f8e8 	bl	800d662 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800e492:	4d08      	ldr	r5, [pc, #32]	; (800e4b4 <SX1276SetTxContinuousWave+0x78>)
 800e494:	0021      	movs	r1, r4
 800e496:	0028      	movs	r0, r5
 800e498:	f000 ff2e 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 800e49c:	2202      	movs	r2, #2
 800e49e:	4b06      	ldr	r3, [pc, #24]	; (800e4b8 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800e4a0:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800e4a2:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800e4a4:	f000 fee6 	bl	800f274 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800e4a8:	2003      	movs	r0, #3
 800e4aa:	f7ff fa28 	bl	800d8fe <SX1276SetOpMode>
}
 800e4ae:	b00b      	add	sp, #44	; 0x2c
 800e4b0:	bd30      	pop	{r4, r5, pc}
 800e4b2:	46c0      	nop			; (mov r8, r8)
 800e4b4:	20001614 	.word	0x20001614
 800e4b8:	20001644 	.word	0x20001644

0800e4bc <SX1276SetMaxPayloadLength>:
{
 800e4bc:	b570      	push	{r4, r5, r6, lr}
 800e4be:	0004      	movs	r4, r0
 800e4c0:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 800e4c2:	f7ff fbc9 	bl	800dc58 <SX1276SetModem>
    switch( modem )
 800e4c6:	2c00      	cmp	r4, #0
 800e4c8:	d002      	beq.n	800e4d0 <SX1276SetMaxPayloadLength+0x14>
 800e4ca:	2c01      	cmp	r4, #1
 800e4cc:	d00a      	beq.n	800e4e4 <SX1276SetMaxPayloadLength+0x28>
}
 800e4ce:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800e4d0:	4b06      	ldr	r3, [pc, #24]	; (800e4ec <SX1276SetMaxPayloadLength+0x30>)
 800e4d2:	3303      	adds	r3, #3
 800e4d4:	7fdb      	ldrb	r3, [r3, #31]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1f9      	bne.n	800e4ce <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800e4da:	0029      	movs	r1, r5
 800e4dc:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800e4de:	f7ff f8c0 	bl	800d662 <SX1276Write>
}
 800e4e2:	e7f4      	b.n	800e4ce <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800e4e4:	0029      	movs	r1, r5
 800e4e6:	2023      	movs	r0, #35	; 0x23
 800e4e8:	e7f9      	b.n	800e4de <SX1276SetMaxPayloadLength+0x22>
 800e4ea:	46c0      	nop			; (mov r8, r8)
 800e4ec:	20001644 	.word	0x20001644

0800e4f0 <SX1276SetPublicNetwork>:
{
 800e4f0:	b510      	push	{r4, lr}
 800e4f2:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 800e4f4:	2001      	movs	r0, #1
 800e4f6:	f7ff fbaf 	bl	800dc58 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800e4fa:	4b05      	ldr	r3, [pc, #20]	; (800e510 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800e4fc:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800e4fe:	335c      	adds	r3, #92	; 0x5c
 800e500:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800e502:	2c00      	cmp	r4, #0
 800e504:	d100      	bne.n	800e508 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800e506:	2112      	movs	r1, #18
 800e508:	2039      	movs	r0, #57	; 0x39
 800e50a:	f7ff f8aa 	bl	800d662 <SX1276Write>
}
 800e50e:	bd10      	pop	{r4, pc}
 800e510:	20001644 	.word	0x20001644

0800e514 <SX1276OnTimeoutIrq>:
{
 800e514:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800e516:	4c2a      	ldr	r4, [pc, #168]	; (800e5c0 <SX1276OnTimeoutIrq+0xac>)
 800e518:	7923      	ldrb	r3, [r4, #4]
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d002      	beq.n	800e524 <SX1276OnTimeoutIrq+0x10>
 800e51e:	2b02      	cmp	r3, #2
 800e520:	d029      	beq.n	800e576 <SX1276OnTimeoutIrq+0x62>
}
 800e522:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 800e524:	7963      	ldrb	r3, [r4, #5]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d117      	bne.n	800e55a <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800e52a:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800e52c:	210b      	movs	r1, #11
 800e52e:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800e530:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800e532:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800e534:	f7ff f895 	bl	800d662 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800e538:	2110      	movs	r1, #16
 800e53a:	203f      	movs	r0, #63	; 0x3f
 800e53c:	f7ff f891 	bl	800d662 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800e540:	1de3      	adds	r3, r4, #7
 800e542:	7fdb      	ldrb	r3, [r3, #31]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d011      	beq.n	800e56c <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800e548:	200d      	movs	r0, #13
 800e54a:	f7ff f8d5 	bl	800d6f8 <SX1276Read>
 800e54e:	2140      	movs	r1, #64	; 0x40
 800e550:	4301      	orrs	r1, r0
 800e552:	b2c9      	uxtb	r1, r1
 800e554:	200d      	movs	r0, #13
 800e556:	f7ff f884 	bl	800d662 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e55a:	4b1a      	ldr	r3, [pc, #104]	; (800e5c4 <SX1276OnTimeoutIrq+0xb0>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0df      	beq.n	800e522 <SX1276OnTimeoutIrq+0xe>
 800e562:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e564:	2b00      	cmp	r3, #0
 800e566:	d0dc      	beq.n	800e522 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 800e568:	4798      	blx	r3
}
 800e56a:	e7da      	b.n	800e522 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800e56c:	4816      	ldr	r0, [pc, #88]	; (800e5c8 <SX1276OnTimeoutIrq+0xb4>)
                SX1276.Settings.State = RF_IDLE;
 800e56e:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 800e570:	f000 fe2c 	bl	800f1cc <UTIL_TIMER_Stop>
 800e574:	e7f1      	b.n	800e55a <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 800e576:	f7f5 ff03 	bl	8004380 <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 800e57a:	f7ff f8c7 	bl	800d70c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800e57e:	2000      	movs	r0, #0
 800e580:	f7ff f9bd 	bl	800d8fe <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e584:	4e11      	ldr	r6, [pc, #68]	; (800e5cc <SX1276OnTimeoutIrq+0xb8>)
 800e586:	0035      	movs	r5, r6
 800e588:	363c      	adds	r6, #60	; 0x3c
 800e58a:	350c      	adds	r5, #12
            SX1276SetModem( RadioRegsInit[i].Modem );
 800e58c:	7828      	ldrb	r0, [r5, #0]
 800e58e:	f7ff fb63 	bl	800dc58 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800e592:	78a9      	ldrb	r1, [r5, #2]
 800e594:	7868      	ldrb	r0, [r5, #1]
 800e596:	3503      	adds	r5, #3
 800e598:	f7ff f863 	bl	800d662 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e59c:	42b5      	cmp	r5, r6
 800e59e:	d1f5      	bne.n	800e58c <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	f7ff fb59 	bl	800dc58 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800e5a6:	0023      	movs	r3, r4
 800e5a8:	335c      	adds	r3, #92	; 0x5c
 800e5aa:	7818      	ldrb	r0, [r3, #0]
 800e5ac:	f7ff ffa0 	bl	800e4f0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e5b4:	4b03      	ldr	r3, [pc, #12]	; (800e5c4 <SX1276OnTimeoutIrq+0xb0>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d0b2      	beq.n	800e522 <SX1276OnTimeoutIrq+0xe>
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	e7d1      	b.n	800e564 <SX1276OnTimeoutIrq+0x50>
 800e5c0:	20001644 	.word	0x20001644
 800e5c4:	20000e90 	.word	0x20000e90
 800e5c8:	2000162c 	.word	0x2000162c
 800e5cc:	08012be0 	.word	0x08012be0

0800e5d0 <SX1276Send>:
{
 800e5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5d2:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 800e5d4:	4c60      	ldr	r4, [pc, #384]	; (800e758 <SX1276Send+0x188>)
{
 800e5d6:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 800e5d8:	7965      	ldrb	r5, [r4, #5]
{
 800e5da:	1dde      	adds	r6, r3, #7
 800e5dc:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 800e5de:	2d00      	cmp	r5, #0
 800e5e0:	d01a      	beq.n	800e618 <SX1276Send+0x48>
 800e5e2:	2d01      	cmp	r5, #1
 800e5e4:	d044      	beq.n	800e670 <SX1276Send+0xa0>
 800e5e6:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 800e5e8:	485c      	ldr	r0, [pc, #368]	; (800e75c <SX1276Send+0x18c>)
 800e5ea:	f000 fdef 	bl	800f1cc <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800e5ee:	4d5c      	ldr	r5, [pc, #368]	; (800e760 <SX1276Send+0x190>)
 800e5f0:	0031      	movs	r1, r6
 800e5f2:	0028      	movs	r0, r5
 800e5f4:	f000 fe80 	bl	800f2f8 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 800e5f8:	7963      	ldrb	r3, [r4, #5]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d100      	bne.n	800e600 <SX1276Send+0x30>
 800e5fe:	e076      	b.n	800e6ee <SX1276Send+0x11e>
 800e600:	2b01      	cmp	r3, #1
 800e602:	d100      	bne.n	800e606 <SX1276Send+0x36>
 800e604:	e08c      	b.n	800e720 <SX1276Send+0x150>
    SX1276.Settings.State = RF_TX_RUNNING;
 800e606:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 800e608:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800e60a:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 800e60c:	f000 fe32 	bl	800f274 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800e610:	2003      	movs	r0, #3
 800e612:	f7ff f974 	bl	800d8fe <SX1276SetOpMode>
}
 800e616:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
 800e618:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800e61a:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800e61c:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800e61e:	1ce3      	adds	r3, r4, #3
 800e620:	7fd8      	ldrb	r0, [r3, #31]
 800e622:	2800      	cmp	r0, #0
 800e624:	d117      	bne.n	800e656 <SX1276Send+0x86>
    SX1276WriteBuffer( 0, buffer, size );
 800e626:	2201      	movs	r2, #1
 800e628:	0031      	movs	r1, r6
 800e62a:	f7ff f802 	bl	800d632 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 800e62e:	7832      	ldrb	r2, [r6, #0]
 800e630:	1e53      	subs	r3, r2, #1
 800e632:	2b3f      	cmp	r3, #63	; 0x3f
 800e634:	d813      	bhi.n	800e65e <SX1276Send+0x8e>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800e636:	0023      	movs	r3, r4
 800e638:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800e63a:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800e63c:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800e63e:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 800e640:	782a      	ldrb	r2, [r5, #0]
 800e642:	0039      	movs	r1, r7
 800e644:	2000      	movs	r0, #0
 800e646:	f7fe fff4 	bl	800d632 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800e64a:	782b      	ldrb	r3, [r5, #0]
 800e64c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800e64e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800e650:	189b      	adds	r3, r3, r2
 800e652:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 800e654:	e7c8      	b.n	800e5e8 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800e656:	2032      	movs	r0, #50	; 0x32
 800e658:	f7ff f803 	bl	800d662 <SX1276Write>
 800e65c:	e7e7      	b.n	800e62e <SX1276Send+0x5e>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 800e65e:	b292      	uxth	r2, r2
 800e660:	0039      	movs	r1, r7
 800e662:	4840      	ldr	r0, [pc, #256]	; (800e764 <SX1276Send+0x194>)
 800e664:	f000 fbf6 	bl	800ee54 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800e668:	0023      	movs	r3, r4
 800e66a:	2220      	movs	r2, #32
 800e66c:	333f      	adds	r3, #63	; 0x3f
 800e66e:	e7e4      	b.n	800e63a <SX1276Send+0x6a>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800e670:	0023      	movs	r3, r4
 800e672:	3355      	adds	r3, #85	; 0x55
 800e674:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800e676:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d02c      	beq.n	800e6d6 <SX1276Send+0x106>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800e67c:	f7ff f83c 	bl	800d6f8 <SX1276Read>
 800e680:	2341      	movs	r3, #65	; 0x41
 800e682:	4398      	bics	r0, r3
 800e684:	b2c1      	uxtb	r1, r0
 800e686:	2033      	movs	r0, #51	; 0x33
 800e688:	f7fe ffeb 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800e68c:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800e68e:	203b      	movs	r0, #59	; 0x3b
 800e690:	f7fe ffe7 	bl	800d662 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800e694:	0023      	movs	r3, r4
 800e696:	7831      	ldrb	r1, [r6, #0]
 800e698:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800e69a:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800e69c:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800e69e:	f7fe ffe0 	bl	800d662 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	200e      	movs	r0, #14
 800e6a6:	f7fe ffdc 	bl	800d662 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	200d      	movs	r0, #13
 800e6ae:	f7fe ffd8 	bl	800d662 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800e6b2:	2001      	movs	r0, #1
 800e6b4:	f7ff f820 	bl	800d6f8 <SX1276Read>
 800e6b8:	23f8      	movs	r3, #248	; 0xf8
 800e6ba:	4398      	bics	r0, r3
 800e6bc:	d104      	bne.n	800e6c8 <SX1276Send+0xf8>
                SX1276SetStby( );
 800e6be:	f7ff f96b 	bl	800d998 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 800e6c2:	2001      	movs	r0, #1
 800e6c4:	f7f5 f9c4 	bl	8003a50 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 800e6c8:	7832      	ldrb	r2, [r6, #0]
 800e6ca:	0039      	movs	r1, r7
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	f7fe ffb0 	bl	800d632 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800e6d2:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 800e6d4:	e788      	b.n	800e5e8 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800e6d6:	f7ff f80f 	bl	800d6f8 <SX1276Read>
 800e6da:	2341      	movs	r3, #65	; 0x41
 800e6dc:	0001      	movs	r1, r0
 800e6de:	4399      	bics	r1, r3
 800e6e0:	4329      	orrs	r1, r5
 800e6e2:	b2c9      	uxtb	r1, r1
 800e6e4:	2033      	movs	r0, #51	; 0x33
 800e6e6:	f7fe ffbc 	bl	800d662 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800e6ea:	211d      	movs	r1, #29
 800e6ec:	e7cf      	b.n	800e68e <SX1276Send+0xbe>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800e6ee:	2040      	movs	r0, #64	; 0x40
 800e6f0:	f7ff f802 	bl	800d6f8 <SX1276Read>
 800e6f4:	2103      	movs	r1, #3
 800e6f6:	4001      	ands	r1, r0
 800e6f8:	2040      	movs	r0, #64	; 0x40
 800e6fa:	f7fe ffb2 	bl	800d662 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800e6fe:	2041      	movs	r0, #65	; 0x41
 800e700:	f7fe fffa 	bl	800d6f8 <SX1276Read>
 800e704:	213e      	movs	r1, #62	; 0x3e
 800e706:	4001      	ands	r1, r0
 800e708:	2041      	movs	r0, #65	; 0x41
 800e70a:	f7fe ffaa 	bl	800d662 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800e70e:	2035      	movs	r0, #53	; 0x35
 800e710:	f7fe fff2 	bl	800d6f8 <SX1276Read>
 800e714:	233f      	movs	r3, #63	; 0x3f
 800e716:	4018      	ands	r0, r3
 800e718:	0023      	movs	r3, r4
 800e71a:	333e      	adds	r3, #62	; 0x3e
 800e71c:	7018      	strb	r0, [r3, #0]
        break;
 800e71e:	e772      	b.n	800e606 <SX1276Send+0x36>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e720:	0023      	movs	r3, r4
 800e722:	3353      	adds	r3, #83	; 0x53
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00d      	beq.n	800e746 <SX1276Send+0x176>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800e72a:	21f5      	movs	r1, #245	; 0xf5
 800e72c:	2011      	movs	r0, #17
 800e72e:	f7fe ff98 	bl	800d662 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800e732:	2040      	movs	r0, #64	; 0x40
 800e734:	f7fe ffe0 	bl	800d6f8 <SX1276Read>
 800e738:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800e73a:	4001      	ands	r1, r0
 800e73c:	2040      	movs	r0, #64	; 0x40
 800e73e:	4301      	orrs	r1, r0
 800e740:	f7fe ff8f 	bl	800d662 <SX1276Write>
 800e744:	e75f      	b.n	800e606 <SX1276Send+0x36>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800e746:	21f7      	movs	r1, #247	; 0xf7
 800e748:	2011      	movs	r0, #17
 800e74a:	f7fe ff8a 	bl	800d662 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800e74e:	2040      	movs	r0, #64	; 0x40
 800e750:	f7fe ffd2 	bl	800d6f8 <SX1276Read>
 800e754:	213f      	movs	r1, #63	; 0x3f
 800e756:	e7f0      	b.n	800e73a <SX1276Send+0x16a>
 800e758:	20001644 	.word	0x20001644
 800e75c:	200016ac 	.word	0x200016ac
 800e760:	20001614 	.word	0x20001614
 800e764:	20000e94 	.word	0x20000e94

0800e768 <SX1276OnDio1Irq>:
{
 800e768:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800e76a:	4c38      	ldr	r4, [pc, #224]	; (800e84c <SX1276OnDio1Irq+0xe4>)
 800e76c:	7925      	ldrb	r5, [r4, #4]
 800e76e:	2d01      	cmp	r5, #1
 800e770:	d002      	beq.n	800e778 <SX1276OnDio1Irq+0x10>
 800e772:	2d02      	cmp	r5, #2
 800e774:	d04e      	beq.n	800e814 <SX1276OnDio1Irq+0xac>
}
 800e776:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800e778:	7963      	ldrb	r3, [r4, #5]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d017      	beq.n	800e7ae <SX1276OnDio1Irq+0x46>
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d1f9      	bne.n	800e776 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800e782:	f7f5 fe41 	bl	8004408 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800e786:	2800      	cmp	r0, #0
 800e788:	d0f5      	beq.n	800e776 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800e78a:	4831      	ldr	r0, [pc, #196]	; (800e850 <SX1276OnDio1Irq+0xe8>)
 800e78c:	f000 fd1e 	bl	800f1cc <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800e790:	2180      	movs	r1, #128	; 0x80
 800e792:	2012      	movs	r0, #18
 800e794:	f7fe ff65 	bl	800d662 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800e798:	2300      	movs	r3, #0
 800e79a:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e79c:	4b2d      	ldr	r3, [pc, #180]	; (800e854 <SX1276OnDio1Irq+0xec>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d0e8      	beq.n	800e776 <SX1276OnDio1Irq+0xe>
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d0e5      	beq.n	800e776 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800e7aa:	4798      	blx	r3
 800e7ac:	e7e3      	b.n	800e776 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800e7ae:	f7f5 fe2b 	bl	8004408 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	d0df      	beq.n	800e776 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800e7b6:	4828      	ldr	r0, [pc, #160]	; (800e858 <SX1276OnDio1Irq+0xf0>)
 800e7b8:	f000 fd08 	bl	800f1cc <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800e7bc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800e7be:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	d107      	bne.n	800e7d4 <SX1276OnDio1Irq+0x6c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800e7c4:	1ce3      	adds	r3, r4, #3
 800e7c6:	7fd8      	ldrb	r0, [r3, #31]
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d118      	bne.n	800e7fe <SX1276OnDio1Irq+0x96>
    SX1276ReadBuffer( 0, buffer, size );
 800e7cc:	002a      	movs	r2, r5
 800e7ce:	4923      	ldr	r1, [pc, #140]	; (800e85c <SX1276OnDio1Irq+0xf4>)
 800e7d0:	f7fe ff7a 	bl	800d6c8 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800e7d4:	0025      	movs	r5, r4
 800e7d6:	353e      	adds	r5, #62	; 0x3e
 800e7d8:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800e7da:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800e7dc:	4920      	ldr	r1, [pc, #128]	; (800e860 <SX1276OnDio1Irq+0xf8>)
 800e7de:	782b      	ldrb	r3, [r5, #0]
 800e7e0:	1841      	adds	r1, r0, r1
 800e7e2:	1a12      	subs	r2, r2, r0
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	db0f      	blt.n	800e808 <SX1276OnDio1Irq+0xa0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800e7e8:	3b01      	subs	r3, #1
    SX1276ReadBuffer( 0, buffer, size );
 800e7ea:	b2da      	uxtb	r2, r3
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	f7fe ff6b 	bl	800d6c8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800e7f2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800e7f4:	782b      	ldrb	r3, [r5, #0]
 800e7f6:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800e7f8:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800e7fa:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 800e7fc:	e7bb      	b.n	800e776 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800e7fe:	2032      	movs	r0, #50	; 0x32
 800e800:	f7fe ff7a 	bl	800d6f8 <SX1276Read>
 800e804:	8760      	strh	r0, [r4, #58]	; 0x3a
 800e806:	e7e5      	b.n	800e7d4 <SX1276OnDio1Irq+0x6c>
    SX1276ReadBuffer( 0, buffer, size );
 800e808:	2000      	movs	r0, #0
 800e80a:	b2d2      	uxtb	r2, r2
 800e80c:	f7fe ff5c 	bl	800d6c8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800e810:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800e812:	e7f2      	b.n	800e7fa <SX1276OnDio1Irq+0x92>
            switch( SX1276.Settings.Modem )
 800e814:	7965      	ldrb	r5, [r4, #5]
 800e816:	2d00      	cmp	r5, #0
 800e818:	d1ad      	bne.n	800e776 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 800e81a:	f7f5 fdf5 	bl	8004408 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800e81e:	2801      	cmp	r0, #1
 800e820:	d0a9      	beq.n	800e776 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800e822:	0026      	movs	r6, r4
 800e824:	363f      	adds	r6, #63	; 0x3f
 800e826:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800e828:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800e82a:	490d      	ldr	r1, [pc, #52]	; (800e860 <SX1276OnDio1Irq+0xf8>)
 800e82c:	7832      	ldrb	r2, [r6, #0]
 800e82e:	1841      	adds	r1, r0, r1
 800e830:	1a1b      	subs	r3, r3, r0
 800e832:	4293      	cmp	r3, r2
 800e834:	dd05      	ble.n	800e842 <SX1276OnDio1Irq+0xda>
    SX1276WriteBuffer( 0, buffer, size );
 800e836:	0028      	movs	r0, r5
 800e838:	f7fe fefb 	bl	800d632 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800e83c:	7833      	ldrb	r3, [r6, #0]
 800e83e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800e840:	e7da      	b.n	800e7f8 <SX1276OnDio1Irq+0x90>
    SX1276WriteBuffer( 0, buffer, size );
 800e842:	0028      	movs	r0, r5
 800e844:	b2da      	uxtb	r2, r3
 800e846:	f7fe fef4 	bl	800d632 <SX1276WriteBuffer>
 800e84a:	e7e1      	b.n	800e810 <SX1276OnDio1Irq+0xa8>
 800e84c:	20001644 	.word	0x20001644
 800e850:	200016ac 	.word	0x200016ac
 800e854:	20000e90 	.word	0x20000e90
 800e858:	2000162c 	.word	0x2000162c
 800e85c:	2000167e 	.word	0x2000167e
 800e860:	20000e94 	.word	0x20000e94

0800e864 <SX1276OnDio0Irq>:
{
 800e864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 800e866:	466b      	mov	r3, sp
 800e868:	1ddd      	adds	r5, r3, #7
 800e86a:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 800e86c:	4c8a      	ldr	r4, [pc, #552]	; (800ea98 <SX1276OnDio0Irq+0x234>)
    volatile uint8_t irqFlags = 0;
 800e86e:	702b      	strb	r3, [r5, #0]
    switch( SX1276.Settings.State )
 800e870:	7923      	ldrb	r3, [r4, #4]
 800e872:	2b01      	cmp	r3, #1
 800e874:	d003      	beq.n	800e87e <SX1276OnDio0Irq+0x1a>
 800e876:	2b02      	cmp	r3, #2
 800e878:	d100      	bne.n	800e87c <SX1276OnDio0Irq+0x18>
 800e87a:	e0f9      	b.n	800ea70 <SX1276OnDio0Irq+0x20c>
}
 800e87c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 800e87e:	7963      	ldrb	r3, [r4, #5]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d024      	beq.n	800e8ce <SX1276OnDio0Irq+0x6a>
 800e884:	2b01      	cmp	r3, #1
 800e886:	d1f9      	bne.n	800e87c <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800e888:	2140      	movs	r1, #64	; 0x40
 800e88a:	2012      	movs	r0, #18
 800e88c:	f7fe fee9 	bl	800d662 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800e890:	2012      	movs	r0, #18
 800e892:	f7fe ff31 	bl	800d6f8 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800e896:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800e898:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800e89a:	782b      	ldrb	r3, [r5, #0]
 800e89c:	4e7f      	ldr	r6, [pc, #508]	; (800ea9c <SX1276OnDio0Irq+0x238>)
 800e89e:	4d80      	ldr	r5, [pc, #512]	; (800eaa0 <SX1276OnDio0Irq+0x23c>)
 800e8a0:	420b      	tst	r3, r1
 800e8a2:	d100      	bne.n	800e8a6 <SX1276OnDio0Irq+0x42>
 800e8a4:	e088      	b.n	800e9b8 <SX1276OnDio0Irq+0x154>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800e8a6:	2012      	movs	r0, #18
 800e8a8:	f7fe fedb 	bl	800d662 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800e8ac:	0023      	movs	r3, r4
 800e8ae:	3356      	adds	r3, #86	; 0x56
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d100      	bne.n	800e8b8 <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 800e8b6:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 800e8b8:	0030      	movs	r0, r6
 800e8ba:	f000 fc87 	bl	800f1cc <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800e8be:	682b      	ldr	r3, [r5, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d0db      	beq.n	800e87c <SX1276OnDio0Irq+0x18>
 800e8c4:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d0d8      	beq.n	800e87c <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 800e8ca:	4798      	blx	r3
}
 800e8cc:	e7d6      	b.n	800e87c <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800e8ce:	1d63      	adds	r3, r4, #5
 800e8d0:	7fdb      	ldrb	r3, [r3, #31]
 800e8d2:	4f72      	ldr	r7, [pc, #456]	; (800ea9c <SX1276OnDio0Irq+0x238>)
 800e8d4:	4e72      	ldr	r6, [pc, #456]	; (800eaa0 <SX1276OnDio0Irq+0x23c>)
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d02f      	beq.n	800e93a <SX1276OnDio0Irq+0xd6>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800e8da:	203f      	movs	r0, #63	; 0x3f
 800e8dc:	f7fe ff0c 	bl	800d6f8 <SX1276Read>
 800e8e0:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800e8e2:	782b      	ldrb	r3, [r5, #0]
 800e8e4:	079b      	lsls	r3, r3, #30
 800e8e6:	d428      	bmi.n	800e93a <SX1276OnDio0Irq+0xd6>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800e8e8:	210b      	movs	r1, #11
 800e8ea:	203e      	movs	r0, #62	; 0x3e
 800e8ec:	f7fe feb9 	bl	800d662 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800e8f0:	2110      	movs	r1, #16
 800e8f2:	203f      	movs	r0, #63	; 0x3f
 800e8f4:	f7fe feb5 	bl	800d662 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800e8f8:	0038      	movs	r0, r7
 800e8fa:	f000 fc67 	bl	800f1cc <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800e8fe:	1de3      	adds	r3, r4, #7
 800e900:	7fdd      	ldrb	r5, [r3, #31]
 800e902:	2d00      	cmp	r5, #0
 800e904:	d10f      	bne.n	800e926 <SX1276OnDio0Irq+0xc2>
                            TimerStop( &RxTimeoutSyncWord );
 800e906:	4867      	ldr	r0, [pc, #412]	; (800eaa4 <SX1276OnDio0Irq+0x240>)
 800e908:	f000 fc60 	bl	800f1cc <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 800e90c:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800e90e:	6833      	ldr	r3, [r6, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d003      	beq.n	800e91c <SX1276OnDio0Irq+0xb8>
 800e914:	691b      	ldr	r3, [r3, #16]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d000      	beq.n	800e91c <SX1276OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 800e91a:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800e91c:	2300      	movs	r3, #0
 800e91e:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800e920:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800e922:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 800e924:	e7aa      	b.n	800e87c <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800e926:	200d      	movs	r0, #13
 800e928:	f7fe fee6 	bl	800d6f8 <SX1276Read>
 800e92c:	2140      	movs	r1, #64	; 0x40
 800e92e:	4301      	orrs	r1, r0
 800e930:	b2c9      	uxtb	r1, r1
 800e932:	200d      	movs	r0, #13
 800e934:	f7fe fe95 	bl	800d662 <SX1276Write>
 800e938:	e7e9      	b.n	800e90e <SX1276OnDio0Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800e93a:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800e93c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800e93e:	0013      	movs	r3, r2
 800e940:	4d59      	ldr	r5, [pc, #356]	; (800eaa8 <SX1276OnDio0Irq+0x244>)
 800e942:	430b      	orrs	r3, r1
 800e944:	d109      	bne.n	800e95a <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800e946:	1ce3      	adds	r3, r4, #3
 800e948:	7fd8      	ldrb	r0, [r3, #31]
 800e94a:	2800      	cmp	r0, #0
 800e94c:	d125      	bne.n	800e99a <SX1276OnDio0Irq+0x136>
    SX1276ReadBuffer( 0, buffer, size );
 800e94e:	2201      	movs	r2, #1
 800e950:	4956      	ldr	r1, [pc, #344]	; (800eaac <SX1276OnDio0Irq+0x248>)
 800e952:	f7fe feb9 	bl	800d6c8 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e956:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800e958:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e95a:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800e95c:	2000      	movs	r0, #0
 800e95e:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e960:	1869      	adds	r1, r5, r1
    SX1276ReadBuffer( 0, buffer, size );
 800e962:	f7fe feb1 	bl	800d6c8 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e966:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 800e968:	0038      	movs	r0, r7
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e96a:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 800e96c:	f000 fc2e 	bl	800f1cc <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800e970:	1de3      	adds	r3, r4, #7
 800e972:	7fdb      	ldrb	r3, [r3, #31]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d115      	bne.n	800e9a4 <SX1276OnDio0Irq+0x140>
                    TimerStop( &RxTimeoutSyncWord );
 800e978:	484a      	ldr	r0, [pc, #296]	; (800eaa4 <SX1276OnDio0Irq+0x240>)
                    SX1276.Settings.State = RF_IDLE;
 800e97a:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 800e97c:	f000 fc26 	bl	800f1cc <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800e980:	6833      	ldr	r3, [r6, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d0ca      	beq.n	800e91c <SX1276OnDio0Irq+0xb8>
 800e986:	689e      	ldr	r6, [r3, #8]
 800e988:	2e00      	cmp	r6, #0
 800e98a:	d0c7      	beq.n	800e91c <SX1276OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800e98c:	2232      	movs	r2, #50	; 0x32
 800e98e:	2300      	movs	r3, #0
 800e990:	0028      	movs	r0, r5
 800e992:	56a2      	ldrsb	r2, [r4, r2]
 800e994:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800e996:	47b0      	blx	r6
 800e998:	e7c0      	b.n	800e91c <SX1276OnDio0Irq+0xb8>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800e99a:	2032      	movs	r0, #50	; 0x32
 800e99c:	f7fe feac 	bl	800d6f8 <SX1276Read>
 800e9a0:	8760      	strh	r0, [r4, #58]	; 0x3a
 800e9a2:	e7d8      	b.n	800e956 <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800e9a4:	200d      	movs	r0, #13
 800e9a6:	f7fe fea7 	bl	800d6f8 <SX1276Read>
 800e9aa:	2140      	movs	r1, #64	; 0x40
 800e9ac:	4301      	orrs	r1, r0
 800e9ae:	b2c9      	uxtb	r1, r1
 800e9b0:	200d      	movs	r0, #13
 800e9b2:	f7fe fe56 	bl	800d662 <SX1276Write>
 800e9b6:	e7e3      	b.n	800e980 <SX1276OnDio0Irq+0x11c>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800e9b8:	2019      	movs	r0, #25
 800e9ba:	f7fe fe9d 	bl	800d6f8 <SX1276Read>
 800e9be:	0027      	movs	r7, r4
 800e9c0:	b240      	sxtb	r0, r0
 800e9c2:	3002      	adds	r0, #2
 800e9c4:	3760      	adds	r7, #96	; 0x60
 800e9c6:	1080      	asrs	r0, r0, #2
 800e9c8:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800e9ca:	201a      	movs	r0, #26
 800e9cc:	f7fe fe94 	bl	800d6f8 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	0021      	movs	r1, r4
 800e9d4:	b203      	sxth	r3, r0
 800e9d6:	111b      	asrs	r3, r3, #4
 800e9d8:	56ba      	ldrsb	r2, [r7, r2]
 800e9da:	b29f      	uxth	r7, r3
 800e9dc:	4b34      	ldr	r3, [pc, #208]	; (800eab0 <SX1276OnDio0Irq+0x24c>)
 800e9de:	b280      	uxth	r0, r0
 800e9e0:	469c      	mov	ip, r3
 800e9e2:	3162      	adds	r1, #98	; 0x62
 800e9e4:	2a00      	cmp	r2, #0
 800e9e6:	da3a      	bge.n	800ea5e <SX1276OnDio0Irq+0x1fa>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800e9e8:	b293      	uxth	r3, r2
 800e9ea:	68a2      	ldr	r2, [r4, #8]
 800e9ec:	4562      	cmp	r2, ip
 800e9ee:	d934      	bls.n	800ea5a <SX1276OnDio0Irq+0x1f6>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800e9f0:	3b9d      	subs	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800e9f2:	18c3      	adds	r3, r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800e9f4:	18fb      	adds	r3, r7, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800e9f6:	2013      	movs	r0, #19
 800e9f8:	0027      	movs	r7, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800e9fa:	800b      	strh	r3, [r1, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800e9fc:	f7fe fe7c 	bl	800d6f8 <SX1276Read>
 800ea00:	3764      	adds	r7, #100	; 0x64
 800ea02:	7038      	strb	r0, [r7, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800ea04:	2010      	movs	r0, #16
 800ea06:	f7fe fe77 	bl	800d6f8 <SX1276Read>
 800ea0a:	0001      	movs	r1, r0
 800ea0c:	200d      	movs	r0, #13
 800ea0e:	f7fe fe28 	bl	800d662 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 800ea12:	783a      	ldrb	r2, [r7, #0]
 800ea14:	4f24      	ldr	r7, [pc, #144]	; (800eaa8 <SX1276OnDio0Irq+0x244>)
 800ea16:	2000      	movs	r0, #0
 800ea18:	0039      	movs	r1, r7
 800ea1a:	f7fe fe55 	bl	800d6c8 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800ea1e:	0023      	movs	r3, r4
 800ea20:	3356      	adds	r3, #86	; 0x56
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d100      	bne.n	800ea2a <SX1276OnDio0Irq+0x1c6>
                        SX1276.Settings.State = RF_IDLE;
 800ea28:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 800ea2a:	0030      	movs	r0, r6
 800ea2c:	f000 fbce 	bl	800f1cc <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800ea30:	682b      	ldr	r3, [r5, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d100      	bne.n	800ea38 <SX1276OnDio0Irq+0x1d4>
 800ea36:	e721      	b.n	800e87c <SX1276OnDio0Irq+0x18>
 800ea38:	689d      	ldr	r5, [r3, #8]
 800ea3a:	2d00      	cmp	r5, #0
 800ea3c:	d100      	bne.n	800ea40 <SX1276OnDio0Irq+0x1dc>
 800ea3e:	e71d      	b.n	800e87c <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800ea40:	0023      	movs	r3, r4
 800ea42:	0022      	movs	r2, r4
 800ea44:	3360      	adds	r3, #96	; 0x60
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	3464      	adds	r4, #100	; 0x64
 800ea4a:	3262      	adds	r2, #98	; 0x62
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	5e52      	ldrsh	r2, [r2, r1]
 800ea50:	0038      	movs	r0, r7
 800ea52:	7821      	ldrb	r1, [r4, #0]
 800ea54:	b25b      	sxtb	r3, r3
 800ea56:	47a8      	blx	r5
 800ea58:	e710      	b.n	800e87c <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800ea5a:	3ba4      	subs	r3, #164	; 0xa4
 800ea5c:	e7c9      	b.n	800e9f2 <SX1276OnDio0Irq+0x18e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800ea5e:	68a3      	ldr	r3, [r4, #8]
 800ea60:	4563      	cmp	r3, ip
 800ea62:	d902      	bls.n	800ea6a <SX1276OnDio0Irq+0x206>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800ea64:	0003      	movs	r3, r0
 800ea66:	3b9d      	subs	r3, #157	; 0x9d
 800ea68:	e7c4      	b.n	800e9f4 <SX1276OnDio0Irq+0x190>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800ea6a:	0003      	movs	r3, r0
 800ea6c:	3ba4      	subs	r3, #164	; 0xa4
 800ea6e:	e7c1      	b.n	800e9f4 <SX1276OnDio0Irq+0x190>
            TimerStop( &TxTimeoutTimer );
 800ea70:	4810      	ldr	r0, [pc, #64]	; (800eab4 <SX1276OnDio0Irq+0x250>)
 800ea72:	f000 fbab 	bl	800f1cc <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 800ea76:	7963      	ldrb	r3, [r4, #5]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d103      	bne.n	800ea84 <SX1276OnDio0Irq+0x220>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800ea7c:	2108      	movs	r1, #8
 800ea7e:	2012      	movs	r0, #18
 800ea80:	f7fe fdef 	bl	800d662 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800ea84:	2300      	movs	r3, #0
 800ea86:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800ea88:	4b05      	ldr	r3, [pc, #20]	; (800eaa0 <SX1276OnDio0Irq+0x23c>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d100      	bne.n	800ea92 <SX1276OnDio0Irq+0x22e>
 800ea90:	e6f4      	b.n	800e87c <SX1276OnDio0Irq+0x18>
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	e717      	b.n	800e8c6 <SX1276OnDio0Irq+0x62>
 800ea96:	46c0      	nop			; (mov r8, r8)
 800ea98:	20001644 	.word	0x20001644
 800ea9c:	200016ac 	.word	0x200016ac
 800eaa0:	20000e90 	.word	0x20000e90
 800eaa4:	2000162c 	.word	0x2000162c
 800eaa8:	20000e94 	.word	0x20000e94
 800eaac:	2000167e 	.word	0x2000167e
 800eab0:	1f4add40 	.word	0x1f4add40
 800eab4:	20001614 	.word	0x20001614

0800eab8 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800eab8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800eabe:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800eac0:	4b16      	ldr	r3, [pc, #88]	; (800eb1c <TRACE_AllocateBufer+0x64>)
 800eac2:	8a5d      	ldrh	r5, [r3, #18]
 800eac4:	8a1a      	ldrh	r2, [r3, #16]
 800eac6:	4295      	cmp	r5, r2
 800eac8:	d114      	bne.n	800eaf4 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800eaca:	2280      	movs	r2, #128	; 0x80
 800eacc:	0092      	lsls	r2, r2, #2
 800eace:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800ead0:	b292      	uxth	r2, r2
 800ead2:	4290      	cmp	r0, r2
 800ead4:	d306      	bcc.n	800eae4 <TRACE_AllocateBufer+0x2c>
 800ead6:	4285      	cmp	r5, r0
 800ead8:	d916      	bls.n	800eb08 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800eada:	2201      	movs	r2, #1
 800eadc:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800eade:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800eae0:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800eae2:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800eae4:	8a5a      	ldrh	r2, [r3, #18]
 800eae6:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800eae8:	1812      	adds	r2, r2, r0
 800eaea:	05d2      	lsls	r2, r2, #23
 800eaec:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 800eaee:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800eaf0:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800eaf2:	e00b      	b.n	800eb0c <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800eaf4:	4295      	cmp	r5, r2
 800eaf6:	d90c      	bls.n	800eb12 <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800eaf8:	2680      	movs	r6, #128	; 0x80
 800eafa:	00b6      	lsls	r6, r6, #2
 800eafc:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800eafe:	b2b6      	uxth	r6, r6
 800eb00:	4286      	cmp	r6, r0
 800eb02:	d8ef      	bhi.n	800eae4 <TRACE_AllocateBufer+0x2c>
 800eb04:	4282      	cmp	r2, r0
 800eb06:	d8e8      	bhi.n	800eada <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 800eb08:	2001      	movs	r0, #1
 800eb0a:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb0c:	f384 8810 	msr	PRIMASK, r4
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 800eb10:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800eb12:	1b52      	subs	r2, r2, r5
  if (freesize > Size)
 800eb14:	b292      	uxth	r2, r2
 800eb16:	4282      	cmp	r2, r0
 800eb18:	d8e4      	bhi.n	800eae4 <TRACE_AllocateBufer+0x2c>
 800eb1a:	e7f5      	b.n	800eb08 <TRACE_AllocateBufer+0x50>
 800eb1c:	20000f94 	.word	0x20000f94

0800eb20 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb20:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800eb24:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800eb26:	4a03      	ldr	r2, [pc, #12]	; (800eb34 <TRACE_Lock+0x14>)
 800eb28:	8ad3      	ldrh	r3, [r2, #22]
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb2e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800eb32:	4770      	bx	lr
 800eb34:	20000f94 	.word	0x20000f94

0800eb38 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb38:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800eb3c:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800eb3e:	4a03      	ldr	r2, [pc, #12]	; (800eb4c <TRACE_UnLock+0x14>)
 800eb40:	8ad3      	ldrh	r3, [r2, #22]
 800eb42:	3b01      	subs	r3, #1
 800eb44:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb46:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800eb4a:	4770      	bx	lr
 800eb4c:	20000f94 	.word	0x20000f94

0800eb50 <UTIL_ADV_TRACE_Init>:
{
 800eb50:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800eb52:	2218      	movs	r2, #24
 800eb54:	2100      	movs	r1, #0
 800eb56:	4807      	ldr	r0, [pc, #28]	; (800eb74 <UTIL_ADV_TRACE_Init+0x24>)
 800eb58:	f000 f986 	bl	800ee68 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800eb5c:	2280      	movs	r2, #128	; 0x80
 800eb5e:	2100      	movs	r1, #0
 800eb60:	4805      	ldr	r0, [pc, #20]	; (800eb78 <UTIL_ADV_TRACE_Init+0x28>)
 800eb62:	0092      	lsls	r2, r2, #2
 800eb64:	f000 f980 	bl	800ee68 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800eb68:	4b04      	ldr	r3, [pc, #16]	; (800eb7c <UTIL_ADV_TRACE_Init+0x2c>)
 800eb6a:	4805      	ldr	r0, [pc, #20]	; (800eb80 <UTIL_ADV_TRACE_Init+0x30>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	4798      	blx	r3
}
 800eb70:	bd10      	pop	{r4, pc}
 800eb72:	46c0      	nop			; (mov r8, r8)
 800eb74:	20000f94 	.word	0x20000f94
 800eb78:	200010ac 	.word	0x200010ac
 800eb7c:	080126f0 	.word	0x080126f0
 800eb80:	0800eced 	.word	0x0800eced

0800eb84 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 800eb84:	4b01      	ldr	r3, [pc, #4]	; (800eb8c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800eb86:	6058      	str	r0, [r3, #4]
}
 800eb88:	4770      	bx	lr
 800eb8a:	46c0      	nop			; (mov r8, r8)
 800eb8c:	20000f94 	.word	0x20000f94

0800eb90 <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800eb90:	4b01      	ldr	r3, [pc, #4]	; (800eb98 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800eb92:	7218      	strb	r0, [r3, #8]
}
 800eb94:	4770      	bx	lr
 800eb96:	46c0      	nop			; (mov r8, r8)
 800eb98:	20000f94 	.word	0x20000f94

0800eb9c <TRACE_Send>:
{
 800eb9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb9e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800eba2:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800eba4:	4c1b      	ldr	r4, [pc, #108]	; (800ec14 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 800eba6:	8ae5      	ldrh	r5, [r4, #22]
 800eba8:	2d00      	cmp	r5, #0
 800ebaa:	d12e      	bne.n	800ec0a <TRACE_Send+0x6e>
    TRACE_Lock();
 800ebac:	f7ff ffb8 	bl	800eb20 <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800ebb0:	8a20      	ldrh	r0, [r4, #16]
 800ebb2:	8a62      	ldrh	r2, [r4, #18]
 800ebb4:	4290      	cmp	r0, r2
 800ebb6:	d026      	beq.n	800ec06 <TRACE_Send+0x6a>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800ebb8:	78a1      	ldrb	r1, [r4, #2]
 800ebba:	2901      	cmp	r1, #1
 800ebbc:	d110      	bne.n	800ebe0 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800ebbe:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ebc0:	3101      	adds	r1, #1
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800ebc2:	1a1b      	subs	r3, r3, r0
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ebc8:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800ebca:	8025      	strh	r5, [r4, #0]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d109      	bne.n	800ebe4 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ebd0:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800ebd2:	8223      	strh	r3, [r4, #16]
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ebd4:	8a23      	ldrh	r3, [r4, #16]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d912      	bls.n	800ec00 <TRACE_Send+0x64>
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ebda:	1ad2      	subs	r2, r2, r3
 800ebdc:	82a2      	strh	r2, [r4, #20]
 800ebde:	e001      	b.n	800ebe4 <TRACE_Send+0x48>
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800ebe0:	2900      	cmp	r1, #0
 800ebe2:	d0f7      	beq.n	800ebd4 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800ebe4:	8a25      	ldrh	r5, [r4, #16]
 800ebe6:	4b0c      	ldr	r3, [pc, #48]	; (800ec18 <TRACE_Send+0x7c>)
 800ebe8:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebea:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook(); 
 800ebee:	f7f4 ff1d 	bl	8003a2c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ebf2:	4b0a      	ldr	r3, [pc, #40]	; (800ec1c <TRACE_Send+0x80>)
 800ebf4:	8aa1      	ldrh	r1, [r4, #20]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	0028      	movs	r0, r5
 800ebfa:	9301      	str	r3, [sp, #4]
 800ebfc:	4798      	blx	r3
}
 800ebfe:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ec00:	2280      	movs	r2, #128	; 0x80
 800ec02:	0092      	lsls	r2, r2, #2
 800ec04:	e7e9      	b.n	800ebda <TRACE_Send+0x3e>
      TRACE_UnLock();
 800ec06:	f7ff ff97 	bl	800eb38 <TRACE_UnLock>
 800ec0a:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 800ec0e:	2000      	movs	r0, #0
}
 800ec10:	e7f5      	b.n	800ebfe <TRACE_Send+0x62>
 800ec12:	46c0      	nop			; (mov r8, r8)
 800ec14:	20000f94 	.word	0x20000f94
 800ec18:	200010ac 	.word	0x200010ac
 800ec1c:	080126f0 	.word	0x080126f0

0800ec20 <UTIL_ADV_TRACE_COND_FSend>:
{
 800ec20:	b408      	push	{r3}
 800ec22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec24:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800ec26:	2300      	movs	r3, #0
 800ec28:	466c      	mov	r4, sp
 800ec2a:	8023      	strh	r3, [r4, #0]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800ec2c:	4b2c      	ldr	r3, [pc, #176]	; (800ece0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800ec2e:	7a1c      	ldrb	r4, [r3, #8]
 800ec30:	4284      	cmp	r4, r0
 800ec32:	d350      	bcc.n	800ecd6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800ec34:	68d8      	ldr	r0, [r3, #12]
 800ec36:	4008      	ands	r0, r1
 800ec38:	4288      	cmp	r0, r1
 800ec3a:	d14e      	bne.n	800ecda <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d004      	beq.n	800ec4c <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800ec42:	2a00      	cmp	r2, #0
 800ec44:	d002      	beq.n	800ec4c <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800ec46:	4669      	mov	r1, sp
 800ec48:	a802      	add	r0, sp, #8
 800ec4a:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ec4c:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 800ec4e:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ec50:	0049      	lsls	r1, r1, #1
 800ec52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec54:	4823      	ldr	r0, [pc, #140]	; (800ece4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800ec56:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ec58:	f000 fbb0 	bl	800f3bc <tiny_vsnprintf_like>
 800ec5c:	0005      	movs	r5, r0
  TRACE_Lock();
 800ec5e:	f7ff ff5f 	bl	800eb20 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800ec62:	466b      	mov	r3, sp
 800ec64:	8818      	ldrh	r0, [r3, #0]
 800ec66:	1c9c      	adds	r4, r3, #2
 800ec68:	1940      	adds	r0, r0, r5
 800ec6a:	0021      	movs	r1, r4
 800ec6c:	b280      	uxth	r0, r0
 800ec6e:	f7ff ff23 	bl	800eab8 <TRACE_AllocateBufer>
 800ec72:	1c43      	adds	r3, r0, #1
 800ec74:	d02a      	beq.n	800eccc <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 800ec76:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800ec78:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800ec7a:	466b      	mov	r3, sp
 800ec7c:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800ec7e:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800ec80:	881b      	ldrh	r3, [r3, #0]
 800ec82:	8826      	ldrh	r6, [r4, #0]
 800ec84:	4818      	ldr	r0, [pc, #96]	; (800ece8 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800ec86:	b297      	uxth	r7, r2
 800ec88:	19f1      	adds	r1, r6, r7
 800ec8a:	b289      	uxth	r1, r1
 800ec8c:	42bb      	cmp	r3, r7
 800ec8e:	d815      	bhi.n	800ecbc <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800ec90:	199b      	adds	r3, r3, r6
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	2d00      	cmp	r5, #0
 800ec96:	d000      	beq.n	800ec9a <UTIL_ADV_TRACE_COND_FSend+0x7a>
 800ec98:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ec9a:	2180      	movs	r1, #128	; 0x80
 800ec9c:	8823      	ldrh	r3, [r4, #0]
 800ec9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eca0:	0049      	lsls	r1, r1, #1
 800eca2:	18c0      	adds	r0, r0, r3
 800eca4:	9b01      	ldr	r3, [sp, #4]
 800eca6:	f000 fb89 	bl	800f3bc <tiny_vsnprintf_like>
    TRACE_UnLock();
 800ecaa:	f7ff ff45 	bl	800eb38 <TRACE_UnLock>
    return TRACE_Send();
 800ecae:	f7ff ff75 	bl	800eb9c <TRACE_Send>
}
 800ecb2:	b006      	add	sp, #24
 800ecb4:	bcf0      	pop	{r4, r5, r6, r7}
 800ecb6:	bc08      	pop	{r3}
 800ecb8:	b001      	add	sp, #4
 800ecba:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800ecbc:	466d      	mov	r5, sp
 800ecbe:	2708      	movs	r7, #8
 800ecc0:	19ed      	adds	r5, r5, r7
 800ecc2:	5cad      	ldrb	r5, [r5, r2]
 800ecc4:	3201      	adds	r2, #1
 800ecc6:	5445      	strb	r5, [r0, r1]
 800ecc8:	4665      	mov	r5, ip
 800ecca:	e7dc      	b.n	800ec86 <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800eccc:	f7ff ff34 	bl	800eb38 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800ecd0:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800ecd2:	4240      	negs	r0, r0
 800ecd4:	e7ed      	b.n	800ecb2 <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 800ecd6:	2005      	movs	r0, #5
 800ecd8:	e7fb      	b.n	800ecd2 <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800ecda:	2006      	movs	r0, #6
 800ecdc:	e7f9      	b.n	800ecd2 <UTIL_ADV_TRACE_COND_FSend+0xb2>
 800ecde:	46c0      	nop			; (mov r8, r8)
 800ece0:	20000f94 	.word	0x20000f94
 800ece4:	20000fac 	.word	0x20000fac
 800ece8:	200010ac 	.word	0x200010ac

0800ecec <TRACE_TxCpltCallback>:
{ 
 800ecec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ecf2:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800ecf4:	4b1f      	ldr	r3, [pc, #124]	; (800ed74 <TRACE_TxCpltCallback+0x88>)
 800ecf6:	789a      	ldrb	r2, [r3, #2]
 800ecf8:	2a02      	cmp	r2, #2
 800ecfa:	d11e      	bne.n	800ed3a <TRACE_TxCpltCallback+0x4e>
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800ed00:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800ed02:	8a1d      	ldrh	r5, [r3, #16]
 800ed04:	8a59      	ldrh	r1, [r3, #18]
 800ed06:	428d      	cmp	r5, r1
 800ed08:	d02d      	beq.n	800ed66 <TRACE_TxCpltCallback+0x7a>
 800ed0a:	8ada      	ldrh	r2, [r3, #22]
 800ed0c:	2a01      	cmp	r2, #1
 800ed0e:	d12a      	bne.n	800ed66 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800ed10:	7898      	ldrb	r0, [r3, #2]
 800ed12:	2801      	cmp	r0, #1
 800ed14:	d117      	bne.n	800ed46 <TRACE_TxCpltCallback+0x5a>
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ed16:	3001      	adds	r0, #1
 800ed18:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800ed1a:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800ed1c:	881a      	ldrh	r2, [r3, #0]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800ed1e:	8018      	strh	r0, [r3, #0]
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800ed20:	1b52      	subs	r2, r2, r5
 800ed22:	b292      	uxth	r2, r2
 800ed24:	829a      	strh	r2, [r3, #20]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800ed26:	4282      	cmp	r2, r0
 800ed28:	d10f      	bne.n	800ed4a <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ed2a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800ed2c:	821a      	strh	r2, [r3, #16]
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ed2e:	8a1a      	ldrh	r2, [r3, #16]
 800ed30:	4291      	cmp	r1, r2
 800ed32:	d915      	bls.n	800ed60 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ed34:	1a89      	subs	r1, r1, r2
 800ed36:	8299      	strh	r1, [r3, #20]
 800ed38:	e007      	b.n	800ed4a <TRACE_TxCpltCallback+0x5e>
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800ed3a:	8a1a      	ldrh	r2, [r3, #16]
 800ed3c:	8a99      	ldrh	r1, [r3, #20]
 800ed3e:	1852      	adds	r2, r2, r1
 800ed40:	05d2      	lsls	r2, r2, #23
 800ed42:	0dd2      	lsrs	r2, r2, #23
 800ed44:	e7dc      	b.n	800ed00 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d0f1      	beq.n	800ed2e <TRACE_TxCpltCallback+0x42>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed4a:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 800ed4e:	8a18      	ldrh	r0, [r3, #16]
 800ed50:	8a99      	ldrh	r1, [r3, #20]
 800ed52:	4b09      	ldr	r3, [pc, #36]	; (800ed78 <TRACE_TxCpltCallback+0x8c>)
 800ed54:	18c0      	adds	r0, r0, r3
 800ed56:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <TRACE_TxCpltCallback+0x90>)
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	9301      	str	r3, [sp, #4]
 800ed5c:	4798      	blx	r3
}
 800ed5e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ed60:	2180      	movs	r1, #128	; 0x80
 800ed62:	0089      	lsls	r1, r1, #2
 800ed64:	e7e6      	b.n	800ed34 <TRACE_TxCpltCallback+0x48>
    UTIL_ADV_TRACE_PostSendHook();      
 800ed66:	f7f4 fe67 	bl	8003a38 <UTIL_ADV_TRACE_PostSendHook>
 800ed6a:	f384 8810 	msr	PRIMASK, r4
    TRACE_UnLock();
 800ed6e:	f7ff fee3 	bl	800eb38 <TRACE_UnLock>
}
 800ed72:	e7f4      	b.n	800ed5e <TRACE_TxCpltCallback+0x72>
 800ed74:	20000f94 	.word	0x20000f94
 800ed78:	200010ac 	.word	0x200010ac
 800ed7c:	080126f0 	.word	0x080126f0

0800ed80 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ed80:	2200      	movs	r2, #0
 800ed82:	4b02      	ldr	r3, [pc, #8]	; (800ed8c <UTIL_LPM_Init+0xc>)
 800ed84:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ed86:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ed88:	4770      	bx	lr
 800ed8a:	46c0      	nop			; (mov r8, r8)
 800ed8c:	200012ac 	.word	0x200012ac

0800ed90 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ed90:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed92:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ed96:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800ed98:	2900      	cmp	r1, #0
 800ed9a:	d008      	beq.n	800edae <UTIL_LPM_SetStopMode+0x1e>
 800ed9c:	2901      	cmp	r1, #1
 800ed9e:	d103      	bne.n	800eda8 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800eda0:	4b05      	ldr	r3, [pc, #20]	; (800edb8 <UTIL_LPM_SetStopMode+0x28>)
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	4310      	orrs	r0, r2
 800eda6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eda8:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800edac:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800edae:	4a02      	ldr	r2, [pc, #8]	; (800edb8 <UTIL_LPM_SetStopMode+0x28>)
 800edb0:	6813      	ldr	r3, [r2, #0]
 800edb2:	4383      	bics	r3, r0
 800edb4:	6013      	str	r3, [r2, #0]
      break;
 800edb6:	e7f7      	b.n	800eda8 <UTIL_LPM_SetStopMode+0x18>
 800edb8:	200012ac 	.word	0x200012ac

0800edbc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800edbc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edbe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800edc2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800edc4:	2900      	cmp	r1, #0
 800edc6:	d008      	beq.n	800edda <UTIL_LPM_SetOffMode+0x1e>
 800edc8:	2901      	cmp	r1, #1
 800edca:	d103      	bne.n	800edd4 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800edcc:	4b05      	ldr	r3, [pc, #20]	; (800ede4 <UTIL_LPM_SetOffMode+0x28>)
 800edce:	685a      	ldr	r2, [r3, #4]
 800edd0:	4310      	orrs	r0, r2
 800edd2:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edd4:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800edd8:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800edda:	4a02      	ldr	r2, [pc, #8]	; (800ede4 <UTIL_LPM_SetOffMode+0x28>)
 800eddc:	6853      	ldr	r3, [r2, #4]
 800edde:	4383      	bics	r3, r0
 800ede0:	6053      	str	r3, [r2, #4]
      break;
 800ede2:	e7f7      	b.n	800edd4 <UTIL_LPM_SetOffMode+0x18>
 800ede4:	200012ac 	.word	0x200012ac

0800ede8 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ede8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800edec:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800edee:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800edf0:	4b05      	ldr	r3, [pc, #20]	; (800ee08 <UTIL_LPM_GetMode+0x20>)
 800edf2:	6819      	ldr	r1, [r3, #0]
 800edf4:	4281      	cmp	r1, r0
 800edf6:	d103      	bne.n	800ee00 <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800edf8:	6858      	ldr	r0, [r3, #4]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 800edfa:	4243      	negs	r3, r0
 800edfc:	4158      	adcs	r0, r3
 800edfe:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee00:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800ee04:	4770      	bx	lr
 800ee06:	46c0      	nop			; (mov r8, r8)
 800ee08:	200012ac 	.word	0x200012ac

0800ee0c <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800ee0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee0e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ee12:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800ee14:	4b0d      	ldr	r3, [pc, #52]	; (800ee4c <UTIL_LPM_EnterLowPower+0x40>)
 800ee16:	4c0e      	ldr	r4, [pc, #56]	; (800ee50 <UTIL_LPM_EnterLowPower+0x44>)
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	2a00      	cmp	r2, #0
 800ee1c:	d008      	beq.n	800ee30 <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800ee1e:	6823      	ldr	r3, [r4, #0]
 800ee20:	9301      	str	r3, [sp, #4]
 800ee22:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800ee24:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800ee26:	9301      	str	r3, [sp, #4]
 800ee28:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee2a:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800ee2e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d004      	beq.n	800ee40 <UTIL_LPM_EnterLowPower+0x34>
        UTIL_PowerDriver.EnterStopMode( );
 800ee36:	68a3      	ldr	r3, [r4, #8]
 800ee38:	9301      	str	r3, [sp, #4]
 800ee3a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800ee3c:	68e3      	ldr	r3, [r4, #12]
 800ee3e:	e7f2      	b.n	800ee26 <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 800ee40:	6923      	ldr	r3, [r4, #16]
 800ee42:	9301      	str	r3, [sp, #4]
 800ee44:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800ee46:	6963      	ldr	r3, [r4, #20]
 800ee48:	e7ed      	b.n	800ee26 <UTIL_LPM_EnterLowPower+0x1a>
 800ee4a:	46c0      	nop			; (mov r8, r8)
 800ee4c:	200012ac 	.word	0x200012ac
 800ee50:	080126d8 	.word	0x080126d8

0800ee54 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800ee54:	2300      	movs	r3, #0
{
 800ee56:	b510      	push	{r4, lr}
  while( size-- )
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d100      	bne.n	800ee5e <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800ee5c:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800ee5e:	5ccc      	ldrb	r4, [r1, r3]
 800ee60:	54c4      	strb	r4, [r0, r3]
 800ee62:	3301      	adds	r3, #1
 800ee64:	e7f8      	b.n	800ee58 <UTIL_MEM_cpy_8+0x4>
	...

0800ee68 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800ee68:	4b04      	ldr	r3, [pc, #16]	; (800ee7c <UTIL_MEM_set_8+0x14>)
 800ee6a:	3a01      	subs	r2, #1
 800ee6c:	b292      	uxth	r2, r2
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d100      	bne.n	800ee74 <UTIL_MEM_set_8+0xc>
  {
    *dst8++ = value;
  }
}
 800ee72:	4770      	bx	lr
    *dst8++ = value;
 800ee74:	7001      	strb	r1, [r0, #0]
 800ee76:	3001      	adds	r0, #1
 800ee78:	e7f7      	b.n	800ee6a <UTIL_MEM_set_8+0x2>
 800ee7a:	46c0      	nop			; (mov r8, r8)
 800ee7c:	0000ffff 	.word	0x0000ffff

0800ee80 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ee80:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee82:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ee86:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800ee88:	4b05      	ldr	r3, [pc, #20]	; (800eea0 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ee8a:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	4302      	orrs	r2, r0
 800ee90:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ee92:	185b      	adds	r3, r3, r1
 800ee94:	691a      	ldr	r2, [r3, #16]
 800ee96:	4310      	orrs	r0, r2
 800ee98:	6118      	str	r0, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee9a:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800ee9e:	bd10      	pop	{r4, pc}
 800eea0:	200012b4 	.word	0x200012b4

0800eea4 <UTIL_SEQ_PreIdle>:
 800eea4:	4770      	bx	lr

0800eea6 <UTIL_SEQ_PostIdle>:
 800eea6:	4770      	bx	lr

0800eea8 <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 800eea8:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800eeaa:	0c02      	lsrs	r2, r0, #16
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d101      	bne.n	800eeb4 <SEQ_BitPosition+0xc>
 800eeb0:	0400      	lsls	r0, r0, #16
 800eeb2:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800eeb4:	0e02      	lsrs	r2, r0, #24
 800eeb6:	d102      	bne.n	800eebe <SEQ_BitPosition+0x16>
 800eeb8:	3308      	adds	r3, #8
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800eebe:	0f02      	lsrs	r2, r0, #28
 800eec0:	d102      	bne.n	800eec8 <SEQ_BitPosition+0x20>
 800eec2:	3304      	adds	r3, #4
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800eec8:	221f      	movs	r2, #31
 800eeca:	1ad3      	subs	r3, r2, r3
 800eecc:	4a02      	ldr	r2, [pc, #8]	; (800eed8 <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800eece:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800eed0:	5c10      	ldrb	r0, [r2, r0]
 800eed2:	1a18      	subs	r0, r3, r0
 800eed4:	b2c0      	uxtb	r0, r0
}
 800eed6:	4770      	bx	lr
 800eed8:	08012d38 	.word	0x08012d38

0800eedc <UTIL_SEQ_Run>:
{
 800eedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800eede:	4e2f      	ldr	r6, [pc, #188]	; (800ef9c <UTIL_SEQ_Run+0xc0>)
 800eee0:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 800eee2:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 800eee4:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 800eee6:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800eee8:	4c2d      	ldr	r4, [pc, #180]	; (800efa0 <UTIL_SEQ_Run+0xc4>)
 800eeea:	6830      	ldr	r0, [r6, #0]
 800eeec:	6822      	ldr	r2, [r4, #0]
 800eeee:	6873      	ldr	r3, [r6, #4]
 800eef0:	4002      	ands	r2, r0
 800eef2:	4213      	tst	r3, r2
 800eef4:	d037      	beq.n	800ef66 <UTIL_SEQ_Run+0x8a>
 800eef6:	68a1      	ldr	r1, [r4, #8]
 800eef8:	6862      	ldr	r2, [r4, #4]
 800eefa:	000d      	movs	r5, r1
 800eefc:	4015      	ands	r5, r2
 800eefe:	4211      	tst	r1, r2
 800ef00:	d131      	bne.n	800ef66 <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800ef02:	6922      	ldr	r2, [r4, #16]
 800ef04:	4003      	ands	r3, r0
 800ef06:	0010      	movs	r0, r2
 800ef08:	4018      	ands	r0, r3
 800ef0a:	421a      	tst	r2, r3
 800ef0c:	d102      	bne.n	800ef14 <UTIL_SEQ_Run+0x38>
      counter++;
 800ef0e:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800ef10:	69a0      	ldr	r0, [r4, #24]
 800ef12:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ef14:	00ed      	lsls	r5, r5, #3
 800ef16:	1963      	adds	r3, r4, r5
 800ef18:	695a      	ldr	r2, [r3, #20]
 800ef1a:	4202      	tst	r2, r0
 800ef1c:	d102      	bne.n	800ef24 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ef1e:	2201      	movs	r2, #1
 800ef20:	4252      	negs	r2, r2
 800ef22:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ef24:	1965      	adds	r5, r4, r5
 800ef26:	696f      	ldr	r7, [r5, #20]
 800ef28:	4038      	ands	r0, r7
 800ef2a:	f7ff ffbd 	bl	800eea8 <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ef2e:	2301      	movs	r3, #1
 800ef30:	4083      	lsls	r3, r0
 800ef32:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ef34:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ef36:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef38:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ef3c:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ef3e:	2301      	movs	r3, #1
 800ef40:	68e2      	ldr	r2, [r4, #12]
 800ef42:	4093      	lsls	r3, r2
 800ef44:	6822      	ldr	r2, [r4, #0]
 800ef46:	439a      	bics	r2, r3
 800ef48:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800ef4a:	69a2      	ldr	r2, [r4, #24]
 800ef4c:	439a      	bics	r2, r3
 800ef4e:	61a2      	str	r2, [r4, #24]
 800ef50:	6922      	ldr	r2, [r4, #16]
 800ef52:	439a      	bics	r2, r3
 800ef54:	6122      	str	r2, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef56:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800ef5a:	68e3      	ldr	r3, [r4, #12]
 800ef5c:	4a11      	ldr	r2, [pc, #68]	; (800efa4 <UTIL_SEQ_Run+0xc8>)
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	589b      	ldr	r3, [r3, r2]
 800ef62:	4798      	blx	r3
 800ef64:	e7c0      	b.n	800eee8 <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800ef66:	2301      	movs	r3, #1
 800ef68:	425b      	negs	r3, r3
 800ef6a:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 800ef6c:	f7ff ff9a 	bl	800eea4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef70:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ef74:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800ef76:	6822      	ldr	r2, [r4, #0]
 800ef78:	6833      	ldr	r3, [r6, #0]
 800ef7a:	6861      	ldr	r1, [r4, #4]
 800ef7c:	4013      	ands	r3, r2
 800ef7e:	6872      	ldr	r2, [r6, #4]
 800ef80:	4013      	ands	r3, r2
 800ef82:	68a2      	ldr	r2, [r4, #8]
 800ef84:	400a      	ands	r2, r1
 800ef86:	4313      	orrs	r3, r2
 800ef88:	d101      	bne.n	800ef8e <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 800ef8a:	f7f4 fd1d 	bl	80039c8 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef8e:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800ef92:	f7ff ff88 	bl	800eea6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800ef96:	9b01      	ldr	r3, [sp, #4]
 800ef98:	6073      	str	r3, [r6, #4]
}
 800ef9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ef9c:	20000194 	.word	0x20000194
 800efa0:	200012b4 	.word	0x200012b4
 800efa4:	200012d4 	.word	0x200012d4

0800efa8 <UTIL_SEQ_RegTask>:
{
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efac:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800efb0:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800efb2:	f7ff ff79 	bl	800eea8 <SEQ_BitPosition>
 800efb6:	4b03      	ldr	r3, [pc, #12]	; (800efc4 <UTIL_SEQ_RegTask+0x1c>)
 800efb8:	0080      	lsls	r0, r0, #2
 800efba:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efbc:	f385 8810 	msr	PRIMASK, r5
}
 800efc0:	bd70      	pop	{r4, r5, r6, pc}
 800efc2:	46c0      	nop			; (mov r8, r8)
 800efc4:	200012d4 	.word	0x200012d4

0800efc8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800efc8:	b082      	sub	sp, #8
 800efca:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 800efcc:	18c9      	adds	r1, r1, r3
{
 800efce:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800efd0:	ab05      	add	r3, sp, #20
 800efd2:	889c      	ldrh	r4, [r3, #4]
 800efd4:	18a2      	adds	r2, r4, r2
  if( c.SubSeconds >= 1000 )
 800efd6:	24fa      	movs	r4, #250	; 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800efd8:	b293      	uxth	r3, r2
 800efda:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800efdc:	00a4      	lsls	r4, r4, #2
 800efde:	42a2      	cmp	r2, r4
 800efe0:	db03      	blt.n	800efea <SysTimeAdd+0x22>
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800efe2:	4a05      	ldr	r2, [pc, #20]	; (800eff8 <SysTimeAdd+0x30>)
    c.Seconds++;
 800efe4:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 800efe6:	189b      	adds	r3, r3, r2
 800efe8:	b21a      	sxth	r2, r3
  }
  return c;
 800efea:	6001      	str	r1, [r0, #0]
 800efec:	8082      	strh	r2, [r0, #4]
}
 800efee:	bc16      	pop	{r1, r2, r4}
 800eff0:	bc08      	pop	{r3}
 800eff2:	b002      	add	sp, #8
 800eff4:	4718      	bx	r3
 800eff6:	46c0      	nop			; (mov r8, r8)
 800eff8:	fffffc18 	.word	0xfffffc18

0800effc <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800effc:	b082      	sub	sp, #8
 800effe:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 800f000:	1ac9      	subs	r1, r1, r3
{
 800f002:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800f004:	ab05      	add	r3, sp, #20
 800f006:	889b      	ldrh	r3, [r3, #4]
 800f008:	1ad2      	subs	r2, r2, r3
 800f00a:	b293      	uxth	r3, r2
 800f00c:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800f00e:	0412      	lsls	r2, r2, #16
 800f010:	d504      	bpl.n	800f01c <SysTimeSub+0x20>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800f012:	22fa      	movs	r2, #250	; 0xfa
 800f014:	0092      	lsls	r2, r2, #2
 800f016:	189b      	adds	r3, r3, r2
    c.Seconds--;
 800f018:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 800f01a:	b21c      	sxth	r4, r3
  }
  return c;
 800f01c:	6001      	str	r1, [r0, #0]
 800f01e:	8084      	strh	r4, [r0, #4]
}
 800f020:	bc16      	pop	{r1, r2, r4}
 800f022:	bc08      	pop	{r3}
 800f024:	b002      	add	sp, #8
 800f026:	4718      	bx	r3

0800f028 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f028:	2300      	movs	r3, #0
{
 800f02a:	b530      	push	{r4, r5, lr}

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f02c:	4c11      	ldr	r4, [pc, #68]	; (800f074 <SysTimeSet+0x4c>)
{
 800f02e:	b087      	sub	sp, #28
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f030:	ad04      	add	r5, sp, #16
 800f032:	80ab      	strh	r3, [r5, #4]
 800f034:	9304      	str	r3, [sp, #16]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f036:	6923      	ldr	r3, [r4, #16]
{
 800f038:	9002      	str	r0, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f03a:	a805      	add	r0, sp, #20
 800f03c:	9301      	str	r3, [sp, #4]
{
 800f03e:	9103      	str	r1, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f040:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800f042:	9b02      	ldr	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f044:	9004      	str	r0, [sp, #16]
  c.Seconds = a.Seconds - b.Seconds;
 800f046:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800f048:	ab02      	add	r3, sp, #8
 800f04a:	88aa      	ldrh	r2, [r5, #4]
 800f04c:	889b      	ldrh	r3, [r3, #4]
 800f04e:	1a9b      	subs	r3, r3, r2
 800f050:	b29a      	uxth	r2, r3
 800f052:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 800f054:	041b      	lsls	r3, r3, #16
 800f056:	d504      	bpl.n	800f062 <SysTimeSet+0x3a>
    c.SubSeconds += 1000;
 800f058:	23fa      	movs	r3, #250	; 0xfa
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 800f05e:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800f060:	b215      	sxth	r5, r2

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	9301      	str	r3, [sp, #4]
 800f066:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800f068:	68a3      	ldr	r3, [r4, #8]
 800f06a:	0028      	movs	r0, r5
 800f06c:	9301      	str	r3, [sp, #4]
 800f06e:	4798      	blx	r3
}
 800f070:	b007      	add	sp, #28
 800f072:	bd30      	pop	{r4, r5, pc}
 800f074:	08012698 	.word	0x08012698

0800f078 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800f078:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f07a:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f07c:	4e12      	ldr	r6, [pc, #72]	; (800f0c8 <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f07e:	aa02      	add	r2, sp, #8
 800f080:	8093      	strh	r3, [r2, #4]
 800f082:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f084:	6933      	ldr	r3, [r6, #16]
{
 800f086:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f088:	a803      	add	r0, sp, #12
 800f08a:	9301      	str	r3, [sp, #4]
 800f08c:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f08e:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f090:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f092:	9301      	str	r3, [sp, #4]
 800f094:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800f096:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f098:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800f09a:	9301      	str	r3, [sp, #4]
 800f09c:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 800f09e:	22fa      	movs	r2, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 800f0a0:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 800f0a2:	0092      	lsls	r2, r2, #2
  c.Seconds = a.Seconds + b.Seconds;
 800f0a4:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800f0a6:	ab02      	add	r3, sp, #8
 800f0a8:	889b      	ldrh	r3, [r3, #4]
 800f0aa:	195b      	adds	r3, r3, r5
 800f0ac:	b299      	uxth	r1, r3
 800f0ae:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	db03      	blt.n	800f0bc <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 800f0b4:	4b05      	ldr	r3, [pc, #20]	; (800f0cc <SysTimeGet+0x54>)
    c.Seconds++;
 800f0b6:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800f0b8:	18c9      	adds	r1, r1, r3
 800f0ba:	b20b      	sxth	r3, r1

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800f0bc:	6020      	str	r0, [r4, #0]
}
 800f0be:	0020      	movs	r0, r4
  return sysTime;
 800f0c0:	80a3      	strh	r3, [r4, #4]
}
 800f0c2:	b004      	add	sp, #16
 800f0c4:	bd70      	pop	{r4, r5, r6, pc}
 800f0c6:	46c0      	nop			; (mov r8, r8)
 800f0c8:	08012698 	.word	0x08012698
 800f0cc:	fffffc18 	.word	0xfffffc18

0800f0d0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800f0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	466d      	mov	r5, sp
{
 800f0d6:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	80ab      	strh	r3, [r5, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f0dc:	4b04      	ldr	r3, [pc, #16]	; (800f0f0 <SysTimeGetMcuTime+0x20>)
 800f0de:	a801      	add	r0, sp, #4
 800f0e0:	691b      	ldr	r3, [r3, #16]
 800f0e2:	4798      	blx	r3
  
  return calendarTime;
 800f0e4:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f0e6:	9000      	str	r0, [sp, #0]
  return calendarTime;
 800f0e8:	cd06      	ldmia	r5!, {r1, r2}
 800f0ea:	c306      	stmia	r3!, {r1, r2}
}
 800f0ec:	0020      	movs	r0, r4
 800f0ee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800f0f0:	08012698 	.word	0x08012698

0800f0f4 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800f0f4:	2200      	movs	r2, #0
{
 800f0f6:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800f0f8:	4b02      	ldr	r3, [pc, #8]	; (800f104 <UTIL_TIMER_Init+0x10>)
 800f0fa:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800f0fc:	4b02      	ldr	r3, [pc, #8]	; (800f108 <UTIL_TIMER_Init+0x14>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4798      	blx	r3
}
 800f102:	bd10      	pop	{r4, pc}
 800f104:	20001354 	.word	0x20001354
 800f108:	080126ac 	.word	0x080126ac

0800f10c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800f10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f10e:	0004      	movs	r4, r0
 800f110:	0017      	movs	r7, r2
 800f112:	0008      	movs	r0, r1
 800f114:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800f116:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800f118:	2c00      	cmp	r4, #0
 800f11a:	d00f      	beq.n	800f13c <UTIL_TIMER_Create+0x30>
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00d      	beq.n	800f13c <UTIL_TIMER_Create+0x30>
    TimerObject->Timestamp = 0U;
 800f120:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800f122:	4b07      	ldr	r3, [pc, #28]	; (800f140 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 800f124:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800f126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f128:	9301      	str	r3, [sp, #4]
 800f12a:	4798      	blx	r3
    TimerObject->argument = Argument;
 800f12c:	9b08      	ldr	r3, [sp, #32]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800f12e:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800f130:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800f132:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800f134:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800f136:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800f138:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800f13a:	6165      	str	r5, [r4, #20]
  }
}
 800f13c:	0028      	movs	r0, r5
 800f13e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f140:	080126ac 	.word	0x080126ac

0800f144 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800f144:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800f146:	4c03      	ldr	r4, [pc, #12]	; (800f154 <UTIL_TIMER_GetCurrentTime+0x10>)
 800f148:	69e3      	ldr	r3, [r4, #28]
 800f14a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800f14c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f14e:	4798      	blx	r3
}
 800f150:	bd10      	pop	{r4, pc}
 800f152:	46c0      	nop			; (mov r8, r8)
 800f154:	080126ac 	.word	0x080126ac

0800f158 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800f158:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800f15a:	4d06      	ldr	r5, [pc, #24]	; (800f174 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800f15c:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800f15e:	69eb      	ldr	r3, [r5, #28]
 800f160:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800f162:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800f164:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800f166:	0030      	movs	r0, r6
 800f168:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800f16a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f16c:	1a20      	subs	r0, r4, r0
 800f16e:	4798      	blx	r3
}
 800f170:	bd70      	pop	{r4, r5, r6, pc}
 800f172:	46c0      	nop			; (mov r8, r8)
 800f174:	080126ac 	.word	0x080126ac

0800f178 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f178:	4a05      	ldr	r2, [pc, #20]	; (800f190 <TimerExists+0x18>)
{
 800f17a:	0003      	movs	r3, r0
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f17c:	6810      	ldr	r0, [r2, #0]

  while( cur != NULL )
 800f17e:	2800      	cmp	r0, #0
 800f180:	d100      	bne.n	800f184 <TimerExists+0xc>
      return true;
    }
    cur = cur->Next;
  }
  return false;
}
 800f182:	4770      	bx	lr
    if( cur == TimerObject )
 800f184:	4298      	cmp	r0, r3
 800f186:	d001      	beq.n	800f18c <TimerExists+0x14>
    cur = cur->Next;
 800f188:	6940      	ldr	r0, [r0, #20]
 800f18a:	e7f8      	b.n	800f17e <TimerExists+0x6>
      return true;
 800f18c:	2001      	movs	r0, #1
 800f18e:	e7f8      	b.n	800f182 <TimerExists+0xa>
 800f190:	20001354 	.word	0x20001354

0800f194 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800f194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800f196:	4e0c      	ldr	r6, [pc, #48]	; (800f1c8 <TimerSetTimeout+0x34>)
{
 800f198:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800f19a:	6a33      	ldr	r3, [r6, #32]
 800f19c:	9301      	str	r3, [sp, #4]
 800f19e:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800f1a4:	69b3      	ldr	r3, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800f1a6:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800f1a8:	6827      	ldr	r7, [r4, #0]
 800f1aa:	9301      	str	r3, [sp, #4]
 800f1ac:	4798      	blx	r3
 800f1ae:	1940      	adds	r0, r0, r5
 800f1b0:	4287      	cmp	r7, r0
 800f1b2:	d203      	bcs.n	800f1bc <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800f1b4:	9b01      	ldr	r3, [sp, #4]
 800f1b6:	4798      	blx	r3
 800f1b8:	1945      	adds	r5, r0, r5
 800f1ba:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800f1bc:	68b3      	ldr	r3, [r6, #8]
 800f1be:	6820      	ldr	r0, [r4, #0]
 800f1c0:	9301      	str	r3, [sp, #4]
 800f1c2:	4798      	blx	r3
}
 800f1c4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f1c6:	46c0      	nop			; (mov r8, r8)
 800f1c8:	080126ac 	.word	0x080126ac

0800f1cc <UTIL_TIMER_Stop>:
{
 800f1cc:	0003      	movs	r3, r0
 800f1ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 800f1d0:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d016      	beq.n	800f204 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1d6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f1da:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800f1dc:	4c11      	ldr	r4, [pc, #68]	; (800f224 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800f1de:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800f1e0:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 800f1e2:	2a00      	cmp	r2, #0
 800f1e4:	d00b      	beq.n	800f1fe <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d111      	bne.n	800f212 <UTIL_TIMER_Stop+0x46>
 800f1ee:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 800f1f0:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 800f1f2:	428e      	cmp	r6, r1
 800f1f4:	d007      	beq.n	800f206 <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800f1f6:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 800f1f8:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 800f1fa:	f7ff ffcb 	bl	800f194 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1fe:	f385 8810 	msr	PRIMASK, r5
}
 800f202:	2000      	movs	r0, #0
}
 800f204:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800f206:	4b08      	ldr	r3, [pc, #32]	; (800f228 <UTIL_TIMER_Stop+0x5c>)
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	9301      	str	r3, [sp, #4]
 800f20c:	4798      	blx	r3
            TimerListHead = NULL;
 800f20e:	6026      	str	r6, [r4, #0]
 800f210:	e7f5      	b.n	800f1fe <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 800f212:	0011      	movs	r1, r2
 800f214:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 800f216:	2a00      	cmp	r2, #0
 800f218:	d0f1      	beq.n	800f1fe <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d1f9      	bne.n	800f212 <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 800f21e:	695b      	ldr	r3, [r3, #20]
 800f220:	614b      	str	r3, [r1, #20]
 800f222:	e7ec      	b.n	800f1fe <UTIL_TIMER_Stop+0x32>
 800f224:	20001354 	.word	0x20001354
 800f228:	080126ac 	.word	0x080126ac

0800f22c <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f22c:	4b09      	ldr	r3, [pc, #36]	; (800f254 <TimerInsertTimer+0x28>)
 800f22e:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800f230:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 800f232:	6959      	ldr	r1, [r3, #20]
 800f234:	2900      	cmp	r1, #0
 800f236:	d102      	bne.n	800f23e <TimerInsertTimer+0x12>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 800f238:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 800f23a:	6141      	str	r1, [r0, #20]
 800f23c:	e009      	b.n	800f252 <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 800f23e:	6801      	ldr	r1, [r0, #0]
 800f240:	468c      	mov	ip, r1
 800f242:	6811      	ldr	r1, [r2, #0]
 800f244:	458c      	cmp	ip, r1
 800f246:	d902      	bls.n	800f24e <TimerInsertTimer+0x22>
        next = next->Next;
 800f248:	0013      	movs	r3, r2
 800f24a:	6952      	ldr	r2, [r2, #20]
 800f24c:	e7f1      	b.n	800f232 <TimerInsertTimer+0x6>
        cur->Next = TimerObject;
 800f24e:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 800f250:	6142      	str	r2, [r0, #20]
}
 800f252:	4770      	bx	lr
 800f254:	20001354 	.word	0x20001354

0800f258 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f258:	4a05      	ldr	r2, [pc, #20]	; (800f270 <TimerInsertNewHeadTimer+0x18>)
{
 800f25a:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f25c:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d001      	beq.n	800f266 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800f262:	2100      	movs	r1, #0
 800f264:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800f266:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800f268:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800f26a:	f7ff ff93 	bl	800f194 <TimerSetTimeout>
}
 800f26e:	bd10      	pop	{r4, pc}
 800f270:	20001354 	.word	0x20001354

0800f274 <UTIL_TIMER_Start>:
{
 800f274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f276:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 800f278:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d025      	beq.n	800f2ca <UTIL_TIMER_Start+0x56>
 800f27e:	f7ff ff7b 	bl	800f178 <TimerExists>
 800f282:	2800      	cmp	r0, #0
 800f284:	d121      	bne.n	800f2ca <UTIL_TIMER_Start+0x56>
 800f286:	7a65      	ldrb	r5, [r4, #9]
 800f288:	2d00      	cmp	r5, #0
 800f28a:	d12e      	bne.n	800f2ea <UTIL_TIMER_Start+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f28c:	f3ef 8310 	mrs	r3, PRIMASK
 800f290:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800f292:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800f294:	4e16      	ldr	r6, [pc, #88]	; (800f2f0 <UTIL_TIMER_Start+0x7c>)
    ticks = TimerObject->ReloadValue;
 800f296:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800f298:	6a33      	ldr	r3, [r6, #32]
 800f29a:	9301      	str	r3, [sp, #4]
 800f29c:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 800f29e:	4287      	cmp	r7, r0
 800f2a0:	d200      	bcs.n	800f2a4 <UTIL_TIMER_Start+0x30>
 800f2a2:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800f2a4:	2380      	movs	r3, #128	; 0x80
 800f2a6:	005b      	lsls	r3, r3, #1
 800f2a8:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800f2aa:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800f2ac:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800f2ae:	4f11      	ldr	r7, [pc, #68]	; (800f2f4 <UTIL_TIMER_Start+0x80>)
    TimerObject->IsReloadStopped = 0U;
 800f2b0:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d10a      	bne.n	800f2ce <UTIL_TIMER_Start+0x5a>
      UTIL_TimerDriver.SetTimerContext();
 800f2b8:	6933      	ldr	r3, [r6, #16]
 800f2ba:	9301      	str	r3, [sp, #4]
 800f2bc:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800f2be:	0020      	movs	r0, r4
 800f2c0:	f7ff ffca 	bl	800f258 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2c4:	9b00      	ldr	r3, [sp, #0]
 800f2c6:	f383 8810 	msr	PRIMASK, r3
}
 800f2ca:	0028      	movs	r0, r5
 800f2cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800f2ce:	69b3      	ldr	r3, [r6, #24]
 800f2d0:	9301      	str	r3, [sp, #4]
 800f2d2:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800f2d4:	6823      	ldr	r3, [r4, #0]
 800f2d6:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800f2d8:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800f2da:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	4298      	cmp	r0, r3
 800f2e0:	d3ed      	bcc.n	800f2be <UTIL_TIMER_Start+0x4a>
        TimerInsertTimer( TimerObject);
 800f2e2:	0020      	movs	r0, r4
 800f2e4:	f7ff ffa2 	bl	800f22c <TimerInsertTimer>
 800f2e8:	e7ec      	b.n	800f2c4 <UTIL_TIMER_Start+0x50>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800f2ea:	2501      	movs	r5, #1
 800f2ec:	e7ed      	b.n	800f2ca <UTIL_TIMER_Start+0x56>
 800f2ee:	46c0      	nop			; (mov r8, r8)
 800f2f0:	080126ac 	.word	0x080126ac
 800f2f4:	20001354 	.word	0x20001354

0800f2f8 <UTIL_TIMER_SetPeriod>:
{
 800f2f8:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800f2fa:	2301      	movs	r3, #1
{
 800f2fc:	0004      	movs	r4, r0
 800f2fe:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 800f300:	2c00      	cmp	r4, #0
 800f302:	d011      	beq.n	800f328 <UTIL_TIMER_SetPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800f304:	4b09      	ldr	r3, [pc, #36]	; (800f32c <UTIL_TIMER_SetPeriod+0x34>)
 800f306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f308:	9301      	str	r3, [sp, #4]
 800f30a:	4798      	blx	r3
 800f30c:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800f30e:	0020      	movs	r0, r4
 800f310:	f7ff ff32 	bl	800f178 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800f314:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 800f316:	4298      	cmp	r0, r3
 800f318:	d006      	beq.n	800f328 <UTIL_TIMER_SetPeriod+0x30>
      (void)UTIL_TIMER_Stop(TimerObject);
 800f31a:	0020      	movs	r0, r4
 800f31c:	f7ff ff56 	bl	800f1cc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800f320:	0020      	movs	r0, r4
 800f322:	f7ff ffa7 	bl	800f274 <UTIL_TIMER_Start>
 800f326:	0003      	movs	r3, r0
}
 800f328:	0018      	movs	r0, r3
 800f32a:	bd16      	pop	{r1, r2, r4, pc}
 800f32c:	080126ac 	.word	0x080126ac

0800f330 <UTIL_TIMER_IRQ_Handler>:
{
 800f330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f332:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f336:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800f338:	4e1e      	ldr	r6, [pc, #120]	; (800f3b4 <UTIL_TIMER_IRQ_Handler+0x84>)
 800f33a:	6973      	ldr	r3, [r6, #20]
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800f340:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800f342:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800f344:	9301      	str	r3, [sp, #4]
 800f346:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800f348:	4d1b      	ldr	r5, [pc, #108]	; (800f3b8 <UTIL_TIMER_IRQ_Handler+0x88>)
  DeltaContext = now  - old; /*intentional wrap around */
 800f34a:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800f34c:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800f34e:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 800f350:	2b00      	cmp	r3, #0
 800f352:	d01f      	beq.n	800f394 <UTIL_TIMER_IRQ_Handler+0x64>
      if (cur->Timestamp > DeltaContext)
 800f354:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800f356:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 800f358:	4288      	cmp	r0, r1
 800f35a:	d900      	bls.n	800f35e <UTIL_TIMER_IRQ_Handler+0x2e>
        cur->Timestamp -= DeltaContext;
 800f35c:	1822      	adds	r2, r4, r0
 800f35e:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800f360:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800f362:	e7f5      	b.n	800f350 <UTIL_TIMER_IRQ_Handler+0x20>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800f364:	681c      	ldr	r4, [r3, #0]
 800f366:	2c00      	cmp	r4, #0
 800f368:	d004      	beq.n	800f374 <UTIL_TIMER_IRQ_Handler+0x44>
 800f36a:	69b3      	ldr	r3, [r6, #24]
 800f36c:	9301      	str	r3, [sp, #4]
 800f36e:	4798      	blx	r3
 800f370:	4284      	cmp	r4, r0
 800f372:	d212      	bcs.n	800f39a <UTIL_TIMER_IRQ_Handler+0x6a>
      cur = TimerListHead;
 800f374:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800f376:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800f378:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800f37a:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800f37c:	2300      	movs	r3, #0
 800f37e:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800f380:	68e3      	ldr	r3, [r4, #12]
 800f382:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800f384:	2280      	movs	r2, #128	; 0x80
 800f386:	8963      	ldrh	r3, [r4, #10]
 800f388:	0052      	lsls	r2, r2, #1
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d102      	bne.n	800f394 <UTIL_TIMER_IRQ_Handler+0x64>
        (void)UTIL_TIMER_Start(cur);
 800f38e:	0020      	movs	r0, r4
 800f390:	f7ff ff70 	bl	800f274 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800f394:	682b      	ldr	r3, [r5, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d1e4      	bne.n	800f364 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800f39a:	6828      	ldr	r0, [r5, #0]
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d102      	bne.n	800f3a6 <UTIL_TIMER_IRQ_Handler+0x76>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3a0:	f387 8810 	msr	PRIMASK, r7
}
 800f3a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800f3a6:	7a03      	ldrb	r3, [r0, #8]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d1f9      	bne.n	800f3a0 <UTIL_TIMER_IRQ_Handler+0x70>
    TimerSetTimeout( TimerListHead );
 800f3ac:	f7ff fef2 	bl	800f194 <TimerSetTimeout>
 800f3b0:	e7f6      	b.n	800f3a0 <UTIL_TIMER_IRQ_Handler+0x70>
 800f3b2:	46c0      	nop			; (mov r8, r8)
 800f3b4:	080126ac 	.word	0x080126ac
 800f3b8:	20001354 	.word	0x20001354

0800f3bc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800f3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3be:	b09f      	sub	sp, #124	; 0x7c
 800f3c0:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800f3c2:	2000      	movs	r0, #0
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800f3c4:	9c02      	ldr	r4, [sp, #8]
{
 800f3c6:	910a      	str	r1, [sp, #40]	; 0x28
  if (size <= 0)
 800f3c8:	4281      	cmp	r1, r0
 800f3ca:	dc0a      	bgt.n	800f3e2 <tiny_vsnprintf_like+0x26>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800f3cc:	b01f      	add	sp, #124	; 0x7c
 800f3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800f3d0:	4288      	cmp	r0, r1
 800f3d2:	da0d      	bge.n	800f3f0 <tiny_vsnprintf_like+0x34>
    if (*fmt != '%')
 800f3d4:	2d25      	cmp	r5, #37	; 0x25
 800f3d6:	d00e      	beq.n	800f3f6 <tiny_vsnprintf_like+0x3a>
      *str++ = *fmt;
 800f3d8:	7025      	strb	r5, [r4, #0]
      continue;
 800f3da:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800f3dc:	3401      	adds	r4, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800f3de:	9a01      	ldr	r2, [sp, #4]
 800f3e0:	3201      	adds	r2, #1
 800f3e2:	9902      	ldr	r1, [sp, #8]
 800f3e4:	7815      	ldrb	r5, [r2, #0]
 800f3e6:	1a60      	subs	r0, r4, r1
 800f3e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f3ea:	3901      	subs	r1, #1
 800f3ec:	2d00      	cmp	r5, #0
 800f3ee:	d1ef      	bne.n	800f3d0 <tiny_vsnprintf_like+0x14>
  *str = '\0';
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	7023      	strb	r3, [r4, #0]
  return str - buf;
 800f3f4:	e7ea      	b.n	800f3cc <tiny_vsnprintf_like+0x10>
 800f3f6:	1c50      	adds	r0, r2, #1
    if (*fmt == '0')
 800f3f8:	7852      	ldrb	r2, [r2, #1]
 800f3fa:	9001      	str	r0, [sp, #4]
 800f3fc:	0015      	movs	r5, r2
 800f3fe:	3d30      	subs	r5, #48	; 0x30
 800f400:	9205      	str	r2, [sp, #20]
 800f402:	4268      	negs	r0, r5
 800f404:	4168      	adcs	r0, r5
    if (is_digit(*fmt))
 800f406:	b2ed      	uxtb	r5, r5
      flags |= ZEROPAD;
 800f408:	0002      	movs	r2, r0
    if (is_digit(*fmt))
 800f40a:	2d09      	cmp	r5, #9
 800f40c:	d92d      	bls.n	800f46a <tiny_vsnprintf_like+0xae>
    field_width = -1;
 800f40e:	2701      	movs	r7, #1
 800f410:	427f      	negs	r7, r7
    switch (*fmt)
 800f412:	9d01      	ldr	r5, [sp, #4]
 800f414:	782e      	ldrb	r6, [r5, #0]
 800f416:	2e69      	cmp	r6, #105	; 0x69
 800f418:	d100      	bne.n	800f41c <tiny_vsnprintf_like+0x60>
 800f41a:	e0ab      	b.n	800f574 <tiny_vsnprintf_like+0x1b8>
 800f41c:	d827      	bhi.n	800f46e <tiny_vsnprintf_like+0xb2>
 800f41e:	2e63      	cmp	r6, #99	; 0x63
 800f420:	d036      	beq.n	800f490 <tiny_vsnprintf_like+0xd4>
 800f422:	2e64      	cmp	r6, #100	; 0x64
 800f424:	d100      	bne.n	800f428 <tiny_vsnprintf_like+0x6c>
 800f426:	e0a5      	b.n	800f574 <tiny_vsnprintf_like+0x1b8>
 800f428:	2e58      	cmp	r6, #88	; 0x58
 800f42a:	d068      	beq.n	800f4fe <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800f42c:	0020      	movs	r0, r4
 800f42e:	2e25      	cmp	r6, #37	; 0x25
 800f430:	d125      	bne.n	800f47e <tiny_vsnprintf_like+0xc2>
        if (*fmt)
 800f432:	9c01      	ldr	r4, [sp, #4]
 800f434:	7825      	ldrb	r5, [r4, #0]
 800f436:	2d00      	cmp	r5, #0
 800f438:	d100      	bne.n	800f43c <tiny_vsnprintf_like+0x80>
 800f43a:	e09f      	b.n	800f57c <tiny_vsnprintf_like+0x1c0>
          *str++ = *fmt;
 800f43c:	1c44      	adds	r4, r0, #1
 800f43e:	7005      	strb	r5, [r0, #0]
        CHECK_STR_SIZE(buf, str, size);
 800f440:	9802      	ldr	r0, [sp, #8]
    base = 10;
 800f442:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800f444:	1a20      	subs	r0, r4, r0
 800f446:	4288      	cmp	r0, r1
 800f448:	da5c      	bge.n	800f504 <tiny_vsnprintf_like+0x148>
 800f44a:	e7c8      	b.n	800f3de <tiny_vsnprintf_like+0x22>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800f44c:	9e01      	ldr	r6, [sp, #4]
 800f44e:	3601      	adds	r6, #1
 800f450:	9601      	str	r6, [sp, #4]
 800f452:	260a      	movs	r6, #10
 800f454:	4377      	muls	r7, r6
 800f456:	197d      	adds	r5, r7, r5
 800f458:	3d30      	subs	r5, #48	; 0x30
 800f45a:	002f      	movs	r7, r5
 800f45c:	9d01      	ldr	r5, [sp, #4]
 800f45e:	782d      	ldrb	r5, [r5, #0]
 800f460:	002e      	movs	r6, r5
 800f462:	3e30      	subs	r6, #48	; 0x30
 800f464:	2e09      	cmp	r6, #9
 800f466:	d9f1      	bls.n	800f44c <tiny_vsnprintf_like+0x90>
 800f468:	e7d3      	b.n	800f412 <tiny_vsnprintf_like+0x56>
  int i = 0;
 800f46a:	2700      	movs	r7, #0
 800f46c:	e7f6      	b.n	800f45c <tiny_vsnprintf_like+0xa0>
    switch (*fmt)
 800f46e:	2e75      	cmp	r6, #117	; 0x75
 800f470:	d100      	bne.n	800f474 <tiny_vsnprintf_like+0xb8>
 800f472:	e081      	b.n	800f578 <tiny_vsnprintf_like+0x1bc>
 800f474:	2510      	movs	r5, #16
 800f476:	2e78      	cmp	r6, #120	; 0x78
 800f478:	d044      	beq.n	800f504 <tiny_vsnprintf_like+0x148>
 800f47a:	2e73      	cmp	r6, #115	; 0x73
 800f47c:	d020      	beq.n	800f4c0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800f47e:	2525      	movs	r5, #37	; 0x25
 800f480:	1c60      	adds	r0, r4, #1
 800f482:	7025      	strb	r5, [r4, #0]
        CHECK_STR_SIZE(buf, str, size);
 800f484:	9c02      	ldr	r4, [sp, #8]
 800f486:	1b04      	subs	r4, r0, r4
 800f488:	428c      	cmp	r4, r1
 800f48a:	dbd2      	blt.n	800f432 <tiny_vsnprintf_like+0x76>
        if (*fmt != '%') *str++ = '%';
 800f48c:	0004      	movs	r4, r0
 800f48e:	e073      	b.n	800f578 <tiny_vsnprintf_like+0x1bc>
 800f490:	0021      	movs	r1, r4
    switch (*fmt)
 800f492:	003a      	movs	r2, r7
          while (--field_width > 0) *str++ = ' ';
 800f494:	3a01      	subs	r2, #1
 800f496:	2a00      	cmp	r2, #0
 800f498:	dc0e      	bgt.n	800f4b8 <tiny_vsnprintf_like+0xfc>
 800f49a:	2200      	movs	r2, #0
 800f49c:	4297      	cmp	r7, r2
 800f49e:	dd00      	ble.n	800f4a2 <tiny_vsnprintf_like+0xe6>
 800f4a0:	1e7a      	subs	r2, r7, #1
 800f4a2:	2101      	movs	r1, #1
 800f4a4:	18a2      	adds	r2, r4, r2
 800f4a6:	2f00      	cmp	r7, #0
 800f4a8:	dd00      	ble.n	800f4ac <tiny_vsnprintf_like+0xf0>
 800f4aa:	0039      	movs	r1, r7
        *str++ = (unsigned char) va_arg(args, int);
 800f4ac:	001d      	movs	r5, r3
 800f4ae:	cd08      	ldmia	r5!, {r3}
 800f4b0:	1864      	adds	r4, r4, r1
 800f4b2:	7013      	strb	r3, [r2, #0]
        s = va_arg(args, char *);
 800f4b4:	002b      	movs	r3, r5
 800f4b6:	e792      	b.n	800f3de <tiny_vsnprintf_like+0x22>
          while (--field_width > 0) *str++ = ' ';
 800f4b8:	2020      	movs	r0, #32
 800f4ba:	7008      	strb	r0, [r1, #0]
 800f4bc:	3101      	adds	r1, #1
 800f4be:	e7e9      	b.n	800f494 <tiny_vsnprintf_like+0xd8>
        s = va_arg(args, char *);
 800f4c0:	001d      	movs	r5, r3
 800f4c2:	cd40      	ldmia	r5!, {r6}
        if (!s) s = "<NULL>";
 800f4c4:	2e00      	cmp	r6, #0
 800f4c6:	d100      	bne.n	800f4ca <tiny_vsnprintf_like+0x10e>
 800f4c8:	4e50      	ldr	r6, [pc, #320]	; (800f60c <tiny_vsnprintf_like+0x250>)
        len = strlen(s);
 800f4ca:	0030      	movs	r0, r6
 800f4cc:	f7f0 fe1c 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800f4d0:	0023      	movs	r3, r4
 800f4d2:	19e1      	adds	r1, r4, r7
 800f4d4:	1aca      	subs	r2, r1, r3
 800f4d6:	4290      	cmp	r0, r2
 800f4d8:	db09      	blt.n	800f4ee <tiny_vsnprintf_like+0x132>
 800f4da:	2300      	movs	r3, #0
 800f4dc:	4287      	cmp	r7, r0
 800f4de:	db00      	blt.n	800f4e2 <tiny_vsnprintf_like+0x126>
 800f4e0:	1a3b      	subs	r3, r7, r0
 800f4e2:	18e4      	adds	r4, r4, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	4283      	cmp	r3, r0
 800f4e8:	db05      	blt.n	800f4f6 <tiny_vsnprintf_like+0x13a>
 800f4ea:	1824      	adds	r4, r4, r0
 800f4ec:	e7e2      	b.n	800f4b4 <tiny_vsnprintf_like+0xf8>
          while (len < field_width--) *str++ = ' ';
 800f4ee:	2220      	movs	r2, #32
 800f4f0:	701a      	strb	r2, [r3, #0]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	e7ee      	b.n	800f4d4 <tiny_vsnprintf_like+0x118>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800f4f6:	5cf2      	ldrb	r2, [r6, r3]
 800f4f8:	54e2      	strb	r2, [r4, r3]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	e7f3      	b.n	800f4e6 <tiny_vsnprintf_like+0x12a>
        flags |= UPPERCASE;
 800f4fe:	2240      	movs	r2, #64	; 0x40
        base = 16;
 800f500:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 800f502:	4302      	orrs	r2, r0
    else if (flags & SIGN)
 800f504:	2602      	movs	r6, #2
 800f506:	9306      	str	r3, [sp, #24]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800f508:	9b02      	ldr	r3, [sp, #8]
    else if (flags & SIGN)
 800f50a:	4016      	ands	r6, r2
 800f50c:	46b4      	mov	ip, r6
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800f50e:	1ae6      	subs	r6, r4, r3
 800f510:	9b06      	ldr	r3, [sp, #24]
 800f512:	1b8e      	subs	r6, r1, r6
 800f514:	cb01      	ldmia	r3!, {r0}
  if (type & UPPERCASE)  dig = upper_digits;
 800f516:	493e      	ldr	r1, [pc, #248]	; (800f610 <tiny_vsnprintf_like+0x254>)
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800f518:	9306      	str	r3, [sp, #24]
  if (type & UPPERCASE)  dig = upper_digits;
 800f51a:	2340      	movs	r3, #64	; 0x40
 800f51c:	9108      	str	r1, [sp, #32]
 800f51e:	421a      	tst	r2, r3
 800f520:	d101      	bne.n	800f526 <tiny_vsnprintf_like+0x16a>
  char *dig = lower_digits;
 800f522:	4b3c      	ldr	r3, [pc, #240]	; (800f614 <tiny_vsnprintf_like+0x258>)
 800f524:	9308      	str	r3, [sp, #32]
  c = (type & ZEROPAD) ? '0' : ' ';
 800f526:	2330      	movs	r3, #48	; 0x30
 800f528:	9309      	str	r3, [sp, #36]	; 0x24
 800f52a:	9b05      	ldr	r3, [sp, #20]
 800f52c:	2b30      	cmp	r3, #48	; 0x30
 800f52e:	d001      	beq.n	800f534 <tiny_vsnprintf_like+0x178>
 800f530:	2320      	movs	r3, #32
 800f532:	9309      	str	r3, [sp, #36]	; 0x24
  if (type & SIGN)
 800f534:	4663      	mov	r3, ip
 800f536:	2b00      	cmp	r3, #0
 800f538:	d025      	beq.n	800f586 <tiny_vsnprintf_like+0x1ca>
    if (num < 0)
 800f53a:	2800      	cmp	r0, #0
 800f53c:	da23      	bge.n	800f586 <tiny_vsnprintf_like+0x1ca>
      sign = '-';
 800f53e:	232d      	movs	r3, #45	; 0x2d
      num = -num;
 800f540:	4240      	negs	r0, r0
      size--;
 800f542:	3f01      	subs	r7, #1
  if (num == 0)
 800f544:	9304      	str	r3, [sp, #16]
  if (base < 2 || base > 36) return 0;
 800f546:	2300      	movs	r3, #0
 800f548:	9303      	str	r3, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800f54a:	0029      	movs	r1, r5
 800f54c:	9007      	str	r0, [sp, #28]
 800f54e:	f7f0 fe91 	bl	8000274 <__aeabi_uidivmod>
 800f552:	9b03      	ldr	r3, [sp, #12]
 800f554:	000a      	movs	r2, r1
 800f556:	469c      	mov	ip, r3
 800f558:	900b      	str	r0, [sp, #44]	; 0x2c
 800f55a:	4660      	mov	r0, ip
 800f55c:	0019      	movs	r1, r3
 800f55e:	9b08      	ldr	r3, [sp, #32]
 800f560:	3101      	adds	r1, #1
 800f562:	5c9a      	ldrb	r2, [r3, r2]
 800f564:	ab0d      	add	r3, sp, #52	; 0x34
 800f566:	541a      	strb	r2, [r3, r0]
    while (num != 0)
 800f568:	9b07      	ldr	r3, [sp, #28]
      num = ((unsigned long) num) / (unsigned) base;
 800f56a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f56c:	9103      	str	r1, [sp, #12]
    while (num != 0)
 800f56e:	429d      	cmp	r5, r3
 800f570:	d9eb      	bls.n	800f54a <tiny_vsnprintf_like+0x18e>
 800f572:	e011      	b.n	800f598 <tiny_vsnprintf_like+0x1dc>
        flags |= SIGN;
 800f574:	2202      	movs	r2, #2
 800f576:	4302      	orrs	r2, r0
    base = 10;
 800f578:	250a      	movs	r5, #10
 800f57a:	e7c3      	b.n	800f504 <tiny_vsnprintf_like+0x148>
          --fmt;
 800f57c:	9a01      	ldr	r2, [sp, #4]
 800f57e:	0004      	movs	r4, r0
 800f580:	3a01      	subs	r2, #1
 800f582:	9201      	str	r2, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 800f584:	e72b      	b.n	800f3de <tiny_vsnprintf_like+0x22>
  if (num == 0)
 800f586:	2800      	cmp	r0, #0
 800f588:	d001      	beq.n	800f58e <tiny_vsnprintf_like+0x1d2>
 800f58a:	2300      	movs	r3, #0
 800f58c:	e7da      	b.n	800f544 <tiny_vsnprintf_like+0x188>
    tmp[i++] = '0';
 800f58e:	2230      	movs	r2, #48	; 0x30
 800f590:	2101      	movs	r1, #1
 800f592:	ab0d      	add	r3, sp, #52	; 0x34
 800f594:	701a      	strb	r2, [r3, #0]
 800f596:	9004      	str	r0, [sp, #16]
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800f598:	9b05      	ldr	r3, [sp, #20]
  size -= precision;
 800f59a:	1a78      	subs	r0, r7, r1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800f59c:	2b30      	cmp	r3, #48	; 0x30
 800f59e:	d005      	beq.n	800f5ac <tiny_vsnprintf_like+0x1f0>
 800f5a0:	0023      	movs	r3, r4
 800f5a2:	0002      	movs	r2, r0
 800f5a4:	001c      	movs	r4, r3
 800f5a6:	3801      	subs	r0, #1
 800f5a8:	2a00      	cmp	r2, #0
 800f5aa:	dc0b      	bgt.n	800f5c4 <tiny_vsnprintf_like+0x208>
  if (sign) ASSIGN_STR(sign);
 800f5ac:	9b04      	ldr	r3, [sp, #16]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d005      	beq.n	800f5be <tiny_vsnprintf_like+0x202>
 800f5b2:	1c62      	adds	r2, r4, #1
 800f5b4:	3e01      	subs	r6, #1
 800f5b6:	7023      	strb	r3, [r4, #0]
 800f5b8:	0014      	movs	r4, r2
 800f5ba:	2e00      	cmp	r6, #0
 800f5bc:	d009      	beq.n	800f5d2 <tiny_vsnprintf_like+0x216>
 800f5be:	0033      	movs	r3, r6
 800f5c0:	1b80      	subs	r0, r0, r6
 800f5c2:	e010      	b.n	800f5e6 <tiny_vsnprintf_like+0x22a>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800f5c4:	2520      	movs	r5, #32
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	3e01      	subs	r6, #1
 800f5ca:	001a      	movs	r2, r3
 800f5cc:	7025      	strb	r5, [r4, #0]
 800f5ce:	2e00      	cmp	r6, #0
 800f5d0:	d1e7      	bne.n	800f5a2 <tiny_vsnprintf_like+0x1e6>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800f5d2:	0014      	movs	r4, r2
 800f5d4:	9b06      	ldr	r3, [sp, #24]
 800f5d6:	e702      	b.n	800f3de <tiny_vsnprintf_like+0x22>
  while (size-- > 0) ASSIGN_STR(c);
 800f5d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f5da:	3401      	adds	r4, #1
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	0022      	movs	r2, r4
 800f5e0:	702e      	strb	r6, [r5, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d0f5      	beq.n	800f5d2 <tiny_vsnprintf_like+0x216>
 800f5e6:	18c2      	adds	r2, r0, r3
 800f5e8:	0025      	movs	r5, r4
 800f5ea:	2a00      	cmp	r2, #0
 800f5ec:	dcf4      	bgt.n	800f5d8 <tiny_vsnprintf_like+0x21c>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800f5ee:	ad0d      	add	r5, sp, #52	; 0x34
 800f5f0:	191b      	adds	r3, r3, r4
 800f5f2:	0020      	movs	r0, r4
 800f5f4:	3901      	subs	r1, #1
 800f5f6:	d201      	bcs.n	800f5fc <tiny_vsnprintf_like+0x240>
 800f5f8:	0022      	movs	r2, r4
 800f5fa:	e7ea      	b.n	800f5d2 <tiny_vsnprintf_like+0x216>
 800f5fc:	5d4e      	ldrb	r6, [r1, r5]
 800f5fe:	3401      	adds	r4, #1
 800f600:	0022      	movs	r2, r4
 800f602:	7006      	strb	r6, [r0, #0]
 800f604:	429c      	cmp	r4, r3
 800f606:	d1f4      	bne.n	800f5f2 <tiny_vsnprintf_like+0x236>
 800f608:	e7e3      	b.n	800f5d2 <tiny_vsnprintf_like+0x216>
 800f60a:	46c0      	nop			; (mov r8, r8)
 800f60c:	080133ce 	.word	0x080133ce
 800f610:	080133d5 	.word	0x080133d5
 800f614:	080133fa 	.word	0x080133fa

0800f618 <__errno>:
 800f618:	4b01      	ldr	r3, [pc, #4]	; (800f620 <__errno+0x8>)
 800f61a:	6818      	ldr	r0, [r3, #0]
 800f61c:	4770      	bx	lr
 800f61e:	46c0      	nop			; (mov r8, r8)
 800f620:	2000019c 	.word	0x2000019c

0800f624 <__libc_init_array>:
 800f624:	b570      	push	{r4, r5, r6, lr}
 800f626:	2600      	movs	r6, #0
 800f628:	4d0c      	ldr	r5, [pc, #48]	; (800f65c <__libc_init_array+0x38>)
 800f62a:	4c0d      	ldr	r4, [pc, #52]	; (800f660 <__libc_init_array+0x3c>)
 800f62c:	1b64      	subs	r4, r4, r5
 800f62e:	10a4      	asrs	r4, r4, #2
 800f630:	42a6      	cmp	r6, r4
 800f632:	d109      	bne.n	800f648 <__libc_init_array+0x24>
 800f634:	2600      	movs	r6, #0
 800f636:	f003 f80b 	bl	8012650 <_init>
 800f63a:	4d0a      	ldr	r5, [pc, #40]	; (800f664 <__libc_init_array+0x40>)
 800f63c:	4c0a      	ldr	r4, [pc, #40]	; (800f668 <__libc_init_array+0x44>)
 800f63e:	1b64      	subs	r4, r4, r5
 800f640:	10a4      	asrs	r4, r4, #2
 800f642:	42a6      	cmp	r6, r4
 800f644:	d105      	bne.n	800f652 <__libc_init_array+0x2e>
 800f646:	bd70      	pop	{r4, r5, r6, pc}
 800f648:	00b3      	lsls	r3, r6, #2
 800f64a:	58eb      	ldr	r3, [r5, r3]
 800f64c:	4798      	blx	r3
 800f64e:	3601      	adds	r6, #1
 800f650:	e7ee      	b.n	800f630 <__libc_init_array+0xc>
 800f652:	00b3      	lsls	r3, r6, #2
 800f654:	58eb      	ldr	r3, [r5, r3]
 800f656:	4798      	blx	r3
 800f658:	3601      	adds	r6, #1
 800f65a:	e7f2      	b.n	800f642 <__libc_init_array+0x1e>
 800f65c:	0801380c 	.word	0x0801380c
 800f660:	0801380c 	.word	0x0801380c
 800f664:	0801380c 	.word	0x0801380c
 800f668:	08013810 	.word	0x08013810

0800f66c <memset>:
 800f66c:	0003      	movs	r3, r0
 800f66e:	1882      	adds	r2, r0, r2
 800f670:	4293      	cmp	r3, r2
 800f672:	d100      	bne.n	800f676 <memset+0xa>
 800f674:	4770      	bx	lr
 800f676:	7019      	strb	r1, [r3, #0]
 800f678:	3301      	adds	r3, #1
 800f67a:	e7f9      	b.n	800f670 <memset+0x4>

0800f67c <__cvt>:
 800f67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f67e:	001e      	movs	r6, r3
 800f680:	2300      	movs	r3, #0
 800f682:	0014      	movs	r4, r2
 800f684:	b08b      	sub	sp, #44	; 0x2c
 800f686:	429e      	cmp	r6, r3
 800f688:	da04      	bge.n	800f694 <__cvt+0x18>
 800f68a:	2180      	movs	r1, #128	; 0x80
 800f68c:	0609      	lsls	r1, r1, #24
 800f68e:	1873      	adds	r3, r6, r1
 800f690:	001e      	movs	r6, r3
 800f692:	232d      	movs	r3, #45	; 0x2d
 800f694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f696:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f698:	7013      	strb	r3, [r2, #0]
 800f69a:	2320      	movs	r3, #32
 800f69c:	2203      	movs	r2, #3
 800f69e:	439f      	bics	r7, r3
 800f6a0:	2f46      	cmp	r7, #70	; 0x46
 800f6a2:	d007      	beq.n	800f6b4 <__cvt+0x38>
 800f6a4:	003b      	movs	r3, r7
 800f6a6:	3b45      	subs	r3, #69	; 0x45
 800f6a8:	4259      	negs	r1, r3
 800f6aa:	414b      	adcs	r3, r1
 800f6ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f6ae:	3a01      	subs	r2, #1
 800f6b0:	18cb      	adds	r3, r1, r3
 800f6b2:	9310      	str	r3, [sp, #64]	; 0x40
 800f6b4:	ab09      	add	r3, sp, #36	; 0x24
 800f6b6:	9304      	str	r3, [sp, #16]
 800f6b8:	ab08      	add	r3, sp, #32
 800f6ba:	9303      	str	r3, [sp, #12]
 800f6bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6be:	9200      	str	r2, [sp, #0]
 800f6c0:	9302      	str	r3, [sp, #8]
 800f6c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6c4:	0022      	movs	r2, r4
 800f6c6:	9301      	str	r3, [sp, #4]
 800f6c8:	0033      	movs	r3, r6
 800f6ca:	f000 fd11 	bl	80100f0 <_dtoa_r>
 800f6ce:	0005      	movs	r5, r0
 800f6d0:	2f47      	cmp	r7, #71	; 0x47
 800f6d2:	d102      	bne.n	800f6da <__cvt+0x5e>
 800f6d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f6d6:	07db      	lsls	r3, r3, #31
 800f6d8:	d528      	bpl.n	800f72c <__cvt+0xb0>
 800f6da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6dc:	18eb      	adds	r3, r5, r3
 800f6de:	9307      	str	r3, [sp, #28]
 800f6e0:	2f46      	cmp	r7, #70	; 0x46
 800f6e2:	d114      	bne.n	800f70e <__cvt+0x92>
 800f6e4:	782b      	ldrb	r3, [r5, #0]
 800f6e6:	2b30      	cmp	r3, #48	; 0x30
 800f6e8:	d10c      	bne.n	800f704 <__cvt+0x88>
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	0020      	movs	r0, r4
 800f6f0:	0031      	movs	r1, r6
 800f6f2:	f7f0 febf 	bl	8000474 <__aeabi_dcmpeq>
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	d104      	bne.n	800f704 <__cvt+0x88>
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f6fe:	1a9b      	subs	r3, r3, r2
 800f700:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f702:	6013      	str	r3, [r2, #0]
 800f704:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f706:	9a07      	ldr	r2, [sp, #28]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	18d3      	adds	r3, r2, r3
 800f70c:	9307      	str	r3, [sp, #28]
 800f70e:	2200      	movs	r2, #0
 800f710:	2300      	movs	r3, #0
 800f712:	0020      	movs	r0, r4
 800f714:	0031      	movs	r1, r6
 800f716:	f7f0 fead 	bl	8000474 <__aeabi_dcmpeq>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d001      	beq.n	800f722 <__cvt+0xa6>
 800f71e:	9b07      	ldr	r3, [sp, #28]
 800f720:	9309      	str	r3, [sp, #36]	; 0x24
 800f722:	2230      	movs	r2, #48	; 0x30
 800f724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f726:	9907      	ldr	r1, [sp, #28]
 800f728:	428b      	cmp	r3, r1
 800f72a:	d306      	bcc.n	800f73a <__cvt+0xbe>
 800f72c:	0028      	movs	r0, r5
 800f72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f730:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f732:	1b5b      	subs	r3, r3, r5
 800f734:	6013      	str	r3, [r2, #0]
 800f736:	b00b      	add	sp, #44	; 0x2c
 800f738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f73a:	1c59      	adds	r1, r3, #1
 800f73c:	9109      	str	r1, [sp, #36]	; 0x24
 800f73e:	701a      	strb	r2, [r3, #0]
 800f740:	e7f0      	b.n	800f724 <__cvt+0xa8>

0800f742 <__exponent>:
 800f742:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f744:	1c83      	adds	r3, r0, #2
 800f746:	b087      	sub	sp, #28
 800f748:	9303      	str	r3, [sp, #12]
 800f74a:	0005      	movs	r5, r0
 800f74c:	000c      	movs	r4, r1
 800f74e:	232b      	movs	r3, #43	; 0x2b
 800f750:	7002      	strb	r2, [r0, #0]
 800f752:	2900      	cmp	r1, #0
 800f754:	da01      	bge.n	800f75a <__exponent+0x18>
 800f756:	424c      	negs	r4, r1
 800f758:	3302      	adds	r3, #2
 800f75a:	706b      	strb	r3, [r5, #1]
 800f75c:	2c09      	cmp	r4, #9
 800f75e:	dd31      	ble.n	800f7c4 <__exponent+0x82>
 800f760:	270a      	movs	r7, #10
 800f762:	ab04      	add	r3, sp, #16
 800f764:	1dde      	adds	r6, r3, #7
 800f766:	0020      	movs	r0, r4
 800f768:	0039      	movs	r1, r7
 800f76a:	9601      	str	r6, [sp, #4]
 800f76c:	f7f0 fe6c 	bl	8000448 <__aeabi_idivmod>
 800f770:	3e01      	subs	r6, #1
 800f772:	3130      	adds	r1, #48	; 0x30
 800f774:	0020      	movs	r0, r4
 800f776:	7031      	strb	r1, [r6, #0]
 800f778:	0039      	movs	r1, r7
 800f77a:	9402      	str	r4, [sp, #8]
 800f77c:	f7f0 fd7e 	bl	800027c <__divsi3>
 800f780:	9b02      	ldr	r3, [sp, #8]
 800f782:	0004      	movs	r4, r0
 800f784:	2b63      	cmp	r3, #99	; 0x63
 800f786:	dcee      	bgt.n	800f766 <__exponent+0x24>
 800f788:	9b01      	ldr	r3, [sp, #4]
 800f78a:	3430      	adds	r4, #48	; 0x30
 800f78c:	1e9a      	subs	r2, r3, #2
 800f78e:	0013      	movs	r3, r2
 800f790:	9903      	ldr	r1, [sp, #12]
 800f792:	7014      	strb	r4, [r2, #0]
 800f794:	a804      	add	r0, sp, #16
 800f796:	3007      	adds	r0, #7
 800f798:	4298      	cmp	r0, r3
 800f79a:	d80e      	bhi.n	800f7ba <__exponent+0x78>
 800f79c:	ab04      	add	r3, sp, #16
 800f79e:	3307      	adds	r3, #7
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d804      	bhi.n	800f7b0 <__exponent+0x6e>
 800f7a6:	ab04      	add	r3, sp, #16
 800f7a8:	3009      	adds	r0, #9
 800f7aa:	18c0      	adds	r0, r0, r3
 800f7ac:	9b01      	ldr	r3, [sp, #4]
 800f7ae:	1ac0      	subs	r0, r0, r3
 800f7b0:	9b03      	ldr	r3, [sp, #12]
 800f7b2:	1818      	adds	r0, r3, r0
 800f7b4:	1b40      	subs	r0, r0, r5
 800f7b6:	b007      	add	sp, #28
 800f7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ba:	7818      	ldrb	r0, [r3, #0]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	7008      	strb	r0, [r1, #0]
 800f7c0:	3101      	adds	r1, #1
 800f7c2:	e7e7      	b.n	800f794 <__exponent+0x52>
 800f7c4:	2330      	movs	r3, #48	; 0x30
 800f7c6:	18e4      	adds	r4, r4, r3
 800f7c8:	70ab      	strb	r3, [r5, #2]
 800f7ca:	1d28      	adds	r0, r5, #4
 800f7cc:	70ec      	strb	r4, [r5, #3]
 800f7ce:	e7f1      	b.n	800f7b4 <__exponent+0x72>

0800f7d0 <_printf_float>:
 800f7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7d2:	b095      	sub	sp, #84	; 0x54
 800f7d4:	000c      	movs	r4, r1
 800f7d6:	9208      	str	r2, [sp, #32]
 800f7d8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f7da:	9309      	str	r3, [sp, #36]	; 0x24
 800f7dc:	0007      	movs	r7, r0
 800f7de:	f001 faa5 	bl	8010d2c <_localeconv_r>
 800f7e2:	6803      	ldr	r3, [r0, #0]
 800f7e4:	0018      	movs	r0, r3
 800f7e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7e8:	f7f0 fc8e 	bl	8000108 <strlen>
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	9312      	str	r3, [sp, #72]	; 0x48
 800f7f0:	7e23      	ldrb	r3, [r4, #24]
 800f7f2:	2207      	movs	r2, #7
 800f7f4:	001e      	movs	r6, r3
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	900d      	str	r0, [sp, #52]	; 0x34
 800f7fa:	930c      	str	r3, [sp, #48]	; 0x30
 800f7fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f7fe:	682b      	ldr	r3, [r5, #0]
 800f800:	05c9      	lsls	r1, r1, #23
 800f802:	d547      	bpl.n	800f894 <_printf_float+0xc4>
 800f804:	189b      	adds	r3, r3, r2
 800f806:	4393      	bics	r3, r2
 800f808:	001a      	movs	r2, r3
 800f80a:	3208      	adds	r2, #8
 800f80c:	602a      	str	r2, [r5, #0]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	64a2      	str	r2, [r4, #72]	; 0x48
 800f814:	64e3      	str	r3, [r4, #76]	; 0x4c
 800f816:	2201      	movs	r2, #1
 800f818:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f81a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800f81c:	930a      	str	r3, [sp, #40]	; 0x28
 800f81e:	006b      	lsls	r3, r5, #1
 800f820:	085b      	lsrs	r3, r3, #1
 800f822:	930e      	str	r3, [sp, #56]	; 0x38
 800f824:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f826:	4ba8      	ldr	r3, [pc, #672]	; (800fac8 <_printf_float+0x2f8>)
 800f828:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f82a:	4252      	negs	r2, r2
 800f82c:	f7f2 fef4 	bl	8002618 <__aeabi_dcmpun>
 800f830:	2800      	cmp	r0, #0
 800f832:	d131      	bne.n	800f898 <_printf_float+0xc8>
 800f834:	2201      	movs	r2, #1
 800f836:	4ba4      	ldr	r3, [pc, #656]	; (800fac8 <_printf_float+0x2f8>)
 800f838:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f83a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f83c:	4252      	negs	r2, r2
 800f83e:	f7f0 fe29 	bl	8000494 <__aeabi_dcmple>
 800f842:	2800      	cmp	r0, #0
 800f844:	d128      	bne.n	800f898 <_printf_float+0xc8>
 800f846:	2200      	movs	r2, #0
 800f848:	2300      	movs	r3, #0
 800f84a:	0029      	movs	r1, r5
 800f84c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f84e:	f7f0 fe17 	bl	8000480 <__aeabi_dcmplt>
 800f852:	2800      	cmp	r0, #0
 800f854:	d003      	beq.n	800f85e <_printf_float+0x8e>
 800f856:	0023      	movs	r3, r4
 800f858:	222d      	movs	r2, #45	; 0x2d
 800f85a:	3343      	adds	r3, #67	; 0x43
 800f85c:	701a      	strb	r2, [r3, #0]
 800f85e:	4d9b      	ldr	r5, [pc, #620]	; (800facc <_printf_float+0x2fc>)
 800f860:	2e47      	cmp	r6, #71	; 0x47
 800f862:	d900      	bls.n	800f866 <_printf_float+0x96>
 800f864:	4d9a      	ldr	r5, [pc, #616]	; (800fad0 <_printf_float+0x300>)
 800f866:	2303      	movs	r3, #3
 800f868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f86a:	6123      	str	r3, [r4, #16]
 800f86c:	3301      	adds	r3, #1
 800f86e:	439a      	bics	r2, r3
 800f870:	2300      	movs	r3, #0
 800f872:	6022      	str	r2, [r4, #0]
 800f874:	930a      	str	r3, [sp, #40]	; 0x28
 800f876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f878:	0021      	movs	r1, r4
 800f87a:	9300      	str	r3, [sp, #0]
 800f87c:	0038      	movs	r0, r7
 800f87e:	9b08      	ldr	r3, [sp, #32]
 800f880:	aa13      	add	r2, sp, #76	; 0x4c
 800f882:	f000 f9f3 	bl	800fc6c <_printf_common>
 800f886:	1c43      	adds	r3, r0, #1
 800f888:	d000      	beq.n	800f88c <_printf_float+0xbc>
 800f88a:	e09e      	b.n	800f9ca <_printf_float+0x1fa>
 800f88c:	2001      	movs	r0, #1
 800f88e:	4240      	negs	r0, r0
 800f890:	b015      	add	sp, #84	; 0x54
 800f892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f894:	3307      	adds	r3, #7
 800f896:	e7b6      	b.n	800f806 <_printf_float+0x36>
 800f898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f89a:	002b      	movs	r3, r5
 800f89c:	0010      	movs	r0, r2
 800f89e:	0029      	movs	r1, r5
 800f8a0:	f7f2 feba 	bl	8002618 <__aeabi_dcmpun>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d00a      	beq.n	800f8be <_printf_float+0xee>
 800f8a8:	2d00      	cmp	r5, #0
 800f8aa:	da03      	bge.n	800f8b4 <_printf_float+0xe4>
 800f8ac:	0023      	movs	r3, r4
 800f8ae:	222d      	movs	r2, #45	; 0x2d
 800f8b0:	3343      	adds	r3, #67	; 0x43
 800f8b2:	701a      	strb	r2, [r3, #0]
 800f8b4:	4d87      	ldr	r5, [pc, #540]	; (800fad4 <_printf_float+0x304>)
 800f8b6:	2e47      	cmp	r6, #71	; 0x47
 800f8b8:	d9d5      	bls.n	800f866 <_printf_float+0x96>
 800f8ba:	4d87      	ldr	r5, [pc, #540]	; (800fad8 <_printf_float+0x308>)
 800f8bc:	e7d3      	b.n	800f866 <_printf_float+0x96>
 800f8be:	2220      	movs	r2, #32
 800f8c0:	0031      	movs	r1, r6
 800f8c2:	6863      	ldr	r3, [r4, #4]
 800f8c4:	4391      	bics	r1, r2
 800f8c6:	910e      	str	r1, [sp, #56]	; 0x38
 800f8c8:	1c5a      	adds	r2, r3, #1
 800f8ca:	d147      	bne.n	800f95c <_printf_float+0x18c>
 800f8cc:	3307      	adds	r3, #7
 800f8ce:	6063      	str	r3, [r4, #4]
 800f8d0:	2380      	movs	r3, #128	; 0x80
 800f8d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8d4:	00db      	lsls	r3, r3, #3
 800f8d6:	4313      	orrs	r3, r2
 800f8d8:	2200      	movs	r2, #0
 800f8da:	9206      	str	r2, [sp, #24]
 800f8dc:	aa12      	add	r2, sp, #72	; 0x48
 800f8de:	9205      	str	r2, [sp, #20]
 800f8e0:	aa11      	add	r2, sp, #68	; 0x44
 800f8e2:	9203      	str	r2, [sp, #12]
 800f8e4:	2223      	movs	r2, #35	; 0x23
 800f8e6:	a908      	add	r1, sp, #32
 800f8e8:	6023      	str	r3, [r4, #0]
 800f8ea:	9301      	str	r3, [sp, #4]
 800f8ec:	6863      	ldr	r3, [r4, #4]
 800f8ee:	1852      	adds	r2, r2, r1
 800f8f0:	9202      	str	r2, [sp, #8]
 800f8f2:	9300      	str	r3, [sp, #0]
 800f8f4:	0038      	movs	r0, r7
 800f8f6:	002b      	movs	r3, r5
 800f8f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8fa:	9604      	str	r6, [sp, #16]
 800f8fc:	f7ff febe 	bl	800f67c <__cvt>
 800f900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f902:	0005      	movs	r5, r0
 800f904:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f906:	2b47      	cmp	r3, #71	; 0x47
 800f908:	d108      	bne.n	800f91c <_printf_float+0x14c>
 800f90a:	1ccb      	adds	r3, r1, #3
 800f90c:	db02      	blt.n	800f914 <_printf_float+0x144>
 800f90e:	6863      	ldr	r3, [r4, #4]
 800f910:	4299      	cmp	r1, r3
 800f912:	dd46      	ble.n	800f9a2 <_printf_float+0x1d2>
 800f914:	0033      	movs	r3, r6
 800f916:	3b02      	subs	r3, #2
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	001e      	movs	r6, r3
 800f91c:	2e65      	cmp	r6, #101	; 0x65
 800f91e:	d824      	bhi.n	800f96a <_printf_float+0x19a>
 800f920:	0020      	movs	r0, r4
 800f922:	0032      	movs	r2, r6
 800f924:	3901      	subs	r1, #1
 800f926:	3050      	adds	r0, #80	; 0x50
 800f928:	9111      	str	r1, [sp, #68]	; 0x44
 800f92a:	f7ff ff0a 	bl	800f742 <__exponent>
 800f92e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f930:	900a      	str	r0, [sp, #40]	; 0x28
 800f932:	1813      	adds	r3, r2, r0
 800f934:	6123      	str	r3, [r4, #16]
 800f936:	2a01      	cmp	r2, #1
 800f938:	dc02      	bgt.n	800f940 <_printf_float+0x170>
 800f93a:	6822      	ldr	r2, [r4, #0]
 800f93c:	07d2      	lsls	r2, r2, #31
 800f93e:	d501      	bpl.n	800f944 <_printf_float+0x174>
 800f940:	3301      	adds	r3, #1
 800f942:	6123      	str	r3, [r4, #16]
 800f944:	2323      	movs	r3, #35	; 0x23
 800f946:	aa08      	add	r2, sp, #32
 800f948:	189b      	adds	r3, r3, r2
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d100      	bne.n	800f952 <_printf_float+0x182>
 800f950:	e791      	b.n	800f876 <_printf_float+0xa6>
 800f952:	0023      	movs	r3, r4
 800f954:	222d      	movs	r2, #45	; 0x2d
 800f956:	3343      	adds	r3, #67	; 0x43
 800f958:	701a      	strb	r2, [r3, #0]
 800f95a:	e78c      	b.n	800f876 <_printf_float+0xa6>
 800f95c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f95e:	2a47      	cmp	r2, #71	; 0x47
 800f960:	d1b6      	bne.n	800f8d0 <_printf_float+0x100>
 800f962:	2b00      	cmp	r3, #0
 800f964:	d1b4      	bne.n	800f8d0 <_printf_float+0x100>
 800f966:	3301      	adds	r3, #1
 800f968:	e7b1      	b.n	800f8ce <_printf_float+0xfe>
 800f96a:	2e66      	cmp	r6, #102	; 0x66
 800f96c:	d11b      	bne.n	800f9a6 <_printf_float+0x1d6>
 800f96e:	6863      	ldr	r3, [r4, #4]
 800f970:	2900      	cmp	r1, #0
 800f972:	dd0d      	ble.n	800f990 <_printf_float+0x1c0>
 800f974:	6121      	str	r1, [r4, #16]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d102      	bne.n	800f980 <_printf_float+0x1b0>
 800f97a:	6822      	ldr	r2, [r4, #0]
 800f97c:	07d2      	lsls	r2, r2, #31
 800f97e:	d502      	bpl.n	800f986 <_printf_float+0x1b6>
 800f980:	3301      	adds	r3, #1
 800f982:	1859      	adds	r1, r3, r1
 800f984:	6121      	str	r1, [r4, #16]
 800f986:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f988:	65a3      	str	r3, [r4, #88]	; 0x58
 800f98a:	2300      	movs	r3, #0
 800f98c:	930a      	str	r3, [sp, #40]	; 0x28
 800f98e:	e7d9      	b.n	800f944 <_printf_float+0x174>
 800f990:	2b00      	cmp	r3, #0
 800f992:	d103      	bne.n	800f99c <_printf_float+0x1cc>
 800f994:	2201      	movs	r2, #1
 800f996:	6821      	ldr	r1, [r4, #0]
 800f998:	4211      	tst	r1, r2
 800f99a:	d000      	beq.n	800f99e <_printf_float+0x1ce>
 800f99c:	1c9a      	adds	r2, r3, #2
 800f99e:	6122      	str	r2, [r4, #16]
 800f9a0:	e7f1      	b.n	800f986 <_printf_float+0x1b6>
 800f9a2:	2367      	movs	r3, #103	; 0x67
 800f9a4:	001e      	movs	r6, r3
 800f9a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f9a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	db06      	blt.n	800f9bc <_printf_float+0x1ec>
 800f9ae:	6822      	ldr	r2, [r4, #0]
 800f9b0:	6123      	str	r3, [r4, #16]
 800f9b2:	07d2      	lsls	r2, r2, #31
 800f9b4:	d5e7      	bpl.n	800f986 <_printf_float+0x1b6>
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	6123      	str	r3, [r4, #16]
 800f9ba:	e7e4      	b.n	800f986 <_printf_float+0x1b6>
 800f9bc:	2101      	movs	r1, #1
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	dc01      	bgt.n	800f9c6 <_printf_float+0x1f6>
 800f9c2:	1849      	adds	r1, r1, r1
 800f9c4:	1ac9      	subs	r1, r1, r3
 800f9c6:	1852      	adds	r2, r2, r1
 800f9c8:	e7e9      	b.n	800f99e <_printf_float+0x1ce>
 800f9ca:	6822      	ldr	r2, [r4, #0]
 800f9cc:	0553      	lsls	r3, r2, #21
 800f9ce:	d408      	bmi.n	800f9e2 <_printf_float+0x212>
 800f9d0:	6923      	ldr	r3, [r4, #16]
 800f9d2:	002a      	movs	r2, r5
 800f9d4:	0038      	movs	r0, r7
 800f9d6:	9908      	ldr	r1, [sp, #32]
 800f9d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f9da:	47a8      	blx	r5
 800f9dc:	1c43      	adds	r3, r0, #1
 800f9de:	d129      	bne.n	800fa34 <_printf_float+0x264>
 800f9e0:	e754      	b.n	800f88c <_printf_float+0xbc>
 800f9e2:	2e65      	cmp	r6, #101	; 0x65
 800f9e4:	d800      	bhi.n	800f9e8 <_printf_float+0x218>
 800f9e6:	e0ec      	b.n	800fbc2 <_printf_float+0x3f2>
 800f9e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f9ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	f7f0 fd40 	bl	8000474 <__aeabi_dcmpeq>
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d034      	beq.n	800fa62 <_printf_float+0x292>
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	0038      	movs	r0, r7
 800f9fc:	4a37      	ldr	r2, [pc, #220]	; (800fadc <_printf_float+0x30c>)
 800f9fe:	9908      	ldr	r1, [sp, #32]
 800fa00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fa02:	47a8      	blx	r5
 800fa04:	1c43      	adds	r3, r0, #1
 800fa06:	d100      	bne.n	800fa0a <_printf_float+0x23a>
 800fa08:	e740      	b.n	800f88c <_printf_float+0xbc>
 800fa0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	db02      	blt.n	800fa18 <_printf_float+0x248>
 800fa12:	6823      	ldr	r3, [r4, #0]
 800fa14:	07db      	lsls	r3, r3, #31
 800fa16:	d50d      	bpl.n	800fa34 <_printf_float+0x264>
 800fa18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fa1a:	0038      	movs	r0, r7
 800fa1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa20:	9908      	ldr	r1, [sp, #32]
 800fa22:	47a8      	blx	r5
 800fa24:	2500      	movs	r5, #0
 800fa26:	1c43      	adds	r3, r0, #1
 800fa28:	d100      	bne.n	800fa2c <_printf_float+0x25c>
 800fa2a:	e72f      	b.n	800f88c <_printf_float+0xbc>
 800fa2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa2e:	3b01      	subs	r3, #1
 800fa30:	42ab      	cmp	r3, r5
 800fa32:	dc0a      	bgt.n	800fa4a <_printf_float+0x27a>
 800fa34:	6823      	ldr	r3, [r4, #0]
 800fa36:	079b      	lsls	r3, r3, #30
 800fa38:	d500      	bpl.n	800fa3c <_printf_float+0x26c>
 800fa3a:	e114      	b.n	800fc66 <_printf_float+0x496>
 800fa3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa3e:	68e0      	ldr	r0, [r4, #12]
 800fa40:	4298      	cmp	r0, r3
 800fa42:	db00      	blt.n	800fa46 <_printf_float+0x276>
 800fa44:	e724      	b.n	800f890 <_printf_float+0xc0>
 800fa46:	0018      	movs	r0, r3
 800fa48:	e722      	b.n	800f890 <_printf_float+0xc0>
 800fa4a:	0022      	movs	r2, r4
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	0038      	movs	r0, r7
 800fa50:	9908      	ldr	r1, [sp, #32]
 800fa52:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fa54:	321a      	adds	r2, #26
 800fa56:	47b0      	blx	r6
 800fa58:	1c43      	adds	r3, r0, #1
 800fa5a:	d100      	bne.n	800fa5e <_printf_float+0x28e>
 800fa5c:	e716      	b.n	800f88c <_printf_float+0xbc>
 800fa5e:	3501      	adds	r5, #1
 800fa60:	e7e4      	b.n	800fa2c <_printf_float+0x25c>
 800fa62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	dc3b      	bgt.n	800fae0 <_printf_float+0x310>
 800fa68:	2301      	movs	r3, #1
 800fa6a:	0038      	movs	r0, r7
 800fa6c:	4a1b      	ldr	r2, [pc, #108]	; (800fadc <_printf_float+0x30c>)
 800fa6e:	9908      	ldr	r1, [sp, #32]
 800fa70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fa72:	47b0      	blx	r6
 800fa74:	1c43      	adds	r3, r0, #1
 800fa76:	d100      	bne.n	800fa7a <_printf_float+0x2aa>
 800fa78:	e708      	b.n	800f88c <_printf_float+0xbc>
 800fa7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fa7e:	4313      	orrs	r3, r2
 800fa80:	d102      	bne.n	800fa88 <_printf_float+0x2b8>
 800fa82:	6823      	ldr	r3, [r4, #0]
 800fa84:	07db      	lsls	r3, r3, #31
 800fa86:	d5d5      	bpl.n	800fa34 <_printf_float+0x264>
 800fa88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa8a:	0038      	movs	r0, r7
 800fa8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa8e:	9908      	ldr	r1, [sp, #32]
 800fa90:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fa92:	47b0      	blx	r6
 800fa94:	1c43      	adds	r3, r0, #1
 800fa96:	d100      	bne.n	800fa9a <_printf_float+0x2ca>
 800fa98:	e6f8      	b.n	800f88c <_printf_float+0xbc>
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	930a      	str	r3, [sp, #40]	; 0x28
 800fa9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800faa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800faa2:	425b      	negs	r3, r3
 800faa4:	4293      	cmp	r3, r2
 800faa6:	dc01      	bgt.n	800faac <_printf_float+0x2dc>
 800faa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800faaa:	e792      	b.n	800f9d2 <_printf_float+0x202>
 800faac:	0022      	movs	r2, r4
 800faae:	2301      	movs	r3, #1
 800fab0:	0038      	movs	r0, r7
 800fab2:	9908      	ldr	r1, [sp, #32]
 800fab4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fab6:	321a      	adds	r2, #26
 800fab8:	47b0      	blx	r6
 800faba:	1c43      	adds	r3, r0, #1
 800fabc:	d100      	bne.n	800fac0 <_printf_float+0x2f0>
 800fabe:	e6e5      	b.n	800f88c <_printf_float+0xbc>
 800fac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fac2:	3301      	adds	r3, #1
 800fac4:	e7ea      	b.n	800fa9c <_printf_float+0x2cc>
 800fac6:	46c0      	nop			; (mov r8, r8)
 800fac8:	7fefffff 	.word	0x7fefffff
 800facc:	08013424 	.word	0x08013424
 800fad0:	08013428 	.word	0x08013428
 800fad4:	0801342c 	.word	0x0801342c
 800fad8:	08013430 	.word	0x08013430
 800fadc:	08013434 	.word	0x08013434
 800fae0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fae4:	920a      	str	r2, [sp, #40]	; 0x28
 800fae6:	429a      	cmp	r2, r3
 800fae8:	dd00      	ble.n	800faec <_printf_float+0x31c>
 800faea:	930a      	str	r3, [sp, #40]	; 0x28
 800faec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faee:	2b00      	cmp	r3, #0
 800faf0:	dc3d      	bgt.n	800fb6e <_printf_float+0x39e>
 800faf2:	2300      	movs	r3, #0
 800faf4:	930e      	str	r3, [sp, #56]	; 0x38
 800faf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faf8:	43db      	mvns	r3, r3
 800fafa:	17db      	asrs	r3, r3, #31
 800fafc:	930f      	str	r3, [sp, #60]	; 0x3c
 800fafe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb02:	930c      	str	r3, [sp, #48]	; 0x30
 800fb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb06:	4013      	ands	r3, r2
 800fb08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb0a:	1ad3      	subs	r3, r2, r3
 800fb0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	dc36      	bgt.n	800fb80 <_printf_float+0x3b0>
 800fb12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb16:	4293      	cmp	r3, r2
 800fb18:	db40      	blt.n	800fb9c <_printf_float+0x3cc>
 800fb1a:	6823      	ldr	r3, [r4, #0]
 800fb1c:	07db      	lsls	r3, r3, #31
 800fb1e:	d43d      	bmi.n	800fb9c <_printf_float+0x3cc>
 800fb20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb24:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fb26:	1ad3      	subs	r3, r2, r3
 800fb28:	1a52      	subs	r2, r2, r1
 800fb2a:	920a      	str	r2, [sp, #40]	; 0x28
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	dd00      	ble.n	800fb32 <_printf_float+0x362>
 800fb30:	930a      	str	r3, [sp, #40]	; 0x28
 800fb32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	dc3a      	bgt.n	800fbae <_printf_float+0x3de>
 800fb38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb3a:	2500      	movs	r5, #0
 800fb3c:	43db      	mvns	r3, r3
 800fb3e:	17db      	asrs	r3, r3, #31
 800fb40:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fb44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb48:	1a9b      	subs	r3, r3, r2
 800fb4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb4c:	400a      	ands	r2, r1
 800fb4e:	1a9b      	subs	r3, r3, r2
 800fb50:	42ab      	cmp	r3, r5
 800fb52:	dc00      	bgt.n	800fb56 <_printf_float+0x386>
 800fb54:	e76e      	b.n	800fa34 <_printf_float+0x264>
 800fb56:	0022      	movs	r2, r4
 800fb58:	2301      	movs	r3, #1
 800fb5a:	0038      	movs	r0, r7
 800fb5c:	9908      	ldr	r1, [sp, #32]
 800fb5e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fb60:	321a      	adds	r2, #26
 800fb62:	47b0      	blx	r6
 800fb64:	1c43      	adds	r3, r0, #1
 800fb66:	d100      	bne.n	800fb6a <_printf_float+0x39a>
 800fb68:	e690      	b.n	800f88c <_printf_float+0xbc>
 800fb6a:	3501      	adds	r5, #1
 800fb6c:	e7e9      	b.n	800fb42 <_printf_float+0x372>
 800fb6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb70:	002a      	movs	r2, r5
 800fb72:	0038      	movs	r0, r7
 800fb74:	9908      	ldr	r1, [sp, #32]
 800fb76:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fb78:	47b0      	blx	r6
 800fb7a:	1c43      	adds	r3, r0, #1
 800fb7c:	d1b9      	bne.n	800faf2 <_printf_float+0x322>
 800fb7e:	e685      	b.n	800f88c <_printf_float+0xbc>
 800fb80:	0022      	movs	r2, r4
 800fb82:	2301      	movs	r3, #1
 800fb84:	0038      	movs	r0, r7
 800fb86:	9908      	ldr	r1, [sp, #32]
 800fb88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fb8a:	321a      	adds	r2, #26
 800fb8c:	47b0      	blx	r6
 800fb8e:	1c43      	adds	r3, r0, #1
 800fb90:	d100      	bne.n	800fb94 <_printf_float+0x3c4>
 800fb92:	e67b      	b.n	800f88c <_printf_float+0xbc>
 800fb94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb96:	3301      	adds	r3, #1
 800fb98:	930e      	str	r3, [sp, #56]	; 0x38
 800fb9a:	e7b0      	b.n	800fafe <_printf_float+0x32e>
 800fb9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb9e:	0038      	movs	r0, r7
 800fba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fba2:	9908      	ldr	r1, [sp, #32]
 800fba4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fba6:	47b0      	blx	r6
 800fba8:	1c43      	adds	r3, r0, #1
 800fbaa:	d1b9      	bne.n	800fb20 <_printf_float+0x350>
 800fbac:	e66e      	b.n	800f88c <_printf_float+0xbc>
 800fbae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbb0:	0038      	movs	r0, r7
 800fbb2:	18ea      	adds	r2, r5, r3
 800fbb4:	9908      	ldr	r1, [sp, #32]
 800fbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fbba:	47a8      	blx	r5
 800fbbc:	1c43      	adds	r3, r0, #1
 800fbbe:	d1bb      	bne.n	800fb38 <_printf_float+0x368>
 800fbc0:	e664      	b.n	800f88c <_printf_float+0xbc>
 800fbc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	dc02      	bgt.n	800fbce <_printf_float+0x3fe>
 800fbc8:	2301      	movs	r3, #1
 800fbca:	421a      	tst	r2, r3
 800fbcc:	d038      	beq.n	800fc40 <_printf_float+0x470>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	002a      	movs	r2, r5
 800fbd2:	0038      	movs	r0, r7
 800fbd4:	9908      	ldr	r1, [sp, #32]
 800fbd6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fbd8:	47b0      	blx	r6
 800fbda:	1c43      	adds	r3, r0, #1
 800fbdc:	d100      	bne.n	800fbe0 <_printf_float+0x410>
 800fbde:	e655      	b.n	800f88c <_printf_float+0xbc>
 800fbe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbe2:	0038      	movs	r0, r7
 800fbe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fbe6:	9908      	ldr	r1, [sp, #32]
 800fbe8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fbea:	47b0      	blx	r6
 800fbec:	1c43      	adds	r3, r0, #1
 800fbee:	d100      	bne.n	800fbf2 <_printf_float+0x422>
 800fbf0:	e64c      	b.n	800f88c <_printf_float+0xbc>
 800fbf2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800fbf4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	f7f0 fc3b 	bl	8000474 <__aeabi_dcmpeq>
 800fbfe:	2800      	cmp	r0, #0
 800fc00:	d11c      	bne.n	800fc3c <_printf_float+0x46c>
 800fc02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc04:	1c6a      	adds	r2, r5, #1
 800fc06:	3b01      	subs	r3, #1
 800fc08:	0038      	movs	r0, r7
 800fc0a:	9908      	ldr	r1, [sp, #32]
 800fc0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fc0e:	47a8      	blx	r5
 800fc10:	1c43      	adds	r3, r0, #1
 800fc12:	d10f      	bne.n	800fc34 <_printf_float+0x464>
 800fc14:	e63a      	b.n	800f88c <_printf_float+0xbc>
 800fc16:	0022      	movs	r2, r4
 800fc18:	2301      	movs	r3, #1
 800fc1a:	0038      	movs	r0, r7
 800fc1c:	9908      	ldr	r1, [sp, #32]
 800fc1e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fc20:	321a      	adds	r2, #26
 800fc22:	47b0      	blx	r6
 800fc24:	1c43      	adds	r3, r0, #1
 800fc26:	d100      	bne.n	800fc2a <_printf_float+0x45a>
 800fc28:	e630      	b.n	800f88c <_printf_float+0xbc>
 800fc2a:	3501      	adds	r5, #1
 800fc2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	42ab      	cmp	r3, r5
 800fc32:	dcf0      	bgt.n	800fc16 <_printf_float+0x446>
 800fc34:	0022      	movs	r2, r4
 800fc36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc38:	3250      	adds	r2, #80	; 0x50
 800fc3a:	e6cb      	b.n	800f9d4 <_printf_float+0x204>
 800fc3c:	2500      	movs	r5, #0
 800fc3e:	e7f5      	b.n	800fc2c <_printf_float+0x45c>
 800fc40:	002a      	movs	r2, r5
 800fc42:	e7e1      	b.n	800fc08 <_printf_float+0x438>
 800fc44:	0022      	movs	r2, r4
 800fc46:	2301      	movs	r3, #1
 800fc48:	0038      	movs	r0, r7
 800fc4a:	9908      	ldr	r1, [sp, #32]
 800fc4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fc4e:	3219      	adds	r2, #25
 800fc50:	47b0      	blx	r6
 800fc52:	1c43      	adds	r3, r0, #1
 800fc54:	d100      	bne.n	800fc58 <_printf_float+0x488>
 800fc56:	e619      	b.n	800f88c <_printf_float+0xbc>
 800fc58:	3501      	adds	r5, #1
 800fc5a:	68e3      	ldr	r3, [r4, #12]
 800fc5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fc5e:	1a9b      	subs	r3, r3, r2
 800fc60:	42ab      	cmp	r3, r5
 800fc62:	dcef      	bgt.n	800fc44 <_printf_float+0x474>
 800fc64:	e6ea      	b.n	800fa3c <_printf_float+0x26c>
 800fc66:	2500      	movs	r5, #0
 800fc68:	e7f7      	b.n	800fc5a <_printf_float+0x48a>
 800fc6a:	46c0      	nop			; (mov r8, r8)

0800fc6c <_printf_common>:
 800fc6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc6e:	0015      	movs	r5, r2
 800fc70:	9301      	str	r3, [sp, #4]
 800fc72:	688a      	ldr	r2, [r1, #8]
 800fc74:	690b      	ldr	r3, [r1, #16]
 800fc76:	000c      	movs	r4, r1
 800fc78:	9000      	str	r0, [sp, #0]
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	da00      	bge.n	800fc80 <_printf_common+0x14>
 800fc7e:	0013      	movs	r3, r2
 800fc80:	0022      	movs	r2, r4
 800fc82:	602b      	str	r3, [r5, #0]
 800fc84:	3243      	adds	r2, #67	; 0x43
 800fc86:	7812      	ldrb	r2, [r2, #0]
 800fc88:	2a00      	cmp	r2, #0
 800fc8a:	d001      	beq.n	800fc90 <_printf_common+0x24>
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	602b      	str	r3, [r5, #0]
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	069b      	lsls	r3, r3, #26
 800fc94:	d502      	bpl.n	800fc9c <_printf_common+0x30>
 800fc96:	682b      	ldr	r3, [r5, #0]
 800fc98:	3302      	adds	r3, #2
 800fc9a:	602b      	str	r3, [r5, #0]
 800fc9c:	6822      	ldr	r2, [r4, #0]
 800fc9e:	2306      	movs	r3, #6
 800fca0:	0017      	movs	r7, r2
 800fca2:	401f      	ands	r7, r3
 800fca4:	421a      	tst	r2, r3
 800fca6:	d027      	beq.n	800fcf8 <_printf_common+0x8c>
 800fca8:	0023      	movs	r3, r4
 800fcaa:	3343      	adds	r3, #67	; 0x43
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	1e5a      	subs	r2, r3, #1
 800fcb0:	4193      	sbcs	r3, r2
 800fcb2:	6822      	ldr	r2, [r4, #0]
 800fcb4:	0692      	lsls	r2, r2, #26
 800fcb6:	d430      	bmi.n	800fd1a <_printf_common+0xae>
 800fcb8:	0022      	movs	r2, r4
 800fcba:	9901      	ldr	r1, [sp, #4]
 800fcbc:	9800      	ldr	r0, [sp, #0]
 800fcbe:	9e08      	ldr	r6, [sp, #32]
 800fcc0:	3243      	adds	r2, #67	; 0x43
 800fcc2:	47b0      	blx	r6
 800fcc4:	1c43      	adds	r3, r0, #1
 800fcc6:	d025      	beq.n	800fd14 <_printf_common+0xa8>
 800fcc8:	2306      	movs	r3, #6
 800fcca:	6820      	ldr	r0, [r4, #0]
 800fccc:	682a      	ldr	r2, [r5, #0]
 800fcce:	68e1      	ldr	r1, [r4, #12]
 800fcd0:	2500      	movs	r5, #0
 800fcd2:	4003      	ands	r3, r0
 800fcd4:	2b04      	cmp	r3, #4
 800fcd6:	d103      	bne.n	800fce0 <_printf_common+0x74>
 800fcd8:	1a8d      	subs	r5, r1, r2
 800fcda:	43eb      	mvns	r3, r5
 800fcdc:	17db      	asrs	r3, r3, #31
 800fcde:	401d      	ands	r5, r3
 800fce0:	68a3      	ldr	r3, [r4, #8]
 800fce2:	6922      	ldr	r2, [r4, #16]
 800fce4:	4293      	cmp	r3, r2
 800fce6:	dd01      	ble.n	800fcec <_printf_common+0x80>
 800fce8:	1a9b      	subs	r3, r3, r2
 800fcea:	18ed      	adds	r5, r5, r3
 800fcec:	2700      	movs	r7, #0
 800fcee:	42bd      	cmp	r5, r7
 800fcf0:	d120      	bne.n	800fd34 <_printf_common+0xc8>
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	e010      	b.n	800fd18 <_printf_common+0xac>
 800fcf6:	3701      	adds	r7, #1
 800fcf8:	68e3      	ldr	r3, [r4, #12]
 800fcfa:	682a      	ldr	r2, [r5, #0]
 800fcfc:	1a9b      	subs	r3, r3, r2
 800fcfe:	42bb      	cmp	r3, r7
 800fd00:	ddd2      	ble.n	800fca8 <_printf_common+0x3c>
 800fd02:	0022      	movs	r2, r4
 800fd04:	2301      	movs	r3, #1
 800fd06:	9901      	ldr	r1, [sp, #4]
 800fd08:	9800      	ldr	r0, [sp, #0]
 800fd0a:	9e08      	ldr	r6, [sp, #32]
 800fd0c:	3219      	adds	r2, #25
 800fd0e:	47b0      	blx	r6
 800fd10:	1c43      	adds	r3, r0, #1
 800fd12:	d1f0      	bne.n	800fcf6 <_printf_common+0x8a>
 800fd14:	2001      	movs	r0, #1
 800fd16:	4240      	negs	r0, r0
 800fd18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fd1a:	2030      	movs	r0, #48	; 0x30
 800fd1c:	18e1      	adds	r1, r4, r3
 800fd1e:	3143      	adds	r1, #67	; 0x43
 800fd20:	7008      	strb	r0, [r1, #0]
 800fd22:	0021      	movs	r1, r4
 800fd24:	1c5a      	adds	r2, r3, #1
 800fd26:	3145      	adds	r1, #69	; 0x45
 800fd28:	7809      	ldrb	r1, [r1, #0]
 800fd2a:	18a2      	adds	r2, r4, r2
 800fd2c:	3243      	adds	r2, #67	; 0x43
 800fd2e:	3302      	adds	r3, #2
 800fd30:	7011      	strb	r1, [r2, #0]
 800fd32:	e7c1      	b.n	800fcb8 <_printf_common+0x4c>
 800fd34:	0022      	movs	r2, r4
 800fd36:	2301      	movs	r3, #1
 800fd38:	9901      	ldr	r1, [sp, #4]
 800fd3a:	9800      	ldr	r0, [sp, #0]
 800fd3c:	9e08      	ldr	r6, [sp, #32]
 800fd3e:	321a      	adds	r2, #26
 800fd40:	47b0      	blx	r6
 800fd42:	1c43      	adds	r3, r0, #1
 800fd44:	d0e6      	beq.n	800fd14 <_printf_common+0xa8>
 800fd46:	3701      	adds	r7, #1
 800fd48:	e7d1      	b.n	800fcee <_printf_common+0x82>
	...

0800fd4c <_printf_i>:
 800fd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd4e:	b08b      	sub	sp, #44	; 0x2c
 800fd50:	9206      	str	r2, [sp, #24]
 800fd52:	000a      	movs	r2, r1
 800fd54:	3243      	adds	r2, #67	; 0x43
 800fd56:	9307      	str	r3, [sp, #28]
 800fd58:	9005      	str	r0, [sp, #20]
 800fd5a:	9204      	str	r2, [sp, #16]
 800fd5c:	7e0a      	ldrb	r2, [r1, #24]
 800fd5e:	000c      	movs	r4, r1
 800fd60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd62:	2a78      	cmp	r2, #120	; 0x78
 800fd64:	d806      	bhi.n	800fd74 <_printf_i+0x28>
 800fd66:	2a62      	cmp	r2, #98	; 0x62
 800fd68:	d808      	bhi.n	800fd7c <_printf_i+0x30>
 800fd6a:	2a00      	cmp	r2, #0
 800fd6c:	d100      	bne.n	800fd70 <_printf_i+0x24>
 800fd6e:	e0c0      	b.n	800fef2 <_printf_i+0x1a6>
 800fd70:	2a58      	cmp	r2, #88	; 0x58
 800fd72:	d052      	beq.n	800fe1a <_printf_i+0xce>
 800fd74:	0026      	movs	r6, r4
 800fd76:	3642      	adds	r6, #66	; 0x42
 800fd78:	7032      	strb	r2, [r6, #0]
 800fd7a:	e022      	b.n	800fdc2 <_printf_i+0x76>
 800fd7c:	0010      	movs	r0, r2
 800fd7e:	3863      	subs	r0, #99	; 0x63
 800fd80:	2815      	cmp	r0, #21
 800fd82:	d8f7      	bhi.n	800fd74 <_printf_i+0x28>
 800fd84:	f7f0 f9dc 	bl	8000140 <__gnu_thumb1_case_shi>
 800fd88:	001f0016 	.word	0x001f0016
 800fd8c:	fff6fff6 	.word	0xfff6fff6
 800fd90:	fff6fff6 	.word	0xfff6fff6
 800fd94:	fff6001f 	.word	0xfff6001f
 800fd98:	fff6fff6 	.word	0xfff6fff6
 800fd9c:	00a8fff6 	.word	0x00a8fff6
 800fda0:	009a0036 	.word	0x009a0036
 800fda4:	fff6fff6 	.word	0xfff6fff6
 800fda8:	fff600b9 	.word	0xfff600b9
 800fdac:	fff60036 	.word	0xfff60036
 800fdb0:	009efff6 	.word	0x009efff6
 800fdb4:	0026      	movs	r6, r4
 800fdb6:	681a      	ldr	r2, [r3, #0]
 800fdb8:	3642      	adds	r6, #66	; 0x42
 800fdba:	1d11      	adds	r1, r2, #4
 800fdbc:	6019      	str	r1, [r3, #0]
 800fdbe:	6813      	ldr	r3, [r2, #0]
 800fdc0:	7033      	strb	r3, [r6, #0]
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e0a7      	b.n	800ff16 <_printf_i+0x1ca>
 800fdc6:	6808      	ldr	r0, [r1, #0]
 800fdc8:	6819      	ldr	r1, [r3, #0]
 800fdca:	1d0a      	adds	r2, r1, #4
 800fdcc:	0605      	lsls	r5, r0, #24
 800fdce:	d50b      	bpl.n	800fde8 <_printf_i+0x9c>
 800fdd0:	680d      	ldr	r5, [r1, #0]
 800fdd2:	601a      	str	r2, [r3, #0]
 800fdd4:	2d00      	cmp	r5, #0
 800fdd6:	da03      	bge.n	800fde0 <_printf_i+0x94>
 800fdd8:	232d      	movs	r3, #45	; 0x2d
 800fdda:	9a04      	ldr	r2, [sp, #16]
 800fddc:	426d      	negs	r5, r5
 800fdde:	7013      	strb	r3, [r2, #0]
 800fde0:	4b61      	ldr	r3, [pc, #388]	; (800ff68 <_printf_i+0x21c>)
 800fde2:	270a      	movs	r7, #10
 800fde4:	9303      	str	r3, [sp, #12]
 800fde6:	e032      	b.n	800fe4e <_printf_i+0x102>
 800fde8:	680d      	ldr	r5, [r1, #0]
 800fdea:	601a      	str	r2, [r3, #0]
 800fdec:	0641      	lsls	r1, r0, #25
 800fdee:	d5f1      	bpl.n	800fdd4 <_printf_i+0x88>
 800fdf0:	b22d      	sxth	r5, r5
 800fdf2:	e7ef      	b.n	800fdd4 <_printf_i+0x88>
 800fdf4:	680d      	ldr	r5, [r1, #0]
 800fdf6:	6819      	ldr	r1, [r3, #0]
 800fdf8:	1d08      	adds	r0, r1, #4
 800fdfa:	6018      	str	r0, [r3, #0]
 800fdfc:	062e      	lsls	r6, r5, #24
 800fdfe:	d501      	bpl.n	800fe04 <_printf_i+0xb8>
 800fe00:	680d      	ldr	r5, [r1, #0]
 800fe02:	e003      	b.n	800fe0c <_printf_i+0xc0>
 800fe04:	066d      	lsls	r5, r5, #25
 800fe06:	d5fb      	bpl.n	800fe00 <_printf_i+0xb4>
 800fe08:	680d      	ldr	r5, [r1, #0]
 800fe0a:	b2ad      	uxth	r5, r5
 800fe0c:	4b56      	ldr	r3, [pc, #344]	; (800ff68 <_printf_i+0x21c>)
 800fe0e:	270a      	movs	r7, #10
 800fe10:	9303      	str	r3, [sp, #12]
 800fe12:	2a6f      	cmp	r2, #111	; 0x6f
 800fe14:	d117      	bne.n	800fe46 <_printf_i+0xfa>
 800fe16:	2708      	movs	r7, #8
 800fe18:	e015      	b.n	800fe46 <_printf_i+0xfa>
 800fe1a:	3145      	adds	r1, #69	; 0x45
 800fe1c:	700a      	strb	r2, [r1, #0]
 800fe1e:	4a52      	ldr	r2, [pc, #328]	; (800ff68 <_printf_i+0x21c>)
 800fe20:	9203      	str	r2, [sp, #12]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	6821      	ldr	r1, [r4, #0]
 800fe26:	ca20      	ldmia	r2!, {r5}
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	0608      	lsls	r0, r1, #24
 800fe2c:	d550      	bpl.n	800fed0 <_printf_i+0x184>
 800fe2e:	07cb      	lsls	r3, r1, #31
 800fe30:	d502      	bpl.n	800fe38 <_printf_i+0xec>
 800fe32:	2320      	movs	r3, #32
 800fe34:	4319      	orrs	r1, r3
 800fe36:	6021      	str	r1, [r4, #0]
 800fe38:	2710      	movs	r7, #16
 800fe3a:	2d00      	cmp	r5, #0
 800fe3c:	d103      	bne.n	800fe46 <_printf_i+0xfa>
 800fe3e:	2320      	movs	r3, #32
 800fe40:	6822      	ldr	r2, [r4, #0]
 800fe42:	439a      	bics	r2, r3
 800fe44:	6022      	str	r2, [r4, #0]
 800fe46:	0023      	movs	r3, r4
 800fe48:	2200      	movs	r2, #0
 800fe4a:	3343      	adds	r3, #67	; 0x43
 800fe4c:	701a      	strb	r2, [r3, #0]
 800fe4e:	6863      	ldr	r3, [r4, #4]
 800fe50:	60a3      	str	r3, [r4, #8]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	db03      	blt.n	800fe5e <_printf_i+0x112>
 800fe56:	2204      	movs	r2, #4
 800fe58:	6821      	ldr	r1, [r4, #0]
 800fe5a:	4391      	bics	r1, r2
 800fe5c:	6021      	str	r1, [r4, #0]
 800fe5e:	2d00      	cmp	r5, #0
 800fe60:	d102      	bne.n	800fe68 <_printf_i+0x11c>
 800fe62:	9e04      	ldr	r6, [sp, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00c      	beq.n	800fe82 <_printf_i+0x136>
 800fe68:	9e04      	ldr	r6, [sp, #16]
 800fe6a:	0028      	movs	r0, r5
 800fe6c:	0039      	movs	r1, r7
 800fe6e:	f7f0 fa01 	bl	8000274 <__aeabi_uidivmod>
 800fe72:	9b03      	ldr	r3, [sp, #12]
 800fe74:	3e01      	subs	r6, #1
 800fe76:	5c5b      	ldrb	r3, [r3, r1]
 800fe78:	7033      	strb	r3, [r6, #0]
 800fe7a:	002b      	movs	r3, r5
 800fe7c:	0005      	movs	r5, r0
 800fe7e:	429f      	cmp	r7, r3
 800fe80:	d9f3      	bls.n	800fe6a <_printf_i+0x11e>
 800fe82:	2f08      	cmp	r7, #8
 800fe84:	d109      	bne.n	800fe9a <_printf_i+0x14e>
 800fe86:	6823      	ldr	r3, [r4, #0]
 800fe88:	07db      	lsls	r3, r3, #31
 800fe8a:	d506      	bpl.n	800fe9a <_printf_i+0x14e>
 800fe8c:	6863      	ldr	r3, [r4, #4]
 800fe8e:	6922      	ldr	r2, [r4, #16]
 800fe90:	4293      	cmp	r3, r2
 800fe92:	dc02      	bgt.n	800fe9a <_printf_i+0x14e>
 800fe94:	2330      	movs	r3, #48	; 0x30
 800fe96:	3e01      	subs	r6, #1
 800fe98:	7033      	strb	r3, [r6, #0]
 800fe9a:	9b04      	ldr	r3, [sp, #16]
 800fe9c:	1b9b      	subs	r3, r3, r6
 800fe9e:	6123      	str	r3, [r4, #16]
 800fea0:	9b07      	ldr	r3, [sp, #28]
 800fea2:	0021      	movs	r1, r4
 800fea4:	9300      	str	r3, [sp, #0]
 800fea6:	9805      	ldr	r0, [sp, #20]
 800fea8:	9b06      	ldr	r3, [sp, #24]
 800feaa:	aa09      	add	r2, sp, #36	; 0x24
 800feac:	f7ff fede 	bl	800fc6c <_printf_common>
 800feb0:	1c43      	adds	r3, r0, #1
 800feb2:	d135      	bne.n	800ff20 <_printf_i+0x1d4>
 800feb4:	2001      	movs	r0, #1
 800feb6:	4240      	negs	r0, r0
 800feb8:	b00b      	add	sp, #44	; 0x2c
 800feba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800febc:	2220      	movs	r2, #32
 800febe:	6809      	ldr	r1, [r1, #0]
 800fec0:	430a      	orrs	r2, r1
 800fec2:	6022      	str	r2, [r4, #0]
 800fec4:	0022      	movs	r2, r4
 800fec6:	2178      	movs	r1, #120	; 0x78
 800fec8:	3245      	adds	r2, #69	; 0x45
 800feca:	7011      	strb	r1, [r2, #0]
 800fecc:	4a27      	ldr	r2, [pc, #156]	; (800ff6c <_printf_i+0x220>)
 800fece:	e7a7      	b.n	800fe20 <_printf_i+0xd4>
 800fed0:	0648      	lsls	r0, r1, #25
 800fed2:	d5ac      	bpl.n	800fe2e <_printf_i+0xe2>
 800fed4:	b2ad      	uxth	r5, r5
 800fed6:	e7aa      	b.n	800fe2e <_printf_i+0xe2>
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	680d      	ldr	r5, [r1, #0]
 800fedc:	1d10      	adds	r0, r2, #4
 800fede:	6949      	ldr	r1, [r1, #20]
 800fee0:	6018      	str	r0, [r3, #0]
 800fee2:	6813      	ldr	r3, [r2, #0]
 800fee4:	062e      	lsls	r6, r5, #24
 800fee6:	d501      	bpl.n	800feec <_printf_i+0x1a0>
 800fee8:	6019      	str	r1, [r3, #0]
 800feea:	e002      	b.n	800fef2 <_printf_i+0x1a6>
 800feec:	066d      	lsls	r5, r5, #25
 800feee:	d5fb      	bpl.n	800fee8 <_printf_i+0x19c>
 800fef0:	8019      	strh	r1, [r3, #0]
 800fef2:	2300      	movs	r3, #0
 800fef4:	9e04      	ldr	r6, [sp, #16]
 800fef6:	6123      	str	r3, [r4, #16]
 800fef8:	e7d2      	b.n	800fea0 <_printf_i+0x154>
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	1d11      	adds	r1, r2, #4
 800fefe:	6019      	str	r1, [r3, #0]
 800ff00:	6816      	ldr	r6, [r2, #0]
 800ff02:	2100      	movs	r1, #0
 800ff04:	0030      	movs	r0, r6
 800ff06:	6862      	ldr	r2, [r4, #4]
 800ff08:	f000 ff1e 	bl	8010d48 <memchr>
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d001      	beq.n	800ff14 <_printf_i+0x1c8>
 800ff10:	1b80      	subs	r0, r0, r6
 800ff12:	6060      	str	r0, [r4, #4]
 800ff14:	6863      	ldr	r3, [r4, #4]
 800ff16:	6123      	str	r3, [r4, #16]
 800ff18:	2300      	movs	r3, #0
 800ff1a:	9a04      	ldr	r2, [sp, #16]
 800ff1c:	7013      	strb	r3, [r2, #0]
 800ff1e:	e7bf      	b.n	800fea0 <_printf_i+0x154>
 800ff20:	6923      	ldr	r3, [r4, #16]
 800ff22:	0032      	movs	r2, r6
 800ff24:	9906      	ldr	r1, [sp, #24]
 800ff26:	9805      	ldr	r0, [sp, #20]
 800ff28:	9d07      	ldr	r5, [sp, #28]
 800ff2a:	47a8      	blx	r5
 800ff2c:	1c43      	adds	r3, r0, #1
 800ff2e:	d0c1      	beq.n	800feb4 <_printf_i+0x168>
 800ff30:	6823      	ldr	r3, [r4, #0]
 800ff32:	079b      	lsls	r3, r3, #30
 800ff34:	d415      	bmi.n	800ff62 <_printf_i+0x216>
 800ff36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff38:	68e0      	ldr	r0, [r4, #12]
 800ff3a:	4298      	cmp	r0, r3
 800ff3c:	dabc      	bge.n	800feb8 <_printf_i+0x16c>
 800ff3e:	0018      	movs	r0, r3
 800ff40:	e7ba      	b.n	800feb8 <_printf_i+0x16c>
 800ff42:	0022      	movs	r2, r4
 800ff44:	2301      	movs	r3, #1
 800ff46:	9906      	ldr	r1, [sp, #24]
 800ff48:	9805      	ldr	r0, [sp, #20]
 800ff4a:	9e07      	ldr	r6, [sp, #28]
 800ff4c:	3219      	adds	r2, #25
 800ff4e:	47b0      	blx	r6
 800ff50:	1c43      	adds	r3, r0, #1
 800ff52:	d0af      	beq.n	800feb4 <_printf_i+0x168>
 800ff54:	3501      	adds	r5, #1
 800ff56:	68e3      	ldr	r3, [r4, #12]
 800ff58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff5a:	1a9b      	subs	r3, r3, r2
 800ff5c:	42ab      	cmp	r3, r5
 800ff5e:	dcf0      	bgt.n	800ff42 <_printf_i+0x1f6>
 800ff60:	e7e9      	b.n	800ff36 <_printf_i+0x1ea>
 800ff62:	2500      	movs	r5, #0
 800ff64:	e7f7      	b.n	800ff56 <_printf_i+0x20a>
 800ff66:	46c0      	nop			; (mov r8, r8)
 800ff68:	08013436 	.word	0x08013436
 800ff6c:	08013447 	.word	0x08013447

0800ff70 <sniprintf>:
 800ff70:	b40c      	push	{r2, r3}
 800ff72:	b530      	push	{r4, r5, lr}
 800ff74:	4b17      	ldr	r3, [pc, #92]	; (800ffd4 <sniprintf+0x64>)
 800ff76:	000c      	movs	r4, r1
 800ff78:	681d      	ldr	r5, [r3, #0]
 800ff7a:	b09d      	sub	sp, #116	; 0x74
 800ff7c:	2900      	cmp	r1, #0
 800ff7e:	da08      	bge.n	800ff92 <sniprintf+0x22>
 800ff80:	238b      	movs	r3, #139	; 0x8b
 800ff82:	2001      	movs	r0, #1
 800ff84:	602b      	str	r3, [r5, #0]
 800ff86:	4240      	negs	r0, r0
 800ff88:	b01d      	add	sp, #116	; 0x74
 800ff8a:	bc30      	pop	{r4, r5}
 800ff8c:	bc08      	pop	{r3}
 800ff8e:	b002      	add	sp, #8
 800ff90:	4718      	bx	r3
 800ff92:	2382      	movs	r3, #130	; 0x82
 800ff94:	466a      	mov	r2, sp
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	8293      	strh	r3, [r2, #20]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	9002      	str	r0, [sp, #8]
 800ff9e:	9006      	str	r0, [sp, #24]
 800ffa0:	4299      	cmp	r1, r3
 800ffa2:	d000      	beq.n	800ffa6 <sniprintf+0x36>
 800ffa4:	1e4b      	subs	r3, r1, #1
 800ffa6:	9304      	str	r3, [sp, #16]
 800ffa8:	9307      	str	r3, [sp, #28]
 800ffaa:	2301      	movs	r3, #1
 800ffac:	466a      	mov	r2, sp
 800ffae:	425b      	negs	r3, r3
 800ffb0:	82d3      	strh	r3, [r2, #22]
 800ffb2:	0028      	movs	r0, r5
 800ffb4:	ab21      	add	r3, sp, #132	; 0x84
 800ffb6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ffb8:	a902      	add	r1, sp, #8
 800ffba:	9301      	str	r3, [sp, #4]
 800ffbc:	f001 fb8e 	bl	80116dc <_svfiprintf_r>
 800ffc0:	1c43      	adds	r3, r0, #1
 800ffc2:	da01      	bge.n	800ffc8 <sniprintf+0x58>
 800ffc4:	238b      	movs	r3, #139	; 0x8b
 800ffc6:	602b      	str	r3, [r5, #0]
 800ffc8:	2c00      	cmp	r4, #0
 800ffca:	d0dd      	beq.n	800ff88 <sniprintf+0x18>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	9a02      	ldr	r2, [sp, #8]
 800ffd0:	7013      	strb	r3, [r2, #0]
 800ffd2:	e7d9      	b.n	800ff88 <sniprintf+0x18>
 800ffd4:	2000019c 	.word	0x2000019c

0800ffd8 <quorem>:
 800ffd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffda:	0006      	movs	r6, r0
 800ffdc:	690d      	ldr	r5, [r1, #16]
 800ffde:	6933      	ldr	r3, [r6, #16]
 800ffe0:	b087      	sub	sp, #28
 800ffe2:	2000      	movs	r0, #0
 800ffe4:	9102      	str	r1, [sp, #8]
 800ffe6:	42ab      	cmp	r3, r5
 800ffe8:	db6b      	blt.n	80100c2 <quorem+0xea>
 800ffea:	000b      	movs	r3, r1
 800ffec:	3d01      	subs	r5, #1
 800ffee:	00ac      	lsls	r4, r5, #2
 800fff0:	3314      	adds	r3, #20
 800fff2:	9305      	str	r3, [sp, #20]
 800fff4:	191b      	adds	r3, r3, r4
 800fff6:	9303      	str	r3, [sp, #12]
 800fff8:	0033      	movs	r3, r6
 800fffa:	3314      	adds	r3, #20
 800fffc:	9301      	str	r3, [sp, #4]
 800fffe:	191c      	adds	r4, r3, r4
 8010000:	9b03      	ldr	r3, [sp, #12]
 8010002:	6827      	ldr	r7, [r4, #0]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	0038      	movs	r0, r7
 8010008:	9300      	str	r3, [sp, #0]
 801000a:	3301      	adds	r3, #1
 801000c:	0019      	movs	r1, r3
 801000e:	9304      	str	r3, [sp, #16]
 8010010:	f7f0 f8aa 	bl	8000168 <__udivsi3>
 8010014:	9b04      	ldr	r3, [sp, #16]
 8010016:	9000      	str	r0, [sp, #0]
 8010018:	429f      	cmp	r7, r3
 801001a:	d329      	bcc.n	8010070 <quorem+0x98>
 801001c:	2300      	movs	r3, #0
 801001e:	469c      	mov	ip, r3
 8010020:	9801      	ldr	r0, [sp, #4]
 8010022:	9f05      	ldr	r7, [sp, #20]
 8010024:	9304      	str	r3, [sp, #16]
 8010026:	cf08      	ldmia	r7!, {r3}
 8010028:	9a00      	ldr	r2, [sp, #0]
 801002a:	b299      	uxth	r1, r3
 801002c:	4351      	muls	r1, r2
 801002e:	0c1b      	lsrs	r3, r3, #16
 8010030:	4353      	muls	r3, r2
 8010032:	4461      	add	r1, ip
 8010034:	0c0a      	lsrs	r2, r1, #16
 8010036:	189b      	adds	r3, r3, r2
 8010038:	0c1a      	lsrs	r2, r3, #16
 801003a:	9305      	str	r3, [sp, #20]
 801003c:	6803      	ldr	r3, [r0, #0]
 801003e:	4694      	mov	ip, r2
 8010040:	b29a      	uxth	r2, r3
 8010042:	9b04      	ldr	r3, [sp, #16]
 8010044:	b289      	uxth	r1, r1
 8010046:	18d2      	adds	r2, r2, r3
 8010048:	6803      	ldr	r3, [r0, #0]
 801004a:	1a52      	subs	r2, r2, r1
 801004c:	0c19      	lsrs	r1, r3, #16
 801004e:	466b      	mov	r3, sp
 8010050:	8a9b      	ldrh	r3, [r3, #20]
 8010052:	1acb      	subs	r3, r1, r3
 8010054:	1411      	asrs	r1, r2, #16
 8010056:	185b      	adds	r3, r3, r1
 8010058:	1419      	asrs	r1, r3, #16
 801005a:	b292      	uxth	r2, r2
 801005c:	041b      	lsls	r3, r3, #16
 801005e:	431a      	orrs	r2, r3
 8010060:	9b03      	ldr	r3, [sp, #12]
 8010062:	9104      	str	r1, [sp, #16]
 8010064:	c004      	stmia	r0!, {r2}
 8010066:	42bb      	cmp	r3, r7
 8010068:	d2dd      	bcs.n	8010026 <quorem+0x4e>
 801006a:	6823      	ldr	r3, [r4, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d02e      	beq.n	80100ce <quorem+0xf6>
 8010070:	0030      	movs	r0, r6
 8010072:	9902      	ldr	r1, [sp, #8]
 8010074:	f001 f902 	bl	801127c <__mcmp>
 8010078:	2800      	cmp	r0, #0
 801007a:	db21      	blt.n	80100c0 <quorem+0xe8>
 801007c:	0030      	movs	r0, r6
 801007e:	2400      	movs	r4, #0
 8010080:	9b00      	ldr	r3, [sp, #0]
 8010082:	9902      	ldr	r1, [sp, #8]
 8010084:	3301      	adds	r3, #1
 8010086:	9300      	str	r3, [sp, #0]
 8010088:	3014      	adds	r0, #20
 801008a:	3114      	adds	r1, #20
 801008c:	6802      	ldr	r2, [r0, #0]
 801008e:	c908      	ldmia	r1!, {r3}
 8010090:	b292      	uxth	r2, r2
 8010092:	1914      	adds	r4, r2, r4
 8010094:	b29a      	uxth	r2, r3
 8010096:	1aa2      	subs	r2, r4, r2
 8010098:	6804      	ldr	r4, [r0, #0]
 801009a:	0c1b      	lsrs	r3, r3, #16
 801009c:	0c24      	lsrs	r4, r4, #16
 801009e:	1ae3      	subs	r3, r4, r3
 80100a0:	1414      	asrs	r4, r2, #16
 80100a2:	191b      	adds	r3, r3, r4
 80100a4:	141c      	asrs	r4, r3, #16
 80100a6:	b292      	uxth	r2, r2
 80100a8:	041b      	lsls	r3, r3, #16
 80100aa:	4313      	orrs	r3, r2
 80100ac:	c008      	stmia	r0!, {r3}
 80100ae:	9b03      	ldr	r3, [sp, #12]
 80100b0:	428b      	cmp	r3, r1
 80100b2:	d2eb      	bcs.n	801008c <quorem+0xb4>
 80100b4:	9a01      	ldr	r2, [sp, #4]
 80100b6:	00ab      	lsls	r3, r5, #2
 80100b8:	18d3      	adds	r3, r2, r3
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	2a00      	cmp	r2, #0
 80100be:	d010      	beq.n	80100e2 <quorem+0x10a>
 80100c0:	9800      	ldr	r0, [sp, #0]
 80100c2:	b007      	add	sp, #28
 80100c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100c6:	6823      	ldr	r3, [r4, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d104      	bne.n	80100d6 <quorem+0xfe>
 80100cc:	3d01      	subs	r5, #1
 80100ce:	9b01      	ldr	r3, [sp, #4]
 80100d0:	3c04      	subs	r4, #4
 80100d2:	42a3      	cmp	r3, r4
 80100d4:	d3f7      	bcc.n	80100c6 <quorem+0xee>
 80100d6:	6135      	str	r5, [r6, #16]
 80100d8:	e7ca      	b.n	8010070 <quorem+0x98>
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	2a00      	cmp	r2, #0
 80100de:	d104      	bne.n	80100ea <quorem+0x112>
 80100e0:	3d01      	subs	r5, #1
 80100e2:	9a01      	ldr	r2, [sp, #4]
 80100e4:	3b04      	subs	r3, #4
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d3f7      	bcc.n	80100da <quorem+0x102>
 80100ea:	6135      	str	r5, [r6, #16]
 80100ec:	e7e8      	b.n	80100c0 <quorem+0xe8>
	...

080100f0 <_dtoa_r>:
 80100f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100f2:	b09d      	sub	sp, #116	; 0x74
 80100f4:	9202      	str	r2, [sp, #8]
 80100f6:	9303      	str	r3, [sp, #12]
 80100f8:	9b02      	ldr	r3, [sp, #8]
 80100fa:	9c03      	ldr	r4, [sp, #12]
 80100fc:	930a      	str	r3, [sp, #40]	; 0x28
 80100fe:	940b      	str	r4, [sp, #44]	; 0x2c
 8010100:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010102:	0007      	movs	r7, r0
 8010104:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8010106:	2c00      	cmp	r4, #0
 8010108:	d10e      	bne.n	8010128 <_dtoa_r+0x38>
 801010a:	2010      	movs	r0, #16
 801010c:	f000 fe12 	bl	8010d34 <malloc>
 8010110:	1e02      	subs	r2, r0, #0
 8010112:	6278      	str	r0, [r7, #36]	; 0x24
 8010114:	d104      	bne.n	8010120 <_dtoa_r+0x30>
 8010116:	21ea      	movs	r1, #234	; 0xea
 8010118:	4bc0      	ldr	r3, [pc, #768]	; (801041c <_dtoa_r+0x32c>)
 801011a:	48c1      	ldr	r0, [pc, #772]	; (8010420 <_dtoa_r+0x330>)
 801011c:	f001 fbf0 	bl	8011900 <__assert_func>
 8010120:	6044      	str	r4, [r0, #4]
 8010122:	6084      	str	r4, [r0, #8]
 8010124:	6004      	str	r4, [r0, #0]
 8010126:	60c4      	str	r4, [r0, #12]
 8010128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012a:	6819      	ldr	r1, [r3, #0]
 801012c:	2900      	cmp	r1, #0
 801012e:	d00a      	beq.n	8010146 <_dtoa_r+0x56>
 8010130:	685a      	ldr	r2, [r3, #4]
 8010132:	2301      	movs	r3, #1
 8010134:	4093      	lsls	r3, r2
 8010136:	604a      	str	r2, [r1, #4]
 8010138:	608b      	str	r3, [r1, #8]
 801013a:	0038      	movs	r0, r7
 801013c:	f000 fe5c 	bl	8010df8 <_Bfree>
 8010140:	2200      	movs	r2, #0
 8010142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010144:	601a      	str	r2, [r3, #0]
 8010146:	9b03      	ldr	r3, [sp, #12]
 8010148:	2b00      	cmp	r3, #0
 801014a:	da21      	bge.n	8010190 <_dtoa_r+0xa0>
 801014c:	2301      	movs	r3, #1
 801014e:	602b      	str	r3, [r5, #0]
 8010150:	9b03      	ldr	r3, [sp, #12]
 8010152:	005b      	lsls	r3, r3, #1
 8010154:	085b      	lsrs	r3, r3, #1
 8010156:	930b      	str	r3, [sp, #44]	; 0x2c
 8010158:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801015a:	4bb2      	ldr	r3, [pc, #712]	; (8010424 <_dtoa_r+0x334>)
 801015c:	002a      	movs	r2, r5
 801015e:	9318      	str	r3, [sp, #96]	; 0x60
 8010160:	401a      	ands	r2, r3
 8010162:	429a      	cmp	r2, r3
 8010164:	d117      	bne.n	8010196 <_dtoa_r+0xa6>
 8010166:	4bb0      	ldr	r3, [pc, #704]	; (8010428 <_dtoa_r+0x338>)
 8010168:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801016a:	0328      	lsls	r0, r5, #12
 801016c:	6013      	str	r3, [r2, #0]
 801016e:	9b02      	ldr	r3, [sp, #8]
 8010170:	0b00      	lsrs	r0, r0, #12
 8010172:	4318      	orrs	r0, r3
 8010174:	d101      	bne.n	801017a <_dtoa_r+0x8a>
 8010176:	f000 fdc3 	bl	8010d00 <_dtoa_r+0xc10>
 801017a:	48ac      	ldr	r0, [pc, #688]	; (801042c <_dtoa_r+0x33c>)
 801017c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801017e:	9005      	str	r0, [sp, #20]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d002      	beq.n	801018a <_dtoa_r+0x9a>
 8010184:	4baa      	ldr	r3, [pc, #680]	; (8010430 <_dtoa_r+0x340>)
 8010186:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010188:	6013      	str	r3, [r2, #0]
 801018a:	9805      	ldr	r0, [sp, #20]
 801018c:	b01d      	add	sp, #116	; 0x74
 801018e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010190:	2300      	movs	r3, #0
 8010192:	602b      	str	r3, [r5, #0]
 8010194:	e7e0      	b.n	8010158 <_dtoa_r+0x68>
 8010196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010198:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801019a:	9312      	str	r3, [sp, #72]	; 0x48
 801019c:	9413      	str	r4, [sp, #76]	; 0x4c
 801019e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80101a0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80101a2:	2200      	movs	r2, #0
 80101a4:	2300      	movs	r3, #0
 80101a6:	f7f0 f965 	bl	8000474 <__aeabi_dcmpeq>
 80101aa:	1e04      	subs	r4, r0, #0
 80101ac:	d00b      	beq.n	80101c6 <_dtoa_r+0xd6>
 80101ae:	2301      	movs	r3, #1
 80101b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80101b2:	6013      	str	r3, [r2, #0]
 80101b4:	4b9f      	ldr	r3, [pc, #636]	; (8010434 <_dtoa_r+0x344>)
 80101b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80101b8:	9305      	str	r3, [sp, #20]
 80101ba:	2a00      	cmp	r2, #0
 80101bc:	d0e5      	beq.n	801018a <_dtoa_r+0x9a>
 80101be:	4a9e      	ldr	r2, [pc, #632]	; (8010438 <_dtoa_r+0x348>)
 80101c0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80101c2:	600a      	str	r2, [r1, #0]
 80101c4:	e7e1      	b.n	801018a <_dtoa_r+0x9a>
 80101c6:	ab1a      	add	r3, sp, #104	; 0x68
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	ab1b      	add	r3, sp, #108	; 0x6c
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	0038      	movs	r0, r7
 80101d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80101d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80101d4:	f001 f906 	bl	80113e4 <__d2b>
 80101d8:	006e      	lsls	r6, r5, #1
 80101da:	9004      	str	r0, [sp, #16]
 80101dc:	0d76      	lsrs	r6, r6, #21
 80101de:	d100      	bne.n	80101e2 <_dtoa_r+0xf2>
 80101e0:	e07c      	b.n	80102dc <_dtoa_r+0x1ec>
 80101e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80101e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80101e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80101e8:	4a94      	ldr	r2, [pc, #592]	; (801043c <_dtoa_r+0x34c>)
 80101ea:	031b      	lsls	r3, r3, #12
 80101ec:	0b1b      	lsrs	r3, r3, #12
 80101ee:	431a      	orrs	r2, r3
 80101f0:	0011      	movs	r1, r2
 80101f2:	4b93      	ldr	r3, [pc, #588]	; (8010440 <_dtoa_r+0x350>)
 80101f4:	9416      	str	r4, [sp, #88]	; 0x58
 80101f6:	18f6      	adds	r6, r6, r3
 80101f8:	2200      	movs	r2, #0
 80101fa:	4b92      	ldr	r3, [pc, #584]	; (8010444 <_dtoa_r+0x354>)
 80101fc:	f7f1 fe7a 	bl	8001ef4 <__aeabi_dsub>
 8010200:	4a91      	ldr	r2, [pc, #580]	; (8010448 <_dtoa_r+0x358>)
 8010202:	4b92      	ldr	r3, [pc, #584]	; (801044c <_dtoa_r+0x35c>)
 8010204:	f7f1 fc0a 	bl	8001a1c <__aeabi_dmul>
 8010208:	4a91      	ldr	r2, [pc, #580]	; (8010450 <_dtoa_r+0x360>)
 801020a:	4b92      	ldr	r3, [pc, #584]	; (8010454 <_dtoa_r+0x364>)
 801020c:	f7f0 fc96 	bl	8000b3c <__aeabi_dadd>
 8010210:	0004      	movs	r4, r0
 8010212:	0030      	movs	r0, r6
 8010214:	000d      	movs	r5, r1
 8010216:	f7f2 fa53 	bl	80026c0 <__aeabi_i2d>
 801021a:	4a8f      	ldr	r2, [pc, #572]	; (8010458 <_dtoa_r+0x368>)
 801021c:	4b8f      	ldr	r3, [pc, #572]	; (801045c <_dtoa_r+0x36c>)
 801021e:	f7f1 fbfd 	bl	8001a1c <__aeabi_dmul>
 8010222:	0002      	movs	r2, r0
 8010224:	000b      	movs	r3, r1
 8010226:	0020      	movs	r0, r4
 8010228:	0029      	movs	r1, r5
 801022a:	f7f0 fc87 	bl	8000b3c <__aeabi_dadd>
 801022e:	0004      	movs	r4, r0
 8010230:	000d      	movs	r5, r1
 8010232:	f7f2 fa0f 	bl	8002654 <__aeabi_d2iz>
 8010236:	2200      	movs	r2, #0
 8010238:	9002      	str	r0, [sp, #8]
 801023a:	2300      	movs	r3, #0
 801023c:	0020      	movs	r0, r4
 801023e:	0029      	movs	r1, r5
 8010240:	f7f0 f91e 	bl	8000480 <__aeabi_dcmplt>
 8010244:	2800      	cmp	r0, #0
 8010246:	d00b      	beq.n	8010260 <_dtoa_r+0x170>
 8010248:	9802      	ldr	r0, [sp, #8]
 801024a:	f7f2 fa39 	bl	80026c0 <__aeabi_i2d>
 801024e:	002b      	movs	r3, r5
 8010250:	0022      	movs	r2, r4
 8010252:	f7f0 f90f 	bl	8000474 <__aeabi_dcmpeq>
 8010256:	4243      	negs	r3, r0
 8010258:	4158      	adcs	r0, r3
 801025a:	9b02      	ldr	r3, [sp, #8]
 801025c:	1a1b      	subs	r3, r3, r0
 801025e:	9302      	str	r3, [sp, #8]
 8010260:	2301      	movs	r3, #1
 8010262:	9315      	str	r3, [sp, #84]	; 0x54
 8010264:	9b02      	ldr	r3, [sp, #8]
 8010266:	2b16      	cmp	r3, #22
 8010268:	d80f      	bhi.n	801028a <_dtoa_r+0x19a>
 801026a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801026c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801026e:	00da      	lsls	r2, r3, #3
 8010270:	4b7b      	ldr	r3, [pc, #492]	; (8010460 <_dtoa_r+0x370>)
 8010272:	189b      	adds	r3, r3, r2
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	f7f0 f902 	bl	8000480 <__aeabi_dcmplt>
 801027c:	2800      	cmp	r0, #0
 801027e:	d049      	beq.n	8010314 <_dtoa_r+0x224>
 8010280:	9b02      	ldr	r3, [sp, #8]
 8010282:	3b01      	subs	r3, #1
 8010284:	9302      	str	r3, [sp, #8]
 8010286:	2300      	movs	r3, #0
 8010288:	9315      	str	r3, [sp, #84]	; 0x54
 801028a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801028c:	1b9e      	subs	r6, r3, r6
 801028e:	2300      	movs	r3, #0
 8010290:	9308      	str	r3, [sp, #32]
 8010292:	0033      	movs	r3, r6
 8010294:	3b01      	subs	r3, #1
 8010296:	930d      	str	r3, [sp, #52]	; 0x34
 8010298:	d504      	bpl.n	80102a4 <_dtoa_r+0x1b4>
 801029a:	2301      	movs	r3, #1
 801029c:	1b9b      	subs	r3, r3, r6
 801029e:	9308      	str	r3, [sp, #32]
 80102a0:	2300      	movs	r3, #0
 80102a2:	930d      	str	r3, [sp, #52]	; 0x34
 80102a4:	9b02      	ldr	r3, [sp, #8]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	db36      	blt.n	8010318 <_dtoa_r+0x228>
 80102aa:	9a02      	ldr	r2, [sp, #8]
 80102ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102ae:	4694      	mov	ip, r2
 80102b0:	4463      	add	r3, ip
 80102b2:	930d      	str	r3, [sp, #52]	; 0x34
 80102b4:	2300      	movs	r3, #0
 80102b6:	9214      	str	r2, [sp, #80]	; 0x50
 80102b8:	930e      	str	r3, [sp, #56]	; 0x38
 80102ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80102bc:	2401      	movs	r4, #1
 80102be:	2b09      	cmp	r3, #9
 80102c0:	d862      	bhi.n	8010388 <_dtoa_r+0x298>
 80102c2:	2b05      	cmp	r3, #5
 80102c4:	dd02      	ble.n	80102cc <_dtoa_r+0x1dc>
 80102c6:	2400      	movs	r4, #0
 80102c8:	3b04      	subs	r3, #4
 80102ca:	9322      	str	r3, [sp, #136]	; 0x88
 80102cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80102ce:	1e98      	subs	r0, r3, #2
 80102d0:	2803      	cmp	r0, #3
 80102d2:	d862      	bhi.n	801039a <_dtoa_r+0x2aa>
 80102d4:	f7ef ff2a 	bl	800012c <__gnu_thumb1_case_uqi>
 80102d8:	56343629 	.word	0x56343629
 80102dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80102de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80102e0:	189e      	adds	r6, r3, r2
 80102e2:	4b60      	ldr	r3, [pc, #384]	; (8010464 <_dtoa_r+0x374>)
 80102e4:	18f2      	adds	r2, r6, r3
 80102e6:	2a20      	cmp	r2, #32
 80102e8:	dd0f      	ble.n	801030a <_dtoa_r+0x21a>
 80102ea:	2340      	movs	r3, #64	; 0x40
 80102ec:	1a9b      	subs	r3, r3, r2
 80102ee:	409d      	lsls	r5, r3
 80102f0:	4b5d      	ldr	r3, [pc, #372]	; (8010468 <_dtoa_r+0x378>)
 80102f2:	9802      	ldr	r0, [sp, #8]
 80102f4:	18f3      	adds	r3, r6, r3
 80102f6:	40d8      	lsrs	r0, r3
 80102f8:	4328      	orrs	r0, r5
 80102fa:	f7f2 fa11 	bl	8002720 <__aeabi_ui2d>
 80102fe:	2301      	movs	r3, #1
 8010300:	4c5a      	ldr	r4, [pc, #360]	; (801046c <_dtoa_r+0x37c>)
 8010302:	3e01      	subs	r6, #1
 8010304:	1909      	adds	r1, r1, r4
 8010306:	9316      	str	r3, [sp, #88]	; 0x58
 8010308:	e776      	b.n	80101f8 <_dtoa_r+0x108>
 801030a:	2320      	movs	r3, #32
 801030c:	9802      	ldr	r0, [sp, #8]
 801030e:	1a9b      	subs	r3, r3, r2
 8010310:	4098      	lsls	r0, r3
 8010312:	e7f2      	b.n	80102fa <_dtoa_r+0x20a>
 8010314:	9015      	str	r0, [sp, #84]	; 0x54
 8010316:	e7b8      	b.n	801028a <_dtoa_r+0x19a>
 8010318:	9b08      	ldr	r3, [sp, #32]
 801031a:	9a02      	ldr	r2, [sp, #8]
 801031c:	1a9b      	subs	r3, r3, r2
 801031e:	9308      	str	r3, [sp, #32]
 8010320:	4253      	negs	r3, r2
 8010322:	930e      	str	r3, [sp, #56]	; 0x38
 8010324:	2300      	movs	r3, #0
 8010326:	9314      	str	r3, [sp, #80]	; 0x50
 8010328:	e7c7      	b.n	80102ba <_dtoa_r+0x1ca>
 801032a:	2300      	movs	r3, #0
 801032c:	930f      	str	r3, [sp, #60]	; 0x3c
 801032e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010330:	2b00      	cmp	r3, #0
 8010332:	dc36      	bgt.n	80103a2 <_dtoa_r+0x2b2>
 8010334:	2301      	movs	r3, #1
 8010336:	001a      	movs	r2, r3
 8010338:	930c      	str	r3, [sp, #48]	; 0x30
 801033a:	9306      	str	r3, [sp, #24]
 801033c:	9223      	str	r2, [sp, #140]	; 0x8c
 801033e:	e00d      	b.n	801035c <_dtoa_r+0x26c>
 8010340:	2301      	movs	r3, #1
 8010342:	e7f3      	b.n	801032c <_dtoa_r+0x23c>
 8010344:	2300      	movs	r3, #0
 8010346:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010348:	930f      	str	r3, [sp, #60]	; 0x3c
 801034a:	4694      	mov	ip, r2
 801034c:	9b02      	ldr	r3, [sp, #8]
 801034e:	4463      	add	r3, ip
 8010350:	930c      	str	r3, [sp, #48]	; 0x30
 8010352:	3301      	adds	r3, #1
 8010354:	9306      	str	r3, [sp, #24]
 8010356:	2b00      	cmp	r3, #0
 8010358:	dc00      	bgt.n	801035c <_dtoa_r+0x26c>
 801035a:	2301      	movs	r3, #1
 801035c:	2200      	movs	r2, #0
 801035e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010360:	6042      	str	r2, [r0, #4]
 8010362:	3204      	adds	r2, #4
 8010364:	0015      	movs	r5, r2
 8010366:	3514      	adds	r5, #20
 8010368:	6841      	ldr	r1, [r0, #4]
 801036a:	429d      	cmp	r5, r3
 801036c:	d91d      	bls.n	80103aa <_dtoa_r+0x2ba>
 801036e:	0038      	movs	r0, r7
 8010370:	f000 fcfe 	bl	8010d70 <_Balloc>
 8010374:	9005      	str	r0, [sp, #20]
 8010376:	2800      	cmp	r0, #0
 8010378:	d11b      	bne.n	80103b2 <_dtoa_r+0x2c2>
 801037a:	21d5      	movs	r1, #213	; 0xd5
 801037c:	0002      	movs	r2, r0
 801037e:	4b3c      	ldr	r3, [pc, #240]	; (8010470 <_dtoa_r+0x380>)
 8010380:	0049      	lsls	r1, r1, #1
 8010382:	e6ca      	b.n	801011a <_dtoa_r+0x2a>
 8010384:	2301      	movs	r3, #1
 8010386:	e7de      	b.n	8010346 <_dtoa_r+0x256>
 8010388:	2300      	movs	r3, #0
 801038a:	940f      	str	r4, [sp, #60]	; 0x3c
 801038c:	9322      	str	r3, [sp, #136]	; 0x88
 801038e:	3b01      	subs	r3, #1
 8010390:	930c      	str	r3, [sp, #48]	; 0x30
 8010392:	9306      	str	r3, [sp, #24]
 8010394:	2200      	movs	r2, #0
 8010396:	3313      	adds	r3, #19
 8010398:	e7d0      	b.n	801033c <_dtoa_r+0x24c>
 801039a:	2301      	movs	r3, #1
 801039c:	930f      	str	r3, [sp, #60]	; 0x3c
 801039e:	3b02      	subs	r3, #2
 80103a0:	e7f6      	b.n	8010390 <_dtoa_r+0x2a0>
 80103a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80103a4:	930c      	str	r3, [sp, #48]	; 0x30
 80103a6:	9306      	str	r3, [sp, #24]
 80103a8:	e7d8      	b.n	801035c <_dtoa_r+0x26c>
 80103aa:	3101      	adds	r1, #1
 80103ac:	6041      	str	r1, [r0, #4]
 80103ae:	0052      	lsls	r2, r2, #1
 80103b0:	e7d8      	b.n	8010364 <_dtoa_r+0x274>
 80103b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b4:	9a05      	ldr	r2, [sp, #20]
 80103b6:	601a      	str	r2, [r3, #0]
 80103b8:	9b06      	ldr	r3, [sp, #24]
 80103ba:	2b0e      	cmp	r3, #14
 80103bc:	d900      	bls.n	80103c0 <_dtoa_r+0x2d0>
 80103be:	e0eb      	b.n	8010598 <_dtoa_r+0x4a8>
 80103c0:	2c00      	cmp	r4, #0
 80103c2:	d100      	bne.n	80103c6 <_dtoa_r+0x2d6>
 80103c4:	e0e8      	b.n	8010598 <_dtoa_r+0x4a8>
 80103c6:	9b02      	ldr	r3, [sp, #8]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	dd68      	ble.n	801049e <_dtoa_r+0x3ae>
 80103cc:	001a      	movs	r2, r3
 80103ce:	210f      	movs	r1, #15
 80103d0:	4b23      	ldr	r3, [pc, #140]	; (8010460 <_dtoa_r+0x370>)
 80103d2:	400a      	ands	r2, r1
 80103d4:	00d2      	lsls	r2, r2, #3
 80103d6:	189b      	adds	r3, r3, r2
 80103d8:	681d      	ldr	r5, [r3, #0]
 80103da:	685e      	ldr	r6, [r3, #4]
 80103dc:	9b02      	ldr	r3, [sp, #8]
 80103de:	111c      	asrs	r4, r3, #4
 80103e0:	2302      	movs	r3, #2
 80103e2:	9310      	str	r3, [sp, #64]	; 0x40
 80103e4:	9b02      	ldr	r3, [sp, #8]
 80103e6:	05db      	lsls	r3, r3, #23
 80103e8:	d50b      	bpl.n	8010402 <_dtoa_r+0x312>
 80103ea:	4b22      	ldr	r3, [pc, #136]	; (8010474 <_dtoa_r+0x384>)
 80103ec:	400c      	ands	r4, r1
 80103ee:	6a1a      	ldr	r2, [r3, #32]
 80103f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80103f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80103f6:	f7f0 ff0b 	bl	8001210 <__aeabi_ddiv>
 80103fa:	2303      	movs	r3, #3
 80103fc:	900a      	str	r0, [sp, #40]	; 0x28
 80103fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8010400:	9310      	str	r3, [sp, #64]	; 0x40
 8010402:	4b1c      	ldr	r3, [pc, #112]	; (8010474 <_dtoa_r+0x384>)
 8010404:	9307      	str	r3, [sp, #28]
 8010406:	2c00      	cmp	r4, #0
 8010408:	d136      	bne.n	8010478 <_dtoa_r+0x388>
 801040a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801040c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801040e:	002a      	movs	r2, r5
 8010410:	0033      	movs	r3, r6
 8010412:	f7f0 fefd 	bl	8001210 <__aeabi_ddiv>
 8010416:	900a      	str	r0, [sp, #40]	; 0x28
 8010418:	910b      	str	r1, [sp, #44]	; 0x2c
 801041a:	e05c      	b.n	80104d6 <_dtoa_r+0x3e6>
 801041c:	08013465 	.word	0x08013465
 8010420:	0801347c 	.word	0x0801347c
 8010424:	7ff00000 	.word	0x7ff00000
 8010428:	0000270f 	.word	0x0000270f
 801042c:	08013461 	.word	0x08013461
 8010430:	08013464 	.word	0x08013464
 8010434:	08013434 	.word	0x08013434
 8010438:	08013435 	.word	0x08013435
 801043c:	3ff00000 	.word	0x3ff00000
 8010440:	fffffc01 	.word	0xfffffc01
 8010444:	3ff80000 	.word	0x3ff80000
 8010448:	636f4361 	.word	0x636f4361
 801044c:	3fd287a7 	.word	0x3fd287a7
 8010450:	8b60c8b3 	.word	0x8b60c8b3
 8010454:	3fc68a28 	.word	0x3fc68a28
 8010458:	509f79fb 	.word	0x509f79fb
 801045c:	3fd34413 	.word	0x3fd34413
 8010460:	08013578 	.word	0x08013578
 8010464:	00000432 	.word	0x00000432
 8010468:	00000412 	.word	0x00000412
 801046c:	fe100000 	.word	0xfe100000
 8010470:	080134db 	.word	0x080134db
 8010474:	08013550 	.word	0x08013550
 8010478:	2301      	movs	r3, #1
 801047a:	421c      	tst	r4, r3
 801047c:	d00b      	beq.n	8010496 <_dtoa_r+0x3a6>
 801047e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010480:	0028      	movs	r0, r5
 8010482:	3301      	adds	r3, #1
 8010484:	9310      	str	r3, [sp, #64]	; 0x40
 8010486:	9b07      	ldr	r3, [sp, #28]
 8010488:	0031      	movs	r1, r6
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	f7f1 fac5 	bl	8001a1c <__aeabi_dmul>
 8010492:	0005      	movs	r5, r0
 8010494:	000e      	movs	r6, r1
 8010496:	9b07      	ldr	r3, [sp, #28]
 8010498:	1064      	asrs	r4, r4, #1
 801049a:	3308      	adds	r3, #8
 801049c:	e7b2      	b.n	8010404 <_dtoa_r+0x314>
 801049e:	2302      	movs	r3, #2
 80104a0:	9310      	str	r3, [sp, #64]	; 0x40
 80104a2:	9b02      	ldr	r3, [sp, #8]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d016      	beq.n	80104d6 <_dtoa_r+0x3e6>
 80104a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80104aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80104ac:	425c      	negs	r4, r3
 80104ae:	230f      	movs	r3, #15
 80104b0:	4ab5      	ldr	r2, [pc, #724]	; (8010788 <_dtoa_r+0x698>)
 80104b2:	4023      	ands	r3, r4
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	18d3      	adds	r3, r2, r3
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	f7f1 faae 	bl	8001a1c <__aeabi_dmul>
 80104c0:	2601      	movs	r6, #1
 80104c2:	2300      	movs	r3, #0
 80104c4:	900a      	str	r0, [sp, #40]	; 0x28
 80104c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80104c8:	4db0      	ldr	r5, [pc, #704]	; (801078c <_dtoa_r+0x69c>)
 80104ca:	1124      	asrs	r4, r4, #4
 80104cc:	2c00      	cmp	r4, #0
 80104ce:	d000      	beq.n	80104d2 <_dtoa_r+0x3e2>
 80104d0:	e094      	b.n	80105fc <_dtoa_r+0x50c>
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d19f      	bne.n	8010416 <_dtoa_r+0x326>
 80104d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d100      	bne.n	80104de <_dtoa_r+0x3ee>
 80104dc:	e09b      	b.n	8010616 <_dtoa_r+0x526>
 80104de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80104e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80104e2:	2200      	movs	r2, #0
 80104e4:	0020      	movs	r0, r4
 80104e6:	0029      	movs	r1, r5
 80104e8:	4ba9      	ldr	r3, [pc, #676]	; (8010790 <_dtoa_r+0x6a0>)
 80104ea:	f7ef ffc9 	bl	8000480 <__aeabi_dcmplt>
 80104ee:	2800      	cmp	r0, #0
 80104f0:	d100      	bne.n	80104f4 <_dtoa_r+0x404>
 80104f2:	e090      	b.n	8010616 <_dtoa_r+0x526>
 80104f4:	9b06      	ldr	r3, [sp, #24]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d100      	bne.n	80104fc <_dtoa_r+0x40c>
 80104fa:	e08c      	b.n	8010616 <_dtoa_r+0x526>
 80104fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104fe:	2b00      	cmp	r3, #0
 8010500:	dd46      	ble.n	8010590 <_dtoa_r+0x4a0>
 8010502:	9b02      	ldr	r3, [sp, #8]
 8010504:	2200      	movs	r2, #0
 8010506:	0020      	movs	r0, r4
 8010508:	0029      	movs	r1, r5
 801050a:	1e5e      	subs	r6, r3, #1
 801050c:	4ba1      	ldr	r3, [pc, #644]	; (8010794 <_dtoa_r+0x6a4>)
 801050e:	f7f1 fa85 	bl	8001a1c <__aeabi_dmul>
 8010512:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010514:	900a      	str	r0, [sp, #40]	; 0x28
 8010516:	910b      	str	r1, [sp, #44]	; 0x2c
 8010518:	3301      	adds	r3, #1
 801051a:	9310      	str	r3, [sp, #64]	; 0x40
 801051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801051e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010520:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010522:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010524:	9307      	str	r3, [sp, #28]
 8010526:	f7f2 f8cb 	bl	80026c0 <__aeabi_i2d>
 801052a:	0022      	movs	r2, r4
 801052c:	002b      	movs	r3, r5
 801052e:	f7f1 fa75 	bl	8001a1c <__aeabi_dmul>
 8010532:	2200      	movs	r2, #0
 8010534:	4b98      	ldr	r3, [pc, #608]	; (8010798 <_dtoa_r+0x6a8>)
 8010536:	f7f0 fb01 	bl	8000b3c <__aeabi_dadd>
 801053a:	9010      	str	r0, [sp, #64]	; 0x40
 801053c:	9111      	str	r1, [sp, #68]	; 0x44
 801053e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010542:	920a      	str	r2, [sp, #40]	; 0x28
 8010544:	930b      	str	r3, [sp, #44]	; 0x2c
 8010546:	4a95      	ldr	r2, [pc, #596]	; (801079c <_dtoa_r+0x6ac>)
 8010548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801054a:	4694      	mov	ip, r2
 801054c:	4463      	add	r3, ip
 801054e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010550:	930b      	str	r3, [sp, #44]	; 0x2c
 8010552:	9b07      	ldr	r3, [sp, #28]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d161      	bne.n	801061c <_dtoa_r+0x52c>
 8010558:	2200      	movs	r2, #0
 801055a:	0020      	movs	r0, r4
 801055c:	0029      	movs	r1, r5
 801055e:	4b90      	ldr	r3, [pc, #576]	; (80107a0 <_dtoa_r+0x6b0>)
 8010560:	f7f1 fcc8 	bl	8001ef4 <__aeabi_dsub>
 8010564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010566:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010568:	0004      	movs	r4, r0
 801056a:	000d      	movs	r5, r1
 801056c:	f7ef ff9c 	bl	80004a8 <__aeabi_dcmpgt>
 8010570:	2800      	cmp	r0, #0
 8010572:	d000      	beq.n	8010576 <_dtoa_r+0x486>
 8010574:	e2b5      	b.n	8010ae2 <_dtoa_r+0x9f2>
 8010576:	488b      	ldr	r0, [pc, #556]	; (80107a4 <_dtoa_r+0x6b4>)
 8010578:	9911      	ldr	r1, [sp, #68]	; 0x44
 801057a:	4684      	mov	ip, r0
 801057c:	4461      	add	r1, ip
 801057e:	000b      	movs	r3, r1
 8010580:	0020      	movs	r0, r4
 8010582:	0029      	movs	r1, r5
 8010584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010586:	f7ef ff7b 	bl	8000480 <__aeabi_dcmplt>
 801058a:	2800      	cmp	r0, #0
 801058c:	d000      	beq.n	8010590 <_dtoa_r+0x4a0>
 801058e:	e2a5      	b.n	8010adc <_dtoa_r+0x9ec>
 8010590:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010592:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8010594:	930a      	str	r3, [sp, #40]	; 0x28
 8010596:	940b      	str	r4, [sp, #44]	; 0x2c
 8010598:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801059a:	2b00      	cmp	r3, #0
 801059c:	da00      	bge.n	80105a0 <_dtoa_r+0x4b0>
 801059e:	e171      	b.n	8010884 <_dtoa_r+0x794>
 80105a0:	9a02      	ldr	r2, [sp, #8]
 80105a2:	2a0e      	cmp	r2, #14
 80105a4:	dd00      	ble.n	80105a8 <_dtoa_r+0x4b8>
 80105a6:	e16d      	b.n	8010884 <_dtoa_r+0x794>
 80105a8:	4b77      	ldr	r3, [pc, #476]	; (8010788 <_dtoa_r+0x698>)
 80105aa:	00d2      	lsls	r2, r2, #3
 80105ac:	189b      	adds	r3, r3, r2
 80105ae:	685c      	ldr	r4, [r3, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	9308      	str	r3, [sp, #32]
 80105b4:	9409      	str	r4, [sp, #36]	; 0x24
 80105b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	db00      	blt.n	80105be <_dtoa_r+0x4ce>
 80105bc:	e0f6      	b.n	80107ac <_dtoa_r+0x6bc>
 80105be:	9b06      	ldr	r3, [sp, #24]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	dd00      	ble.n	80105c6 <_dtoa_r+0x4d6>
 80105c4:	e0f2      	b.n	80107ac <_dtoa_r+0x6bc>
 80105c6:	d000      	beq.n	80105ca <_dtoa_r+0x4da>
 80105c8:	e288      	b.n	8010adc <_dtoa_r+0x9ec>
 80105ca:	9808      	ldr	r0, [sp, #32]
 80105cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105ce:	2200      	movs	r2, #0
 80105d0:	4b73      	ldr	r3, [pc, #460]	; (80107a0 <_dtoa_r+0x6b0>)
 80105d2:	f7f1 fa23 	bl	8001a1c <__aeabi_dmul>
 80105d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105da:	f7ef ff6f 	bl	80004bc <__aeabi_dcmpge>
 80105de:	9e06      	ldr	r6, [sp, #24]
 80105e0:	0035      	movs	r5, r6
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d000      	beq.n	80105e8 <_dtoa_r+0x4f8>
 80105e6:	e25f      	b.n	8010aa8 <_dtoa_r+0x9b8>
 80105e8:	9b05      	ldr	r3, [sp, #20]
 80105ea:	9a05      	ldr	r2, [sp, #20]
 80105ec:	3301      	adds	r3, #1
 80105ee:	9307      	str	r3, [sp, #28]
 80105f0:	2331      	movs	r3, #49	; 0x31
 80105f2:	7013      	strb	r3, [r2, #0]
 80105f4:	9b02      	ldr	r3, [sp, #8]
 80105f6:	3301      	adds	r3, #1
 80105f8:	9302      	str	r3, [sp, #8]
 80105fa:	e25a      	b.n	8010ab2 <_dtoa_r+0x9c2>
 80105fc:	4234      	tst	r4, r6
 80105fe:	d007      	beq.n	8010610 <_dtoa_r+0x520>
 8010600:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010602:	3301      	adds	r3, #1
 8010604:	9310      	str	r3, [sp, #64]	; 0x40
 8010606:	682a      	ldr	r2, [r5, #0]
 8010608:	686b      	ldr	r3, [r5, #4]
 801060a:	f7f1 fa07 	bl	8001a1c <__aeabi_dmul>
 801060e:	0033      	movs	r3, r6
 8010610:	1064      	asrs	r4, r4, #1
 8010612:	3508      	adds	r5, #8
 8010614:	e75a      	b.n	80104cc <_dtoa_r+0x3dc>
 8010616:	9e02      	ldr	r6, [sp, #8]
 8010618:	9b06      	ldr	r3, [sp, #24]
 801061a:	e780      	b.n	801051e <_dtoa_r+0x42e>
 801061c:	9b07      	ldr	r3, [sp, #28]
 801061e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010620:	1e5a      	subs	r2, r3, #1
 8010622:	4b59      	ldr	r3, [pc, #356]	; (8010788 <_dtoa_r+0x698>)
 8010624:	00d2      	lsls	r2, r2, #3
 8010626:	189b      	adds	r3, r3, r2
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	2900      	cmp	r1, #0
 801062e:	d051      	beq.n	80106d4 <_dtoa_r+0x5e4>
 8010630:	2000      	movs	r0, #0
 8010632:	495d      	ldr	r1, [pc, #372]	; (80107a8 <_dtoa_r+0x6b8>)
 8010634:	f7f0 fdec 	bl	8001210 <__aeabi_ddiv>
 8010638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801063a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801063c:	f7f1 fc5a 	bl	8001ef4 <__aeabi_dsub>
 8010640:	9a05      	ldr	r2, [sp, #20]
 8010642:	9b05      	ldr	r3, [sp, #20]
 8010644:	4694      	mov	ip, r2
 8010646:	9310      	str	r3, [sp, #64]	; 0x40
 8010648:	9b07      	ldr	r3, [sp, #28]
 801064a:	900a      	str	r0, [sp, #40]	; 0x28
 801064c:	910b      	str	r1, [sp, #44]	; 0x2c
 801064e:	4463      	add	r3, ip
 8010650:	9319      	str	r3, [sp, #100]	; 0x64
 8010652:	0029      	movs	r1, r5
 8010654:	0020      	movs	r0, r4
 8010656:	f7f1 fffd 	bl	8002654 <__aeabi_d2iz>
 801065a:	9017      	str	r0, [sp, #92]	; 0x5c
 801065c:	f7f2 f830 	bl	80026c0 <__aeabi_i2d>
 8010660:	0002      	movs	r2, r0
 8010662:	000b      	movs	r3, r1
 8010664:	0020      	movs	r0, r4
 8010666:	0029      	movs	r1, r5
 8010668:	f7f1 fc44 	bl	8001ef4 <__aeabi_dsub>
 801066c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801066e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010670:	3301      	adds	r3, #1
 8010672:	9307      	str	r3, [sp, #28]
 8010674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010676:	0004      	movs	r4, r0
 8010678:	3330      	adds	r3, #48	; 0x30
 801067a:	7013      	strb	r3, [r2, #0]
 801067c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801067e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010680:	000d      	movs	r5, r1
 8010682:	f7ef fefd 	bl	8000480 <__aeabi_dcmplt>
 8010686:	2800      	cmp	r0, #0
 8010688:	d175      	bne.n	8010776 <_dtoa_r+0x686>
 801068a:	0022      	movs	r2, r4
 801068c:	002b      	movs	r3, r5
 801068e:	2000      	movs	r0, #0
 8010690:	493f      	ldr	r1, [pc, #252]	; (8010790 <_dtoa_r+0x6a0>)
 8010692:	f7f1 fc2f 	bl	8001ef4 <__aeabi_dsub>
 8010696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801069a:	f7ef fef1 	bl	8000480 <__aeabi_dcmplt>
 801069e:	2800      	cmp	r0, #0
 80106a0:	d000      	beq.n	80106a4 <_dtoa_r+0x5b4>
 80106a2:	e0d1      	b.n	8010848 <_dtoa_r+0x758>
 80106a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80106a6:	9a07      	ldr	r2, [sp, #28]
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d100      	bne.n	80106ae <_dtoa_r+0x5be>
 80106ac:	e770      	b.n	8010590 <_dtoa_r+0x4a0>
 80106ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80106b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80106b2:	2200      	movs	r2, #0
 80106b4:	4b37      	ldr	r3, [pc, #220]	; (8010794 <_dtoa_r+0x6a4>)
 80106b6:	f7f1 f9b1 	bl	8001a1c <__aeabi_dmul>
 80106ba:	4b36      	ldr	r3, [pc, #216]	; (8010794 <_dtoa_r+0x6a4>)
 80106bc:	900a      	str	r0, [sp, #40]	; 0x28
 80106be:	910b      	str	r1, [sp, #44]	; 0x2c
 80106c0:	2200      	movs	r2, #0
 80106c2:	0020      	movs	r0, r4
 80106c4:	0029      	movs	r1, r5
 80106c6:	f7f1 f9a9 	bl	8001a1c <__aeabi_dmul>
 80106ca:	9b07      	ldr	r3, [sp, #28]
 80106cc:	0004      	movs	r4, r0
 80106ce:	000d      	movs	r5, r1
 80106d0:	9310      	str	r3, [sp, #64]	; 0x40
 80106d2:	e7be      	b.n	8010652 <_dtoa_r+0x562>
 80106d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80106d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80106d8:	f7f1 f9a0 	bl	8001a1c <__aeabi_dmul>
 80106dc:	9a05      	ldr	r2, [sp, #20]
 80106de:	9b05      	ldr	r3, [sp, #20]
 80106e0:	4694      	mov	ip, r2
 80106e2:	930a      	str	r3, [sp, #40]	; 0x28
 80106e4:	9b07      	ldr	r3, [sp, #28]
 80106e6:	9010      	str	r0, [sp, #64]	; 0x40
 80106e8:	9111      	str	r1, [sp, #68]	; 0x44
 80106ea:	4463      	add	r3, ip
 80106ec:	9319      	str	r3, [sp, #100]	; 0x64
 80106ee:	0029      	movs	r1, r5
 80106f0:	0020      	movs	r0, r4
 80106f2:	f7f1 ffaf 	bl	8002654 <__aeabi_d2iz>
 80106f6:	9017      	str	r0, [sp, #92]	; 0x5c
 80106f8:	f7f1 ffe2 	bl	80026c0 <__aeabi_i2d>
 80106fc:	0002      	movs	r2, r0
 80106fe:	000b      	movs	r3, r1
 8010700:	0020      	movs	r0, r4
 8010702:	0029      	movs	r1, r5
 8010704:	f7f1 fbf6 	bl	8001ef4 <__aeabi_dsub>
 8010708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801070a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801070c:	3330      	adds	r3, #48	; 0x30
 801070e:	7013      	strb	r3, [r2, #0]
 8010710:	0013      	movs	r3, r2
 8010712:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010714:	3301      	adds	r3, #1
 8010716:	0004      	movs	r4, r0
 8010718:	000d      	movs	r5, r1
 801071a:	930a      	str	r3, [sp, #40]	; 0x28
 801071c:	4293      	cmp	r3, r2
 801071e:	d12c      	bne.n	801077a <_dtoa_r+0x68a>
 8010720:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010722:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010724:	9a05      	ldr	r2, [sp, #20]
 8010726:	9b07      	ldr	r3, [sp, #28]
 8010728:	4694      	mov	ip, r2
 801072a:	4463      	add	r3, ip
 801072c:	2200      	movs	r2, #0
 801072e:	9307      	str	r3, [sp, #28]
 8010730:	4b1d      	ldr	r3, [pc, #116]	; (80107a8 <_dtoa_r+0x6b8>)
 8010732:	f7f0 fa03 	bl	8000b3c <__aeabi_dadd>
 8010736:	0002      	movs	r2, r0
 8010738:	000b      	movs	r3, r1
 801073a:	0020      	movs	r0, r4
 801073c:	0029      	movs	r1, r5
 801073e:	f7ef feb3 	bl	80004a8 <__aeabi_dcmpgt>
 8010742:	2800      	cmp	r0, #0
 8010744:	d000      	beq.n	8010748 <_dtoa_r+0x658>
 8010746:	e07f      	b.n	8010848 <_dtoa_r+0x758>
 8010748:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801074a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801074c:	2000      	movs	r0, #0
 801074e:	4916      	ldr	r1, [pc, #88]	; (80107a8 <_dtoa_r+0x6b8>)
 8010750:	f7f1 fbd0 	bl	8001ef4 <__aeabi_dsub>
 8010754:	0002      	movs	r2, r0
 8010756:	000b      	movs	r3, r1
 8010758:	0020      	movs	r0, r4
 801075a:	0029      	movs	r1, r5
 801075c:	f7ef fe90 	bl	8000480 <__aeabi_dcmplt>
 8010760:	2800      	cmp	r0, #0
 8010762:	d100      	bne.n	8010766 <_dtoa_r+0x676>
 8010764:	e714      	b.n	8010590 <_dtoa_r+0x4a0>
 8010766:	9b07      	ldr	r3, [sp, #28]
 8010768:	001a      	movs	r2, r3
 801076a:	3a01      	subs	r2, #1
 801076c:	9207      	str	r2, [sp, #28]
 801076e:	7812      	ldrb	r2, [r2, #0]
 8010770:	2a30      	cmp	r2, #48	; 0x30
 8010772:	d0f8      	beq.n	8010766 <_dtoa_r+0x676>
 8010774:	9307      	str	r3, [sp, #28]
 8010776:	9602      	str	r6, [sp, #8]
 8010778:	e054      	b.n	8010824 <_dtoa_r+0x734>
 801077a:	2200      	movs	r2, #0
 801077c:	4b05      	ldr	r3, [pc, #20]	; (8010794 <_dtoa_r+0x6a4>)
 801077e:	f7f1 f94d 	bl	8001a1c <__aeabi_dmul>
 8010782:	0004      	movs	r4, r0
 8010784:	000d      	movs	r5, r1
 8010786:	e7b2      	b.n	80106ee <_dtoa_r+0x5fe>
 8010788:	08013578 	.word	0x08013578
 801078c:	08013550 	.word	0x08013550
 8010790:	3ff00000 	.word	0x3ff00000
 8010794:	40240000 	.word	0x40240000
 8010798:	401c0000 	.word	0x401c0000
 801079c:	fcc00000 	.word	0xfcc00000
 80107a0:	40140000 	.word	0x40140000
 80107a4:	7cc00000 	.word	0x7cc00000
 80107a8:	3fe00000 	.word	0x3fe00000
 80107ac:	9b06      	ldr	r3, [sp, #24]
 80107ae:	9e05      	ldr	r6, [sp, #20]
 80107b0:	3b01      	subs	r3, #1
 80107b2:	199b      	adds	r3, r3, r6
 80107b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80107b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80107b8:	930a      	str	r3, [sp, #40]	; 0x28
 80107ba:	9a08      	ldr	r2, [sp, #32]
 80107bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107be:	0020      	movs	r0, r4
 80107c0:	0029      	movs	r1, r5
 80107c2:	f7f0 fd25 	bl	8001210 <__aeabi_ddiv>
 80107c6:	f7f1 ff45 	bl	8002654 <__aeabi_d2iz>
 80107ca:	9006      	str	r0, [sp, #24]
 80107cc:	f7f1 ff78 	bl	80026c0 <__aeabi_i2d>
 80107d0:	9a08      	ldr	r2, [sp, #32]
 80107d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107d4:	f7f1 f922 	bl	8001a1c <__aeabi_dmul>
 80107d8:	0002      	movs	r2, r0
 80107da:	000b      	movs	r3, r1
 80107dc:	0020      	movs	r0, r4
 80107de:	0029      	movs	r1, r5
 80107e0:	f7f1 fb88 	bl	8001ef4 <__aeabi_dsub>
 80107e4:	0033      	movs	r3, r6
 80107e6:	9a06      	ldr	r2, [sp, #24]
 80107e8:	3601      	adds	r6, #1
 80107ea:	3230      	adds	r2, #48	; 0x30
 80107ec:	701a      	strb	r2, [r3, #0]
 80107ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107f0:	9607      	str	r6, [sp, #28]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d139      	bne.n	801086a <_dtoa_r+0x77a>
 80107f6:	0002      	movs	r2, r0
 80107f8:	000b      	movs	r3, r1
 80107fa:	f7f0 f99f 	bl	8000b3c <__aeabi_dadd>
 80107fe:	9a08      	ldr	r2, [sp, #32]
 8010800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010802:	0004      	movs	r4, r0
 8010804:	000d      	movs	r5, r1
 8010806:	f7ef fe4f 	bl	80004a8 <__aeabi_dcmpgt>
 801080a:	2800      	cmp	r0, #0
 801080c:	d11b      	bne.n	8010846 <_dtoa_r+0x756>
 801080e:	9a08      	ldr	r2, [sp, #32]
 8010810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010812:	0020      	movs	r0, r4
 8010814:	0029      	movs	r1, r5
 8010816:	f7ef fe2d 	bl	8000474 <__aeabi_dcmpeq>
 801081a:	2800      	cmp	r0, #0
 801081c:	d002      	beq.n	8010824 <_dtoa_r+0x734>
 801081e:	9b06      	ldr	r3, [sp, #24]
 8010820:	07db      	lsls	r3, r3, #31
 8010822:	d410      	bmi.n	8010846 <_dtoa_r+0x756>
 8010824:	0038      	movs	r0, r7
 8010826:	9904      	ldr	r1, [sp, #16]
 8010828:	f000 fae6 	bl	8010df8 <_Bfree>
 801082c:	2300      	movs	r3, #0
 801082e:	9a07      	ldr	r2, [sp, #28]
 8010830:	9802      	ldr	r0, [sp, #8]
 8010832:	7013      	strb	r3, [r2, #0]
 8010834:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010836:	3001      	adds	r0, #1
 8010838:	6018      	str	r0, [r3, #0]
 801083a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801083c:	2b00      	cmp	r3, #0
 801083e:	d100      	bne.n	8010842 <_dtoa_r+0x752>
 8010840:	e4a3      	b.n	801018a <_dtoa_r+0x9a>
 8010842:	601a      	str	r2, [r3, #0]
 8010844:	e4a1      	b.n	801018a <_dtoa_r+0x9a>
 8010846:	9e02      	ldr	r6, [sp, #8]
 8010848:	9b07      	ldr	r3, [sp, #28]
 801084a:	9307      	str	r3, [sp, #28]
 801084c:	3b01      	subs	r3, #1
 801084e:	781a      	ldrb	r2, [r3, #0]
 8010850:	2a39      	cmp	r2, #57	; 0x39
 8010852:	d106      	bne.n	8010862 <_dtoa_r+0x772>
 8010854:	9a05      	ldr	r2, [sp, #20]
 8010856:	429a      	cmp	r2, r3
 8010858:	d1f7      	bne.n	801084a <_dtoa_r+0x75a>
 801085a:	2230      	movs	r2, #48	; 0x30
 801085c:	9905      	ldr	r1, [sp, #20]
 801085e:	3601      	adds	r6, #1
 8010860:	700a      	strb	r2, [r1, #0]
 8010862:	781a      	ldrb	r2, [r3, #0]
 8010864:	3201      	adds	r2, #1
 8010866:	701a      	strb	r2, [r3, #0]
 8010868:	e785      	b.n	8010776 <_dtoa_r+0x686>
 801086a:	2200      	movs	r2, #0
 801086c:	4bad      	ldr	r3, [pc, #692]	; (8010b24 <_dtoa_r+0xa34>)
 801086e:	f7f1 f8d5 	bl	8001a1c <__aeabi_dmul>
 8010872:	2200      	movs	r2, #0
 8010874:	2300      	movs	r3, #0
 8010876:	0004      	movs	r4, r0
 8010878:	000d      	movs	r5, r1
 801087a:	f7ef fdfb 	bl	8000474 <__aeabi_dcmpeq>
 801087e:	2800      	cmp	r0, #0
 8010880:	d09b      	beq.n	80107ba <_dtoa_r+0x6ca>
 8010882:	e7cf      	b.n	8010824 <_dtoa_r+0x734>
 8010884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010886:	2a00      	cmp	r2, #0
 8010888:	d100      	bne.n	801088c <_dtoa_r+0x79c>
 801088a:	e082      	b.n	8010992 <_dtoa_r+0x8a2>
 801088c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801088e:	2a01      	cmp	r2, #1
 8010890:	dc66      	bgt.n	8010960 <_dtoa_r+0x870>
 8010892:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010894:	2a00      	cmp	r2, #0
 8010896:	d05f      	beq.n	8010958 <_dtoa_r+0x868>
 8010898:	4aa3      	ldr	r2, [pc, #652]	; (8010b28 <_dtoa_r+0xa38>)
 801089a:	189b      	adds	r3, r3, r2
 801089c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801089e:	9c08      	ldr	r4, [sp, #32]
 80108a0:	9a08      	ldr	r2, [sp, #32]
 80108a2:	2101      	movs	r1, #1
 80108a4:	18d2      	adds	r2, r2, r3
 80108a6:	9208      	str	r2, [sp, #32]
 80108a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108aa:	0038      	movs	r0, r7
 80108ac:	18d3      	adds	r3, r2, r3
 80108ae:	930d      	str	r3, [sp, #52]	; 0x34
 80108b0:	f000 fb52 	bl	8010f58 <__i2b>
 80108b4:	0005      	movs	r5, r0
 80108b6:	2c00      	cmp	r4, #0
 80108b8:	dd0e      	ble.n	80108d8 <_dtoa_r+0x7e8>
 80108ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dd0b      	ble.n	80108d8 <_dtoa_r+0x7e8>
 80108c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108c2:	0023      	movs	r3, r4
 80108c4:	4294      	cmp	r4, r2
 80108c6:	dd00      	ble.n	80108ca <_dtoa_r+0x7da>
 80108c8:	0013      	movs	r3, r2
 80108ca:	9a08      	ldr	r2, [sp, #32]
 80108cc:	1ae4      	subs	r4, r4, r3
 80108ce:	1ad2      	subs	r2, r2, r3
 80108d0:	9208      	str	r2, [sp, #32]
 80108d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108d4:	1ad3      	subs	r3, r2, r3
 80108d6:	930d      	str	r3, [sp, #52]	; 0x34
 80108d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d01f      	beq.n	801091e <_dtoa_r+0x82e>
 80108de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d05a      	beq.n	801099a <_dtoa_r+0x8aa>
 80108e4:	2e00      	cmp	r6, #0
 80108e6:	dd11      	ble.n	801090c <_dtoa_r+0x81c>
 80108e8:	0029      	movs	r1, r5
 80108ea:	0032      	movs	r2, r6
 80108ec:	0038      	movs	r0, r7
 80108ee:	f000 fbf9 	bl	80110e4 <__pow5mult>
 80108f2:	9a04      	ldr	r2, [sp, #16]
 80108f4:	0001      	movs	r1, r0
 80108f6:	0005      	movs	r5, r0
 80108f8:	0038      	movs	r0, r7
 80108fa:	f000 fb43 	bl	8010f84 <__multiply>
 80108fe:	9904      	ldr	r1, [sp, #16]
 8010900:	9007      	str	r0, [sp, #28]
 8010902:	0038      	movs	r0, r7
 8010904:	f000 fa78 	bl	8010df8 <_Bfree>
 8010908:	9b07      	ldr	r3, [sp, #28]
 801090a:	9304      	str	r3, [sp, #16]
 801090c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801090e:	1b9a      	subs	r2, r3, r6
 8010910:	42b3      	cmp	r3, r6
 8010912:	d004      	beq.n	801091e <_dtoa_r+0x82e>
 8010914:	0038      	movs	r0, r7
 8010916:	9904      	ldr	r1, [sp, #16]
 8010918:	f000 fbe4 	bl	80110e4 <__pow5mult>
 801091c:	9004      	str	r0, [sp, #16]
 801091e:	2101      	movs	r1, #1
 8010920:	0038      	movs	r0, r7
 8010922:	f000 fb19 	bl	8010f58 <__i2b>
 8010926:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010928:	0006      	movs	r6, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	dd37      	ble.n	801099e <_dtoa_r+0x8ae>
 801092e:	001a      	movs	r2, r3
 8010930:	0001      	movs	r1, r0
 8010932:	0038      	movs	r0, r7
 8010934:	f000 fbd6 	bl	80110e4 <__pow5mult>
 8010938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801093a:	0006      	movs	r6, r0
 801093c:	2b01      	cmp	r3, #1
 801093e:	dd33      	ble.n	80109a8 <_dtoa_r+0x8b8>
 8010940:	2300      	movs	r3, #0
 8010942:	9307      	str	r3, [sp, #28]
 8010944:	6933      	ldr	r3, [r6, #16]
 8010946:	3303      	adds	r3, #3
 8010948:	009b      	lsls	r3, r3, #2
 801094a:	18f3      	adds	r3, r6, r3
 801094c:	6858      	ldr	r0, [r3, #4]
 801094e:	f000 fabb 	bl	8010ec8 <__hi0bits>
 8010952:	2320      	movs	r3, #32
 8010954:	1a18      	subs	r0, r3, r0
 8010956:	e03f      	b.n	80109d8 <_dtoa_r+0x8e8>
 8010958:	2336      	movs	r3, #54	; 0x36
 801095a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801095c:	1a9b      	subs	r3, r3, r2
 801095e:	e79d      	b.n	801089c <_dtoa_r+0x7ac>
 8010960:	9b06      	ldr	r3, [sp, #24]
 8010962:	1e5e      	subs	r6, r3, #1
 8010964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010966:	42b3      	cmp	r3, r6
 8010968:	db08      	blt.n	801097c <_dtoa_r+0x88c>
 801096a:	1b9e      	subs	r6, r3, r6
 801096c:	9b06      	ldr	r3, [sp, #24]
 801096e:	2b00      	cmp	r3, #0
 8010970:	da0c      	bge.n	801098c <_dtoa_r+0x89c>
 8010972:	9b08      	ldr	r3, [sp, #32]
 8010974:	9a06      	ldr	r2, [sp, #24]
 8010976:	1a9c      	subs	r4, r3, r2
 8010978:	2300      	movs	r3, #0
 801097a:	e791      	b.n	80108a0 <_dtoa_r+0x7b0>
 801097c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801097e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010980:	1af3      	subs	r3, r6, r3
 8010982:	18d3      	adds	r3, r2, r3
 8010984:	960e      	str	r6, [sp, #56]	; 0x38
 8010986:	9314      	str	r3, [sp, #80]	; 0x50
 8010988:	2600      	movs	r6, #0
 801098a:	e7ef      	b.n	801096c <_dtoa_r+0x87c>
 801098c:	9c08      	ldr	r4, [sp, #32]
 801098e:	9b06      	ldr	r3, [sp, #24]
 8010990:	e786      	b.n	80108a0 <_dtoa_r+0x7b0>
 8010992:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010994:	9c08      	ldr	r4, [sp, #32]
 8010996:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010998:	e78d      	b.n	80108b6 <_dtoa_r+0x7c6>
 801099a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801099c:	e7ba      	b.n	8010914 <_dtoa_r+0x824>
 801099e:	2300      	movs	r3, #0
 80109a0:	9307      	str	r3, [sp, #28]
 80109a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80109a4:	2b01      	cmp	r3, #1
 80109a6:	dc13      	bgt.n	80109d0 <_dtoa_r+0x8e0>
 80109a8:	2300      	movs	r3, #0
 80109aa:	9307      	str	r3, [sp, #28]
 80109ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d10e      	bne.n	80109d0 <_dtoa_r+0x8e0>
 80109b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109b4:	031b      	lsls	r3, r3, #12
 80109b6:	d10b      	bne.n	80109d0 <_dtoa_r+0x8e0>
 80109b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80109ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109bc:	4213      	tst	r3, r2
 80109be:	d007      	beq.n	80109d0 <_dtoa_r+0x8e0>
 80109c0:	9b08      	ldr	r3, [sp, #32]
 80109c2:	3301      	adds	r3, #1
 80109c4:	9308      	str	r3, [sp, #32]
 80109c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109c8:	3301      	adds	r3, #1
 80109ca:	930d      	str	r3, [sp, #52]	; 0x34
 80109cc:	2301      	movs	r3, #1
 80109ce:	9307      	str	r3, [sp, #28]
 80109d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109d2:	2001      	movs	r0, #1
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d1b5      	bne.n	8010944 <_dtoa_r+0x854>
 80109d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109da:	221f      	movs	r2, #31
 80109dc:	1818      	adds	r0, r3, r0
 80109de:	0003      	movs	r3, r0
 80109e0:	4013      	ands	r3, r2
 80109e2:	4210      	tst	r0, r2
 80109e4:	d046      	beq.n	8010a74 <_dtoa_r+0x984>
 80109e6:	3201      	adds	r2, #1
 80109e8:	1ad2      	subs	r2, r2, r3
 80109ea:	2a04      	cmp	r2, #4
 80109ec:	dd3f      	ble.n	8010a6e <_dtoa_r+0x97e>
 80109ee:	221c      	movs	r2, #28
 80109f0:	1ad3      	subs	r3, r2, r3
 80109f2:	9a08      	ldr	r2, [sp, #32]
 80109f4:	18e4      	adds	r4, r4, r3
 80109f6:	18d2      	adds	r2, r2, r3
 80109f8:	9208      	str	r2, [sp, #32]
 80109fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109fc:	18d3      	adds	r3, r2, r3
 80109fe:	930d      	str	r3, [sp, #52]	; 0x34
 8010a00:	9b08      	ldr	r3, [sp, #32]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	dd05      	ble.n	8010a12 <_dtoa_r+0x922>
 8010a06:	001a      	movs	r2, r3
 8010a08:	0038      	movs	r0, r7
 8010a0a:	9904      	ldr	r1, [sp, #16]
 8010a0c:	f000 fbc6 	bl	801119c <__lshift>
 8010a10:	9004      	str	r0, [sp, #16]
 8010a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	dd05      	ble.n	8010a24 <_dtoa_r+0x934>
 8010a18:	0031      	movs	r1, r6
 8010a1a:	001a      	movs	r2, r3
 8010a1c:	0038      	movs	r0, r7
 8010a1e:	f000 fbbd 	bl	801119c <__lshift>
 8010a22:	0006      	movs	r6, r0
 8010a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d026      	beq.n	8010a78 <_dtoa_r+0x988>
 8010a2a:	0031      	movs	r1, r6
 8010a2c:	9804      	ldr	r0, [sp, #16]
 8010a2e:	f000 fc25 	bl	801127c <__mcmp>
 8010a32:	2800      	cmp	r0, #0
 8010a34:	da20      	bge.n	8010a78 <_dtoa_r+0x988>
 8010a36:	9b02      	ldr	r3, [sp, #8]
 8010a38:	220a      	movs	r2, #10
 8010a3a:	3b01      	subs	r3, #1
 8010a3c:	9302      	str	r3, [sp, #8]
 8010a3e:	0038      	movs	r0, r7
 8010a40:	2300      	movs	r3, #0
 8010a42:	9904      	ldr	r1, [sp, #16]
 8010a44:	f000 f9fc 	bl	8010e40 <__multadd>
 8010a48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a4a:	9004      	str	r0, [sp, #16]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d100      	bne.n	8010a52 <_dtoa_r+0x962>
 8010a50:	e160      	b.n	8010d14 <_dtoa_r+0xc24>
 8010a52:	2300      	movs	r3, #0
 8010a54:	0029      	movs	r1, r5
 8010a56:	220a      	movs	r2, #10
 8010a58:	0038      	movs	r0, r7
 8010a5a:	f000 f9f1 	bl	8010e40 <__multadd>
 8010a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a60:	0005      	movs	r5, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	dc47      	bgt.n	8010af6 <_dtoa_r+0xa06>
 8010a66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a68:	2b02      	cmp	r3, #2
 8010a6a:	dc0d      	bgt.n	8010a88 <_dtoa_r+0x998>
 8010a6c:	e043      	b.n	8010af6 <_dtoa_r+0xa06>
 8010a6e:	2a04      	cmp	r2, #4
 8010a70:	d0c6      	beq.n	8010a00 <_dtoa_r+0x910>
 8010a72:	0013      	movs	r3, r2
 8010a74:	331c      	adds	r3, #28
 8010a76:	e7bc      	b.n	80109f2 <_dtoa_r+0x902>
 8010a78:	9b06      	ldr	r3, [sp, #24]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	dc35      	bgt.n	8010aea <_dtoa_r+0x9fa>
 8010a7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a80:	2b02      	cmp	r3, #2
 8010a82:	dd32      	ble.n	8010aea <_dtoa_r+0x9fa>
 8010a84:	9b06      	ldr	r3, [sp, #24]
 8010a86:	930c      	str	r3, [sp, #48]	; 0x30
 8010a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d10c      	bne.n	8010aa8 <_dtoa_r+0x9b8>
 8010a8e:	0031      	movs	r1, r6
 8010a90:	2205      	movs	r2, #5
 8010a92:	0038      	movs	r0, r7
 8010a94:	f000 f9d4 	bl	8010e40 <__multadd>
 8010a98:	0006      	movs	r6, r0
 8010a9a:	0001      	movs	r1, r0
 8010a9c:	9804      	ldr	r0, [sp, #16]
 8010a9e:	f000 fbed 	bl	801127c <__mcmp>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	dd00      	ble.n	8010aa8 <_dtoa_r+0x9b8>
 8010aa6:	e59f      	b.n	80105e8 <_dtoa_r+0x4f8>
 8010aa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010aaa:	43db      	mvns	r3, r3
 8010aac:	9302      	str	r3, [sp, #8]
 8010aae:	9b05      	ldr	r3, [sp, #20]
 8010ab0:	9307      	str	r3, [sp, #28]
 8010ab2:	2400      	movs	r4, #0
 8010ab4:	0031      	movs	r1, r6
 8010ab6:	0038      	movs	r0, r7
 8010ab8:	f000 f99e 	bl	8010df8 <_Bfree>
 8010abc:	2d00      	cmp	r5, #0
 8010abe:	d100      	bne.n	8010ac2 <_dtoa_r+0x9d2>
 8010ac0:	e6b0      	b.n	8010824 <_dtoa_r+0x734>
 8010ac2:	2c00      	cmp	r4, #0
 8010ac4:	d005      	beq.n	8010ad2 <_dtoa_r+0x9e2>
 8010ac6:	42ac      	cmp	r4, r5
 8010ac8:	d003      	beq.n	8010ad2 <_dtoa_r+0x9e2>
 8010aca:	0021      	movs	r1, r4
 8010acc:	0038      	movs	r0, r7
 8010ace:	f000 f993 	bl	8010df8 <_Bfree>
 8010ad2:	0029      	movs	r1, r5
 8010ad4:	0038      	movs	r0, r7
 8010ad6:	f000 f98f 	bl	8010df8 <_Bfree>
 8010ada:	e6a3      	b.n	8010824 <_dtoa_r+0x734>
 8010adc:	2600      	movs	r6, #0
 8010ade:	0035      	movs	r5, r6
 8010ae0:	e7e2      	b.n	8010aa8 <_dtoa_r+0x9b8>
 8010ae2:	9602      	str	r6, [sp, #8]
 8010ae4:	9e07      	ldr	r6, [sp, #28]
 8010ae6:	0035      	movs	r5, r6
 8010ae8:	e57e      	b.n	80105e8 <_dtoa_r+0x4f8>
 8010aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d100      	bne.n	8010af2 <_dtoa_r+0xa02>
 8010af0:	e0c8      	b.n	8010c84 <_dtoa_r+0xb94>
 8010af2:	9b06      	ldr	r3, [sp, #24]
 8010af4:	930c      	str	r3, [sp, #48]	; 0x30
 8010af6:	2c00      	cmp	r4, #0
 8010af8:	dd05      	ble.n	8010b06 <_dtoa_r+0xa16>
 8010afa:	0029      	movs	r1, r5
 8010afc:	0022      	movs	r2, r4
 8010afe:	0038      	movs	r0, r7
 8010b00:	f000 fb4c 	bl	801119c <__lshift>
 8010b04:	0005      	movs	r5, r0
 8010b06:	9b07      	ldr	r3, [sp, #28]
 8010b08:	0028      	movs	r0, r5
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d01f      	beq.n	8010b4e <_dtoa_r+0xa5e>
 8010b0e:	0038      	movs	r0, r7
 8010b10:	6869      	ldr	r1, [r5, #4]
 8010b12:	f000 f92d 	bl	8010d70 <_Balloc>
 8010b16:	1e04      	subs	r4, r0, #0
 8010b18:	d10c      	bne.n	8010b34 <_dtoa_r+0xa44>
 8010b1a:	0002      	movs	r2, r0
 8010b1c:	4b03      	ldr	r3, [pc, #12]	; (8010b2c <_dtoa_r+0xa3c>)
 8010b1e:	4904      	ldr	r1, [pc, #16]	; (8010b30 <_dtoa_r+0xa40>)
 8010b20:	f7ff fafb 	bl	801011a <_dtoa_r+0x2a>
 8010b24:	40240000 	.word	0x40240000
 8010b28:	00000433 	.word	0x00000433
 8010b2c:	080134db 	.word	0x080134db
 8010b30:	000002ea 	.word	0x000002ea
 8010b34:	0029      	movs	r1, r5
 8010b36:	692b      	ldr	r3, [r5, #16]
 8010b38:	310c      	adds	r1, #12
 8010b3a:	1c9a      	adds	r2, r3, #2
 8010b3c:	0092      	lsls	r2, r2, #2
 8010b3e:	300c      	adds	r0, #12
 8010b40:	f000 f90d 	bl	8010d5e <memcpy>
 8010b44:	2201      	movs	r2, #1
 8010b46:	0021      	movs	r1, r4
 8010b48:	0038      	movs	r0, r7
 8010b4a:	f000 fb27 	bl	801119c <__lshift>
 8010b4e:	002c      	movs	r4, r5
 8010b50:	0005      	movs	r5, r0
 8010b52:	9b05      	ldr	r3, [sp, #20]
 8010b54:	9308      	str	r3, [sp, #32]
 8010b56:	0031      	movs	r1, r6
 8010b58:	9804      	ldr	r0, [sp, #16]
 8010b5a:	f7ff fa3d 	bl	800ffd8 <quorem>
 8010b5e:	0003      	movs	r3, r0
 8010b60:	0021      	movs	r1, r4
 8010b62:	3330      	adds	r3, #48	; 0x30
 8010b64:	900e      	str	r0, [sp, #56]	; 0x38
 8010b66:	9804      	ldr	r0, [sp, #16]
 8010b68:	9306      	str	r3, [sp, #24]
 8010b6a:	f000 fb87 	bl	801127c <__mcmp>
 8010b6e:	002a      	movs	r2, r5
 8010b70:	900f      	str	r0, [sp, #60]	; 0x3c
 8010b72:	0031      	movs	r1, r6
 8010b74:	0038      	movs	r0, r7
 8010b76:	f000 fb9d 	bl	80112b4 <__mdiff>
 8010b7a:	68c3      	ldr	r3, [r0, #12]
 8010b7c:	9007      	str	r0, [sp, #28]
 8010b7e:	9310      	str	r3, [sp, #64]	; 0x40
 8010b80:	2301      	movs	r3, #1
 8010b82:	930d      	str	r3, [sp, #52]	; 0x34
 8010b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d104      	bne.n	8010b94 <_dtoa_r+0xaa4>
 8010b8a:	0001      	movs	r1, r0
 8010b8c:	9804      	ldr	r0, [sp, #16]
 8010b8e:	f000 fb75 	bl	801127c <__mcmp>
 8010b92:	900d      	str	r0, [sp, #52]	; 0x34
 8010b94:	0038      	movs	r0, r7
 8010b96:	9907      	ldr	r1, [sp, #28]
 8010b98:	f000 f92e 	bl	8010df8 <_Bfree>
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ba2:	4018      	ands	r0, r3
 8010ba4:	9b08      	ldr	r3, [sp, #32]
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	9307      	str	r3, [sp, #28]
 8010baa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010bac:	4313      	orrs	r3, r2
 8010bae:	4303      	orrs	r3, r0
 8010bb0:	d10c      	bne.n	8010bcc <_dtoa_r+0xadc>
 8010bb2:	9b06      	ldr	r3, [sp, #24]
 8010bb4:	2b39      	cmp	r3, #57	; 0x39
 8010bb6:	d025      	beq.n	8010c04 <_dtoa_r+0xb14>
 8010bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	dd02      	ble.n	8010bc4 <_dtoa_r+0xad4>
 8010bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bc0:	3331      	adds	r3, #49	; 0x31
 8010bc2:	9306      	str	r3, [sp, #24]
 8010bc4:	9b08      	ldr	r3, [sp, #32]
 8010bc6:	9a06      	ldr	r2, [sp, #24]
 8010bc8:	701a      	strb	r2, [r3, #0]
 8010bca:	e773      	b.n	8010ab4 <_dtoa_r+0x9c4>
 8010bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	db03      	blt.n	8010bda <_dtoa_r+0xaea>
 8010bd2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	4303      	orrs	r3, r0
 8010bd8:	d11f      	bne.n	8010c1a <_dtoa_r+0xb2a>
 8010bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	ddf1      	ble.n	8010bc4 <_dtoa_r+0xad4>
 8010be0:	9904      	ldr	r1, [sp, #16]
 8010be2:	2201      	movs	r2, #1
 8010be4:	0038      	movs	r0, r7
 8010be6:	f000 fad9 	bl	801119c <__lshift>
 8010bea:	0031      	movs	r1, r6
 8010bec:	9004      	str	r0, [sp, #16]
 8010bee:	f000 fb45 	bl	801127c <__mcmp>
 8010bf2:	2800      	cmp	r0, #0
 8010bf4:	dc03      	bgt.n	8010bfe <_dtoa_r+0xb0e>
 8010bf6:	d1e5      	bne.n	8010bc4 <_dtoa_r+0xad4>
 8010bf8:	9b06      	ldr	r3, [sp, #24]
 8010bfa:	07db      	lsls	r3, r3, #31
 8010bfc:	d5e2      	bpl.n	8010bc4 <_dtoa_r+0xad4>
 8010bfe:	9b06      	ldr	r3, [sp, #24]
 8010c00:	2b39      	cmp	r3, #57	; 0x39
 8010c02:	d1dc      	bne.n	8010bbe <_dtoa_r+0xace>
 8010c04:	2339      	movs	r3, #57	; 0x39
 8010c06:	9a08      	ldr	r2, [sp, #32]
 8010c08:	7013      	strb	r3, [r2, #0]
 8010c0a:	9b07      	ldr	r3, [sp, #28]
 8010c0c:	9307      	str	r3, [sp, #28]
 8010c0e:	3b01      	subs	r3, #1
 8010c10:	781a      	ldrb	r2, [r3, #0]
 8010c12:	2a39      	cmp	r2, #57	; 0x39
 8010c14:	d06c      	beq.n	8010cf0 <_dtoa_r+0xc00>
 8010c16:	3201      	adds	r2, #1
 8010c18:	e7d6      	b.n	8010bc8 <_dtoa_r+0xad8>
 8010c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	dd07      	ble.n	8010c30 <_dtoa_r+0xb40>
 8010c20:	9b06      	ldr	r3, [sp, #24]
 8010c22:	2b39      	cmp	r3, #57	; 0x39
 8010c24:	d0ee      	beq.n	8010c04 <_dtoa_r+0xb14>
 8010c26:	9b06      	ldr	r3, [sp, #24]
 8010c28:	9a08      	ldr	r2, [sp, #32]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	7013      	strb	r3, [r2, #0]
 8010c2e:	e741      	b.n	8010ab4 <_dtoa_r+0x9c4>
 8010c30:	9b08      	ldr	r3, [sp, #32]
 8010c32:	9a06      	ldr	r2, [sp, #24]
 8010c34:	701a      	strb	r2, [r3, #0]
 8010c36:	2301      	movs	r3, #1
 8010c38:	9a05      	ldr	r2, [sp, #20]
 8010c3a:	1a9b      	subs	r3, r3, r2
 8010c3c:	9a08      	ldr	r2, [sp, #32]
 8010c3e:	189b      	adds	r3, r3, r2
 8010c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d03e      	beq.n	8010cc4 <_dtoa_r+0xbd4>
 8010c46:	2300      	movs	r3, #0
 8010c48:	220a      	movs	r2, #10
 8010c4a:	9904      	ldr	r1, [sp, #16]
 8010c4c:	0038      	movs	r0, r7
 8010c4e:	f000 f8f7 	bl	8010e40 <__multadd>
 8010c52:	2300      	movs	r3, #0
 8010c54:	9004      	str	r0, [sp, #16]
 8010c56:	220a      	movs	r2, #10
 8010c58:	0021      	movs	r1, r4
 8010c5a:	0038      	movs	r0, r7
 8010c5c:	42ac      	cmp	r4, r5
 8010c5e:	d106      	bne.n	8010c6e <_dtoa_r+0xb7e>
 8010c60:	f000 f8ee 	bl	8010e40 <__multadd>
 8010c64:	0004      	movs	r4, r0
 8010c66:	0005      	movs	r5, r0
 8010c68:	9b07      	ldr	r3, [sp, #28]
 8010c6a:	9308      	str	r3, [sp, #32]
 8010c6c:	e773      	b.n	8010b56 <_dtoa_r+0xa66>
 8010c6e:	f000 f8e7 	bl	8010e40 <__multadd>
 8010c72:	0029      	movs	r1, r5
 8010c74:	0004      	movs	r4, r0
 8010c76:	2300      	movs	r3, #0
 8010c78:	220a      	movs	r2, #10
 8010c7a:	0038      	movs	r0, r7
 8010c7c:	f000 f8e0 	bl	8010e40 <__multadd>
 8010c80:	0005      	movs	r5, r0
 8010c82:	e7f1      	b.n	8010c68 <_dtoa_r+0xb78>
 8010c84:	9b06      	ldr	r3, [sp, #24]
 8010c86:	930c      	str	r3, [sp, #48]	; 0x30
 8010c88:	2400      	movs	r4, #0
 8010c8a:	0031      	movs	r1, r6
 8010c8c:	9804      	ldr	r0, [sp, #16]
 8010c8e:	f7ff f9a3 	bl	800ffd8 <quorem>
 8010c92:	9b05      	ldr	r3, [sp, #20]
 8010c94:	3030      	adds	r0, #48	; 0x30
 8010c96:	5518      	strb	r0, [r3, r4]
 8010c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c9a:	3401      	adds	r4, #1
 8010c9c:	9006      	str	r0, [sp, #24]
 8010c9e:	42a3      	cmp	r3, r4
 8010ca0:	dd07      	ble.n	8010cb2 <_dtoa_r+0xbc2>
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	220a      	movs	r2, #10
 8010ca6:	0038      	movs	r0, r7
 8010ca8:	9904      	ldr	r1, [sp, #16]
 8010caa:	f000 f8c9 	bl	8010e40 <__multadd>
 8010cae:	9004      	str	r0, [sp, #16]
 8010cb0:	e7eb      	b.n	8010c8a <_dtoa_r+0xb9a>
 8010cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010cb4:	2001      	movs	r0, #1
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	dd00      	ble.n	8010cbc <_dtoa_r+0xbcc>
 8010cba:	0018      	movs	r0, r3
 8010cbc:	2400      	movs	r4, #0
 8010cbe:	9b05      	ldr	r3, [sp, #20]
 8010cc0:	181b      	adds	r3, r3, r0
 8010cc2:	9307      	str	r3, [sp, #28]
 8010cc4:	9904      	ldr	r1, [sp, #16]
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	0038      	movs	r0, r7
 8010cca:	f000 fa67 	bl	801119c <__lshift>
 8010cce:	0031      	movs	r1, r6
 8010cd0:	9004      	str	r0, [sp, #16]
 8010cd2:	f000 fad3 	bl	801127c <__mcmp>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	dc97      	bgt.n	8010c0a <_dtoa_r+0xb1a>
 8010cda:	d102      	bne.n	8010ce2 <_dtoa_r+0xbf2>
 8010cdc:	9b06      	ldr	r3, [sp, #24]
 8010cde:	07db      	lsls	r3, r3, #31
 8010ce0:	d493      	bmi.n	8010c0a <_dtoa_r+0xb1a>
 8010ce2:	9b07      	ldr	r3, [sp, #28]
 8010ce4:	9307      	str	r3, [sp, #28]
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	781a      	ldrb	r2, [r3, #0]
 8010cea:	2a30      	cmp	r2, #48	; 0x30
 8010cec:	d0fa      	beq.n	8010ce4 <_dtoa_r+0xbf4>
 8010cee:	e6e1      	b.n	8010ab4 <_dtoa_r+0x9c4>
 8010cf0:	9a05      	ldr	r2, [sp, #20]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d18a      	bne.n	8010c0c <_dtoa_r+0xb1c>
 8010cf6:	9b02      	ldr	r3, [sp, #8]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	9302      	str	r3, [sp, #8]
 8010cfc:	2331      	movs	r3, #49	; 0x31
 8010cfe:	e795      	b.n	8010c2c <_dtoa_r+0xb3c>
 8010d00:	4b08      	ldr	r3, [pc, #32]	; (8010d24 <_dtoa_r+0xc34>)
 8010d02:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010d04:	9305      	str	r3, [sp, #20]
 8010d06:	4b08      	ldr	r3, [pc, #32]	; (8010d28 <_dtoa_r+0xc38>)
 8010d08:	2a00      	cmp	r2, #0
 8010d0a:	d001      	beq.n	8010d10 <_dtoa_r+0xc20>
 8010d0c:	f7ff fa3b 	bl	8010186 <_dtoa_r+0x96>
 8010d10:	f7ff fa3b 	bl	801018a <_dtoa_r+0x9a>
 8010d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	dcb6      	bgt.n	8010c88 <_dtoa_r+0xb98>
 8010d1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d1c:	2b02      	cmp	r3, #2
 8010d1e:	dd00      	ble.n	8010d22 <_dtoa_r+0xc32>
 8010d20:	e6b2      	b.n	8010a88 <_dtoa_r+0x998>
 8010d22:	e7b1      	b.n	8010c88 <_dtoa_r+0xb98>
 8010d24:	08013458 	.word	0x08013458
 8010d28:	08013460 	.word	0x08013460

08010d2c <_localeconv_r>:
 8010d2c:	4800      	ldr	r0, [pc, #0]	; (8010d30 <_localeconv_r+0x4>)
 8010d2e:	4770      	bx	lr
 8010d30:	200002f0 	.word	0x200002f0

08010d34 <malloc>:
 8010d34:	b510      	push	{r4, lr}
 8010d36:	4b03      	ldr	r3, [pc, #12]	; (8010d44 <malloc+0x10>)
 8010d38:	0001      	movs	r1, r0
 8010d3a:	6818      	ldr	r0, [r3, #0]
 8010d3c:	f000 fc0e 	bl	801155c <_malloc_r>
 8010d40:	bd10      	pop	{r4, pc}
 8010d42:	46c0      	nop			; (mov r8, r8)
 8010d44:	2000019c 	.word	0x2000019c

08010d48 <memchr>:
 8010d48:	b2c9      	uxtb	r1, r1
 8010d4a:	1882      	adds	r2, r0, r2
 8010d4c:	4290      	cmp	r0, r2
 8010d4e:	d101      	bne.n	8010d54 <memchr+0xc>
 8010d50:	2000      	movs	r0, #0
 8010d52:	4770      	bx	lr
 8010d54:	7803      	ldrb	r3, [r0, #0]
 8010d56:	428b      	cmp	r3, r1
 8010d58:	d0fb      	beq.n	8010d52 <memchr+0xa>
 8010d5a:	3001      	adds	r0, #1
 8010d5c:	e7f6      	b.n	8010d4c <memchr+0x4>

08010d5e <memcpy>:
 8010d5e:	2300      	movs	r3, #0
 8010d60:	b510      	push	{r4, lr}
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d100      	bne.n	8010d68 <memcpy+0xa>
 8010d66:	bd10      	pop	{r4, pc}
 8010d68:	5ccc      	ldrb	r4, [r1, r3]
 8010d6a:	54c4      	strb	r4, [r0, r3]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	e7f8      	b.n	8010d62 <memcpy+0x4>

08010d70 <_Balloc>:
 8010d70:	b570      	push	{r4, r5, r6, lr}
 8010d72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010d74:	0006      	movs	r6, r0
 8010d76:	000c      	movs	r4, r1
 8010d78:	2d00      	cmp	r5, #0
 8010d7a:	d10e      	bne.n	8010d9a <_Balloc+0x2a>
 8010d7c:	2010      	movs	r0, #16
 8010d7e:	f7ff ffd9 	bl	8010d34 <malloc>
 8010d82:	1e02      	subs	r2, r0, #0
 8010d84:	6270      	str	r0, [r6, #36]	; 0x24
 8010d86:	d104      	bne.n	8010d92 <_Balloc+0x22>
 8010d88:	2166      	movs	r1, #102	; 0x66
 8010d8a:	4b19      	ldr	r3, [pc, #100]	; (8010df0 <_Balloc+0x80>)
 8010d8c:	4819      	ldr	r0, [pc, #100]	; (8010df4 <_Balloc+0x84>)
 8010d8e:	f000 fdb7 	bl	8011900 <__assert_func>
 8010d92:	6045      	str	r5, [r0, #4]
 8010d94:	6085      	str	r5, [r0, #8]
 8010d96:	6005      	str	r5, [r0, #0]
 8010d98:	60c5      	str	r5, [r0, #12]
 8010d9a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8010d9c:	68eb      	ldr	r3, [r5, #12]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d013      	beq.n	8010dca <_Balloc+0x5a>
 8010da2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010da4:	00a2      	lsls	r2, r4, #2
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	189b      	adds	r3, r3, r2
 8010daa:	6818      	ldr	r0, [r3, #0]
 8010dac:	2800      	cmp	r0, #0
 8010dae:	d118      	bne.n	8010de2 <_Balloc+0x72>
 8010db0:	2101      	movs	r1, #1
 8010db2:	000d      	movs	r5, r1
 8010db4:	40a5      	lsls	r5, r4
 8010db6:	1d6a      	adds	r2, r5, #5
 8010db8:	0030      	movs	r0, r6
 8010dba:	0092      	lsls	r2, r2, #2
 8010dbc:	f000 fb76 	bl	80114ac <_calloc_r>
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	d00c      	beq.n	8010dde <_Balloc+0x6e>
 8010dc4:	6044      	str	r4, [r0, #4]
 8010dc6:	6085      	str	r5, [r0, #8]
 8010dc8:	e00d      	b.n	8010de6 <_Balloc+0x76>
 8010dca:	2221      	movs	r2, #33	; 0x21
 8010dcc:	2104      	movs	r1, #4
 8010dce:	0030      	movs	r0, r6
 8010dd0:	f000 fb6c 	bl	80114ac <_calloc_r>
 8010dd4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010dd6:	60e8      	str	r0, [r5, #12]
 8010dd8:	68db      	ldr	r3, [r3, #12]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d1e1      	bne.n	8010da2 <_Balloc+0x32>
 8010dde:	2000      	movs	r0, #0
 8010de0:	bd70      	pop	{r4, r5, r6, pc}
 8010de2:	6802      	ldr	r2, [r0, #0]
 8010de4:	601a      	str	r2, [r3, #0]
 8010de6:	2300      	movs	r3, #0
 8010de8:	6103      	str	r3, [r0, #16]
 8010dea:	60c3      	str	r3, [r0, #12]
 8010dec:	e7f8      	b.n	8010de0 <_Balloc+0x70>
 8010dee:	46c0      	nop			; (mov r8, r8)
 8010df0:	08013465 	.word	0x08013465
 8010df4:	080134ec 	.word	0x080134ec

08010df8 <_Bfree>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010dfc:	0005      	movs	r5, r0
 8010dfe:	000c      	movs	r4, r1
 8010e00:	2e00      	cmp	r6, #0
 8010e02:	d10e      	bne.n	8010e22 <_Bfree+0x2a>
 8010e04:	2010      	movs	r0, #16
 8010e06:	f7ff ff95 	bl	8010d34 <malloc>
 8010e0a:	1e02      	subs	r2, r0, #0
 8010e0c:	6268      	str	r0, [r5, #36]	; 0x24
 8010e0e:	d104      	bne.n	8010e1a <_Bfree+0x22>
 8010e10:	218a      	movs	r1, #138	; 0x8a
 8010e12:	4b09      	ldr	r3, [pc, #36]	; (8010e38 <_Bfree+0x40>)
 8010e14:	4809      	ldr	r0, [pc, #36]	; (8010e3c <_Bfree+0x44>)
 8010e16:	f000 fd73 	bl	8011900 <__assert_func>
 8010e1a:	6046      	str	r6, [r0, #4]
 8010e1c:	6086      	str	r6, [r0, #8]
 8010e1e:	6006      	str	r6, [r0, #0]
 8010e20:	60c6      	str	r6, [r0, #12]
 8010e22:	2c00      	cmp	r4, #0
 8010e24:	d007      	beq.n	8010e36 <_Bfree+0x3e>
 8010e26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010e28:	6862      	ldr	r2, [r4, #4]
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	0092      	lsls	r2, r2, #2
 8010e2e:	189b      	adds	r3, r3, r2
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	6022      	str	r2, [r4, #0]
 8010e34:	601c      	str	r4, [r3, #0]
 8010e36:	bd70      	pop	{r4, r5, r6, pc}
 8010e38:	08013465 	.word	0x08013465
 8010e3c:	080134ec 	.word	0x080134ec

08010e40 <__multadd>:
 8010e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e42:	000e      	movs	r6, r1
 8010e44:	9001      	str	r0, [sp, #4]
 8010e46:	000c      	movs	r4, r1
 8010e48:	001d      	movs	r5, r3
 8010e4a:	2000      	movs	r0, #0
 8010e4c:	690f      	ldr	r7, [r1, #16]
 8010e4e:	3614      	adds	r6, #20
 8010e50:	6833      	ldr	r3, [r6, #0]
 8010e52:	3001      	adds	r0, #1
 8010e54:	b299      	uxth	r1, r3
 8010e56:	4351      	muls	r1, r2
 8010e58:	0c1b      	lsrs	r3, r3, #16
 8010e5a:	4353      	muls	r3, r2
 8010e5c:	1949      	adds	r1, r1, r5
 8010e5e:	0c0d      	lsrs	r5, r1, #16
 8010e60:	195b      	adds	r3, r3, r5
 8010e62:	0c1d      	lsrs	r5, r3, #16
 8010e64:	b289      	uxth	r1, r1
 8010e66:	041b      	lsls	r3, r3, #16
 8010e68:	185b      	adds	r3, r3, r1
 8010e6a:	c608      	stmia	r6!, {r3}
 8010e6c:	4287      	cmp	r7, r0
 8010e6e:	dcef      	bgt.n	8010e50 <__multadd+0x10>
 8010e70:	2d00      	cmp	r5, #0
 8010e72:	d022      	beq.n	8010eba <__multadd+0x7a>
 8010e74:	68a3      	ldr	r3, [r4, #8]
 8010e76:	42bb      	cmp	r3, r7
 8010e78:	dc19      	bgt.n	8010eae <__multadd+0x6e>
 8010e7a:	6863      	ldr	r3, [r4, #4]
 8010e7c:	9801      	ldr	r0, [sp, #4]
 8010e7e:	1c59      	adds	r1, r3, #1
 8010e80:	f7ff ff76 	bl	8010d70 <_Balloc>
 8010e84:	1e06      	subs	r6, r0, #0
 8010e86:	d105      	bne.n	8010e94 <__multadd+0x54>
 8010e88:	0002      	movs	r2, r0
 8010e8a:	21b5      	movs	r1, #181	; 0xb5
 8010e8c:	4b0c      	ldr	r3, [pc, #48]	; (8010ec0 <__multadd+0x80>)
 8010e8e:	480d      	ldr	r0, [pc, #52]	; (8010ec4 <__multadd+0x84>)
 8010e90:	f000 fd36 	bl	8011900 <__assert_func>
 8010e94:	0021      	movs	r1, r4
 8010e96:	6923      	ldr	r3, [r4, #16]
 8010e98:	310c      	adds	r1, #12
 8010e9a:	1c9a      	adds	r2, r3, #2
 8010e9c:	0092      	lsls	r2, r2, #2
 8010e9e:	300c      	adds	r0, #12
 8010ea0:	f7ff ff5d 	bl	8010d5e <memcpy>
 8010ea4:	0021      	movs	r1, r4
 8010ea6:	9801      	ldr	r0, [sp, #4]
 8010ea8:	f7ff ffa6 	bl	8010df8 <_Bfree>
 8010eac:	0034      	movs	r4, r6
 8010eae:	1d3b      	adds	r3, r7, #4
 8010eb0:	009b      	lsls	r3, r3, #2
 8010eb2:	18e3      	adds	r3, r4, r3
 8010eb4:	605d      	str	r5, [r3, #4]
 8010eb6:	1c7b      	adds	r3, r7, #1
 8010eb8:	6123      	str	r3, [r4, #16]
 8010eba:	0020      	movs	r0, r4
 8010ebc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010ebe:	46c0      	nop			; (mov r8, r8)
 8010ec0:	080134db 	.word	0x080134db
 8010ec4:	080134ec 	.word	0x080134ec

08010ec8 <__hi0bits>:
 8010ec8:	0003      	movs	r3, r0
 8010eca:	0c02      	lsrs	r2, r0, #16
 8010ecc:	2000      	movs	r0, #0
 8010ece:	4282      	cmp	r2, r0
 8010ed0:	d101      	bne.n	8010ed6 <__hi0bits+0xe>
 8010ed2:	041b      	lsls	r3, r3, #16
 8010ed4:	3010      	adds	r0, #16
 8010ed6:	0e1a      	lsrs	r2, r3, #24
 8010ed8:	d101      	bne.n	8010ede <__hi0bits+0x16>
 8010eda:	3008      	adds	r0, #8
 8010edc:	021b      	lsls	r3, r3, #8
 8010ede:	0f1a      	lsrs	r2, r3, #28
 8010ee0:	d101      	bne.n	8010ee6 <__hi0bits+0x1e>
 8010ee2:	3004      	adds	r0, #4
 8010ee4:	011b      	lsls	r3, r3, #4
 8010ee6:	0f9a      	lsrs	r2, r3, #30
 8010ee8:	d101      	bne.n	8010eee <__hi0bits+0x26>
 8010eea:	3002      	adds	r0, #2
 8010eec:	009b      	lsls	r3, r3, #2
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	db03      	blt.n	8010efa <__hi0bits+0x32>
 8010ef2:	3001      	adds	r0, #1
 8010ef4:	005b      	lsls	r3, r3, #1
 8010ef6:	d400      	bmi.n	8010efa <__hi0bits+0x32>
 8010ef8:	2020      	movs	r0, #32
 8010efa:	4770      	bx	lr

08010efc <__lo0bits>:
 8010efc:	6803      	ldr	r3, [r0, #0]
 8010efe:	0002      	movs	r2, r0
 8010f00:	2107      	movs	r1, #7
 8010f02:	0018      	movs	r0, r3
 8010f04:	4008      	ands	r0, r1
 8010f06:	420b      	tst	r3, r1
 8010f08:	d00d      	beq.n	8010f26 <__lo0bits+0x2a>
 8010f0a:	3906      	subs	r1, #6
 8010f0c:	2000      	movs	r0, #0
 8010f0e:	420b      	tst	r3, r1
 8010f10:	d105      	bne.n	8010f1e <__lo0bits+0x22>
 8010f12:	3002      	adds	r0, #2
 8010f14:	4203      	tst	r3, r0
 8010f16:	d003      	beq.n	8010f20 <__lo0bits+0x24>
 8010f18:	40cb      	lsrs	r3, r1
 8010f1a:	0008      	movs	r0, r1
 8010f1c:	6013      	str	r3, [r2, #0]
 8010f1e:	4770      	bx	lr
 8010f20:	089b      	lsrs	r3, r3, #2
 8010f22:	6013      	str	r3, [r2, #0]
 8010f24:	e7fb      	b.n	8010f1e <__lo0bits+0x22>
 8010f26:	b299      	uxth	r1, r3
 8010f28:	2900      	cmp	r1, #0
 8010f2a:	d101      	bne.n	8010f30 <__lo0bits+0x34>
 8010f2c:	2010      	movs	r0, #16
 8010f2e:	0c1b      	lsrs	r3, r3, #16
 8010f30:	b2d9      	uxtb	r1, r3
 8010f32:	2900      	cmp	r1, #0
 8010f34:	d101      	bne.n	8010f3a <__lo0bits+0x3e>
 8010f36:	3008      	adds	r0, #8
 8010f38:	0a1b      	lsrs	r3, r3, #8
 8010f3a:	0719      	lsls	r1, r3, #28
 8010f3c:	d101      	bne.n	8010f42 <__lo0bits+0x46>
 8010f3e:	3004      	adds	r0, #4
 8010f40:	091b      	lsrs	r3, r3, #4
 8010f42:	0799      	lsls	r1, r3, #30
 8010f44:	d101      	bne.n	8010f4a <__lo0bits+0x4e>
 8010f46:	3002      	adds	r0, #2
 8010f48:	089b      	lsrs	r3, r3, #2
 8010f4a:	07d9      	lsls	r1, r3, #31
 8010f4c:	d4e9      	bmi.n	8010f22 <__lo0bits+0x26>
 8010f4e:	3001      	adds	r0, #1
 8010f50:	085b      	lsrs	r3, r3, #1
 8010f52:	d1e6      	bne.n	8010f22 <__lo0bits+0x26>
 8010f54:	2020      	movs	r0, #32
 8010f56:	e7e2      	b.n	8010f1e <__lo0bits+0x22>

08010f58 <__i2b>:
 8010f58:	b510      	push	{r4, lr}
 8010f5a:	000c      	movs	r4, r1
 8010f5c:	2101      	movs	r1, #1
 8010f5e:	f7ff ff07 	bl	8010d70 <_Balloc>
 8010f62:	2800      	cmp	r0, #0
 8010f64:	d106      	bne.n	8010f74 <__i2b+0x1c>
 8010f66:	21a0      	movs	r1, #160	; 0xa0
 8010f68:	0002      	movs	r2, r0
 8010f6a:	4b04      	ldr	r3, [pc, #16]	; (8010f7c <__i2b+0x24>)
 8010f6c:	4804      	ldr	r0, [pc, #16]	; (8010f80 <__i2b+0x28>)
 8010f6e:	0049      	lsls	r1, r1, #1
 8010f70:	f000 fcc6 	bl	8011900 <__assert_func>
 8010f74:	2301      	movs	r3, #1
 8010f76:	6144      	str	r4, [r0, #20]
 8010f78:	6103      	str	r3, [r0, #16]
 8010f7a:	bd10      	pop	{r4, pc}
 8010f7c:	080134db 	.word	0x080134db
 8010f80:	080134ec 	.word	0x080134ec

08010f84 <__multiply>:
 8010f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f86:	690b      	ldr	r3, [r1, #16]
 8010f88:	0014      	movs	r4, r2
 8010f8a:	6912      	ldr	r2, [r2, #16]
 8010f8c:	000d      	movs	r5, r1
 8010f8e:	b089      	sub	sp, #36	; 0x24
 8010f90:	4293      	cmp	r3, r2
 8010f92:	da01      	bge.n	8010f98 <__multiply+0x14>
 8010f94:	0025      	movs	r5, r4
 8010f96:	000c      	movs	r4, r1
 8010f98:	692f      	ldr	r7, [r5, #16]
 8010f9a:	6926      	ldr	r6, [r4, #16]
 8010f9c:	6869      	ldr	r1, [r5, #4]
 8010f9e:	19bb      	adds	r3, r7, r6
 8010fa0:	9302      	str	r3, [sp, #8]
 8010fa2:	68ab      	ldr	r3, [r5, #8]
 8010fa4:	19ba      	adds	r2, r7, r6
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	da00      	bge.n	8010fac <__multiply+0x28>
 8010faa:	3101      	adds	r1, #1
 8010fac:	f7ff fee0 	bl	8010d70 <_Balloc>
 8010fb0:	9001      	str	r0, [sp, #4]
 8010fb2:	2800      	cmp	r0, #0
 8010fb4:	d106      	bne.n	8010fc4 <__multiply+0x40>
 8010fb6:	215e      	movs	r1, #94	; 0x5e
 8010fb8:	0002      	movs	r2, r0
 8010fba:	4b48      	ldr	r3, [pc, #288]	; (80110dc <__multiply+0x158>)
 8010fbc:	4848      	ldr	r0, [pc, #288]	; (80110e0 <__multiply+0x15c>)
 8010fbe:	31ff      	adds	r1, #255	; 0xff
 8010fc0:	f000 fc9e 	bl	8011900 <__assert_func>
 8010fc4:	9b01      	ldr	r3, [sp, #4]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	3314      	adds	r3, #20
 8010fca:	469c      	mov	ip, r3
 8010fcc:	19bb      	adds	r3, r7, r6
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	4463      	add	r3, ip
 8010fd2:	9303      	str	r3, [sp, #12]
 8010fd4:	4663      	mov	r3, ip
 8010fd6:	9903      	ldr	r1, [sp, #12]
 8010fd8:	428b      	cmp	r3, r1
 8010fda:	d32c      	bcc.n	8011036 <__multiply+0xb2>
 8010fdc:	002b      	movs	r3, r5
 8010fde:	0022      	movs	r2, r4
 8010fe0:	3314      	adds	r3, #20
 8010fe2:	00bf      	lsls	r7, r7, #2
 8010fe4:	3214      	adds	r2, #20
 8010fe6:	9306      	str	r3, [sp, #24]
 8010fe8:	00b6      	lsls	r6, r6, #2
 8010fea:	19db      	adds	r3, r3, r7
 8010fec:	9304      	str	r3, [sp, #16]
 8010fee:	1993      	adds	r3, r2, r6
 8010ff0:	9307      	str	r3, [sp, #28]
 8010ff2:	2304      	movs	r3, #4
 8010ff4:	9305      	str	r3, [sp, #20]
 8010ff6:	002b      	movs	r3, r5
 8010ff8:	9904      	ldr	r1, [sp, #16]
 8010ffa:	3315      	adds	r3, #21
 8010ffc:	9200      	str	r2, [sp, #0]
 8010ffe:	4299      	cmp	r1, r3
 8011000:	d305      	bcc.n	801100e <__multiply+0x8a>
 8011002:	1b4b      	subs	r3, r1, r5
 8011004:	3b15      	subs	r3, #21
 8011006:	089b      	lsrs	r3, r3, #2
 8011008:	3301      	adds	r3, #1
 801100a:	009b      	lsls	r3, r3, #2
 801100c:	9305      	str	r3, [sp, #20]
 801100e:	9b07      	ldr	r3, [sp, #28]
 8011010:	9a00      	ldr	r2, [sp, #0]
 8011012:	429a      	cmp	r2, r3
 8011014:	d311      	bcc.n	801103a <__multiply+0xb6>
 8011016:	9b02      	ldr	r3, [sp, #8]
 8011018:	2b00      	cmp	r3, #0
 801101a:	dd06      	ble.n	801102a <__multiply+0xa6>
 801101c:	9b03      	ldr	r3, [sp, #12]
 801101e:	3b04      	subs	r3, #4
 8011020:	9303      	str	r3, [sp, #12]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d054      	beq.n	80110d4 <__multiply+0x150>
 801102a:	9b01      	ldr	r3, [sp, #4]
 801102c:	9a02      	ldr	r2, [sp, #8]
 801102e:	0018      	movs	r0, r3
 8011030:	611a      	str	r2, [r3, #16]
 8011032:	b009      	add	sp, #36	; 0x24
 8011034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011036:	c304      	stmia	r3!, {r2}
 8011038:	e7cd      	b.n	8010fd6 <__multiply+0x52>
 801103a:	9b00      	ldr	r3, [sp, #0]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	b298      	uxth	r0, r3
 8011040:	2800      	cmp	r0, #0
 8011042:	d01c      	beq.n	801107e <__multiply+0xfa>
 8011044:	4667      	mov	r7, ip
 8011046:	2400      	movs	r4, #0
 8011048:	9e06      	ldr	r6, [sp, #24]
 801104a:	ce02      	ldmia	r6!, {r1}
 801104c:	683a      	ldr	r2, [r7, #0]
 801104e:	b28b      	uxth	r3, r1
 8011050:	4343      	muls	r3, r0
 8011052:	0c09      	lsrs	r1, r1, #16
 8011054:	4341      	muls	r1, r0
 8011056:	b292      	uxth	r2, r2
 8011058:	189b      	adds	r3, r3, r2
 801105a:	191b      	adds	r3, r3, r4
 801105c:	000c      	movs	r4, r1
 801105e:	683a      	ldr	r2, [r7, #0]
 8011060:	0c11      	lsrs	r1, r2, #16
 8011062:	1861      	adds	r1, r4, r1
 8011064:	0c1c      	lsrs	r4, r3, #16
 8011066:	1909      	adds	r1, r1, r4
 8011068:	0c0c      	lsrs	r4, r1, #16
 801106a:	b29b      	uxth	r3, r3
 801106c:	0409      	lsls	r1, r1, #16
 801106e:	430b      	orrs	r3, r1
 8011070:	c708      	stmia	r7!, {r3}
 8011072:	9b04      	ldr	r3, [sp, #16]
 8011074:	42b3      	cmp	r3, r6
 8011076:	d8e8      	bhi.n	801104a <__multiply+0xc6>
 8011078:	4663      	mov	r3, ip
 801107a:	9a05      	ldr	r2, [sp, #20]
 801107c:	509c      	str	r4, [r3, r2]
 801107e:	9b00      	ldr	r3, [sp, #0]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	0c1e      	lsrs	r6, r3, #16
 8011084:	d020      	beq.n	80110c8 <__multiply+0x144>
 8011086:	4663      	mov	r3, ip
 8011088:	002c      	movs	r4, r5
 801108a:	4660      	mov	r0, ip
 801108c:	2700      	movs	r7, #0
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3414      	adds	r4, #20
 8011092:	6822      	ldr	r2, [r4, #0]
 8011094:	b29b      	uxth	r3, r3
 8011096:	b291      	uxth	r1, r2
 8011098:	4371      	muls	r1, r6
 801109a:	6802      	ldr	r2, [r0, #0]
 801109c:	0c12      	lsrs	r2, r2, #16
 801109e:	1889      	adds	r1, r1, r2
 80110a0:	19cf      	adds	r7, r1, r7
 80110a2:	0439      	lsls	r1, r7, #16
 80110a4:	430b      	orrs	r3, r1
 80110a6:	6003      	str	r3, [r0, #0]
 80110a8:	cc02      	ldmia	r4!, {r1}
 80110aa:	6843      	ldr	r3, [r0, #4]
 80110ac:	0c09      	lsrs	r1, r1, #16
 80110ae:	4371      	muls	r1, r6
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	0c3f      	lsrs	r7, r7, #16
 80110b4:	18cb      	adds	r3, r1, r3
 80110b6:	9a04      	ldr	r2, [sp, #16]
 80110b8:	19db      	adds	r3, r3, r7
 80110ba:	0c1f      	lsrs	r7, r3, #16
 80110bc:	3004      	adds	r0, #4
 80110be:	42a2      	cmp	r2, r4
 80110c0:	d8e7      	bhi.n	8011092 <__multiply+0x10e>
 80110c2:	4662      	mov	r2, ip
 80110c4:	9905      	ldr	r1, [sp, #20]
 80110c6:	5053      	str	r3, [r2, r1]
 80110c8:	9b00      	ldr	r3, [sp, #0]
 80110ca:	3304      	adds	r3, #4
 80110cc:	9300      	str	r3, [sp, #0]
 80110ce:	2304      	movs	r3, #4
 80110d0:	449c      	add	ip, r3
 80110d2:	e79c      	b.n	801100e <__multiply+0x8a>
 80110d4:	9b02      	ldr	r3, [sp, #8]
 80110d6:	3b01      	subs	r3, #1
 80110d8:	9302      	str	r3, [sp, #8]
 80110da:	e79c      	b.n	8011016 <__multiply+0x92>
 80110dc:	080134db 	.word	0x080134db
 80110e0:	080134ec 	.word	0x080134ec

080110e4 <__pow5mult>:
 80110e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110e6:	2303      	movs	r3, #3
 80110e8:	0015      	movs	r5, r2
 80110ea:	0007      	movs	r7, r0
 80110ec:	000e      	movs	r6, r1
 80110ee:	401a      	ands	r2, r3
 80110f0:	421d      	tst	r5, r3
 80110f2:	d008      	beq.n	8011106 <__pow5mult+0x22>
 80110f4:	4925      	ldr	r1, [pc, #148]	; (801118c <__pow5mult+0xa8>)
 80110f6:	3a01      	subs	r2, #1
 80110f8:	0092      	lsls	r2, r2, #2
 80110fa:	5852      	ldr	r2, [r2, r1]
 80110fc:	2300      	movs	r3, #0
 80110fe:	0031      	movs	r1, r6
 8011100:	f7ff fe9e 	bl	8010e40 <__multadd>
 8011104:	0006      	movs	r6, r0
 8011106:	10ad      	asrs	r5, r5, #2
 8011108:	d03d      	beq.n	8011186 <__pow5mult+0xa2>
 801110a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801110c:	2c00      	cmp	r4, #0
 801110e:	d10f      	bne.n	8011130 <__pow5mult+0x4c>
 8011110:	2010      	movs	r0, #16
 8011112:	f7ff fe0f 	bl	8010d34 <malloc>
 8011116:	1e02      	subs	r2, r0, #0
 8011118:	6278      	str	r0, [r7, #36]	; 0x24
 801111a:	d105      	bne.n	8011128 <__pow5mult+0x44>
 801111c:	21d7      	movs	r1, #215	; 0xd7
 801111e:	4b1c      	ldr	r3, [pc, #112]	; (8011190 <__pow5mult+0xac>)
 8011120:	481c      	ldr	r0, [pc, #112]	; (8011194 <__pow5mult+0xb0>)
 8011122:	0049      	lsls	r1, r1, #1
 8011124:	f000 fbec 	bl	8011900 <__assert_func>
 8011128:	6044      	str	r4, [r0, #4]
 801112a:	6084      	str	r4, [r0, #8]
 801112c:	6004      	str	r4, [r0, #0]
 801112e:	60c4      	str	r4, [r0, #12]
 8011130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011132:	689c      	ldr	r4, [r3, #8]
 8011134:	9301      	str	r3, [sp, #4]
 8011136:	2c00      	cmp	r4, #0
 8011138:	d108      	bne.n	801114c <__pow5mult+0x68>
 801113a:	0038      	movs	r0, r7
 801113c:	4916      	ldr	r1, [pc, #88]	; (8011198 <__pow5mult+0xb4>)
 801113e:	f7ff ff0b 	bl	8010f58 <__i2b>
 8011142:	9b01      	ldr	r3, [sp, #4]
 8011144:	0004      	movs	r4, r0
 8011146:	6098      	str	r0, [r3, #8]
 8011148:	2300      	movs	r3, #0
 801114a:	6003      	str	r3, [r0, #0]
 801114c:	2301      	movs	r3, #1
 801114e:	421d      	tst	r5, r3
 8011150:	d00a      	beq.n	8011168 <__pow5mult+0x84>
 8011152:	0031      	movs	r1, r6
 8011154:	0022      	movs	r2, r4
 8011156:	0038      	movs	r0, r7
 8011158:	f7ff ff14 	bl	8010f84 <__multiply>
 801115c:	0031      	movs	r1, r6
 801115e:	9001      	str	r0, [sp, #4]
 8011160:	0038      	movs	r0, r7
 8011162:	f7ff fe49 	bl	8010df8 <_Bfree>
 8011166:	9e01      	ldr	r6, [sp, #4]
 8011168:	106d      	asrs	r5, r5, #1
 801116a:	d00c      	beq.n	8011186 <__pow5mult+0xa2>
 801116c:	6820      	ldr	r0, [r4, #0]
 801116e:	2800      	cmp	r0, #0
 8011170:	d107      	bne.n	8011182 <__pow5mult+0x9e>
 8011172:	0022      	movs	r2, r4
 8011174:	0021      	movs	r1, r4
 8011176:	0038      	movs	r0, r7
 8011178:	f7ff ff04 	bl	8010f84 <__multiply>
 801117c:	2300      	movs	r3, #0
 801117e:	6020      	str	r0, [r4, #0]
 8011180:	6003      	str	r3, [r0, #0]
 8011182:	0004      	movs	r4, r0
 8011184:	e7e2      	b.n	801114c <__pow5mult+0x68>
 8011186:	0030      	movs	r0, r6
 8011188:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801118a:	46c0      	nop			; (mov r8, r8)
 801118c:	08013640 	.word	0x08013640
 8011190:	08013465 	.word	0x08013465
 8011194:	080134ec 	.word	0x080134ec
 8011198:	00000271 	.word	0x00000271

0801119c <__lshift>:
 801119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801119e:	000c      	movs	r4, r1
 80111a0:	0017      	movs	r7, r2
 80111a2:	6923      	ldr	r3, [r4, #16]
 80111a4:	1155      	asrs	r5, r2, #5
 80111a6:	b087      	sub	sp, #28
 80111a8:	18eb      	adds	r3, r5, r3
 80111aa:	9302      	str	r3, [sp, #8]
 80111ac:	3301      	adds	r3, #1
 80111ae:	9301      	str	r3, [sp, #4]
 80111b0:	6849      	ldr	r1, [r1, #4]
 80111b2:	68a3      	ldr	r3, [r4, #8]
 80111b4:	9004      	str	r0, [sp, #16]
 80111b6:	9a01      	ldr	r2, [sp, #4]
 80111b8:	4293      	cmp	r3, r2
 80111ba:	db11      	blt.n	80111e0 <__lshift+0x44>
 80111bc:	9804      	ldr	r0, [sp, #16]
 80111be:	f7ff fdd7 	bl	8010d70 <_Balloc>
 80111c2:	0002      	movs	r2, r0
 80111c4:	2300      	movs	r3, #0
 80111c6:	3214      	adds	r2, #20
 80111c8:	0006      	movs	r6, r0
 80111ca:	0011      	movs	r1, r2
 80111cc:	9203      	str	r2, [sp, #12]
 80111ce:	4298      	cmp	r0, r3
 80111d0:	d10d      	bne.n	80111ee <__lshift+0x52>
 80111d2:	21da      	movs	r1, #218	; 0xda
 80111d4:	0002      	movs	r2, r0
 80111d6:	4b27      	ldr	r3, [pc, #156]	; (8011274 <__lshift+0xd8>)
 80111d8:	4827      	ldr	r0, [pc, #156]	; (8011278 <__lshift+0xdc>)
 80111da:	31ff      	adds	r1, #255	; 0xff
 80111dc:	f000 fb90 	bl	8011900 <__assert_func>
 80111e0:	3101      	adds	r1, #1
 80111e2:	005b      	lsls	r3, r3, #1
 80111e4:	e7e7      	b.n	80111b6 <__lshift+0x1a>
 80111e6:	2200      	movs	r2, #0
 80111e8:	0098      	lsls	r0, r3, #2
 80111ea:	500a      	str	r2, [r1, r0]
 80111ec:	3301      	adds	r3, #1
 80111ee:	42ab      	cmp	r3, r5
 80111f0:	dbf9      	blt.n	80111e6 <__lshift+0x4a>
 80111f2:	43eb      	mvns	r3, r5
 80111f4:	17db      	asrs	r3, r3, #31
 80111f6:	401d      	ands	r5, r3
 80111f8:	9b03      	ldr	r3, [sp, #12]
 80111fa:	00ad      	lsls	r5, r5, #2
 80111fc:	211f      	movs	r1, #31
 80111fe:	0038      	movs	r0, r7
 8011200:	195d      	adds	r5, r3, r5
 8011202:	0023      	movs	r3, r4
 8011204:	6922      	ldr	r2, [r4, #16]
 8011206:	3314      	adds	r3, #20
 8011208:	0092      	lsls	r2, r2, #2
 801120a:	4008      	ands	r0, r1
 801120c:	4684      	mov	ip, r0
 801120e:	189a      	adds	r2, r3, r2
 8011210:	420f      	tst	r7, r1
 8011212:	d02a      	beq.n	801126a <__lshift+0xce>
 8011214:	3101      	adds	r1, #1
 8011216:	1a09      	subs	r1, r1, r0
 8011218:	9105      	str	r1, [sp, #20]
 801121a:	2100      	movs	r1, #0
 801121c:	9503      	str	r5, [sp, #12]
 801121e:	4667      	mov	r7, ip
 8011220:	6818      	ldr	r0, [r3, #0]
 8011222:	40b8      	lsls	r0, r7
 8011224:	4301      	orrs	r1, r0
 8011226:	9803      	ldr	r0, [sp, #12]
 8011228:	c002      	stmia	r0!, {r1}
 801122a:	cb02      	ldmia	r3!, {r1}
 801122c:	9003      	str	r0, [sp, #12]
 801122e:	9805      	ldr	r0, [sp, #20]
 8011230:	40c1      	lsrs	r1, r0
 8011232:	429a      	cmp	r2, r3
 8011234:	d8f3      	bhi.n	801121e <__lshift+0x82>
 8011236:	0020      	movs	r0, r4
 8011238:	3015      	adds	r0, #21
 801123a:	2304      	movs	r3, #4
 801123c:	4282      	cmp	r2, r0
 801123e:	d304      	bcc.n	801124a <__lshift+0xae>
 8011240:	1b13      	subs	r3, r2, r4
 8011242:	3b15      	subs	r3, #21
 8011244:	089b      	lsrs	r3, r3, #2
 8011246:	3301      	adds	r3, #1
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	50e9      	str	r1, [r5, r3]
 801124c:	2900      	cmp	r1, #0
 801124e:	d002      	beq.n	8011256 <__lshift+0xba>
 8011250:	9b02      	ldr	r3, [sp, #8]
 8011252:	3302      	adds	r3, #2
 8011254:	9301      	str	r3, [sp, #4]
 8011256:	9b01      	ldr	r3, [sp, #4]
 8011258:	9804      	ldr	r0, [sp, #16]
 801125a:	3b01      	subs	r3, #1
 801125c:	0021      	movs	r1, r4
 801125e:	6133      	str	r3, [r6, #16]
 8011260:	f7ff fdca 	bl	8010df8 <_Bfree>
 8011264:	0030      	movs	r0, r6
 8011266:	b007      	add	sp, #28
 8011268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801126a:	cb02      	ldmia	r3!, {r1}
 801126c:	c502      	stmia	r5!, {r1}
 801126e:	429a      	cmp	r2, r3
 8011270:	d8fb      	bhi.n	801126a <__lshift+0xce>
 8011272:	e7f0      	b.n	8011256 <__lshift+0xba>
 8011274:	080134db 	.word	0x080134db
 8011278:	080134ec 	.word	0x080134ec

0801127c <__mcmp>:
 801127c:	6902      	ldr	r2, [r0, #16]
 801127e:	690b      	ldr	r3, [r1, #16]
 8011280:	b530      	push	{r4, r5, lr}
 8011282:	0004      	movs	r4, r0
 8011284:	1ad0      	subs	r0, r2, r3
 8011286:	429a      	cmp	r2, r3
 8011288:	d10d      	bne.n	80112a6 <__mcmp+0x2a>
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	3414      	adds	r4, #20
 801128e:	3114      	adds	r1, #20
 8011290:	18e2      	adds	r2, r4, r3
 8011292:	18c9      	adds	r1, r1, r3
 8011294:	3a04      	subs	r2, #4
 8011296:	3904      	subs	r1, #4
 8011298:	6815      	ldr	r5, [r2, #0]
 801129a:	680b      	ldr	r3, [r1, #0]
 801129c:	429d      	cmp	r5, r3
 801129e:	d003      	beq.n	80112a8 <__mcmp+0x2c>
 80112a0:	2001      	movs	r0, #1
 80112a2:	429d      	cmp	r5, r3
 80112a4:	d303      	bcc.n	80112ae <__mcmp+0x32>
 80112a6:	bd30      	pop	{r4, r5, pc}
 80112a8:	4294      	cmp	r4, r2
 80112aa:	d3f3      	bcc.n	8011294 <__mcmp+0x18>
 80112ac:	e7fb      	b.n	80112a6 <__mcmp+0x2a>
 80112ae:	4240      	negs	r0, r0
 80112b0:	e7f9      	b.n	80112a6 <__mcmp+0x2a>
	...

080112b4 <__mdiff>:
 80112b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b6:	000e      	movs	r6, r1
 80112b8:	0007      	movs	r7, r0
 80112ba:	0011      	movs	r1, r2
 80112bc:	0030      	movs	r0, r6
 80112be:	b087      	sub	sp, #28
 80112c0:	0014      	movs	r4, r2
 80112c2:	f7ff ffdb 	bl	801127c <__mcmp>
 80112c6:	1e05      	subs	r5, r0, #0
 80112c8:	d110      	bne.n	80112ec <__mdiff+0x38>
 80112ca:	0001      	movs	r1, r0
 80112cc:	0038      	movs	r0, r7
 80112ce:	f7ff fd4f 	bl	8010d70 <_Balloc>
 80112d2:	1e02      	subs	r2, r0, #0
 80112d4:	d104      	bne.n	80112e0 <__mdiff+0x2c>
 80112d6:	4b40      	ldr	r3, [pc, #256]	; (80113d8 <__mdiff+0x124>)
 80112d8:	4940      	ldr	r1, [pc, #256]	; (80113dc <__mdiff+0x128>)
 80112da:	4841      	ldr	r0, [pc, #260]	; (80113e0 <__mdiff+0x12c>)
 80112dc:	f000 fb10 	bl	8011900 <__assert_func>
 80112e0:	2301      	movs	r3, #1
 80112e2:	6145      	str	r5, [r0, #20]
 80112e4:	6103      	str	r3, [r0, #16]
 80112e6:	0010      	movs	r0, r2
 80112e8:	b007      	add	sp, #28
 80112ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112ec:	2301      	movs	r3, #1
 80112ee:	9301      	str	r3, [sp, #4]
 80112f0:	2800      	cmp	r0, #0
 80112f2:	db04      	blt.n	80112fe <__mdiff+0x4a>
 80112f4:	0023      	movs	r3, r4
 80112f6:	0034      	movs	r4, r6
 80112f8:	001e      	movs	r6, r3
 80112fa:	2300      	movs	r3, #0
 80112fc:	9301      	str	r3, [sp, #4]
 80112fe:	0038      	movs	r0, r7
 8011300:	6861      	ldr	r1, [r4, #4]
 8011302:	f7ff fd35 	bl	8010d70 <_Balloc>
 8011306:	1e02      	subs	r2, r0, #0
 8011308:	d103      	bne.n	8011312 <__mdiff+0x5e>
 801130a:	2190      	movs	r1, #144	; 0x90
 801130c:	4b32      	ldr	r3, [pc, #200]	; (80113d8 <__mdiff+0x124>)
 801130e:	0089      	lsls	r1, r1, #2
 8011310:	e7e3      	b.n	80112da <__mdiff+0x26>
 8011312:	9b01      	ldr	r3, [sp, #4]
 8011314:	2700      	movs	r7, #0
 8011316:	60c3      	str	r3, [r0, #12]
 8011318:	6920      	ldr	r0, [r4, #16]
 801131a:	3414      	adds	r4, #20
 801131c:	9401      	str	r4, [sp, #4]
 801131e:	9b01      	ldr	r3, [sp, #4]
 8011320:	0084      	lsls	r4, r0, #2
 8011322:	191b      	adds	r3, r3, r4
 8011324:	0034      	movs	r4, r6
 8011326:	9302      	str	r3, [sp, #8]
 8011328:	6933      	ldr	r3, [r6, #16]
 801132a:	3414      	adds	r4, #20
 801132c:	0099      	lsls	r1, r3, #2
 801132e:	1863      	adds	r3, r4, r1
 8011330:	9303      	str	r3, [sp, #12]
 8011332:	0013      	movs	r3, r2
 8011334:	3314      	adds	r3, #20
 8011336:	469c      	mov	ip, r3
 8011338:	9305      	str	r3, [sp, #20]
 801133a:	9b01      	ldr	r3, [sp, #4]
 801133c:	9304      	str	r3, [sp, #16]
 801133e:	9b04      	ldr	r3, [sp, #16]
 8011340:	cc02      	ldmia	r4!, {r1}
 8011342:	cb20      	ldmia	r3!, {r5}
 8011344:	9304      	str	r3, [sp, #16]
 8011346:	b2ab      	uxth	r3, r5
 8011348:	19df      	adds	r7, r3, r7
 801134a:	b28b      	uxth	r3, r1
 801134c:	1afb      	subs	r3, r7, r3
 801134e:	0c2d      	lsrs	r5, r5, #16
 8011350:	0c09      	lsrs	r1, r1, #16
 8011352:	1a69      	subs	r1, r5, r1
 8011354:	141d      	asrs	r5, r3, #16
 8011356:	1949      	adds	r1, r1, r5
 8011358:	140f      	asrs	r7, r1, #16
 801135a:	b29b      	uxth	r3, r3
 801135c:	0409      	lsls	r1, r1, #16
 801135e:	430b      	orrs	r3, r1
 8011360:	4661      	mov	r1, ip
 8011362:	c108      	stmia	r1!, {r3}
 8011364:	9b03      	ldr	r3, [sp, #12]
 8011366:	468c      	mov	ip, r1
 8011368:	42a3      	cmp	r3, r4
 801136a:	d8e8      	bhi.n	801133e <__mdiff+0x8a>
 801136c:	0031      	movs	r1, r6
 801136e:	9c03      	ldr	r4, [sp, #12]
 8011370:	3115      	adds	r1, #21
 8011372:	2304      	movs	r3, #4
 8011374:	428c      	cmp	r4, r1
 8011376:	d304      	bcc.n	8011382 <__mdiff+0xce>
 8011378:	1ba3      	subs	r3, r4, r6
 801137a:	3b15      	subs	r3, #21
 801137c:	089b      	lsrs	r3, r3, #2
 801137e:	3301      	adds	r3, #1
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	9901      	ldr	r1, [sp, #4]
 8011384:	18cc      	adds	r4, r1, r3
 8011386:	9905      	ldr	r1, [sp, #20]
 8011388:	0026      	movs	r6, r4
 801138a:	18cb      	adds	r3, r1, r3
 801138c:	469c      	mov	ip, r3
 801138e:	9902      	ldr	r1, [sp, #8]
 8011390:	428e      	cmp	r6, r1
 8011392:	d310      	bcc.n	80113b6 <__mdiff+0x102>
 8011394:	9e02      	ldr	r6, [sp, #8]
 8011396:	1ee5      	subs	r5, r4, #3
 8011398:	2100      	movs	r1, #0
 801139a:	42ae      	cmp	r6, r5
 801139c:	d304      	bcc.n	80113a8 <__mdiff+0xf4>
 801139e:	0031      	movs	r1, r6
 80113a0:	3103      	adds	r1, #3
 80113a2:	1b09      	subs	r1, r1, r4
 80113a4:	0889      	lsrs	r1, r1, #2
 80113a6:	0089      	lsls	r1, r1, #2
 80113a8:	185b      	adds	r3, r3, r1
 80113aa:	3b04      	subs	r3, #4
 80113ac:	6819      	ldr	r1, [r3, #0]
 80113ae:	2900      	cmp	r1, #0
 80113b0:	d00f      	beq.n	80113d2 <__mdiff+0x11e>
 80113b2:	6110      	str	r0, [r2, #16]
 80113b4:	e797      	b.n	80112e6 <__mdiff+0x32>
 80113b6:	ce02      	ldmia	r6!, {r1}
 80113b8:	b28d      	uxth	r5, r1
 80113ba:	19ed      	adds	r5, r5, r7
 80113bc:	0c0f      	lsrs	r7, r1, #16
 80113be:	1429      	asrs	r1, r5, #16
 80113c0:	1879      	adds	r1, r7, r1
 80113c2:	140f      	asrs	r7, r1, #16
 80113c4:	b2ad      	uxth	r5, r5
 80113c6:	0409      	lsls	r1, r1, #16
 80113c8:	430d      	orrs	r5, r1
 80113ca:	4661      	mov	r1, ip
 80113cc:	c120      	stmia	r1!, {r5}
 80113ce:	468c      	mov	ip, r1
 80113d0:	e7dd      	b.n	801138e <__mdiff+0xda>
 80113d2:	3801      	subs	r0, #1
 80113d4:	e7e9      	b.n	80113aa <__mdiff+0xf6>
 80113d6:	46c0      	nop			; (mov r8, r8)
 80113d8:	080134db 	.word	0x080134db
 80113dc:	00000232 	.word	0x00000232
 80113e0:	080134ec 	.word	0x080134ec

080113e4 <__d2b>:
 80113e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113e6:	2101      	movs	r1, #1
 80113e8:	0014      	movs	r4, r2
 80113ea:	001e      	movs	r6, r3
 80113ec:	9f08      	ldr	r7, [sp, #32]
 80113ee:	f7ff fcbf 	bl	8010d70 <_Balloc>
 80113f2:	1e05      	subs	r5, r0, #0
 80113f4:	d105      	bne.n	8011402 <__d2b+0x1e>
 80113f6:	0002      	movs	r2, r0
 80113f8:	4b26      	ldr	r3, [pc, #152]	; (8011494 <__d2b+0xb0>)
 80113fa:	4927      	ldr	r1, [pc, #156]	; (8011498 <__d2b+0xb4>)
 80113fc:	4827      	ldr	r0, [pc, #156]	; (801149c <__d2b+0xb8>)
 80113fe:	f000 fa7f 	bl	8011900 <__assert_func>
 8011402:	0333      	lsls	r3, r6, #12
 8011404:	0076      	lsls	r6, r6, #1
 8011406:	0b1b      	lsrs	r3, r3, #12
 8011408:	0d76      	lsrs	r6, r6, #21
 801140a:	d124      	bne.n	8011456 <__d2b+0x72>
 801140c:	9301      	str	r3, [sp, #4]
 801140e:	2c00      	cmp	r4, #0
 8011410:	d027      	beq.n	8011462 <__d2b+0x7e>
 8011412:	4668      	mov	r0, sp
 8011414:	9400      	str	r4, [sp, #0]
 8011416:	f7ff fd71 	bl	8010efc <__lo0bits>
 801141a:	9c00      	ldr	r4, [sp, #0]
 801141c:	2800      	cmp	r0, #0
 801141e:	d01e      	beq.n	801145e <__d2b+0x7a>
 8011420:	9b01      	ldr	r3, [sp, #4]
 8011422:	2120      	movs	r1, #32
 8011424:	001a      	movs	r2, r3
 8011426:	1a09      	subs	r1, r1, r0
 8011428:	408a      	lsls	r2, r1
 801142a:	40c3      	lsrs	r3, r0
 801142c:	4322      	orrs	r2, r4
 801142e:	616a      	str	r2, [r5, #20]
 8011430:	9301      	str	r3, [sp, #4]
 8011432:	9c01      	ldr	r4, [sp, #4]
 8011434:	61ac      	str	r4, [r5, #24]
 8011436:	1e63      	subs	r3, r4, #1
 8011438:	419c      	sbcs	r4, r3
 801143a:	3401      	adds	r4, #1
 801143c:	612c      	str	r4, [r5, #16]
 801143e:	2e00      	cmp	r6, #0
 8011440:	d018      	beq.n	8011474 <__d2b+0x90>
 8011442:	4b17      	ldr	r3, [pc, #92]	; (80114a0 <__d2b+0xbc>)
 8011444:	18f6      	adds	r6, r6, r3
 8011446:	2335      	movs	r3, #53	; 0x35
 8011448:	1836      	adds	r6, r6, r0
 801144a:	1a18      	subs	r0, r3, r0
 801144c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801144e:	603e      	str	r6, [r7, #0]
 8011450:	6018      	str	r0, [r3, #0]
 8011452:	0028      	movs	r0, r5
 8011454:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011456:	2280      	movs	r2, #128	; 0x80
 8011458:	0352      	lsls	r2, r2, #13
 801145a:	4313      	orrs	r3, r2
 801145c:	e7d6      	b.n	801140c <__d2b+0x28>
 801145e:	616c      	str	r4, [r5, #20]
 8011460:	e7e7      	b.n	8011432 <__d2b+0x4e>
 8011462:	a801      	add	r0, sp, #4
 8011464:	f7ff fd4a 	bl	8010efc <__lo0bits>
 8011468:	2401      	movs	r4, #1
 801146a:	9b01      	ldr	r3, [sp, #4]
 801146c:	612c      	str	r4, [r5, #16]
 801146e:	616b      	str	r3, [r5, #20]
 8011470:	3020      	adds	r0, #32
 8011472:	e7e4      	b.n	801143e <__d2b+0x5a>
 8011474:	4b0b      	ldr	r3, [pc, #44]	; (80114a4 <__d2b+0xc0>)
 8011476:	18c0      	adds	r0, r0, r3
 8011478:	4b0b      	ldr	r3, [pc, #44]	; (80114a8 <__d2b+0xc4>)
 801147a:	6038      	str	r0, [r7, #0]
 801147c:	18e3      	adds	r3, r4, r3
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	18eb      	adds	r3, r5, r3
 8011482:	6958      	ldr	r0, [r3, #20]
 8011484:	f7ff fd20 	bl	8010ec8 <__hi0bits>
 8011488:	0164      	lsls	r4, r4, #5
 801148a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801148c:	1a24      	subs	r4, r4, r0
 801148e:	601c      	str	r4, [r3, #0]
 8011490:	e7df      	b.n	8011452 <__d2b+0x6e>
 8011492:	46c0      	nop			; (mov r8, r8)
 8011494:	080134db 	.word	0x080134db
 8011498:	0000030a 	.word	0x0000030a
 801149c:	080134ec 	.word	0x080134ec
 80114a0:	fffffbcd 	.word	0xfffffbcd
 80114a4:	fffffbce 	.word	0xfffffbce
 80114a8:	3fffffff 	.word	0x3fffffff

080114ac <_calloc_r>:
 80114ac:	434a      	muls	r2, r1
 80114ae:	b570      	push	{r4, r5, r6, lr}
 80114b0:	0011      	movs	r1, r2
 80114b2:	0015      	movs	r5, r2
 80114b4:	f000 f852 	bl	801155c <_malloc_r>
 80114b8:	1e04      	subs	r4, r0, #0
 80114ba:	d003      	beq.n	80114c4 <_calloc_r+0x18>
 80114bc:	002a      	movs	r2, r5
 80114be:	2100      	movs	r1, #0
 80114c0:	f7fe f8d4 	bl	800f66c <memset>
 80114c4:	0020      	movs	r0, r4
 80114c6:	bd70      	pop	{r4, r5, r6, pc}

080114c8 <_free_r>:
 80114c8:	b570      	push	{r4, r5, r6, lr}
 80114ca:	0005      	movs	r5, r0
 80114cc:	2900      	cmp	r1, #0
 80114ce:	d010      	beq.n	80114f2 <_free_r+0x2a>
 80114d0:	1f0c      	subs	r4, r1, #4
 80114d2:	6823      	ldr	r3, [r4, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	da00      	bge.n	80114da <_free_r+0x12>
 80114d8:	18e4      	adds	r4, r4, r3
 80114da:	0028      	movs	r0, r5
 80114dc:	f000 fa64 	bl	80119a8 <__malloc_lock>
 80114e0:	4a1d      	ldr	r2, [pc, #116]	; (8011558 <_free_r+0x90>)
 80114e2:	6813      	ldr	r3, [r2, #0]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d105      	bne.n	80114f4 <_free_r+0x2c>
 80114e8:	6063      	str	r3, [r4, #4]
 80114ea:	6014      	str	r4, [r2, #0]
 80114ec:	0028      	movs	r0, r5
 80114ee:	f000 fa63 	bl	80119b8 <__malloc_unlock>
 80114f2:	bd70      	pop	{r4, r5, r6, pc}
 80114f4:	42a3      	cmp	r3, r4
 80114f6:	d908      	bls.n	801150a <_free_r+0x42>
 80114f8:	6821      	ldr	r1, [r4, #0]
 80114fa:	1860      	adds	r0, r4, r1
 80114fc:	4283      	cmp	r3, r0
 80114fe:	d1f3      	bne.n	80114e8 <_free_r+0x20>
 8011500:	6818      	ldr	r0, [r3, #0]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	1841      	adds	r1, r0, r1
 8011506:	6021      	str	r1, [r4, #0]
 8011508:	e7ee      	b.n	80114e8 <_free_r+0x20>
 801150a:	001a      	movs	r2, r3
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d001      	beq.n	8011516 <_free_r+0x4e>
 8011512:	42a3      	cmp	r3, r4
 8011514:	d9f9      	bls.n	801150a <_free_r+0x42>
 8011516:	6811      	ldr	r1, [r2, #0]
 8011518:	1850      	adds	r0, r2, r1
 801151a:	42a0      	cmp	r0, r4
 801151c:	d10b      	bne.n	8011536 <_free_r+0x6e>
 801151e:	6820      	ldr	r0, [r4, #0]
 8011520:	1809      	adds	r1, r1, r0
 8011522:	1850      	adds	r0, r2, r1
 8011524:	6011      	str	r1, [r2, #0]
 8011526:	4283      	cmp	r3, r0
 8011528:	d1e0      	bne.n	80114ec <_free_r+0x24>
 801152a:	6818      	ldr	r0, [r3, #0]
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	1841      	adds	r1, r0, r1
 8011530:	6011      	str	r1, [r2, #0]
 8011532:	6053      	str	r3, [r2, #4]
 8011534:	e7da      	b.n	80114ec <_free_r+0x24>
 8011536:	42a0      	cmp	r0, r4
 8011538:	d902      	bls.n	8011540 <_free_r+0x78>
 801153a:	230c      	movs	r3, #12
 801153c:	602b      	str	r3, [r5, #0]
 801153e:	e7d5      	b.n	80114ec <_free_r+0x24>
 8011540:	6821      	ldr	r1, [r4, #0]
 8011542:	1860      	adds	r0, r4, r1
 8011544:	4283      	cmp	r3, r0
 8011546:	d103      	bne.n	8011550 <_free_r+0x88>
 8011548:	6818      	ldr	r0, [r3, #0]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	1841      	adds	r1, r0, r1
 801154e:	6021      	str	r1, [r4, #0]
 8011550:	6063      	str	r3, [r4, #4]
 8011552:	6054      	str	r4, [r2, #4]
 8011554:	e7ca      	b.n	80114ec <_free_r+0x24>
 8011556:	46c0      	nop			; (mov r8, r8)
 8011558:	20001358 	.word	0x20001358

0801155c <_malloc_r>:
 801155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155e:	2303      	movs	r3, #3
 8011560:	1ccd      	adds	r5, r1, #3
 8011562:	439d      	bics	r5, r3
 8011564:	3508      	adds	r5, #8
 8011566:	0006      	movs	r6, r0
 8011568:	2d0c      	cmp	r5, #12
 801156a:	d21f      	bcs.n	80115ac <_malloc_r+0x50>
 801156c:	250c      	movs	r5, #12
 801156e:	42a9      	cmp	r1, r5
 8011570:	d81e      	bhi.n	80115b0 <_malloc_r+0x54>
 8011572:	0030      	movs	r0, r6
 8011574:	f000 fa18 	bl	80119a8 <__malloc_lock>
 8011578:	4925      	ldr	r1, [pc, #148]	; (8011610 <_malloc_r+0xb4>)
 801157a:	680a      	ldr	r2, [r1, #0]
 801157c:	0014      	movs	r4, r2
 801157e:	2c00      	cmp	r4, #0
 8011580:	d11a      	bne.n	80115b8 <_malloc_r+0x5c>
 8011582:	4f24      	ldr	r7, [pc, #144]	; (8011614 <_malloc_r+0xb8>)
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d104      	bne.n	8011594 <_malloc_r+0x38>
 801158a:	0021      	movs	r1, r4
 801158c:	0030      	movs	r0, r6
 801158e:	f000 f9a5 	bl	80118dc <_sbrk_r>
 8011592:	6038      	str	r0, [r7, #0]
 8011594:	0029      	movs	r1, r5
 8011596:	0030      	movs	r0, r6
 8011598:	f000 f9a0 	bl	80118dc <_sbrk_r>
 801159c:	1c43      	adds	r3, r0, #1
 801159e:	d12b      	bne.n	80115f8 <_malloc_r+0x9c>
 80115a0:	230c      	movs	r3, #12
 80115a2:	0030      	movs	r0, r6
 80115a4:	6033      	str	r3, [r6, #0]
 80115a6:	f000 fa07 	bl	80119b8 <__malloc_unlock>
 80115aa:	e003      	b.n	80115b4 <_malloc_r+0x58>
 80115ac:	2d00      	cmp	r5, #0
 80115ae:	dade      	bge.n	801156e <_malloc_r+0x12>
 80115b0:	230c      	movs	r3, #12
 80115b2:	6033      	str	r3, [r6, #0]
 80115b4:	2000      	movs	r0, #0
 80115b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115b8:	6823      	ldr	r3, [r4, #0]
 80115ba:	1b5b      	subs	r3, r3, r5
 80115bc:	d419      	bmi.n	80115f2 <_malloc_r+0x96>
 80115be:	2b0b      	cmp	r3, #11
 80115c0:	d903      	bls.n	80115ca <_malloc_r+0x6e>
 80115c2:	6023      	str	r3, [r4, #0]
 80115c4:	18e4      	adds	r4, r4, r3
 80115c6:	6025      	str	r5, [r4, #0]
 80115c8:	e003      	b.n	80115d2 <_malloc_r+0x76>
 80115ca:	6863      	ldr	r3, [r4, #4]
 80115cc:	42a2      	cmp	r2, r4
 80115ce:	d10e      	bne.n	80115ee <_malloc_r+0x92>
 80115d0:	600b      	str	r3, [r1, #0]
 80115d2:	0030      	movs	r0, r6
 80115d4:	f000 f9f0 	bl	80119b8 <__malloc_unlock>
 80115d8:	0020      	movs	r0, r4
 80115da:	2207      	movs	r2, #7
 80115dc:	300b      	adds	r0, #11
 80115de:	1d23      	adds	r3, r4, #4
 80115e0:	4390      	bics	r0, r2
 80115e2:	1ac2      	subs	r2, r0, r3
 80115e4:	4298      	cmp	r0, r3
 80115e6:	d0e6      	beq.n	80115b6 <_malloc_r+0x5a>
 80115e8:	1a1b      	subs	r3, r3, r0
 80115ea:	50a3      	str	r3, [r4, r2]
 80115ec:	e7e3      	b.n	80115b6 <_malloc_r+0x5a>
 80115ee:	6053      	str	r3, [r2, #4]
 80115f0:	e7ef      	b.n	80115d2 <_malloc_r+0x76>
 80115f2:	0022      	movs	r2, r4
 80115f4:	6864      	ldr	r4, [r4, #4]
 80115f6:	e7c2      	b.n	801157e <_malloc_r+0x22>
 80115f8:	2303      	movs	r3, #3
 80115fa:	1cc4      	adds	r4, r0, #3
 80115fc:	439c      	bics	r4, r3
 80115fe:	42a0      	cmp	r0, r4
 8011600:	d0e1      	beq.n	80115c6 <_malloc_r+0x6a>
 8011602:	1a21      	subs	r1, r4, r0
 8011604:	0030      	movs	r0, r6
 8011606:	f000 f969 	bl	80118dc <_sbrk_r>
 801160a:	1c43      	adds	r3, r0, #1
 801160c:	d1db      	bne.n	80115c6 <_malloc_r+0x6a>
 801160e:	e7c7      	b.n	80115a0 <_malloc_r+0x44>
 8011610:	20001358 	.word	0x20001358
 8011614:	2000135c 	.word	0x2000135c

08011618 <__ssputs_r>:
 8011618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801161a:	688e      	ldr	r6, [r1, #8]
 801161c:	b085      	sub	sp, #20
 801161e:	0007      	movs	r7, r0
 8011620:	000c      	movs	r4, r1
 8011622:	9203      	str	r2, [sp, #12]
 8011624:	9301      	str	r3, [sp, #4]
 8011626:	429e      	cmp	r6, r3
 8011628:	d83c      	bhi.n	80116a4 <__ssputs_r+0x8c>
 801162a:	2390      	movs	r3, #144	; 0x90
 801162c:	898a      	ldrh	r2, [r1, #12]
 801162e:	00db      	lsls	r3, r3, #3
 8011630:	421a      	tst	r2, r3
 8011632:	d034      	beq.n	801169e <__ssputs_r+0x86>
 8011634:	2503      	movs	r5, #3
 8011636:	6909      	ldr	r1, [r1, #16]
 8011638:	6823      	ldr	r3, [r4, #0]
 801163a:	1a5b      	subs	r3, r3, r1
 801163c:	9302      	str	r3, [sp, #8]
 801163e:	6963      	ldr	r3, [r4, #20]
 8011640:	9802      	ldr	r0, [sp, #8]
 8011642:	435d      	muls	r5, r3
 8011644:	0feb      	lsrs	r3, r5, #31
 8011646:	195d      	adds	r5, r3, r5
 8011648:	9b01      	ldr	r3, [sp, #4]
 801164a:	106d      	asrs	r5, r5, #1
 801164c:	3301      	adds	r3, #1
 801164e:	181b      	adds	r3, r3, r0
 8011650:	42ab      	cmp	r3, r5
 8011652:	d900      	bls.n	8011656 <__ssputs_r+0x3e>
 8011654:	001d      	movs	r5, r3
 8011656:	0553      	lsls	r3, r2, #21
 8011658:	d532      	bpl.n	80116c0 <__ssputs_r+0xa8>
 801165a:	0029      	movs	r1, r5
 801165c:	0038      	movs	r0, r7
 801165e:	f7ff ff7d 	bl	801155c <_malloc_r>
 8011662:	1e06      	subs	r6, r0, #0
 8011664:	d109      	bne.n	801167a <__ssputs_r+0x62>
 8011666:	230c      	movs	r3, #12
 8011668:	603b      	str	r3, [r7, #0]
 801166a:	2340      	movs	r3, #64	; 0x40
 801166c:	2001      	movs	r0, #1
 801166e:	89a2      	ldrh	r2, [r4, #12]
 8011670:	4240      	negs	r0, r0
 8011672:	4313      	orrs	r3, r2
 8011674:	81a3      	strh	r3, [r4, #12]
 8011676:	b005      	add	sp, #20
 8011678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801167a:	9a02      	ldr	r2, [sp, #8]
 801167c:	6921      	ldr	r1, [r4, #16]
 801167e:	f7ff fb6e 	bl	8010d5e <memcpy>
 8011682:	89a3      	ldrh	r3, [r4, #12]
 8011684:	4a14      	ldr	r2, [pc, #80]	; (80116d8 <__ssputs_r+0xc0>)
 8011686:	401a      	ands	r2, r3
 8011688:	2380      	movs	r3, #128	; 0x80
 801168a:	4313      	orrs	r3, r2
 801168c:	81a3      	strh	r3, [r4, #12]
 801168e:	9b02      	ldr	r3, [sp, #8]
 8011690:	6126      	str	r6, [r4, #16]
 8011692:	18f6      	adds	r6, r6, r3
 8011694:	6026      	str	r6, [r4, #0]
 8011696:	6165      	str	r5, [r4, #20]
 8011698:	9e01      	ldr	r6, [sp, #4]
 801169a:	1aed      	subs	r5, r5, r3
 801169c:	60a5      	str	r5, [r4, #8]
 801169e:	9b01      	ldr	r3, [sp, #4]
 80116a0:	429e      	cmp	r6, r3
 80116a2:	d900      	bls.n	80116a6 <__ssputs_r+0x8e>
 80116a4:	9e01      	ldr	r6, [sp, #4]
 80116a6:	0032      	movs	r2, r6
 80116a8:	9903      	ldr	r1, [sp, #12]
 80116aa:	6820      	ldr	r0, [r4, #0]
 80116ac:	f000 f968 	bl	8011980 <memmove>
 80116b0:	68a3      	ldr	r3, [r4, #8]
 80116b2:	2000      	movs	r0, #0
 80116b4:	1b9b      	subs	r3, r3, r6
 80116b6:	60a3      	str	r3, [r4, #8]
 80116b8:	6823      	ldr	r3, [r4, #0]
 80116ba:	199e      	adds	r6, r3, r6
 80116bc:	6026      	str	r6, [r4, #0]
 80116be:	e7da      	b.n	8011676 <__ssputs_r+0x5e>
 80116c0:	002a      	movs	r2, r5
 80116c2:	0038      	movs	r0, r7
 80116c4:	f000 f980 	bl	80119c8 <_realloc_r>
 80116c8:	1e06      	subs	r6, r0, #0
 80116ca:	d1e0      	bne.n	801168e <__ssputs_r+0x76>
 80116cc:	0038      	movs	r0, r7
 80116ce:	6921      	ldr	r1, [r4, #16]
 80116d0:	f7ff fefa 	bl	80114c8 <_free_r>
 80116d4:	e7c7      	b.n	8011666 <__ssputs_r+0x4e>
 80116d6:	46c0      	nop			; (mov r8, r8)
 80116d8:	fffffb7f 	.word	0xfffffb7f

080116dc <_svfiprintf_r>:
 80116dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116de:	b0a1      	sub	sp, #132	; 0x84
 80116e0:	9003      	str	r0, [sp, #12]
 80116e2:	001d      	movs	r5, r3
 80116e4:	898b      	ldrh	r3, [r1, #12]
 80116e6:	000f      	movs	r7, r1
 80116e8:	0016      	movs	r6, r2
 80116ea:	061b      	lsls	r3, r3, #24
 80116ec:	d511      	bpl.n	8011712 <_svfiprintf_r+0x36>
 80116ee:	690b      	ldr	r3, [r1, #16]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d10e      	bne.n	8011712 <_svfiprintf_r+0x36>
 80116f4:	2140      	movs	r1, #64	; 0x40
 80116f6:	f7ff ff31 	bl	801155c <_malloc_r>
 80116fa:	6038      	str	r0, [r7, #0]
 80116fc:	6138      	str	r0, [r7, #16]
 80116fe:	2800      	cmp	r0, #0
 8011700:	d105      	bne.n	801170e <_svfiprintf_r+0x32>
 8011702:	230c      	movs	r3, #12
 8011704:	9a03      	ldr	r2, [sp, #12]
 8011706:	3801      	subs	r0, #1
 8011708:	6013      	str	r3, [r2, #0]
 801170a:	b021      	add	sp, #132	; 0x84
 801170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801170e:	2340      	movs	r3, #64	; 0x40
 8011710:	617b      	str	r3, [r7, #20]
 8011712:	2300      	movs	r3, #0
 8011714:	ac08      	add	r4, sp, #32
 8011716:	6163      	str	r3, [r4, #20]
 8011718:	3320      	adds	r3, #32
 801171a:	7663      	strb	r3, [r4, #25]
 801171c:	3310      	adds	r3, #16
 801171e:	76a3      	strb	r3, [r4, #26]
 8011720:	9507      	str	r5, [sp, #28]
 8011722:	0035      	movs	r5, r6
 8011724:	782b      	ldrb	r3, [r5, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d001      	beq.n	801172e <_svfiprintf_r+0x52>
 801172a:	2b25      	cmp	r3, #37	; 0x25
 801172c:	d147      	bne.n	80117be <_svfiprintf_r+0xe2>
 801172e:	1bab      	subs	r3, r5, r6
 8011730:	9305      	str	r3, [sp, #20]
 8011732:	42b5      	cmp	r5, r6
 8011734:	d00c      	beq.n	8011750 <_svfiprintf_r+0x74>
 8011736:	0032      	movs	r2, r6
 8011738:	0039      	movs	r1, r7
 801173a:	9803      	ldr	r0, [sp, #12]
 801173c:	f7ff ff6c 	bl	8011618 <__ssputs_r>
 8011740:	1c43      	adds	r3, r0, #1
 8011742:	d100      	bne.n	8011746 <_svfiprintf_r+0x6a>
 8011744:	e0ae      	b.n	80118a4 <_svfiprintf_r+0x1c8>
 8011746:	6962      	ldr	r2, [r4, #20]
 8011748:	9b05      	ldr	r3, [sp, #20]
 801174a:	4694      	mov	ip, r2
 801174c:	4463      	add	r3, ip
 801174e:	6163      	str	r3, [r4, #20]
 8011750:	782b      	ldrb	r3, [r5, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d100      	bne.n	8011758 <_svfiprintf_r+0x7c>
 8011756:	e0a5      	b.n	80118a4 <_svfiprintf_r+0x1c8>
 8011758:	2201      	movs	r2, #1
 801175a:	2300      	movs	r3, #0
 801175c:	4252      	negs	r2, r2
 801175e:	6062      	str	r2, [r4, #4]
 8011760:	a904      	add	r1, sp, #16
 8011762:	3254      	adds	r2, #84	; 0x54
 8011764:	1852      	adds	r2, r2, r1
 8011766:	1c6e      	adds	r6, r5, #1
 8011768:	6023      	str	r3, [r4, #0]
 801176a:	60e3      	str	r3, [r4, #12]
 801176c:	60a3      	str	r3, [r4, #8]
 801176e:	7013      	strb	r3, [r2, #0]
 8011770:	65a3      	str	r3, [r4, #88]	; 0x58
 8011772:	2205      	movs	r2, #5
 8011774:	7831      	ldrb	r1, [r6, #0]
 8011776:	4854      	ldr	r0, [pc, #336]	; (80118c8 <_svfiprintf_r+0x1ec>)
 8011778:	f7ff fae6 	bl	8010d48 <memchr>
 801177c:	1c75      	adds	r5, r6, #1
 801177e:	2800      	cmp	r0, #0
 8011780:	d11f      	bne.n	80117c2 <_svfiprintf_r+0xe6>
 8011782:	6822      	ldr	r2, [r4, #0]
 8011784:	06d3      	lsls	r3, r2, #27
 8011786:	d504      	bpl.n	8011792 <_svfiprintf_r+0xb6>
 8011788:	2353      	movs	r3, #83	; 0x53
 801178a:	a904      	add	r1, sp, #16
 801178c:	185b      	adds	r3, r3, r1
 801178e:	2120      	movs	r1, #32
 8011790:	7019      	strb	r1, [r3, #0]
 8011792:	0713      	lsls	r3, r2, #28
 8011794:	d504      	bpl.n	80117a0 <_svfiprintf_r+0xc4>
 8011796:	2353      	movs	r3, #83	; 0x53
 8011798:	a904      	add	r1, sp, #16
 801179a:	185b      	adds	r3, r3, r1
 801179c:	212b      	movs	r1, #43	; 0x2b
 801179e:	7019      	strb	r1, [r3, #0]
 80117a0:	7833      	ldrb	r3, [r6, #0]
 80117a2:	2b2a      	cmp	r3, #42	; 0x2a
 80117a4:	d016      	beq.n	80117d4 <_svfiprintf_r+0xf8>
 80117a6:	0035      	movs	r5, r6
 80117a8:	2100      	movs	r1, #0
 80117aa:	200a      	movs	r0, #10
 80117ac:	68e3      	ldr	r3, [r4, #12]
 80117ae:	782a      	ldrb	r2, [r5, #0]
 80117b0:	1c6e      	adds	r6, r5, #1
 80117b2:	3a30      	subs	r2, #48	; 0x30
 80117b4:	2a09      	cmp	r2, #9
 80117b6:	d94e      	bls.n	8011856 <_svfiprintf_r+0x17a>
 80117b8:	2900      	cmp	r1, #0
 80117ba:	d111      	bne.n	80117e0 <_svfiprintf_r+0x104>
 80117bc:	e017      	b.n	80117ee <_svfiprintf_r+0x112>
 80117be:	3501      	adds	r5, #1
 80117c0:	e7b0      	b.n	8011724 <_svfiprintf_r+0x48>
 80117c2:	4b41      	ldr	r3, [pc, #260]	; (80118c8 <_svfiprintf_r+0x1ec>)
 80117c4:	6822      	ldr	r2, [r4, #0]
 80117c6:	1ac0      	subs	r0, r0, r3
 80117c8:	2301      	movs	r3, #1
 80117ca:	4083      	lsls	r3, r0
 80117cc:	4313      	orrs	r3, r2
 80117ce:	002e      	movs	r6, r5
 80117d0:	6023      	str	r3, [r4, #0]
 80117d2:	e7ce      	b.n	8011772 <_svfiprintf_r+0x96>
 80117d4:	9b07      	ldr	r3, [sp, #28]
 80117d6:	1d19      	adds	r1, r3, #4
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	9107      	str	r1, [sp, #28]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	db01      	blt.n	80117e4 <_svfiprintf_r+0x108>
 80117e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80117e2:	e004      	b.n	80117ee <_svfiprintf_r+0x112>
 80117e4:	425b      	negs	r3, r3
 80117e6:	60e3      	str	r3, [r4, #12]
 80117e8:	2302      	movs	r3, #2
 80117ea:	4313      	orrs	r3, r2
 80117ec:	6023      	str	r3, [r4, #0]
 80117ee:	782b      	ldrb	r3, [r5, #0]
 80117f0:	2b2e      	cmp	r3, #46	; 0x2e
 80117f2:	d10a      	bne.n	801180a <_svfiprintf_r+0x12e>
 80117f4:	786b      	ldrb	r3, [r5, #1]
 80117f6:	2b2a      	cmp	r3, #42	; 0x2a
 80117f8:	d135      	bne.n	8011866 <_svfiprintf_r+0x18a>
 80117fa:	9b07      	ldr	r3, [sp, #28]
 80117fc:	3502      	adds	r5, #2
 80117fe:	1d1a      	adds	r2, r3, #4
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	9207      	str	r2, [sp, #28]
 8011804:	2b00      	cmp	r3, #0
 8011806:	db2b      	blt.n	8011860 <_svfiprintf_r+0x184>
 8011808:	9309      	str	r3, [sp, #36]	; 0x24
 801180a:	4e30      	ldr	r6, [pc, #192]	; (80118cc <_svfiprintf_r+0x1f0>)
 801180c:	2203      	movs	r2, #3
 801180e:	0030      	movs	r0, r6
 8011810:	7829      	ldrb	r1, [r5, #0]
 8011812:	f7ff fa99 	bl	8010d48 <memchr>
 8011816:	2800      	cmp	r0, #0
 8011818:	d006      	beq.n	8011828 <_svfiprintf_r+0x14c>
 801181a:	2340      	movs	r3, #64	; 0x40
 801181c:	1b80      	subs	r0, r0, r6
 801181e:	4083      	lsls	r3, r0
 8011820:	6822      	ldr	r2, [r4, #0]
 8011822:	3501      	adds	r5, #1
 8011824:	4313      	orrs	r3, r2
 8011826:	6023      	str	r3, [r4, #0]
 8011828:	7829      	ldrb	r1, [r5, #0]
 801182a:	2206      	movs	r2, #6
 801182c:	4828      	ldr	r0, [pc, #160]	; (80118d0 <_svfiprintf_r+0x1f4>)
 801182e:	1c6e      	adds	r6, r5, #1
 8011830:	7621      	strb	r1, [r4, #24]
 8011832:	f7ff fa89 	bl	8010d48 <memchr>
 8011836:	2800      	cmp	r0, #0
 8011838:	d03c      	beq.n	80118b4 <_svfiprintf_r+0x1d8>
 801183a:	4b26      	ldr	r3, [pc, #152]	; (80118d4 <_svfiprintf_r+0x1f8>)
 801183c:	2b00      	cmp	r3, #0
 801183e:	d125      	bne.n	801188c <_svfiprintf_r+0x1b0>
 8011840:	2207      	movs	r2, #7
 8011842:	9b07      	ldr	r3, [sp, #28]
 8011844:	3307      	adds	r3, #7
 8011846:	4393      	bics	r3, r2
 8011848:	3308      	adds	r3, #8
 801184a:	9307      	str	r3, [sp, #28]
 801184c:	6963      	ldr	r3, [r4, #20]
 801184e:	9a04      	ldr	r2, [sp, #16]
 8011850:	189b      	adds	r3, r3, r2
 8011852:	6163      	str	r3, [r4, #20]
 8011854:	e765      	b.n	8011722 <_svfiprintf_r+0x46>
 8011856:	4343      	muls	r3, r0
 8011858:	0035      	movs	r5, r6
 801185a:	2101      	movs	r1, #1
 801185c:	189b      	adds	r3, r3, r2
 801185e:	e7a6      	b.n	80117ae <_svfiprintf_r+0xd2>
 8011860:	2301      	movs	r3, #1
 8011862:	425b      	negs	r3, r3
 8011864:	e7d0      	b.n	8011808 <_svfiprintf_r+0x12c>
 8011866:	2300      	movs	r3, #0
 8011868:	200a      	movs	r0, #10
 801186a:	001a      	movs	r2, r3
 801186c:	3501      	adds	r5, #1
 801186e:	6063      	str	r3, [r4, #4]
 8011870:	7829      	ldrb	r1, [r5, #0]
 8011872:	1c6e      	adds	r6, r5, #1
 8011874:	3930      	subs	r1, #48	; 0x30
 8011876:	2909      	cmp	r1, #9
 8011878:	d903      	bls.n	8011882 <_svfiprintf_r+0x1a6>
 801187a:	2b00      	cmp	r3, #0
 801187c:	d0c5      	beq.n	801180a <_svfiprintf_r+0x12e>
 801187e:	9209      	str	r2, [sp, #36]	; 0x24
 8011880:	e7c3      	b.n	801180a <_svfiprintf_r+0x12e>
 8011882:	4342      	muls	r2, r0
 8011884:	0035      	movs	r5, r6
 8011886:	2301      	movs	r3, #1
 8011888:	1852      	adds	r2, r2, r1
 801188a:	e7f1      	b.n	8011870 <_svfiprintf_r+0x194>
 801188c:	ab07      	add	r3, sp, #28
 801188e:	9300      	str	r3, [sp, #0]
 8011890:	003a      	movs	r2, r7
 8011892:	0021      	movs	r1, r4
 8011894:	4b10      	ldr	r3, [pc, #64]	; (80118d8 <_svfiprintf_r+0x1fc>)
 8011896:	9803      	ldr	r0, [sp, #12]
 8011898:	f7fd ff9a 	bl	800f7d0 <_printf_float>
 801189c:	9004      	str	r0, [sp, #16]
 801189e:	9b04      	ldr	r3, [sp, #16]
 80118a0:	3301      	adds	r3, #1
 80118a2:	d1d3      	bne.n	801184c <_svfiprintf_r+0x170>
 80118a4:	89bb      	ldrh	r3, [r7, #12]
 80118a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80118a8:	065b      	lsls	r3, r3, #25
 80118aa:	d400      	bmi.n	80118ae <_svfiprintf_r+0x1d2>
 80118ac:	e72d      	b.n	801170a <_svfiprintf_r+0x2e>
 80118ae:	2001      	movs	r0, #1
 80118b0:	4240      	negs	r0, r0
 80118b2:	e72a      	b.n	801170a <_svfiprintf_r+0x2e>
 80118b4:	ab07      	add	r3, sp, #28
 80118b6:	9300      	str	r3, [sp, #0]
 80118b8:	003a      	movs	r2, r7
 80118ba:	0021      	movs	r1, r4
 80118bc:	4b06      	ldr	r3, [pc, #24]	; (80118d8 <_svfiprintf_r+0x1fc>)
 80118be:	9803      	ldr	r0, [sp, #12]
 80118c0:	f7fe fa44 	bl	800fd4c <_printf_i>
 80118c4:	e7ea      	b.n	801189c <_svfiprintf_r+0x1c0>
 80118c6:	46c0      	nop			; (mov r8, r8)
 80118c8:	0801364c 	.word	0x0801364c
 80118cc:	08013652 	.word	0x08013652
 80118d0:	08013656 	.word	0x08013656
 80118d4:	0800f7d1 	.word	0x0800f7d1
 80118d8:	08011619 	.word	0x08011619

080118dc <_sbrk_r>:
 80118dc:	2300      	movs	r3, #0
 80118de:	b570      	push	{r4, r5, r6, lr}
 80118e0:	4d06      	ldr	r5, [pc, #24]	; (80118fc <_sbrk_r+0x20>)
 80118e2:	0004      	movs	r4, r0
 80118e4:	0008      	movs	r0, r1
 80118e6:	602b      	str	r3, [r5, #0]
 80118e8:	f7f2 fa8e 	bl	8003e08 <_sbrk>
 80118ec:	1c43      	adds	r3, r0, #1
 80118ee:	d103      	bne.n	80118f8 <_sbrk_r+0x1c>
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d000      	beq.n	80118f8 <_sbrk_r+0x1c>
 80118f6:	6023      	str	r3, [r4, #0]
 80118f8:	bd70      	pop	{r4, r5, r6, pc}
 80118fa:	46c0      	nop			; (mov r8, r8)
 80118fc:	200016c4 	.word	0x200016c4

08011900 <__assert_func>:
 8011900:	b530      	push	{r4, r5, lr}
 8011902:	0014      	movs	r4, r2
 8011904:	001a      	movs	r2, r3
 8011906:	4b09      	ldr	r3, [pc, #36]	; (801192c <__assert_func+0x2c>)
 8011908:	0005      	movs	r5, r0
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	b085      	sub	sp, #20
 801190e:	68d8      	ldr	r0, [r3, #12]
 8011910:	4b07      	ldr	r3, [pc, #28]	; (8011930 <__assert_func+0x30>)
 8011912:	2c00      	cmp	r4, #0
 8011914:	d101      	bne.n	801191a <__assert_func+0x1a>
 8011916:	4b07      	ldr	r3, [pc, #28]	; (8011934 <__assert_func+0x34>)
 8011918:	001c      	movs	r4, r3
 801191a:	9301      	str	r3, [sp, #4]
 801191c:	9100      	str	r1, [sp, #0]
 801191e:	002b      	movs	r3, r5
 8011920:	4905      	ldr	r1, [pc, #20]	; (8011938 <__assert_func+0x38>)
 8011922:	9402      	str	r4, [sp, #8]
 8011924:	f000 f80a 	bl	801193c <fiprintf>
 8011928:	f000 fab2 	bl	8011e90 <abort>
 801192c:	2000019c 	.word	0x2000019c
 8011930:	0801365d 	.word	0x0801365d
 8011934:	08013158 	.word	0x08013158
 8011938:	0801366a 	.word	0x0801366a

0801193c <fiprintf>:
 801193c:	b40e      	push	{r1, r2, r3}
 801193e:	b503      	push	{r0, r1, lr}
 8011940:	0001      	movs	r1, r0
 8011942:	ab03      	add	r3, sp, #12
 8011944:	4804      	ldr	r0, [pc, #16]	; (8011958 <fiprintf+0x1c>)
 8011946:	cb04      	ldmia	r3!, {r2}
 8011948:	6800      	ldr	r0, [r0, #0]
 801194a:	9301      	str	r3, [sp, #4]
 801194c:	f000 f88a 	bl	8011a64 <_vfiprintf_r>
 8011950:	b002      	add	sp, #8
 8011952:	bc08      	pop	{r3}
 8011954:	b003      	add	sp, #12
 8011956:	4718      	bx	r3
 8011958:	2000019c 	.word	0x2000019c

0801195c <__ascii_mbtowc>:
 801195c:	b082      	sub	sp, #8
 801195e:	2900      	cmp	r1, #0
 8011960:	d100      	bne.n	8011964 <__ascii_mbtowc+0x8>
 8011962:	a901      	add	r1, sp, #4
 8011964:	1e10      	subs	r0, r2, #0
 8011966:	d006      	beq.n	8011976 <__ascii_mbtowc+0x1a>
 8011968:	2b00      	cmp	r3, #0
 801196a:	d006      	beq.n	801197a <__ascii_mbtowc+0x1e>
 801196c:	7813      	ldrb	r3, [r2, #0]
 801196e:	600b      	str	r3, [r1, #0]
 8011970:	7810      	ldrb	r0, [r2, #0]
 8011972:	1e43      	subs	r3, r0, #1
 8011974:	4198      	sbcs	r0, r3
 8011976:	b002      	add	sp, #8
 8011978:	4770      	bx	lr
 801197a:	2002      	movs	r0, #2
 801197c:	4240      	negs	r0, r0
 801197e:	e7fa      	b.n	8011976 <__ascii_mbtowc+0x1a>

08011980 <memmove>:
 8011980:	b510      	push	{r4, lr}
 8011982:	4288      	cmp	r0, r1
 8011984:	d902      	bls.n	801198c <memmove+0xc>
 8011986:	188b      	adds	r3, r1, r2
 8011988:	4298      	cmp	r0, r3
 801198a:	d303      	bcc.n	8011994 <memmove+0x14>
 801198c:	2300      	movs	r3, #0
 801198e:	e007      	b.n	80119a0 <memmove+0x20>
 8011990:	5c8b      	ldrb	r3, [r1, r2]
 8011992:	5483      	strb	r3, [r0, r2]
 8011994:	3a01      	subs	r2, #1
 8011996:	d2fb      	bcs.n	8011990 <memmove+0x10>
 8011998:	bd10      	pop	{r4, pc}
 801199a:	5ccc      	ldrb	r4, [r1, r3]
 801199c:	54c4      	strb	r4, [r0, r3]
 801199e:	3301      	adds	r3, #1
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d1fa      	bne.n	801199a <memmove+0x1a>
 80119a4:	e7f8      	b.n	8011998 <memmove+0x18>
	...

080119a8 <__malloc_lock>:
 80119a8:	b510      	push	{r4, lr}
 80119aa:	4802      	ldr	r0, [pc, #8]	; (80119b4 <__malloc_lock+0xc>)
 80119ac:	f000 fc47 	bl	801223e <__retarget_lock_acquire_recursive>
 80119b0:	bd10      	pop	{r4, pc}
 80119b2:	46c0      	nop			; (mov r8, r8)
 80119b4:	200016cc 	.word	0x200016cc

080119b8 <__malloc_unlock>:
 80119b8:	b510      	push	{r4, lr}
 80119ba:	4802      	ldr	r0, [pc, #8]	; (80119c4 <__malloc_unlock+0xc>)
 80119bc:	f000 fc40 	bl	8012240 <__retarget_lock_release_recursive>
 80119c0:	bd10      	pop	{r4, pc}
 80119c2:	46c0      	nop			; (mov r8, r8)
 80119c4:	200016cc 	.word	0x200016cc

080119c8 <_realloc_r>:
 80119c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ca:	0007      	movs	r7, r0
 80119cc:	000d      	movs	r5, r1
 80119ce:	0016      	movs	r6, r2
 80119d0:	2900      	cmp	r1, #0
 80119d2:	d105      	bne.n	80119e0 <_realloc_r+0x18>
 80119d4:	0011      	movs	r1, r2
 80119d6:	f7ff fdc1 	bl	801155c <_malloc_r>
 80119da:	0004      	movs	r4, r0
 80119dc:	0020      	movs	r0, r4
 80119de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119e0:	2a00      	cmp	r2, #0
 80119e2:	d103      	bne.n	80119ec <_realloc_r+0x24>
 80119e4:	f7ff fd70 	bl	80114c8 <_free_r>
 80119e8:	0034      	movs	r4, r6
 80119ea:	e7f7      	b.n	80119dc <_realloc_r+0x14>
 80119ec:	f000 fc96 	bl	801231c <_malloc_usable_size_r>
 80119f0:	002c      	movs	r4, r5
 80119f2:	42b0      	cmp	r0, r6
 80119f4:	d2f2      	bcs.n	80119dc <_realloc_r+0x14>
 80119f6:	0031      	movs	r1, r6
 80119f8:	0038      	movs	r0, r7
 80119fa:	f7ff fdaf 	bl	801155c <_malloc_r>
 80119fe:	1e04      	subs	r4, r0, #0
 8011a00:	d0ec      	beq.n	80119dc <_realloc_r+0x14>
 8011a02:	0029      	movs	r1, r5
 8011a04:	0032      	movs	r2, r6
 8011a06:	f7ff f9aa 	bl	8010d5e <memcpy>
 8011a0a:	0029      	movs	r1, r5
 8011a0c:	0038      	movs	r0, r7
 8011a0e:	f7ff fd5b 	bl	80114c8 <_free_r>
 8011a12:	e7e3      	b.n	80119dc <_realloc_r+0x14>

08011a14 <__sfputc_r>:
 8011a14:	6893      	ldr	r3, [r2, #8]
 8011a16:	b510      	push	{r4, lr}
 8011a18:	3b01      	subs	r3, #1
 8011a1a:	6093      	str	r3, [r2, #8]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	da04      	bge.n	8011a2a <__sfputc_r+0x16>
 8011a20:	6994      	ldr	r4, [r2, #24]
 8011a22:	42a3      	cmp	r3, r4
 8011a24:	db07      	blt.n	8011a36 <__sfputc_r+0x22>
 8011a26:	290a      	cmp	r1, #10
 8011a28:	d005      	beq.n	8011a36 <__sfputc_r+0x22>
 8011a2a:	6813      	ldr	r3, [r2, #0]
 8011a2c:	1c58      	adds	r0, r3, #1
 8011a2e:	6010      	str	r0, [r2, #0]
 8011a30:	7019      	strb	r1, [r3, #0]
 8011a32:	0008      	movs	r0, r1
 8011a34:	bd10      	pop	{r4, pc}
 8011a36:	f000 f94f 	bl	8011cd8 <__swbuf_r>
 8011a3a:	0001      	movs	r1, r0
 8011a3c:	e7f9      	b.n	8011a32 <__sfputc_r+0x1e>

08011a3e <__sfputs_r>:
 8011a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a40:	0006      	movs	r6, r0
 8011a42:	000f      	movs	r7, r1
 8011a44:	0014      	movs	r4, r2
 8011a46:	18d5      	adds	r5, r2, r3
 8011a48:	42ac      	cmp	r4, r5
 8011a4a:	d101      	bne.n	8011a50 <__sfputs_r+0x12>
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	e007      	b.n	8011a60 <__sfputs_r+0x22>
 8011a50:	7821      	ldrb	r1, [r4, #0]
 8011a52:	003a      	movs	r2, r7
 8011a54:	0030      	movs	r0, r6
 8011a56:	f7ff ffdd 	bl	8011a14 <__sfputc_r>
 8011a5a:	3401      	adds	r4, #1
 8011a5c:	1c43      	adds	r3, r0, #1
 8011a5e:	d1f3      	bne.n	8011a48 <__sfputs_r+0xa>
 8011a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a64 <_vfiprintf_r>:
 8011a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a66:	b0a1      	sub	sp, #132	; 0x84
 8011a68:	0006      	movs	r6, r0
 8011a6a:	000c      	movs	r4, r1
 8011a6c:	001f      	movs	r7, r3
 8011a6e:	9203      	str	r2, [sp, #12]
 8011a70:	2800      	cmp	r0, #0
 8011a72:	d004      	beq.n	8011a7e <_vfiprintf_r+0x1a>
 8011a74:	6983      	ldr	r3, [r0, #24]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d101      	bne.n	8011a7e <_vfiprintf_r+0x1a>
 8011a7a:	f000 fb3f 	bl	80120fc <__sinit>
 8011a7e:	4b8e      	ldr	r3, [pc, #568]	; (8011cb8 <_vfiprintf_r+0x254>)
 8011a80:	429c      	cmp	r4, r3
 8011a82:	d11c      	bne.n	8011abe <_vfiprintf_r+0x5a>
 8011a84:	6874      	ldr	r4, [r6, #4]
 8011a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a88:	07db      	lsls	r3, r3, #31
 8011a8a:	d405      	bmi.n	8011a98 <_vfiprintf_r+0x34>
 8011a8c:	89a3      	ldrh	r3, [r4, #12]
 8011a8e:	059b      	lsls	r3, r3, #22
 8011a90:	d402      	bmi.n	8011a98 <_vfiprintf_r+0x34>
 8011a92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a94:	f000 fbd3 	bl	801223e <__retarget_lock_acquire_recursive>
 8011a98:	89a3      	ldrh	r3, [r4, #12]
 8011a9a:	071b      	lsls	r3, r3, #28
 8011a9c:	d502      	bpl.n	8011aa4 <_vfiprintf_r+0x40>
 8011a9e:	6923      	ldr	r3, [r4, #16]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d11d      	bne.n	8011ae0 <_vfiprintf_r+0x7c>
 8011aa4:	0021      	movs	r1, r4
 8011aa6:	0030      	movs	r0, r6
 8011aa8:	f000 f97a 	bl	8011da0 <__swsetup_r>
 8011aac:	2800      	cmp	r0, #0
 8011aae:	d017      	beq.n	8011ae0 <_vfiprintf_r+0x7c>
 8011ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ab2:	07db      	lsls	r3, r3, #31
 8011ab4:	d50d      	bpl.n	8011ad2 <_vfiprintf_r+0x6e>
 8011ab6:	2001      	movs	r0, #1
 8011ab8:	4240      	negs	r0, r0
 8011aba:	b021      	add	sp, #132	; 0x84
 8011abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011abe:	4b7f      	ldr	r3, [pc, #508]	; (8011cbc <_vfiprintf_r+0x258>)
 8011ac0:	429c      	cmp	r4, r3
 8011ac2:	d101      	bne.n	8011ac8 <_vfiprintf_r+0x64>
 8011ac4:	68b4      	ldr	r4, [r6, #8]
 8011ac6:	e7de      	b.n	8011a86 <_vfiprintf_r+0x22>
 8011ac8:	4b7d      	ldr	r3, [pc, #500]	; (8011cc0 <_vfiprintf_r+0x25c>)
 8011aca:	429c      	cmp	r4, r3
 8011acc:	d1db      	bne.n	8011a86 <_vfiprintf_r+0x22>
 8011ace:	68f4      	ldr	r4, [r6, #12]
 8011ad0:	e7d9      	b.n	8011a86 <_vfiprintf_r+0x22>
 8011ad2:	89a3      	ldrh	r3, [r4, #12]
 8011ad4:	059b      	lsls	r3, r3, #22
 8011ad6:	d4ee      	bmi.n	8011ab6 <_vfiprintf_r+0x52>
 8011ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ada:	f000 fbb1 	bl	8012240 <__retarget_lock_release_recursive>
 8011ade:	e7ea      	b.n	8011ab6 <_vfiprintf_r+0x52>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	ad08      	add	r5, sp, #32
 8011ae4:	616b      	str	r3, [r5, #20]
 8011ae6:	3320      	adds	r3, #32
 8011ae8:	766b      	strb	r3, [r5, #25]
 8011aea:	3310      	adds	r3, #16
 8011aec:	76ab      	strb	r3, [r5, #26]
 8011aee:	9707      	str	r7, [sp, #28]
 8011af0:	9f03      	ldr	r7, [sp, #12]
 8011af2:	783b      	ldrb	r3, [r7, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d001      	beq.n	8011afc <_vfiprintf_r+0x98>
 8011af8:	2b25      	cmp	r3, #37	; 0x25
 8011afa:	d14e      	bne.n	8011b9a <_vfiprintf_r+0x136>
 8011afc:	9b03      	ldr	r3, [sp, #12]
 8011afe:	1afb      	subs	r3, r7, r3
 8011b00:	9305      	str	r3, [sp, #20]
 8011b02:	9b03      	ldr	r3, [sp, #12]
 8011b04:	429f      	cmp	r7, r3
 8011b06:	d00d      	beq.n	8011b24 <_vfiprintf_r+0xc0>
 8011b08:	9b05      	ldr	r3, [sp, #20]
 8011b0a:	0021      	movs	r1, r4
 8011b0c:	0030      	movs	r0, r6
 8011b0e:	9a03      	ldr	r2, [sp, #12]
 8011b10:	f7ff ff95 	bl	8011a3e <__sfputs_r>
 8011b14:	1c43      	adds	r3, r0, #1
 8011b16:	d100      	bne.n	8011b1a <_vfiprintf_r+0xb6>
 8011b18:	e0b5      	b.n	8011c86 <_vfiprintf_r+0x222>
 8011b1a:	696a      	ldr	r2, [r5, #20]
 8011b1c:	9b05      	ldr	r3, [sp, #20]
 8011b1e:	4694      	mov	ip, r2
 8011b20:	4463      	add	r3, ip
 8011b22:	616b      	str	r3, [r5, #20]
 8011b24:	783b      	ldrb	r3, [r7, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d100      	bne.n	8011b2c <_vfiprintf_r+0xc8>
 8011b2a:	e0ac      	b.n	8011c86 <_vfiprintf_r+0x222>
 8011b2c:	2201      	movs	r2, #1
 8011b2e:	1c7b      	adds	r3, r7, #1
 8011b30:	9303      	str	r3, [sp, #12]
 8011b32:	2300      	movs	r3, #0
 8011b34:	4252      	negs	r2, r2
 8011b36:	606a      	str	r2, [r5, #4]
 8011b38:	a904      	add	r1, sp, #16
 8011b3a:	3254      	adds	r2, #84	; 0x54
 8011b3c:	1852      	adds	r2, r2, r1
 8011b3e:	602b      	str	r3, [r5, #0]
 8011b40:	60eb      	str	r3, [r5, #12]
 8011b42:	60ab      	str	r3, [r5, #8]
 8011b44:	7013      	strb	r3, [r2, #0]
 8011b46:	65ab      	str	r3, [r5, #88]	; 0x58
 8011b48:	9b03      	ldr	r3, [sp, #12]
 8011b4a:	2205      	movs	r2, #5
 8011b4c:	7819      	ldrb	r1, [r3, #0]
 8011b4e:	485d      	ldr	r0, [pc, #372]	; (8011cc4 <_vfiprintf_r+0x260>)
 8011b50:	f7ff f8fa 	bl	8010d48 <memchr>
 8011b54:	9b03      	ldr	r3, [sp, #12]
 8011b56:	1c5f      	adds	r7, r3, #1
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d120      	bne.n	8011b9e <_vfiprintf_r+0x13a>
 8011b5c:	682a      	ldr	r2, [r5, #0]
 8011b5e:	06d3      	lsls	r3, r2, #27
 8011b60:	d504      	bpl.n	8011b6c <_vfiprintf_r+0x108>
 8011b62:	2353      	movs	r3, #83	; 0x53
 8011b64:	a904      	add	r1, sp, #16
 8011b66:	185b      	adds	r3, r3, r1
 8011b68:	2120      	movs	r1, #32
 8011b6a:	7019      	strb	r1, [r3, #0]
 8011b6c:	0713      	lsls	r3, r2, #28
 8011b6e:	d504      	bpl.n	8011b7a <_vfiprintf_r+0x116>
 8011b70:	2353      	movs	r3, #83	; 0x53
 8011b72:	a904      	add	r1, sp, #16
 8011b74:	185b      	adds	r3, r3, r1
 8011b76:	212b      	movs	r1, #43	; 0x2b
 8011b78:	7019      	strb	r1, [r3, #0]
 8011b7a:	9b03      	ldr	r3, [sp, #12]
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8011b80:	d016      	beq.n	8011bb0 <_vfiprintf_r+0x14c>
 8011b82:	2100      	movs	r1, #0
 8011b84:	68eb      	ldr	r3, [r5, #12]
 8011b86:	9f03      	ldr	r7, [sp, #12]
 8011b88:	783a      	ldrb	r2, [r7, #0]
 8011b8a:	1c78      	adds	r0, r7, #1
 8011b8c:	3a30      	subs	r2, #48	; 0x30
 8011b8e:	4684      	mov	ip, r0
 8011b90:	2a09      	cmp	r2, #9
 8011b92:	d94f      	bls.n	8011c34 <_vfiprintf_r+0x1d0>
 8011b94:	2900      	cmp	r1, #0
 8011b96:	d111      	bne.n	8011bbc <_vfiprintf_r+0x158>
 8011b98:	e017      	b.n	8011bca <_vfiprintf_r+0x166>
 8011b9a:	3701      	adds	r7, #1
 8011b9c:	e7a9      	b.n	8011af2 <_vfiprintf_r+0x8e>
 8011b9e:	4b49      	ldr	r3, [pc, #292]	; (8011cc4 <_vfiprintf_r+0x260>)
 8011ba0:	682a      	ldr	r2, [r5, #0]
 8011ba2:	1ac0      	subs	r0, r0, r3
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	4083      	lsls	r3, r0
 8011ba8:	4313      	orrs	r3, r2
 8011baa:	602b      	str	r3, [r5, #0]
 8011bac:	9703      	str	r7, [sp, #12]
 8011bae:	e7cb      	b.n	8011b48 <_vfiprintf_r+0xe4>
 8011bb0:	9b07      	ldr	r3, [sp, #28]
 8011bb2:	1d19      	adds	r1, r3, #4
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	9107      	str	r1, [sp, #28]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	db01      	blt.n	8011bc0 <_vfiprintf_r+0x15c>
 8011bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8011bbe:	e004      	b.n	8011bca <_vfiprintf_r+0x166>
 8011bc0:	425b      	negs	r3, r3
 8011bc2:	60eb      	str	r3, [r5, #12]
 8011bc4:	2302      	movs	r3, #2
 8011bc6:	4313      	orrs	r3, r2
 8011bc8:	602b      	str	r3, [r5, #0]
 8011bca:	783b      	ldrb	r3, [r7, #0]
 8011bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8011bce:	d10a      	bne.n	8011be6 <_vfiprintf_r+0x182>
 8011bd0:	787b      	ldrb	r3, [r7, #1]
 8011bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8011bd4:	d137      	bne.n	8011c46 <_vfiprintf_r+0x1e2>
 8011bd6:	9b07      	ldr	r3, [sp, #28]
 8011bd8:	3702      	adds	r7, #2
 8011bda:	1d1a      	adds	r2, r3, #4
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	9207      	str	r2, [sp, #28]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	db2d      	blt.n	8011c40 <_vfiprintf_r+0x1dc>
 8011be4:	9309      	str	r3, [sp, #36]	; 0x24
 8011be6:	2203      	movs	r2, #3
 8011be8:	7839      	ldrb	r1, [r7, #0]
 8011bea:	4837      	ldr	r0, [pc, #220]	; (8011cc8 <_vfiprintf_r+0x264>)
 8011bec:	f7ff f8ac 	bl	8010d48 <memchr>
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d007      	beq.n	8011c04 <_vfiprintf_r+0x1a0>
 8011bf4:	4b34      	ldr	r3, [pc, #208]	; (8011cc8 <_vfiprintf_r+0x264>)
 8011bf6:	682a      	ldr	r2, [r5, #0]
 8011bf8:	1ac0      	subs	r0, r0, r3
 8011bfa:	2340      	movs	r3, #64	; 0x40
 8011bfc:	4083      	lsls	r3, r0
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	3701      	adds	r7, #1
 8011c02:	602b      	str	r3, [r5, #0]
 8011c04:	7839      	ldrb	r1, [r7, #0]
 8011c06:	1c7b      	adds	r3, r7, #1
 8011c08:	2206      	movs	r2, #6
 8011c0a:	4830      	ldr	r0, [pc, #192]	; (8011ccc <_vfiprintf_r+0x268>)
 8011c0c:	9303      	str	r3, [sp, #12]
 8011c0e:	7629      	strb	r1, [r5, #24]
 8011c10:	f7ff f89a 	bl	8010d48 <memchr>
 8011c14:	2800      	cmp	r0, #0
 8011c16:	d045      	beq.n	8011ca4 <_vfiprintf_r+0x240>
 8011c18:	4b2d      	ldr	r3, [pc, #180]	; (8011cd0 <_vfiprintf_r+0x26c>)
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d127      	bne.n	8011c6e <_vfiprintf_r+0x20a>
 8011c1e:	2207      	movs	r2, #7
 8011c20:	9b07      	ldr	r3, [sp, #28]
 8011c22:	3307      	adds	r3, #7
 8011c24:	4393      	bics	r3, r2
 8011c26:	3308      	adds	r3, #8
 8011c28:	9307      	str	r3, [sp, #28]
 8011c2a:	696b      	ldr	r3, [r5, #20]
 8011c2c:	9a04      	ldr	r2, [sp, #16]
 8011c2e:	189b      	adds	r3, r3, r2
 8011c30:	616b      	str	r3, [r5, #20]
 8011c32:	e75d      	b.n	8011af0 <_vfiprintf_r+0x8c>
 8011c34:	210a      	movs	r1, #10
 8011c36:	434b      	muls	r3, r1
 8011c38:	4667      	mov	r7, ip
 8011c3a:	189b      	adds	r3, r3, r2
 8011c3c:	3909      	subs	r1, #9
 8011c3e:	e7a3      	b.n	8011b88 <_vfiprintf_r+0x124>
 8011c40:	2301      	movs	r3, #1
 8011c42:	425b      	negs	r3, r3
 8011c44:	e7ce      	b.n	8011be4 <_vfiprintf_r+0x180>
 8011c46:	2300      	movs	r3, #0
 8011c48:	001a      	movs	r2, r3
 8011c4a:	3701      	adds	r7, #1
 8011c4c:	606b      	str	r3, [r5, #4]
 8011c4e:	7839      	ldrb	r1, [r7, #0]
 8011c50:	1c78      	adds	r0, r7, #1
 8011c52:	3930      	subs	r1, #48	; 0x30
 8011c54:	4684      	mov	ip, r0
 8011c56:	2909      	cmp	r1, #9
 8011c58:	d903      	bls.n	8011c62 <_vfiprintf_r+0x1fe>
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d0c3      	beq.n	8011be6 <_vfiprintf_r+0x182>
 8011c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8011c60:	e7c1      	b.n	8011be6 <_vfiprintf_r+0x182>
 8011c62:	230a      	movs	r3, #10
 8011c64:	435a      	muls	r2, r3
 8011c66:	4667      	mov	r7, ip
 8011c68:	1852      	adds	r2, r2, r1
 8011c6a:	3b09      	subs	r3, #9
 8011c6c:	e7ef      	b.n	8011c4e <_vfiprintf_r+0x1ea>
 8011c6e:	ab07      	add	r3, sp, #28
 8011c70:	9300      	str	r3, [sp, #0]
 8011c72:	0022      	movs	r2, r4
 8011c74:	0029      	movs	r1, r5
 8011c76:	0030      	movs	r0, r6
 8011c78:	4b16      	ldr	r3, [pc, #88]	; (8011cd4 <_vfiprintf_r+0x270>)
 8011c7a:	f7fd fda9 	bl	800f7d0 <_printf_float>
 8011c7e:	9004      	str	r0, [sp, #16]
 8011c80:	9b04      	ldr	r3, [sp, #16]
 8011c82:	3301      	adds	r3, #1
 8011c84:	d1d1      	bne.n	8011c2a <_vfiprintf_r+0x1c6>
 8011c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c88:	07db      	lsls	r3, r3, #31
 8011c8a:	d405      	bmi.n	8011c98 <_vfiprintf_r+0x234>
 8011c8c:	89a3      	ldrh	r3, [r4, #12]
 8011c8e:	059b      	lsls	r3, r3, #22
 8011c90:	d402      	bmi.n	8011c98 <_vfiprintf_r+0x234>
 8011c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c94:	f000 fad4 	bl	8012240 <__retarget_lock_release_recursive>
 8011c98:	89a3      	ldrh	r3, [r4, #12]
 8011c9a:	065b      	lsls	r3, r3, #25
 8011c9c:	d500      	bpl.n	8011ca0 <_vfiprintf_r+0x23c>
 8011c9e:	e70a      	b.n	8011ab6 <_vfiprintf_r+0x52>
 8011ca0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011ca2:	e70a      	b.n	8011aba <_vfiprintf_r+0x56>
 8011ca4:	ab07      	add	r3, sp, #28
 8011ca6:	9300      	str	r3, [sp, #0]
 8011ca8:	0022      	movs	r2, r4
 8011caa:	0029      	movs	r1, r5
 8011cac:	0030      	movs	r0, r6
 8011cae:	4b09      	ldr	r3, [pc, #36]	; (8011cd4 <_vfiprintf_r+0x270>)
 8011cb0:	f7fe f84c 	bl	800fd4c <_printf_i>
 8011cb4:	e7e3      	b.n	8011c7e <_vfiprintf_r+0x21a>
 8011cb6:	46c0      	nop			; (mov r8, r8)
 8011cb8:	080137c4 	.word	0x080137c4
 8011cbc:	080137e4 	.word	0x080137e4
 8011cc0:	080137a4 	.word	0x080137a4
 8011cc4:	0801364c 	.word	0x0801364c
 8011cc8:	08013652 	.word	0x08013652
 8011ccc:	08013656 	.word	0x08013656
 8011cd0:	0800f7d1 	.word	0x0800f7d1
 8011cd4:	08011a3f 	.word	0x08011a3f

08011cd8 <__swbuf_r>:
 8011cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cda:	0005      	movs	r5, r0
 8011cdc:	000e      	movs	r6, r1
 8011cde:	0014      	movs	r4, r2
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	d004      	beq.n	8011cee <__swbuf_r+0x16>
 8011ce4:	6983      	ldr	r3, [r0, #24]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d101      	bne.n	8011cee <__swbuf_r+0x16>
 8011cea:	f000 fa07 	bl	80120fc <__sinit>
 8011cee:	4b22      	ldr	r3, [pc, #136]	; (8011d78 <__swbuf_r+0xa0>)
 8011cf0:	429c      	cmp	r4, r3
 8011cf2:	d12e      	bne.n	8011d52 <__swbuf_r+0x7a>
 8011cf4:	686c      	ldr	r4, [r5, #4]
 8011cf6:	69a3      	ldr	r3, [r4, #24]
 8011cf8:	60a3      	str	r3, [r4, #8]
 8011cfa:	89a3      	ldrh	r3, [r4, #12]
 8011cfc:	071b      	lsls	r3, r3, #28
 8011cfe:	d532      	bpl.n	8011d66 <__swbuf_r+0x8e>
 8011d00:	6923      	ldr	r3, [r4, #16]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d02f      	beq.n	8011d66 <__swbuf_r+0x8e>
 8011d06:	6823      	ldr	r3, [r4, #0]
 8011d08:	6922      	ldr	r2, [r4, #16]
 8011d0a:	b2f7      	uxtb	r7, r6
 8011d0c:	1a98      	subs	r0, r3, r2
 8011d0e:	6963      	ldr	r3, [r4, #20]
 8011d10:	b2f6      	uxtb	r6, r6
 8011d12:	4283      	cmp	r3, r0
 8011d14:	dc05      	bgt.n	8011d22 <__swbuf_r+0x4a>
 8011d16:	0021      	movs	r1, r4
 8011d18:	0028      	movs	r0, r5
 8011d1a:	f000 f94d 	bl	8011fb8 <_fflush_r>
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	d127      	bne.n	8011d72 <__swbuf_r+0x9a>
 8011d22:	68a3      	ldr	r3, [r4, #8]
 8011d24:	3001      	adds	r0, #1
 8011d26:	3b01      	subs	r3, #1
 8011d28:	60a3      	str	r3, [r4, #8]
 8011d2a:	6823      	ldr	r3, [r4, #0]
 8011d2c:	1c5a      	adds	r2, r3, #1
 8011d2e:	6022      	str	r2, [r4, #0]
 8011d30:	701f      	strb	r7, [r3, #0]
 8011d32:	6963      	ldr	r3, [r4, #20]
 8011d34:	4283      	cmp	r3, r0
 8011d36:	d004      	beq.n	8011d42 <__swbuf_r+0x6a>
 8011d38:	89a3      	ldrh	r3, [r4, #12]
 8011d3a:	07db      	lsls	r3, r3, #31
 8011d3c:	d507      	bpl.n	8011d4e <__swbuf_r+0x76>
 8011d3e:	2e0a      	cmp	r6, #10
 8011d40:	d105      	bne.n	8011d4e <__swbuf_r+0x76>
 8011d42:	0021      	movs	r1, r4
 8011d44:	0028      	movs	r0, r5
 8011d46:	f000 f937 	bl	8011fb8 <_fflush_r>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	d111      	bne.n	8011d72 <__swbuf_r+0x9a>
 8011d4e:	0030      	movs	r0, r6
 8011d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d52:	4b0a      	ldr	r3, [pc, #40]	; (8011d7c <__swbuf_r+0xa4>)
 8011d54:	429c      	cmp	r4, r3
 8011d56:	d101      	bne.n	8011d5c <__swbuf_r+0x84>
 8011d58:	68ac      	ldr	r4, [r5, #8]
 8011d5a:	e7cc      	b.n	8011cf6 <__swbuf_r+0x1e>
 8011d5c:	4b08      	ldr	r3, [pc, #32]	; (8011d80 <__swbuf_r+0xa8>)
 8011d5e:	429c      	cmp	r4, r3
 8011d60:	d1c9      	bne.n	8011cf6 <__swbuf_r+0x1e>
 8011d62:	68ec      	ldr	r4, [r5, #12]
 8011d64:	e7c7      	b.n	8011cf6 <__swbuf_r+0x1e>
 8011d66:	0021      	movs	r1, r4
 8011d68:	0028      	movs	r0, r5
 8011d6a:	f000 f819 	bl	8011da0 <__swsetup_r>
 8011d6e:	2800      	cmp	r0, #0
 8011d70:	d0c9      	beq.n	8011d06 <__swbuf_r+0x2e>
 8011d72:	2601      	movs	r6, #1
 8011d74:	4276      	negs	r6, r6
 8011d76:	e7ea      	b.n	8011d4e <__swbuf_r+0x76>
 8011d78:	080137c4 	.word	0x080137c4
 8011d7c:	080137e4 	.word	0x080137e4
 8011d80:	080137a4 	.word	0x080137a4

08011d84 <__ascii_wctomb>:
 8011d84:	0003      	movs	r3, r0
 8011d86:	1e08      	subs	r0, r1, #0
 8011d88:	d005      	beq.n	8011d96 <__ascii_wctomb+0x12>
 8011d8a:	2aff      	cmp	r2, #255	; 0xff
 8011d8c:	d904      	bls.n	8011d98 <__ascii_wctomb+0x14>
 8011d8e:	228a      	movs	r2, #138	; 0x8a
 8011d90:	2001      	movs	r0, #1
 8011d92:	601a      	str	r2, [r3, #0]
 8011d94:	4240      	negs	r0, r0
 8011d96:	4770      	bx	lr
 8011d98:	2001      	movs	r0, #1
 8011d9a:	700a      	strb	r2, [r1, #0]
 8011d9c:	e7fb      	b.n	8011d96 <__ascii_wctomb+0x12>
	...

08011da0 <__swsetup_r>:
 8011da0:	4b37      	ldr	r3, [pc, #220]	; (8011e80 <__swsetup_r+0xe0>)
 8011da2:	b570      	push	{r4, r5, r6, lr}
 8011da4:	681d      	ldr	r5, [r3, #0]
 8011da6:	0006      	movs	r6, r0
 8011da8:	000c      	movs	r4, r1
 8011daa:	2d00      	cmp	r5, #0
 8011dac:	d005      	beq.n	8011dba <__swsetup_r+0x1a>
 8011dae:	69ab      	ldr	r3, [r5, #24]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d102      	bne.n	8011dba <__swsetup_r+0x1a>
 8011db4:	0028      	movs	r0, r5
 8011db6:	f000 f9a1 	bl	80120fc <__sinit>
 8011dba:	4b32      	ldr	r3, [pc, #200]	; (8011e84 <__swsetup_r+0xe4>)
 8011dbc:	429c      	cmp	r4, r3
 8011dbe:	d10f      	bne.n	8011de0 <__swsetup_r+0x40>
 8011dc0:	686c      	ldr	r4, [r5, #4]
 8011dc2:	230c      	movs	r3, #12
 8011dc4:	5ee2      	ldrsh	r2, [r4, r3]
 8011dc6:	b293      	uxth	r3, r2
 8011dc8:	0711      	lsls	r1, r2, #28
 8011dca:	d42d      	bmi.n	8011e28 <__swsetup_r+0x88>
 8011dcc:	06d9      	lsls	r1, r3, #27
 8011dce:	d411      	bmi.n	8011df4 <__swsetup_r+0x54>
 8011dd0:	2309      	movs	r3, #9
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	6033      	str	r3, [r6, #0]
 8011dd6:	3337      	adds	r3, #55	; 0x37
 8011dd8:	4313      	orrs	r3, r2
 8011dda:	81a3      	strh	r3, [r4, #12]
 8011ddc:	4240      	negs	r0, r0
 8011dde:	bd70      	pop	{r4, r5, r6, pc}
 8011de0:	4b29      	ldr	r3, [pc, #164]	; (8011e88 <__swsetup_r+0xe8>)
 8011de2:	429c      	cmp	r4, r3
 8011de4:	d101      	bne.n	8011dea <__swsetup_r+0x4a>
 8011de6:	68ac      	ldr	r4, [r5, #8]
 8011de8:	e7eb      	b.n	8011dc2 <__swsetup_r+0x22>
 8011dea:	4b28      	ldr	r3, [pc, #160]	; (8011e8c <__swsetup_r+0xec>)
 8011dec:	429c      	cmp	r4, r3
 8011dee:	d1e8      	bne.n	8011dc2 <__swsetup_r+0x22>
 8011df0:	68ec      	ldr	r4, [r5, #12]
 8011df2:	e7e6      	b.n	8011dc2 <__swsetup_r+0x22>
 8011df4:	075b      	lsls	r3, r3, #29
 8011df6:	d513      	bpl.n	8011e20 <__swsetup_r+0x80>
 8011df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dfa:	2900      	cmp	r1, #0
 8011dfc:	d008      	beq.n	8011e10 <__swsetup_r+0x70>
 8011dfe:	0023      	movs	r3, r4
 8011e00:	3344      	adds	r3, #68	; 0x44
 8011e02:	4299      	cmp	r1, r3
 8011e04:	d002      	beq.n	8011e0c <__swsetup_r+0x6c>
 8011e06:	0030      	movs	r0, r6
 8011e08:	f7ff fb5e 	bl	80114c8 <_free_r>
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	6363      	str	r3, [r4, #52]	; 0x34
 8011e10:	2224      	movs	r2, #36	; 0x24
 8011e12:	89a3      	ldrh	r3, [r4, #12]
 8011e14:	4393      	bics	r3, r2
 8011e16:	81a3      	strh	r3, [r4, #12]
 8011e18:	2300      	movs	r3, #0
 8011e1a:	6063      	str	r3, [r4, #4]
 8011e1c:	6923      	ldr	r3, [r4, #16]
 8011e1e:	6023      	str	r3, [r4, #0]
 8011e20:	2308      	movs	r3, #8
 8011e22:	89a2      	ldrh	r2, [r4, #12]
 8011e24:	4313      	orrs	r3, r2
 8011e26:	81a3      	strh	r3, [r4, #12]
 8011e28:	6923      	ldr	r3, [r4, #16]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d10b      	bne.n	8011e46 <__swsetup_r+0xa6>
 8011e2e:	21a0      	movs	r1, #160	; 0xa0
 8011e30:	2280      	movs	r2, #128	; 0x80
 8011e32:	89a3      	ldrh	r3, [r4, #12]
 8011e34:	0089      	lsls	r1, r1, #2
 8011e36:	0092      	lsls	r2, r2, #2
 8011e38:	400b      	ands	r3, r1
 8011e3a:	4293      	cmp	r3, r2
 8011e3c:	d003      	beq.n	8011e46 <__swsetup_r+0xa6>
 8011e3e:	0021      	movs	r1, r4
 8011e40:	0030      	movs	r0, r6
 8011e42:	f000 fa27 	bl	8012294 <__smakebuf_r>
 8011e46:	220c      	movs	r2, #12
 8011e48:	5ea3      	ldrsh	r3, [r4, r2]
 8011e4a:	2001      	movs	r0, #1
 8011e4c:	001a      	movs	r2, r3
 8011e4e:	b299      	uxth	r1, r3
 8011e50:	4002      	ands	r2, r0
 8011e52:	4203      	tst	r3, r0
 8011e54:	d00f      	beq.n	8011e76 <__swsetup_r+0xd6>
 8011e56:	2200      	movs	r2, #0
 8011e58:	60a2      	str	r2, [r4, #8]
 8011e5a:	6962      	ldr	r2, [r4, #20]
 8011e5c:	4252      	negs	r2, r2
 8011e5e:	61a2      	str	r2, [r4, #24]
 8011e60:	2000      	movs	r0, #0
 8011e62:	6922      	ldr	r2, [r4, #16]
 8011e64:	4282      	cmp	r2, r0
 8011e66:	d1ba      	bne.n	8011dde <__swsetup_r+0x3e>
 8011e68:	060a      	lsls	r2, r1, #24
 8011e6a:	d5b8      	bpl.n	8011dde <__swsetup_r+0x3e>
 8011e6c:	2240      	movs	r2, #64	; 0x40
 8011e6e:	4313      	orrs	r3, r2
 8011e70:	81a3      	strh	r3, [r4, #12]
 8011e72:	3801      	subs	r0, #1
 8011e74:	e7b3      	b.n	8011dde <__swsetup_r+0x3e>
 8011e76:	0788      	lsls	r0, r1, #30
 8011e78:	d400      	bmi.n	8011e7c <__swsetup_r+0xdc>
 8011e7a:	6962      	ldr	r2, [r4, #20]
 8011e7c:	60a2      	str	r2, [r4, #8]
 8011e7e:	e7ef      	b.n	8011e60 <__swsetup_r+0xc0>
 8011e80:	2000019c 	.word	0x2000019c
 8011e84:	080137c4 	.word	0x080137c4
 8011e88:	080137e4 	.word	0x080137e4
 8011e8c:	080137a4 	.word	0x080137a4

08011e90 <abort>:
 8011e90:	2006      	movs	r0, #6
 8011e92:	b510      	push	{r4, lr}
 8011e94:	f000 fa74 	bl	8012380 <raise>
 8011e98:	2001      	movs	r0, #1
 8011e9a:	f7f1 ff94 	bl	8003dc6 <_exit>
	...

08011ea0 <__sflush_r>:
 8011ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ea2:	898b      	ldrh	r3, [r1, #12]
 8011ea4:	0005      	movs	r5, r0
 8011ea6:	000c      	movs	r4, r1
 8011ea8:	071a      	lsls	r2, r3, #28
 8011eaa:	d45f      	bmi.n	8011f6c <__sflush_r+0xcc>
 8011eac:	684a      	ldr	r2, [r1, #4]
 8011eae:	2a00      	cmp	r2, #0
 8011eb0:	dc04      	bgt.n	8011ebc <__sflush_r+0x1c>
 8011eb2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8011eb4:	2a00      	cmp	r2, #0
 8011eb6:	dc01      	bgt.n	8011ebc <__sflush_r+0x1c>
 8011eb8:	2000      	movs	r0, #0
 8011eba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011ebc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011ebe:	2f00      	cmp	r7, #0
 8011ec0:	d0fa      	beq.n	8011eb8 <__sflush_r+0x18>
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	2180      	movs	r1, #128	; 0x80
 8011ec6:	682e      	ldr	r6, [r5, #0]
 8011ec8:	602a      	str	r2, [r5, #0]
 8011eca:	001a      	movs	r2, r3
 8011ecc:	0149      	lsls	r1, r1, #5
 8011ece:	400a      	ands	r2, r1
 8011ed0:	420b      	tst	r3, r1
 8011ed2:	d034      	beq.n	8011f3e <__sflush_r+0x9e>
 8011ed4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ed6:	89a3      	ldrh	r3, [r4, #12]
 8011ed8:	075b      	lsls	r3, r3, #29
 8011eda:	d506      	bpl.n	8011eea <__sflush_r+0x4a>
 8011edc:	6863      	ldr	r3, [r4, #4]
 8011ede:	1ac0      	subs	r0, r0, r3
 8011ee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d001      	beq.n	8011eea <__sflush_r+0x4a>
 8011ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ee8:	1ac0      	subs	r0, r0, r3
 8011eea:	0002      	movs	r2, r0
 8011eec:	6a21      	ldr	r1, [r4, #32]
 8011eee:	2300      	movs	r3, #0
 8011ef0:	0028      	movs	r0, r5
 8011ef2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011ef4:	47b8      	blx	r7
 8011ef6:	89a1      	ldrh	r1, [r4, #12]
 8011ef8:	1c43      	adds	r3, r0, #1
 8011efa:	d106      	bne.n	8011f0a <__sflush_r+0x6a>
 8011efc:	682b      	ldr	r3, [r5, #0]
 8011efe:	2b1d      	cmp	r3, #29
 8011f00:	d831      	bhi.n	8011f66 <__sflush_r+0xc6>
 8011f02:	4a2c      	ldr	r2, [pc, #176]	; (8011fb4 <__sflush_r+0x114>)
 8011f04:	40da      	lsrs	r2, r3
 8011f06:	07d3      	lsls	r3, r2, #31
 8011f08:	d52d      	bpl.n	8011f66 <__sflush_r+0xc6>
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	6063      	str	r3, [r4, #4]
 8011f0e:	6923      	ldr	r3, [r4, #16]
 8011f10:	6023      	str	r3, [r4, #0]
 8011f12:	04cb      	lsls	r3, r1, #19
 8011f14:	d505      	bpl.n	8011f22 <__sflush_r+0x82>
 8011f16:	1c43      	adds	r3, r0, #1
 8011f18:	d102      	bne.n	8011f20 <__sflush_r+0x80>
 8011f1a:	682b      	ldr	r3, [r5, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d100      	bne.n	8011f22 <__sflush_r+0x82>
 8011f20:	6560      	str	r0, [r4, #84]	; 0x54
 8011f22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f24:	602e      	str	r6, [r5, #0]
 8011f26:	2900      	cmp	r1, #0
 8011f28:	d0c6      	beq.n	8011eb8 <__sflush_r+0x18>
 8011f2a:	0023      	movs	r3, r4
 8011f2c:	3344      	adds	r3, #68	; 0x44
 8011f2e:	4299      	cmp	r1, r3
 8011f30:	d002      	beq.n	8011f38 <__sflush_r+0x98>
 8011f32:	0028      	movs	r0, r5
 8011f34:	f7ff fac8 	bl	80114c8 <_free_r>
 8011f38:	2000      	movs	r0, #0
 8011f3a:	6360      	str	r0, [r4, #52]	; 0x34
 8011f3c:	e7bd      	b.n	8011eba <__sflush_r+0x1a>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	0028      	movs	r0, r5
 8011f42:	6a21      	ldr	r1, [r4, #32]
 8011f44:	47b8      	blx	r7
 8011f46:	1c43      	adds	r3, r0, #1
 8011f48:	d1c5      	bne.n	8011ed6 <__sflush_r+0x36>
 8011f4a:	682b      	ldr	r3, [r5, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d0c2      	beq.n	8011ed6 <__sflush_r+0x36>
 8011f50:	2b1d      	cmp	r3, #29
 8011f52:	d001      	beq.n	8011f58 <__sflush_r+0xb8>
 8011f54:	2b16      	cmp	r3, #22
 8011f56:	d101      	bne.n	8011f5c <__sflush_r+0xbc>
 8011f58:	602e      	str	r6, [r5, #0]
 8011f5a:	e7ad      	b.n	8011eb8 <__sflush_r+0x18>
 8011f5c:	2340      	movs	r3, #64	; 0x40
 8011f5e:	89a2      	ldrh	r2, [r4, #12]
 8011f60:	4313      	orrs	r3, r2
 8011f62:	81a3      	strh	r3, [r4, #12]
 8011f64:	e7a9      	b.n	8011eba <__sflush_r+0x1a>
 8011f66:	2340      	movs	r3, #64	; 0x40
 8011f68:	430b      	orrs	r3, r1
 8011f6a:	e7fa      	b.n	8011f62 <__sflush_r+0xc2>
 8011f6c:	690f      	ldr	r7, [r1, #16]
 8011f6e:	2f00      	cmp	r7, #0
 8011f70:	d0a2      	beq.n	8011eb8 <__sflush_r+0x18>
 8011f72:	680a      	ldr	r2, [r1, #0]
 8011f74:	600f      	str	r7, [r1, #0]
 8011f76:	1bd2      	subs	r2, r2, r7
 8011f78:	9201      	str	r2, [sp, #4]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	079b      	lsls	r3, r3, #30
 8011f7e:	d100      	bne.n	8011f82 <__sflush_r+0xe2>
 8011f80:	694a      	ldr	r2, [r1, #20]
 8011f82:	60a2      	str	r2, [r4, #8]
 8011f84:	9b01      	ldr	r3, [sp, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	dc00      	bgt.n	8011f8c <__sflush_r+0xec>
 8011f8a:	e795      	b.n	8011eb8 <__sflush_r+0x18>
 8011f8c:	003a      	movs	r2, r7
 8011f8e:	0028      	movs	r0, r5
 8011f90:	9b01      	ldr	r3, [sp, #4]
 8011f92:	6a21      	ldr	r1, [r4, #32]
 8011f94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f96:	47b0      	blx	r6
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	dc06      	bgt.n	8011faa <__sflush_r+0x10a>
 8011f9c:	2340      	movs	r3, #64	; 0x40
 8011f9e:	2001      	movs	r0, #1
 8011fa0:	89a2      	ldrh	r2, [r4, #12]
 8011fa2:	4240      	negs	r0, r0
 8011fa4:	4313      	orrs	r3, r2
 8011fa6:	81a3      	strh	r3, [r4, #12]
 8011fa8:	e787      	b.n	8011eba <__sflush_r+0x1a>
 8011faa:	9b01      	ldr	r3, [sp, #4]
 8011fac:	183f      	adds	r7, r7, r0
 8011fae:	1a1b      	subs	r3, r3, r0
 8011fb0:	9301      	str	r3, [sp, #4]
 8011fb2:	e7e7      	b.n	8011f84 <__sflush_r+0xe4>
 8011fb4:	20400001 	.word	0x20400001

08011fb8 <_fflush_r>:
 8011fb8:	690b      	ldr	r3, [r1, #16]
 8011fba:	b570      	push	{r4, r5, r6, lr}
 8011fbc:	0005      	movs	r5, r0
 8011fbe:	000c      	movs	r4, r1
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d102      	bne.n	8011fca <_fflush_r+0x12>
 8011fc4:	2500      	movs	r5, #0
 8011fc6:	0028      	movs	r0, r5
 8011fc8:	bd70      	pop	{r4, r5, r6, pc}
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d004      	beq.n	8011fd8 <_fflush_r+0x20>
 8011fce:	6983      	ldr	r3, [r0, #24]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d101      	bne.n	8011fd8 <_fflush_r+0x20>
 8011fd4:	f000 f892 	bl	80120fc <__sinit>
 8011fd8:	4b14      	ldr	r3, [pc, #80]	; (801202c <_fflush_r+0x74>)
 8011fda:	429c      	cmp	r4, r3
 8011fdc:	d11b      	bne.n	8012016 <_fflush_r+0x5e>
 8011fde:	686c      	ldr	r4, [r5, #4]
 8011fe0:	220c      	movs	r2, #12
 8011fe2:	5ea3      	ldrsh	r3, [r4, r2]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d0ed      	beq.n	8011fc4 <_fflush_r+0xc>
 8011fe8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011fea:	07d2      	lsls	r2, r2, #31
 8011fec:	d404      	bmi.n	8011ff8 <_fflush_r+0x40>
 8011fee:	059b      	lsls	r3, r3, #22
 8011ff0:	d402      	bmi.n	8011ff8 <_fflush_r+0x40>
 8011ff2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ff4:	f000 f923 	bl	801223e <__retarget_lock_acquire_recursive>
 8011ff8:	0028      	movs	r0, r5
 8011ffa:	0021      	movs	r1, r4
 8011ffc:	f7ff ff50 	bl	8011ea0 <__sflush_r>
 8012000:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012002:	0005      	movs	r5, r0
 8012004:	07db      	lsls	r3, r3, #31
 8012006:	d4de      	bmi.n	8011fc6 <_fflush_r+0xe>
 8012008:	89a3      	ldrh	r3, [r4, #12]
 801200a:	059b      	lsls	r3, r3, #22
 801200c:	d4db      	bmi.n	8011fc6 <_fflush_r+0xe>
 801200e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012010:	f000 f916 	bl	8012240 <__retarget_lock_release_recursive>
 8012014:	e7d7      	b.n	8011fc6 <_fflush_r+0xe>
 8012016:	4b06      	ldr	r3, [pc, #24]	; (8012030 <_fflush_r+0x78>)
 8012018:	429c      	cmp	r4, r3
 801201a:	d101      	bne.n	8012020 <_fflush_r+0x68>
 801201c:	68ac      	ldr	r4, [r5, #8]
 801201e:	e7df      	b.n	8011fe0 <_fflush_r+0x28>
 8012020:	4b04      	ldr	r3, [pc, #16]	; (8012034 <_fflush_r+0x7c>)
 8012022:	429c      	cmp	r4, r3
 8012024:	d1dc      	bne.n	8011fe0 <_fflush_r+0x28>
 8012026:	68ec      	ldr	r4, [r5, #12]
 8012028:	e7da      	b.n	8011fe0 <_fflush_r+0x28>
 801202a:	46c0      	nop			; (mov r8, r8)
 801202c:	080137c4 	.word	0x080137c4
 8012030:	080137e4 	.word	0x080137e4
 8012034:	080137a4 	.word	0x080137a4

08012038 <std>:
 8012038:	2300      	movs	r3, #0
 801203a:	b510      	push	{r4, lr}
 801203c:	0004      	movs	r4, r0
 801203e:	6003      	str	r3, [r0, #0]
 8012040:	6043      	str	r3, [r0, #4]
 8012042:	6083      	str	r3, [r0, #8]
 8012044:	8181      	strh	r1, [r0, #12]
 8012046:	6643      	str	r3, [r0, #100]	; 0x64
 8012048:	0019      	movs	r1, r3
 801204a:	81c2      	strh	r2, [r0, #14]
 801204c:	6103      	str	r3, [r0, #16]
 801204e:	6143      	str	r3, [r0, #20]
 8012050:	6183      	str	r3, [r0, #24]
 8012052:	2208      	movs	r2, #8
 8012054:	305c      	adds	r0, #92	; 0x5c
 8012056:	f7fd fb09 	bl	800f66c <memset>
 801205a:	4b05      	ldr	r3, [pc, #20]	; (8012070 <std+0x38>)
 801205c:	6263      	str	r3, [r4, #36]	; 0x24
 801205e:	4b05      	ldr	r3, [pc, #20]	; (8012074 <std+0x3c>)
 8012060:	6224      	str	r4, [r4, #32]
 8012062:	62a3      	str	r3, [r4, #40]	; 0x28
 8012064:	4b04      	ldr	r3, [pc, #16]	; (8012078 <std+0x40>)
 8012066:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012068:	4b04      	ldr	r3, [pc, #16]	; (801207c <std+0x44>)
 801206a:	6323      	str	r3, [r4, #48]	; 0x30
 801206c:	bd10      	pop	{r4, pc}
 801206e:	46c0      	nop			; (mov r8, r8)
 8012070:	080123c1 	.word	0x080123c1
 8012074:	080123e9 	.word	0x080123e9
 8012078:	08012421 	.word	0x08012421
 801207c:	0801244d 	.word	0x0801244d

08012080 <_cleanup_r>:
 8012080:	b510      	push	{r4, lr}
 8012082:	4902      	ldr	r1, [pc, #8]	; (801208c <_cleanup_r+0xc>)
 8012084:	f000 f8ba 	bl	80121fc <_fwalk_reent>
 8012088:	bd10      	pop	{r4, pc}
 801208a:	46c0      	nop			; (mov r8, r8)
 801208c:	08011fb9 	.word	0x08011fb9

08012090 <__sfmoreglue>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	2568      	movs	r5, #104	; 0x68
 8012094:	1e4a      	subs	r2, r1, #1
 8012096:	4355      	muls	r5, r2
 8012098:	000e      	movs	r6, r1
 801209a:	0029      	movs	r1, r5
 801209c:	3174      	adds	r1, #116	; 0x74
 801209e:	f7ff fa5d 	bl	801155c <_malloc_r>
 80120a2:	1e04      	subs	r4, r0, #0
 80120a4:	d008      	beq.n	80120b8 <__sfmoreglue+0x28>
 80120a6:	2100      	movs	r1, #0
 80120a8:	002a      	movs	r2, r5
 80120aa:	6001      	str	r1, [r0, #0]
 80120ac:	6046      	str	r6, [r0, #4]
 80120ae:	300c      	adds	r0, #12
 80120b0:	60a0      	str	r0, [r4, #8]
 80120b2:	3268      	adds	r2, #104	; 0x68
 80120b4:	f7fd fada 	bl	800f66c <memset>
 80120b8:	0020      	movs	r0, r4
 80120ba:	bd70      	pop	{r4, r5, r6, pc}

080120bc <__sfp_lock_acquire>:
 80120bc:	b510      	push	{r4, lr}
 80120be:	4802      	ldr	r0, [pc, #8]	; (80120c8 <__sfp_lock_acquire+0xc>)
 80120c0:	f000 f8bd 	bl	801223e <__retarget_lock_acquire_recursive>
 80120c4:	bd10      	pop	{r4, pc}
 80120c6:	46c0      	nop			; (mov r8, r8)
 80120c8:	200016d0 	.word	0x200016d0

080120cc <__sfp_lock_release>:
 80120cc:	b510      	push	{r4, lr}
 80120ce:	4802      	ldr	r0, [pc, #8]	; (80120d8 <__sfp_lock_release+0xc>)
 80120d0:	f000 f8b6 	bl	8012240 <__retarget_lock_release_recursive>
 80120d4:	bd10      	pop	{r4, pc}
 80120d6:	46c0      	nop			; (mov r8, r8)
 80120d8:	200016d0 	.word	0x200016d0

080120dc <__sinit_lock_acquire>:
 80120dc:	b510      	push	{r4, lr}
 80120de:	4802      	ldr	r0, [pc, #8]	; (80120e8 <__sinit_lock_acquire+0xc>)
 80120e0:	f000 f8ad 	bl	801223e <__retarget_lock_acquire_recursive>
 80120e4:	bd10      	pop	{r4, pc}
 80120e6:	46c0      	nop			; (mov r8, r8)
 80120e8:	200016cb 	.word	0x200016cb

080120ec <__sinit_lock_release>:
 80120ec:	b510      	push	{r4, lr}
 80120ee:	4802      	ldr	r0, [pc, #8]	; (80120f8 <__sinit_lock_release+0xc>)
 80120f0:	f000 f8a6 	bl	8012240 <__retarget_lock_release_recursive>
 80120f4:	bd10      	pop	{r4, pc}
 80120f6:	46c0      	nop			; (mov r8, r8)
 80120f8:	200016cb 	.word	0x200016cb

080120fc <__sinit>:
 80120fc:	b513      	push	{r0, r1, r4, lr}
 80120fe:	0004      	movs	r4, r0
 8012100:	f7ff ffec 	bl	80120dc <__sinit_lock_acquire>
 8012104:	69a3      	ldr	r3, [r4, #24]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d002      	beq.n	8012110 <__sinit+0x14>
 801210a:	f7ff ffef 	bl	80120ec <__sinit_lock_release>
 801210e:	bd13      	pop	{r0, r1, r4, pc}
 8012110:	64a3      	str	r3, [r4, #72]	; 0x48
 8012112:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012114:	6523      	str	r3, [r4, #80]	; 0x50
 8012116:	4b13      	ldr	r3, [pc, #76]	; (8012164 <__sinit+0x68>)
 8012118:	4a13      	ldr	r2, [pc, #76]	; (8012168 <__sinit+0x6c>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	62a2      	str	r2, [r4, #40]	; 0x28
 801211e:	9301      	str	r3, [sp, #4]
 8012120:	42a3      	cmp	r3, r4
 8012122:	d101      	bne.n	8012128 <__sinit+0x2c>
 8012124:	2301      	movs	r3, #1
 8012126:	61a3      	str	r3, [r4, #24]
 8012128:	0020      	movs	r0, r4
 801212a:	f000 f81f 	bl	801216c <__sfp>
 801212e:	6060      	str	r0, [r4, #4]
 8012130:	0020      	movs	r0, r4
 8012132:	f000 f81b 	bl	801216c <__sfp>
 8012136:	60a0      	str	r0, [r4, #8]
 8012138:	0020      	movs	r0, r4
 801213a:	f000 f817 	bl	801216c <__sfp>
 801213e:	2200      	movs	r2, #0
 8012140:	2104      	movs	r1, #4
 8012142:	60e0      	str	r0, [r4, #12]
 8012144:	6860      	ldr	r0, [r4, #4]
 8012146:	f7ff ff77 	bl	8012038 <std>
 801214a:	2201      	movs	r2, #1
 801214c:	2109      	movs	r1, #9
 801214e:	68a0      	ldr	r0, [r4, #8]
 8012150:	f7ff ff72 	bl	8012038 <std>
 8012154:	2202      	movs	r2, #2
 8012156:	2112      	movs	r1, #18
 8012158:	68e0      	ldr	r0, [r4, #12]
 801215a:	f7ff ff6d 	bl	8012038 <std>
 801215e:	2301      	movs	r3, #1
 8012160:	61a3      	str	r3, [r4, #24]
 8012162:	e7d2      	b.n	801210a <__sinit+0xe>
 8012164:	08013420 	.word	0x08013420
 8012168:	08012081 	.word	0x08012081

0801216c <__sfp>:
 801216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801216e:	0007      	movs	r7, r0
 8012170:	f7ff ffa4 	bl	80120bc <__sfp_lock_acquire>
 8012174:	4b1f      	ldr	r3, [pc, #124]	; (80121f4 <__sfp+0x88>)
 8012176:	681e      	ldr	r6, [r3, #0]
 8012178:	69b3      	ldr	r3, [r6, #24]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d102      	bne.n	8012184 <__sfp+0x18>
 801217e:	0030      	movs	r0, r6
 8012180:	f7ff ffbc 	bl	80120fc <__sinit>
 8012184:	3648      	adds	r6, #72	; 0x48
 8012186:	68b4      	ldr	r4, [r6, #8]
 8012188:	6873      	ldr	r3, [r6, #4]
 801218a:	3b01      	subs	r3, #1
 801218c:	d504      	bpl.n	8012198 <__sfp+0x2c>
 801218e:	6833      	ldr	r3, [r6, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d022      	beq.n	80121da <__sfp+0x6e>
 8012194:	6836      	ldr	r6, [r6, #0]
 8012196:	e7f6      	b.n	8012186 <__sfp+0x1a>
 8012198:	220c      	movs	r2, #12
 801219a:	5ea5      	ldrsh	r5, [r4, r2]
 801219c:	2d00      	cmp	r5, #0
 801219e:	d11a      	bne.n	80121d6 <__sfp+0x6a>
 80121a0:	0020      	movs	r0, r4
 80121a2:	4b15      	ldr	r3, [pc, #84]	; (80121f8 <__sfp+0x8c>)
 80121a4:	3058      	adds	r0, #88	; 0x58
 80121a6:	60e3      	str	r3, [r4, #12]
 80121a8:	6665      	str	r5, [r4, #100]	; 0x64
 80121aa:	f000 f847 	bl	801223c <__retarget_lock_init_recursive>
 80121ae:	f7ff ff8d 	bl	80120cc <__sfp_lock_release>
 80121b2:	0020      	movs	r0, r4
 80121b4:	2208      	movs	r2, #8
 80121b6:	0029      	movs	r1, r5
 80121b8:	6025      	str	r5, [r4, #0]
 80121ba:	60a5      	str	r5, [r4, #8]
 80121bc:	6065      	str	r5, [r4, #4]
 80121be:	6125      	str	r5, [r4, #16]
 80121c0:	6165      	str	r5, [r4, #20]
 80121c2:	61a5      	str	r5, [r4, #24]
 80121c4:	305c      	adds	r0, #92	; 0x5c
 80121c6:	f7fd fa51 	bl	800f66c <memset>
 80121ca:	6365      	str	r5, [r4, #52]	; 0x34
 80121cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80121ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80121d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80121d2:	0020      	movs	r0, r4
 80121d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121d6:	3468      	adds	r4, #104	; 0x68
 80121d8:	e7d7      	b.n	801218a <__sfp+0x1e>
 80121da:	2104      	movs	r1, #4
 80121dc:	0038      	movs	r0, r7
 80121de:	f7ff ff57 	bl	8012090 <__sfmoreglue>
 80121e2:	1e04      	subs	r4, r0, #0
 80121e4:	6030      	str	r0, [r6, #0]
 80121e6:	d1d5      	bne.n	8012194 <__sfp+0x28>
 80121e8:	f7ff ff70 	bl	80120cc <__sfp_lock_release>
 80121ec:	230c      	movs	r3, #12
 80121ee:	603b      	str	r3, [r7, #0]
 80121f0:	e7ef      	b.n	80121d2 <__sfp+0x66>
 80121f2:	46c0      	nop			; (mov r8, r8)
 80121f4:	08013420 	.word	0x08013420
 80121f8:	ffff0001 	.word	0xffff0001

080121fc <_fwalk_reent>:
 80121fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121fe:	0004      	movs	r4, r0
 8012200:	0006      	movs	r6, r0
 8012202:	2700      	movs	r7, #0
 8012204:	9101      	str	r1, [sp, #4]
 8012206:	3448      	adds	r4, #72	; 0x48
 8012208:	6863      	ldr	r3, [r4, #4]
 801220a:	68a5      	ldr	r5, [r4, #8]
 801220c:	9300      	str	r3, [sp, #0]
 801220e:	9b00      	ldr	r3, [sp, #0]
 8012210:	3b01      	subs	r3, #1
 8012212:	9300      	str	r3, [sp, #0]
 8012214:	d504      	bpl.n	8012220 <_fwalk_reent+0x24>
 8012216:	6824      	ldr	r4, [r4, #0]
 8012218:	2c00      	cmp	r4, #0
 801221a:	d1f5      	bne.n	8012208 <_fwalk_reent+0xc>
 801221c:	0038      	movs	r0, r7
 801221e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012220:	89ab      	ldrh	r3, [r5, #12]
 8012222:	2b01      	cmp	r3, #1
 8012224:	d908      	bls.n	8012238 <_fwalk_reent+0x3c>
 8012226:	220e      	movs	r2, #14
 8012228:	5eab      	ldrsh	r3, [r5, r2]
 801222a:	3301      	adds	r3, #1
 801222c:	d004      	beq.n	8012238 <_fwalk_reent+0x3c>
 801222e:	0029      	movs	r1, r5
 8012230:	0030      	movs	r0, r6
 8012232:	9b01      	ldr	r3, [sp, #4]
 8012234:	4798      	blx	r3
 8012236:	4307      	orrs	r7, r0
 8012238:	3568      	adds	r5, #104	; 0x68
 801223a:	e7e8      	b.n	801220e <_fwalk_reent+0x12>

0801223c <__retarget_lock_init_recursive>:
 801223c:	4770      	bx	lr

0801223e <__retarget_lock_acquire_recursive>:
 801223e:	4770      	bx	lr

08012240 <__retarget_lock_release_recursive>:
 8012240:	4770      	bx	lr
	...

08012244 <__swhatbuf_r>:
 8012244:	b570      	push	{r4, r5, r6, lr}
 8012246:	000e      	movs	r6, r1
 8012248:	001d      	movs	r5, r3
 801224a:	230e      	movs	r3, #14
 801224c:	5ec9      	ldrsh	r1, [r1, r3]
 801224e:	0014      	movs	r4, r2
 8012250:	b096      	sub	sp, #88	; 0x58
 8012252:	2900      	cmp	r1, #0
 8012254:	da07      	bge.n	8012266 <__swhatbuf_r+0x22>
 8012256:	2300      	movs	r3, #0
 8012258:	602b      	str	r3, [r5, #0]
 801225a:	89b3      	ldrh	r3, [r6, #12]
 801225c:	061b      	lsls	r3, r3, #24
 801225e:	d411      	bmi.n	8012284 <__swhatbuf_r+0x40>
 8012260:	2380      	movs	r3, #128	; 0x80
 8012262:	00db      	lsls	r3, r3, #3
 8012264:	e00f      	b.n	8012286 <__swhatbuf_r+0x42>
 8012266:	466a      	mov	r2, sp
 8012268:	f000 f91c 	bl	80124a4 <_fstat_r>
 801226c:	2800      	cmp	r0, #0
 801226e:	dbf2      	blt.n	8012256 <__swhatbuf_r+0x12>
 8012270:	23f0      	movs	r3, #240	; 0xf0
 8012272:	9901      	ldr	r1, [sp, #4]
 8012274:	021b      	lsls	r3, r3, #8
 8012276:	4019      	ands	r1, r3
 8012278:	4b05      	ldr	r3, [pc, #20]	; (8012290 <__swhatbuf_r+0x4c>)
 801227a:	18c9      	adds	r1, r1, r3
 801227c:	424b      	negs	r3, r1
 801227e:	4159      	adcs	r1, r3
 8012280:	6029      	str	r1, [r5, #0]
 8012282:	e7ed      	b.n	8012260 <__swhatbuf_r+0x1c>
 8012284:	2340      	movs	r3, #64	; 0x40
 8012286:	2000      	movs	r0, #0
 8012288:	6023      	str	r3, [r4, #0]
 801228a:	b016      	add	sp, #88	; 0x58
 801228c:	bd70      	pop	{r4, r5, r6, pc}
 801228e:	46c0      	nop			; (mov r8, r8)
 8012290:	ffffe000 	.word	0xffffe000

08012294 <__smakebuf_r>:
 8012294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012296:	2602      	movs	r6, #2
 8012298:	898b      	ldrh	r3, [r1, #12]
 801229a:	0005      	movs	r5, r0
 801229c:	000c      	movs	r4, r1
 801229e:	4233      	tst	r3, r6
 80122a0:	d006      	beq.n	80122b0 <__smakebuf_r+0x1c>
 80122a2:	0023      	movs	r3, r4
 80122a4:	3347      	adds	r3, #71	; 0x47
 80122a6:	6023      	str	r3, [r4, #0]
 80122a8:	6123      	str	r3, [r4, #16]
 80122aa:	2301      	movs	r3, #1
 80122ac:	6163      	str	r3, [r4, #20]
 80122ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80122b0:	466a      	mov	r2, sp
 80122b2:	ab01      	add	r3, sp, #4
 80122b4:	f7ff ffc6 	bl	8012244 <__swhatbuf_r>
 80122b8:	9900      	ldr	r1, [sp, #0]
 80122ba:	0007      	movs	r7, r0
 80122bc:	0028      	movs	r0, r5
 80122be:	f7ff f94d 	bl	801155c <_malloc_r>
 80122c2:	2800      	cmp	r0, #0
 80122c4:	d108      	bne.n	80122d8 <__smakebuf_r+0x44>
 80122c6:	220c      	movs	r2, #12
 80122c8:	5ea3      	ldrsh	r3, [r4, r2]
 80122ca:	059a      	lsls	r2, r3, #22
 80122cc:	d4ef      	bmi.n	80122ae <__smakebuf_r+0x1a>
 80122ce:	2203      	movs	r2, #3
 80122d0:	4393      	bics	r3, r2
 80122d2:	431e      	orrs	r6, r3
 80122d4:	81a6      	strh	r6, [r4, #12]
 80122d6:	e7e4      	b.n	80122a2 <__smakebuf_r+0xe>
 80122d8:	4b0f      	ldr	r3, [pc, #60]	; (8012318 <__smakebuf_r+0x84>)
 80122da:	62ab      	str	r3, [r5, #40]	; 0x28
 80122dc:	2380      	movs	r3, #128	; 0x80
 80122de:	89a2      	ldrh	r2, [r4, #12]
 80122e0:	6020      	str	r0, [r4, #0]
 80122e2:	4313      	orrs	r3, r2
 80122e4:	81a3      	strh	r3, [r4, #12]
 80122e6:	9b00      	ldr	r3, [sp, #0]
 80122e8:	6120      	str	r0, [r4, #16]
 80122ea:	6163      	str	r3, [r4, #20]
 80122ec:	9b01      	ldr	r3, [sp, #4]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d00d      	beq.n	801230e <__smakebuf_r+0x7a>
 80122f2:	0028      	movs	r0, r5
 80122f4:	230e      	movs	r3, #14
 80122f6:	5ee1      	ldrsh	r1, [r4, r3]
 80122f8:	f000 f8e6 	bl	80124c8 <_isatty_r>
 80122fc:	2800      	cmp	r0, #0
 80122fe:	d006      	beq.n	801230e <__smakebuf_r+0x7a>
 8012300:	2203      	movs	r2, #3
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	4393      	bics	r3, r2
 8012306:	001a      	movs	r2, r3
 8012308:	2301      	movs	r3, #1
 801230a:	4313      	orrs	r3, r2
 801230c:	81a3      	strh	r3, [r4, #12]
 801230e:	89a0      	ldrh	r0, [r4, #12]
 8012310:	4307      	orrs	r7, r0
 8012312:	81a7      	strh	r7, [r4, #12]
 8012314:	e7cb      	b.n	80122ae <__smakebuf_r+0x1a>
 8012316:	46c0      	nop			; (mov r8, r8)
 8012318:	08012081 	.word	0x08012081

0801231c <_malloc_usable_size_r>:
 801231c:	1f0b      	subs	r3, r1, #4
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	1f18      	subs	r0, r3, #4
 8012322:	2b00      	cmp	r3, #0
 8012324:	da01      	bge.n	801232a <_malloc_usable_size_r+0xe>
 8012326:	580b      	ldr	r3, [r1, r0]
 8012328:	18c0      	adds	r0, r0, r3
 801232a:	4770      	bx	lr

0801232c <_raise_r>:
 801232c:	b570      	push	{r4, r5, r6, lr}
 801232e:	0004      	movs	r4, r0
 8012330:	000d      	movs	r5, r1
 8012332:	291f      	cmp	r1, #31
 8012334:	d904      	bls.n	8012340 <_raise_r+0x14>
 8012336:	2316      	movs	r3, #22
 8012338:	6003      	str	r3, [r0, #0]
 801233a:	2001      	movs	r0, #1
 801233c:	4240      	negs	r0, r0
 801233e:	bd70      	pop	{r4, r5, r6, pc}
 8012340:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8012342:	2b00      	cmp	r3, #0
 8012344:	d004      	beq.n	8012350 <_raise_r+0x24>
 8012346:	008a      	lsls	r2, r1, #2
 8012348:	189b      	adds	r3, r3, r2
 801234a:	681a      	ldr	r2, [r3, #0]
 801234c:	2a00      	cmp	r2, #0
 801234e:	d108      	bne.n	8012362 <_raise_r+0x36>
 8012350:	0020      	movs	r0, r4
 8012352:	f000 f831 	bl	80123b8 <_getpid_r>
 8012356:	002a      	movs	r2, r5
 8012358:	0001      	movs	r1, r0
 801235a:	0020      	movs	r0, r4
 801235c:	f000 f81a 	bl	8012394 <_kill_r>
 8012360:	e7ed      	b.n	801233e <_raise_r+0x12>
 8012362:	2000      	movs	r0, #0
 8012364:	2a01      	cmp	r2, #1
 8012366:	d0ea      	beq.n	801233e <_raise_r+0x12>
 8012368:	1c51      	adds	r1, r2, #1
 801236a:	d103      	bne.n	8012374 <_raise_r+0x48>
 801236c:	2316      	movs	r3, #22
 801236e:	3001      	adds	r0, #1
 8012370:	6023      	str	r3, [r4, #0]
 8012372:	e7e4      	b.n	801233e <_raise_r+0x12>
 8012374:	2400      	movs	r4, #0
 8012376:	0028      	movs	r0, r5
 8012378:	601c      	str	r4, [r3, #0]
 801237a:	4790      	blx	r2
 801237c:	0020      	movs	r0, r4
 801237e:	e7de      	b.n	801233e <_raise_r+0x12>

08012380 <raise>:
 8012380:	b510      	push	{r4, lr}
 8012382:	4b03      	ldr	r3, [pc, #12]	; (8012390 <raise+0x10>)
 8012384:	0001      	movs	r1, r0
 8012386:	6818      	ldr	r0, [r3, #0]
 8012388:	f7ff ffd0 	bl	801232c <_raise_r>
 801238c:	bd10      	pop	{r4, pc}
 801238e:	46c0      	nop			; (mov r8, r8)
 8012390:	2000019c 	.word	0x2000019c

08012394 <_kill_r>:
 8012394:	2300      	movs	r3, #0
 8012396:	b570      	push	{r4, r5, r6, lr}
 8012398:	4d06      	ldr	r5, [pc, #24]	; (80123b4 <_kill_r+0x20>)
 801239a:	0004      	movs	r4, r0
 801239c:	0008      	movs	r0, r1
 801239e:	0011      	movs	r1, r2
 80123a0:	602b      	str	r3, [r5, #0]
 80123a2:	f7f1 fd08 	bl	8003db6 <_kill>
 80123a6:	1c43      	adds	r3, r0, #1
 80123a8:	d103      	bne.n	80123b2 <_kill_r+0x1e>
 80123aa:	682b      	ldr	r3, [r5, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d000      	beq.n	80123b2 <_kill_r+0x1e>
 80123b0:	6023      	str	r3, [r4, #0]
 80123b2:	bd70      	pop	{r4, r5, r6, pc}
 80123b4:	200016c4 	.word	0x200016c4

080123b8 <_getpid_r>:
 80123b8:	b510      	push	{r4, lr}
 80123ba:	f7f1 fcfa 	bl	8003db2 <_getpid>
 80123be:	bd10      	pop	{r4, pc}

080123c0 <__sread>:
 80123c0:	b570      	push	{r4, r5, r6, lr}
 80123c2:	000c      	movs	r4, r1
 80123c4:	250e      	movs	r5, #14
 80123c6:	5f49      	ldrsh	r1, [r1, r5]
 80123c8:	f000 f8a4 	bl	8012514 <_read_r>
 80123cc:	2800      	cmp	r0, #0
 80123ce:	db03      	blt.n	80123d8 <__sread+0x18>
 80123d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80123d2:	181b      	adds	r3, r3, r0
 80123d4:	6563      	str	r3, [r4, #84]	; 0x54
 80123d6:	bd70      	pop	{r4, r5, r6, pc}
 80123d8:	89a3      	ldrh	r3, [r4, #12]
 80123da:	4a02      	ldr	r2, [pc, #8]	; (80123e4 <__sread+0x24>)
 80123dc:	4013      	ands	r3, r2
 80123de:	81a3      	strh	r3, [r4, #12]
 80123e0:	e7f9      	b.n	80123d6 <__sread+0x16>
 80123e2:	46c0      	nop			; (mov r8, r8)
 80123e4:	ffffefff 	.word	0xffffefff

080123e8 <__swrite>:
 80123e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ea:	001f      	movs	r7, r3
 80123ec:	898b      	ldrh	r3, [r1, #12]
 80123ee:	0005      	movs	r5, r0
 80123f0:	000c      	movs	r4, r1
 80123f2:	0016      	movs	r6, r2
 80123f4:	05db      	lsls	r3, r3, #23
 80123f6:	d505      	bpl.n	8012404 <__swrite+0x1c>
 80123f8:	230e      	movs	r3, #14
 80123fa:	5ec9      	ldrsh	r1, [r1, r3]
 80123fc:	2200      	movs	r2, #0
 80123fe:	2302      	movs	r3, #2
 8012400:	f000 f874 	bl	80124ec <_lseek_r>
 8012404:	89a3      	ldrh	r3, [r4, #12]
 8012406:	4a05      	ldr	r2, [pc, #20]	; (801241c <__swrite+0x34>)
 8012408:	0028      	movs	r0, r5
 801240a:	4013      	ands	r3, r2
 801240c:	81a3      	strh	r3, [r4, #12]
 801240e:	0032      	movs	r2, r6
 8012410:	230e      	movs	r3, #14
 8012412:	5ee1      	ldrsh	r1, [r4, r3]
 8012414:	003b      	movs	r3, r7
 8012416:	f000 f81f 	bl	8012458 <_write_r>
 801241a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801241c:	ffffefff 	.word	0xffffefff

08012420 <__sseek>:
 8012420:	b570      	push	{r4, r5, r6, lr}
 8012422:	000c      	movs	r4, r1
 8012424:	250e      	movs	r5, #14
 8012426:	5f49      	ldrsh	r1, [r1, r5]
 8012428:	f000 f860 	bl	80124ec <_lseek_r>
 801242c:	89a3      	ldrh	r3, [r4, #12]
 801242e:	1c42      	adds	r2, r0, #1
 8012430:	d103      	bne.n	801243a <__sseek+0x1a>
 8012432:	4a05      	ldr	r2, [pc, #20]	; (8012448 <__sseek+0x28>)
 8012434:	4013      	ands	r3, r2
 8012436:	81a3      	strh	r3, [r4, #12]
 8012438:	bd70      	pop	{r4, r5, r6, pc}
 801243a:	2280      	movs	r2, #128	; 0x80
 801243c:	0152      	lsls	r2, r2, #5
 801243e:	4313      	orrs	r3, r2
 8012440:	81a3      	strh	r3, [r4, #12]
 8012442:	6560      	str	r0, [r4, #84]	; 0x54
 8012444:	e7f8      	b.n	8012438 <__sseek+0x18>
 8012446:	46c0      	nop			; (mov r8, r8)
 8012448:	ffffefff 	.word	0xffffefff

0801244c <__sclose>:
 801244c:	b510      	push	{r4, lr}
 801244e:	230e      	movs	r3, #14
 8012450:	5ec9      	ldrsh	r1, [r1, r3]
 8012452:	f000 f815 	bl	8012480 <_close_r>
 8012456:	bd10      	pop	{r4, pc}

08012458 <_write_r>:
 8012458:	b570      	push	{r4, r5, r6, lr}
 801245a:	0004      	movs	r4, r0
 801245c:	0008      	movs	r0, r1
 801245e:	0011      	movs	r1, r2
 8012460:	001a      	movs	r2, r3
 8012462:	2300      	movs	r3, #0
 8012464:	4d05      	ldr	r5, [pc, #20]	; (801247c <_write_r+0x24>)
 8012466:	602b      	str	r3, [r5, #0]
 8012468:	f7f1 fcc0 	bl	8003dec <_write>
 801246c:	1c43      	adds	r3, r0, #1
 801246e:	d103      	bne.n	8012478 <_write_r+0x20>
 8012470:	682b      	ldr	r3, [r5, #0]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d000      	beq.n	8012478 <_write_r+0x20>
 8012476:	6023      	str	r3, [r4, #0]
 8012478:	bd70      	pop	{r4, r5, r6, pc}
 801247a:	46c0      	nop			; (mov r8, r8)
 801247c:	200016c4 	.word	0x200016c4

08012480 <_close_r>:
 8012480:	2300      	movs	r3, #0
 8012482:	b570      	push	{r4, r5, r6, lr}
 8012484:	4d06      	ldr	r5, [pc, #24]	; (80124a0 <_close_r+0x20>)
 8012486:	0004      	movs	r4, r0
 8012488:	0008      	movs	r0, r1
 801248a:	602b      	str	r3, [r5, #0]
 801248c:	f7f1 fcd6 	bl	8003e3c <_close>
 8012490:	1c43      	adds	r3, r0, #1
 8012492:	d103      	bne.n	801249c <_close_r+0x1c>
 8012494:	682b      	ldr	r3, [r5, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d000      	beq.n	801249c <_close_r+0x1c>
 801249a:	6023      	str	r3, [r4, #0]
 801249c:	bd70      	pop	{r4, r5, r6, pc}
 801249e:	46c0      	nop			; (mov r8, r8)
 80124a0:	200016c4 	.word	0x200016c4

080124a4 <_fstat_r>:
 80124a4:	2300      	movs	r3, #0
 80124a6:	b570      	push	{r4, r5, r6, lr}
 80124a8:	4d06      	ldr	r5, [pc, #24]	; (80124c4 <_fstat_r+0x20>)
 80124aa:	0004      	movs	r4, r0
 80124ac:	0008      	movs	r0, r1
 80124ae:	0011      	movs	r1, r2
 80124b0:	602b      	str	r3, [r5, #0]
 80124b2:	f7f1 fcc6 	bl	8003e42 <_fstat>
 80124b6:	1c43      	adds	r3, r0, #1
 80124b8:	d103      	bne.n	80124c2 <_fstat_r+0x1e>
 80124ba:	682b      	ldr	r3, [r5, #0]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d000      	beq.n	80124c2 <_fstat_r+0x1e>
 80124c0:	6023      	str	r3, [r4, #0]
 80124c2:	bd70      	pop	{r4, r5, r6, pc}
 80124c4:	200016c4 	.word	0x200016c4

080124c8 <_isatty_r>:
 80124c8:	2300      	movs	r3, #0
 80124ca:	b570      	push	{r4, r5, r6, lr}
 80124cc:	4d06      	ldr	r5, [pc, #24]	; (80124e8 <_isatty_r+0x20>)
 80124ce:	0004      	movs	r4, r0
 80124d0:	0008      	movs	r0, r1
 80124d2:	602b      	str	r3, [r5, #0]
 80124d4:	f7f1 fcba 	bl	8003e4c <_isatty>
 80124d8:	1c43      	adds	r3, r0, #1
 80124da:	d103      	bne.n	80124e4 <_isatty_r+0x1c>
 80124dc:	682b      	ldr	r3, [r5, #0]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d000      	beq.n	80124e4 <_isatty_r+0x1c>
 80124e2:	6023      	str	r3, [r4, #0]
 80124e4:	bd70      	pop	{r4, r5, r6, pc}
 80124e6:	46c0      	nop			; (mov r8, r8)
 80124e8:	200016c4 	.word	0x200016c4

080124ec <_lseek_r>:
 80124ec:	b570      	push	{r4, r5, r6, lr}
 80124ee:	0004      	movs	r4, r0
 80124f0:	0008      	movs	r0, r1
 80124f2:	0011      	movs	r1, r2
 80124f4:	001a      	movs	r2, r3
 80124f6:	2300      	movs	r3, #0
 80124f8:	4d05      	ldr	r5, [pc, #20]	; (8012510 <_lseek_r+0x24>)
 80124fa:	602b      	str	r3, [r5, #0]
 80124fc:	f7f1 fca8 	bl	8003e50 <_lseek>
 8012500:	1c43      	adds	r3, r0, #1
 8012502:	d103      	bne.n	801250c <_lseek_r+0x20>
 8012504:	682b      	ldr	r3, [r5, #0]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d000      	beq.n	801250c <_lseek_r+0x20>
 801250a:	6023      	str	r3, [r4, #0]
 801250c:	bd70      	pop	{r4, r5, r6, pc}
 801250e:	46c0      	nop			; (mov r8, r8)
 8012510:	200016c4 	.word	0x200016c4

08012514 <_read_r>:
 8012514:	b570      	push	{r4, r5, r6, lr}
 8012516:	0004      	movs	r4, r0
 8012518:	0008      	movs	r0, r1
 801251a:	0011      	movs	r1, r2
 801251c:	001a      	movs	r2, r3
 801251e:	2300      	movs	r3, #0
 8012520:	4d05      	ldr	r5, [pc, #20]	; (8012538 <_read_r+0x24>)
 8012522:	602b      	str	r3, [r5, #0]
 8012524:	f7f1 fc55 	bl	8003dd2 <_read>
 8012528:	1c43      	adds	r3, r0, #1
 801252a:	d103      	bne.n	8012534 <_read_r+0x20>
 801252c:	682b      	ldr	r3, [r5, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d000      	beq.n	8012534 <_read_r+0x20>
 8012532:	6023      	str	r3, [r4, #0]
 8012534:	bd70      	pop	{r4, r5, r6, pc}
 8012536:	46c0      	nop			; (mov r8, r8)
 8012538:	200016c4 	.word	0x200016c4

0801253c <floor>:
 801253c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801253e:	004b      	lsls	r3, r1, #1
 8012540:	4a3d      	ldr	r2, [pc, #244]	; (8012638 <floor+0xfc>)
 8012542:	0d5b      	lsrs	r3, r3, #21
 8012544:	189f      	adds	r7, r3, r2
 8012546:	4684      	mov	ip, r0
 8012548:	000e      	movs	r6, r1
 801254a:	000d      	movs	r5, r1
 801254c:	0004      	movs	r4, r0
 801254e:	9001      	str	r0, [sp, #4]
 8012550:	2f13      	cmp	r7, #19
 8012552:	dc34      	bgt.n	80125be <floor+0x82>
 8012554:	2f00      	cmp	r7, #0
 8012556:	da16      	bge.n	8012586 <floor+0x4a>
 8012558:	4a38      	ldr	r2, [pc, #224]	; (801263c <floor+0x100>)
 801255a:	4b39      	ldr	r3, [pc, #228]	; (8012640 <floor+0x104>)
 801255c:	4660      	mov	r0, ip
 801255e:	0031      	movs	r1, r6
 8012560:	f7ee faec 	bl	8000b3c <__aeabi_dadd>
 8012564:	2200      	movs	r2, #0
 8012566:	2300      	movs	r3, #0
 8012568:	f7ed ff9e 	bl	80004a8 <__aeabi_dcmpgt>
 801256c:	2800      	cmp	r0, #0
 801256e:	d007      	beq.n	8012580 <floor+0x44>
 8012570:	2e00      	cmp	r6, #0
 8012572:	da5d      	bge.n	8012630 <floor+0xf4>
 8012574:	0073      	lsls	r3, r6, #1
 8012576:	085b      	lsrs	r3, r3, #1
 8012578:	431c      	orrs	r4, r3
 801257a:	d001      	beq.n	8012580 <floor+0x44>
 801257c:	2400      	movs	r4, #0
 801257e:	4d31      	ldr	r5, [pc, #196]	; (8012644 <floor+0x108>)
 8012580:	46a4      	mov	ip, r4
 8012582:	002e      	movs	r6, r5
 8012584:	e029      	b.n	80125da <floor+0x9e>
 8012586:	4b30      	ldr	r3, [pc, #192]	; (8012648 <floor+0x10c>)
 8012588:	413b      	asrs	r3, r7
 801258a:	9300      	str	r3, [sp, #0]
 801258c:	400b      	ands	r3, r1
 801258e:	4303      	orrs	r3, r0
 8012590:	d023      	beq.n	80125da <floor+0x9e>
 8012592:	4a2a      	ldr	r2, [pc, #168]	; (801263c <floor+0x100>)
 8012594:	4b2a      	ldr	r3, [pc, #168]	; (8012640 <floor+0x104>)
 8012596:	4660      	mov	r0, ip
 8012598:	0031      	movs	r1, r6
 801259a:	f7ee facf 	bl	8000b3c <__aeabi_dadd>
 801259e:	2200      	movs	r2, #0
 80125a0:	2300      	movs	r3, #0
 80125a2:	f7ed ff81 	bl	80004a8 <__aeabi_dcmpgt>
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d0ea      	beq.n	8012580 <floor+0x44>
 80125aa:	2e00      	cmp	r6, #0
 80125ac:	da03      	bge.n	80125b6 <floor+0x7a>
 80125ae:	2380      	movs	r3, #128	; 0x80
 80125b0:	035b      	lsls	r3, r3, #13
 80125b2:	413b      	asrs	r3, r7
 80125b4:	18f5      	adds	r5, r6, r3
 80125b6:	9b00      	ldr	r3, [sp, #0]
 80125b8:	2400      	movs	r4, #0
 80125ba:	439d      	bics	r5, r3
 80125bc:	e7e0      	b.n	8012580 <floor+0x44>
 80125be:	2f33      	cmp	r7, #51	; 0x33
 80125c0:	dd0f      	ble.n	80125e2 <floor+0xa6>
 80125c2:	2380      	movs	r3, #128	; 0x80
 80125c4:	00db      	lsls	r3, r3, #3
 80125c6:	429f      	cmp	r7, r3
 80125c8:	d107      	bne.n	80125da <floor+0x9e>
 80125ca:	0002      	movs	r2, r0
 80125cc:	000b      	movs	r3, r1
 80125ce:	4660      	mov	r0, ip
 80125d0:	0031      	movs	r1, r6
 80125d2:	f7ee fab3 	bl	8000b3c <__aeabi_dadd>
 80125d6:	4684      	mov	ip, r0
 80125d8:	000e      	movs	r6, r1
 80125da:	4660      	mov	r0, ip
 80125dc:	0031      	movs	r1, r6
 80125de:	b003      	add	sp, #12
 80125e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125e2:	4a1a      	ldr	r2, [pc, #104]	; (801264c <floor+0x110>)
 80125e4:	189b      	adds	r3, r3, r2
 80125e6:	2201      	movs	r2, #1
 80125e8:	4252      	negs	r2, r2
 80125ea:	40da      	lsrs	r2, r3
 80125ec:	9200      	str	r2, [sp, #0]
 80125ee:	4210      	tst	r0, r2
 80125f0:	d0f3      	beq.n	80125da <floor+0x9e>
 80125f2:	4a12      	ldr	r2, [pc, #72]	; (801263c <floor+0x100>)
 80125f4:	4b12      	ldr	r3, [pc, #72]	; (8012640 <floor+0x104>)
 80125f6:	4660      	mov	r0, ip
 80125f8:	0031      	movs	r1, r6
 80125fa:	f7ee fa9f 	bl	8000b3c <__aeabi_dadd>
 80125fe:	2200      	movs	r2, #0
 8012600:	2300      	movs	r3, #0
 8012602:	f7ed ff51 	bl	80004a8 <__aeabi_dcmpgt>
 8012606:	2800      	cmp	r0, #0
 8012608:	d0ba      	beq.n	8012580 <floor+0x44>
 801260a:	2e00      	cmp	r6, #0
 801260c:	da02      	bge.n	8012614 <floor+0xd8>
 801260e:	2f14      	cmp	r7, #20
 8012610:	d103      	bne.n	801261a <floor+0xde>
 8012612:	3501      	adds	r5, #1
 8012614:	9b00      	ldr	r3, [sp, #0]
 8012616:	439c      	bics	r4, r3
 8012618:	e7b2      	b.n	8012580 <floor+0x44>
 801261a:	2334      	movs	r3, #52	; 0x34
 801261c:	1bdf      	subs	r7, r3, r7
 801261e:	3b33      	subs	r3, #51	; 0x33
 8012620:	40bb      	lsls	r3, r7
 8012622:	18e4      	adds	r4, r4, r3
 8012624:	9b01      	ldr	r3, [sp, #4]
 8012626:	429c      	cmp	r4, r3
 8012628:	419b      	sbcs	r3, r3
 801262a:	425b      	negs	r3, r3
 801262c:	18f5      	adds	r5, r6, r3
 801262e:	e7f1      	b.n	8012614 <floor+0xd8>
 8012630:	2400      	movs	r4, #0
 8012632:	0025      	movs	r5, r4
 8012634:	e7a4      	b.n	8012580 <floor+0x44>
 8012636:	46c0      	nop			; (mov r8, r8)
 8012638:	fffffc01 	.word	0xfffffc01
 801263c:	8800759c 	.word	0x8800759c
 8012640:	7e37e43c 	.word	0x7e37e43c
 8012644:	bff00000 	.word	0xbff00000
 8012648:	000fffff 	.word	0x000fffff
 801264c:	fffffbed 	.word	0xfffffbed

08012650 <_init>:
 8012650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012652:	46c0      	nop			; (mov r8, r8)
 8012654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012656:	bc08      	pop	{r3}
 8012658:	469e      	mov	lr, r3
 801265a:	4770      	bx	lr

0801265c <_fini>:
 801265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801265e:	46c0      	nop			; (mov r8, r8)
 8012660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012662:	bc08      	pop	{r3}
 8012664:	469e      	mov	lr, r3
 8012666:	4770      	bx	lr
